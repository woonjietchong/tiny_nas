
STM32F429ZI_NUCLEO_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003804  0800cce8  0800cce8  0001cce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080104ec  080104ec  000204ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080104f4  080104f4  000204f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080104f8  080104f8  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  080104fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
  8 .bss          0000f808  20000090  20000090  00030090  2**2
                  ALLOC
  9 ._user_heap_stack 00000660  2000f898  2000f898  00030090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 11 .debug_line   00036d01  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000374f6  00000000  00000000  00066dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000088b9  00000000  00000000  0009e2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  000a6b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0010556a  00000000  00000000  000a8678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ac0  00000000  00000000  001adbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032b19  00000000  00000000  001b06a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001e31c1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006078  00000000  00000000  001e3214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0001e095  00000000  00000000  001e928c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00207324  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  002073f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ccd0 	.word	0x0800ccd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800ccd0 	.word	0x0800ccd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005aa:	e003      	b.n	80005b4 <LoopCopyDataInit>

080005ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005b2:	3104      	adds	r1, #4

080005b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005bc:	d3f6      	bcc.n	80005ac <CopyDataInit>
  ldr  r2, =_sbss
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005c0:	e002      	b.n	80005c8 <LoopFillZerobss>

080005c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005c4:	f842 3b04 	str.w	r3, [r2], #4

080005c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005cc:	d3f9      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ce:	f000 fd43 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d2:	f00b f899 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005d6:	f000 fbc1 	bl	8000d5c <main>
  bx  lr    
 80005da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005dc:	2001f800 	.word	0x2001f800
  ldr  r3, =_sidata
 80005e0:	080104fc 	.word	0x080104fc
  ldr  r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005e8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80005ec:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80005f0:	2000f898 	.word	0x2000f898

080005f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC_IRQHandler>

080005f6 <ethernet_link_status_updated>:
#else
    //BSP_LED_Off(LED1);
    //BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  }
}
 80005f6:	4770      	bx	lr

080005f8 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80005f8:	2000      	movs	r0, #0
 80005fa:	4770      	bx	lr

080005fc <low_level_output>:
{
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	b08d      	sub	sp, #52	; 0x34
 8000600:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4668      	mov	r0, sp
 8000608:	f00b f8da 	bl	800b7c0 <memset>
  for(q = p; q != NULL; q = q->next)
 800060c:	466a      	mov	r2, sp
 800060e:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8000610:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8000612:	b9e3      	cbnz	r3, 800064e <low_level_output+0x52>
  TxConfig.Length = p->tot_len;
 8000614:	4d17      	ldr	r5, [pc, #92]	; (8000674 <low_level_output+0x78>)
 8000616:	8923      	ldrh	r3, [r4, #8]
 8000618:	606b      	str	r3, [r5, #4]
  pbuf_ref(p);
 800061a:	4620      	mov	r0, r4
  TxConfig.TxBuffer = Txbuffer;
 800061c:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 8000620:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 8000622:	f007 fb59 	bl	8007cd8 <pbuf_ref>
  HAL_ETH_Transmit_IT(&EthHandle, &TxConfig);
 8000626:	4629      	mov	r1, r5
 8000628:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800062c:	f001 f935 	bl	800189a <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8000630:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000634:	f04f 31ff 	mov.w	r1, #4294967295
 8000638:	f003 fc0f 	bl	8003e5a <osSemaphoreWait>
 800063c:	4604      	mov	r4, r0
 800063e:	2800      	cmp	r0, #0
 8000640:	d1f6      	bne.n	8000630 <low_level_output+0x34>
  HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <low_level_output+0x7c>)
 8000644:	f001 f9d7 	bl	80019f6 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8000648:	4620      	mov	r0, r4
}
 800064a:	b00d      	add	sp, #52	; 0x34
 800064c:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)
 800064e:	2904      	cmp	r1, #4
 8000650:	d00c      	beq.n	800066c <low_level_output+0x70>
    Txbuffer[i].buffer = q->payload;
 8000652:	6858      	ldr	r0, [r3, #4]
 8000654:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 8000656:	8958      	ldrh	r0, [r3, #10]
 8000658:	6050      	str	r0, [r2, #4]
    if(i>0)
 800065a:	b109      	cbz	r1, 8000660 <low_level_output+0x64>
      Txbuffer[i-1].next = &Txbuffer[i];
 800065c:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b903      	cbnz	r3, 8000666 <low_level_output+0x6a>
      Txbuffer[i].next = NULL;
 8000664:	6093      	str	r3, [r2, #8]
    i++;
 8000666:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 8000668:	320c      	adds	r2, #12
 800066a:	e7d2      	b.n	8000612 <low_level_output+0x16>
      return ERR_IF;
 800066c:	f06f 000b 	mvn.w	r0, #11
 8000670:	e7eb      	b.n	800064a <low_level_output+0x4e>
 8000672:	bf00      	nop
 8000674:	200000ac 	.word	0x200000ac
 8000678:	200000e4 	.word	0x200000e4

0800067c <RMII_Thread>:
  * @brief  RMII interface watchdog thread
  * @param  argument
  * @retval None
  */
void RMII_Thread( void const * argument )
{
 800067c:	b508      	push	{r3, lr}
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 800067e:	4d10      	ldr	r5, [pc, #64]	; (80006c0 <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8000680:	4c10      	ldr	r4, [pc, #64]	; (80006c4 <RMII_Thread+0x48>)
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 8000682:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000684:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8000688:	b11a      	cbz	r2, 8000692 <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 800068a:	2000      	movs	r0, #0
 800068c:	f003 fb6e 	bl	8003d6c <osThreadTerminate>
 8000690:	e7f7      	b.n	8000682 <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 8000692:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8000696:	2a0a      	cmp	r2, #10
 8000698:	d90e      	bls.n	80006b8 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800069a:	6862      	ldr	r2, [r4, #4]
 800069c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80006a0:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80006a2:	6862      	ldr	r2, [r4, #4]
 80006a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006a8:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 80006aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80006ae:	f042 0201 	orr.w	r2, r2, #1
 80006b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80006b6:	e7e4      	b.n	8000682 <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80006b8:	20c8      	movs	r0, #200	; 0xc8
 80006ba:	f003 fb5c 	bl	8003d76 <osDelay>
 80006be:	e7e0      	b.n	8000682 <RMII_Thread+0x6>
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	40013800 	.word	0x40013800

080006c8 <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 80006c8:	f000 bd10 	b.w	80010ec <HAL_GetTick>

080006cc <ETH_PHY_IO_Init>:
{
 80006cc:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <ETH_PHY_IO_Init+0xc>)
 80006d0:	f001 fae6 	bl	8001ca0 <HAL_ETH_SetMDIOClockRange>
}
 80006d4:	2000      	movs	r0, #0
 80006d6:	bd08      	pop	{r3, pc}
 80006d8:	200000e4 	.word	0x200000e4

080006dc <ETH_PHY_IO_ReadReg>:
{
 80006dc:	b508      	push	{r3, lr}
 80006de:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80006e0:	460a      	mov	r2, r1
 80006e2:	4601      	mov	r1, r0
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <ETH_PHY_IO_ReadReg+0x18>)
 80006e6:	f001 fa1f 	bl	8001b28 <HAL_ETH_ReadPHYRegister>
 80006ea:	3800      	subs	r0, #0
 80006ec:	bf18      	it	ne
 80006ee:	2001      	movne	r0, #1
}
 80006f0:	4240      	negs	r0, r0
 80006f2:	bd08      	pop	{r3, pc}
 80006f4:	200000e4 	.word	0x200000e4

080006f8 <ETH_PHY_IO_WriteReg>:
{
 80006f8:	b508      	push	{r3, lr}
 80006fa:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80006fc:	460a      	mov	r2, r1
 80006fe:	4601      	mov	r1, r0
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <ETH_PHY_IO_WriteReg+0x18>)
 8000702:	f001 fa39 	bl	8001b78 <HAL_ETH_WritePHYRegister>
 8000706:	3800      	subs	r0, #0
 8000708:	bf18      	it	ne
 800070a:	2001      	movne	r0, #1
}
 800070c:	4240      	negs	r0, r0
 800070e:	bd08      	pop	{r3, pc}
 8000710:	200000e4 	.word	0x200000e4

08000714 <pbuf_free_custom>:
{
 8000714:	b508      	push	{r3, lr}
 8000716:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <pbuf_free_custom+0x28>)
 800071a:	f006 ff2d 	bl	8007578 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <pbuf_free_custom+0x2c>)
 8000720:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8000724:	2a01      	cmp	r2, #1
 8000726:	d108      	bne.n	800073a <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000728:	2200      	movs	r2, #0
 800072a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
    osSemaphoreRelease(RxPktSemaphore);
 800072e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8000736:	f003 bbb5 	b.w	8003ea4 <osSemaphoreRelease>
}
 800073a:	bd08      	pop	{r3, pc}
 800073c:	0800cce8 	.word	0x0800cce8
 8000740:	200000ac 	.word	0x200000ac

08000744 <ethernetif_input>:
{
 8000744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000748:	4e11      	ldr	r6, [pc, #68]	; (8000790 <ethernetif_input+0x4c>)
{
 800074a:	4604      	mov	r4, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800074c:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000750:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	f003 fb7f 	bl	8003e5a <osSemaphoreWait>
 800075c:	2800      	cmp	r0, #0
 800075e:	d1f7      	bne.n	8000750 <ethernetif_input+0xc>
  struct pbuf *p = NULL;
 8000760:	f04f 0800 	mov.w	r8, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000764:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  struct pbuf *p = NULL;
 8000768:	f8cd 8004 	str.w	r8, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800076c:	b91b      	cbnz	r3, 8000776 <ethernetif_input+0x32>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800076e:	a901      	add	r1, sp, #4
 8000770:	4638      	mov	r0, r7
 8000772:	f001 f8c3 	bl	80018fc <HAL_ETH_ReadData>
  return p;
 8000776:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 8000778:	2d00      	cmp	r5, #0
 800077a:	d0e9      	beq.n	8000750 <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	4621      	mov	r1, r4
 8000780:	4628      	mov	r0, r5
 8000782:	4798      	blx	r3
 8000784:	2800      	cmp	r0, #0
 8000786:	d0ed      	beq.n	8000764 <ethernetif_input+0x20>
            pbuf_free(p);
 8000788:	4628      	mov	r0, r5
 800078a:	f007 f961 	bl	8007a50 <pbuf_free>
 800078e:	e7e7      	b.n	8000760 <ethernetif_input+0x1c>
 8000790:	200000ac 	.word	0x200000ac

08000794 <ethernetif_init>:
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000796:	4605      	mov	r5, r0
{
 8000798:	b0a7      	sub	sp, #156	; 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800079a:	b930      	cbnz	r0, 80007aa <ethernetif_init+0x16>
 800079c:	4b55      	ldr	r3, [pc, #340]	; (80008f4 <ethernetif_init+0x160>)
 800079e:	4956      	ldr	r1, [pc, #344]	; (80008f8 <ethernetif_init+0x164>)
 80007a0:	4856      	ldr	r0, [pc, #344]	; (80008fc <ethernetif_init+0x168>)
 80007a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80007a6:	f00b f813 	bl	800b7d0 <iprintf>
  netif->name[0] = IFNAME0;
 80007aa:	f247 4373 	movw	r3, #29811	; 0x7473
 80007ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
  netif->output = etharp_output;
 80007b0:	4b53      	ldr	r3, [pc, #332]	; (8000900 <ethernetif_init+0x16c>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80007b2:	4e54      	ldr	r6, [pc, #336]	; (8000904 <ethernetif_init+0x170>)
  netif->output = etharp_output;
 80007b4:	616b      	str	r3, [r5, #20]
  netif->linkoutput = low_level_output;
 80007b6:	4b54      	ldr	r3, [pc, #336]	; (8000908 <ethernetif_init+0x174>)
 80007b8:	61ab      	str	r3, [r5, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 80007ba:	2264      	movs	r2, #100	; 0x64
 80007bc:	2100      	movs	r1, #0
 80007be:	a80d      	add	r0, sp, #52	; 0x34
  EthHandle.Instance = ETH;
 80007c0:	4c52      	ldr	r4, [pc, #328]	; (800090c <ethernetif_init+0x178>)
  ETH_MACConfigTypeDef MACConf = {0};
 80007c2:	f00a fffd 	bl	800b7c0 <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80007c6:	8a33      	ldrh	r3, [r6, #16]
 80007c8:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;
 80007cc:	4b50      	ldr	r3, [pc, #320]	; (8000910 <ethernetif_init+0x17c>)
 80007ce:	63a3      	str	r3, [r4, #56]	; 0x38
  EthHandle.Init.MACAddr = macaddress;
 80007d0:	ab01      	add	r3, sp, #4
 80007d2:	63e3      	str	r3, [r4, #60]	; 0x3c
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007d8:	6423      	str	r3, [r4, #64]	; 0x40
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80007da:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80007de:	68f0      	ldr	r0, [r6, #12]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80007e0:	64a3      	str	r3, [r4, #72]	; 0x48
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80007e2:	f504 73ca 	add.w	r3, r4, #404	; 0x194
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80007e6:	9001      	str	r0, [sp, #4]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80007e8:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_ETH_Init(&EthHandle);
 80007ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_ETH_Init(&EthHandle);
 80007f4:	f000 fed0 	bl	8001598 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <ethernetif_init+0x180>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	e9c5 3109 	strd	r3, r1, [r5, #36]	; 0x24
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000800:	2306      	movs	r3, #6
 8000802:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000806:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800080a:	f043 030a 	orr.w	r3, r3, #10
 800080e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000812:	4630      	mov	r0, r6
 8000814:	f006 fe5c 	bl	80074d0 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000818:	2234      	movs	r2, #52	; 0x34
 800081a:	2100      	movs	r1, #0
 800081c:	1d20      	adds	r0, r4, #4
 800081e:	f00a ffcf 	bl	800b7c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000822:	2321      	movs	r3, #33	; 0x21
 8000824:	6023      	str	r3, [r4, #0]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000826:	2203      	movs	r2, #3
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000828:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  RxPktSemaphore = xSemaphoreCreateBinary();
 800082c:	2100      	movs	r1, #0
 800082e:	2001      	movs	r0, #1
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000830:	6163      	str	r3, [r4, #20]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000832:	f002 f8d7 	bl	80029e4 <xQueueGenericCreate>
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000836:	2203      	movs	r2, #3
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000838:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
  TxPktSemaphore = xSemaphoreCreateBinary();
 800083c:	2100      	movs	r1, #0
 800083e:	2001      	movs	r0, #1
 8000840:	f002 f8d0 	bl	80029e4 <xQueueGenericCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000844:	f106 0c14 	add.w	ip, r6, #20
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000848:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800084c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000850:	af03      	add	r7, sp, #12
 8000852:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000854:	f8dc 3000 	ldr.w	r3, [ip]
 8000858:	603b      	str	r3, [r7, #0]
  osThreadCreate (osThread(EthIf), netif);
 800085a:	4629      	mov	r1, r5
 800085c:	a803      	add	r0, sp, #12
 800085e:	f003 fa6d 	bl	8003d3c <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000862:	492d      	ldr	r1, [pc, #180]	; (8000918 <ethernetif_init+0x184>)
 8000864:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000868:	f000 fb36 	bl	8000ed8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 800086c:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000870:	f000 fb46 	bl	8000f00 <LAN8742_Init>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000874:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8000878:	f000 fba3 	bl	8000fc2 <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800087c:	2801      	cmp	r0, #1
 800087e:	dc17      	bgt.n	80008b0 <ethernetif_init+0x11c>
    netif_set_link_down(netif);
 8000880:	4628      	mov	r0, r5
 8000882:	f007 f80d 	bl	80078a0 <netif_set_link_down>
    netif_set_down(netif);
 8000886:	4628      	mov	r0, r5
 8000888:	f006 ffca 	bl	8007820 <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 800088c:	f000 fc48 	bl	8001120 <HAL_GetREVID>
 8000890:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000894:	d109      	bne.n	80008aa <ethernetif_init+0x116>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000896:	4d21      	ldr	r5, [pc, #132]	; (800091c <ethernetif_init+0x188>)
 8000898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089a:	ac08      	add	r4, sp, #32
 800089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80008a2:	2100      	movs	r1, #0
 80008a4:	a808      	add	r0, sp, #32
 80008a6:	f003 fa49 	bl	8003d3c <osThreadCreate>
}
 80008aa:	2000      	movs	r0, #0
 80008ac:	b027      	add	sp, #156	; 0x9c
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 80008b0:	3803      	subs	r0, #3
 80008b2:	2802      	cmp	r0, #2
 80008b4:	bf98      	it	ls
 80008b6:	eb06 0640 	addls.w	r6, r6, r0, lsl #1
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80008ba:	a90d      	add	r1, sp, #52	; 0x34
 80008bc:	bf9c      	itt	ls
 80008be:	8d37      	ldrhls	r7, [r6, #40]	; 0x28
 80008c0:	8df4      	ldrhls	r4, [r6, #46]	; 0x2e
 80008c2:	4817      	ldr	r0, [pc, #92]	; (8000920 <ethernetif_init+0x18c>)
    switch (PHYLinkState)
 80008c4:	bf84      	itt	hi
 80008c6:	f44f 4480 	movhi.w	r4, #16384	; 0x4000
 80008ca:	f44f 6700 	movhi.w	r7, #2048	; 0x800
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80008ce:	f001 f978 	bl	8001bc2 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80008d2:	a90d      	add	r1, sp, #52	; 0x34
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <ethernetif_init+0x18c>)
    MACConf.Speed = speed;
 80008d6:	e9cd 4712 	strd	r4, r7, [sp, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80008da:	f001 f9d4 	bl	8001c86 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 80008de:	4810      	ldr	r0, [pc, #64]	; (8000920 <ethernetif_init+0x18c>)
 80008e0:	f000 ff44 	bl	800176c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80008e4:	4628      	mov	r0, r5
 80008e6:	f006 ff81 	bl	80077ec <netif_set_up>
    netif_set_link_up(netif);
 80008ea:	4628      	mov	r0, r5
 80008ec:	f006 ffb4 	bl	8007858 <netif_set_link_up>
 80008f0:	e7cc      	b.n	800088c <ethernetif_init+0xf8>
 80008f2:	bf00      	nop
 80008f4:	0800d530 	.word	0x0800d530
 80008f8:	0800d58a 	.word	0x0800d58a
 80008fc:	0800d598 	.word	0x0800d598
 8000900:	080060d9 	.word	0x080060d9
 8000904:	0800cce8 	.word	0x0800cce8
 8000908:	080005fd 	.word	0x080005fd
 800090c:	200000ac 	.word	0x200000ac
 8000910:	40028000 	.word	0x40028000
 8000914:	010205dc 	.word	0x010205dc
 8000918:	20000000 	.word	0x20000000
 800091c:	0800cd1c 	.word	0x0800cd1c
 8000920:	200000e4 	.word	0x200000e4

08000924 <sys_now>:
  return HAL_GetTick();
 8000924:	f000 bbe2 	b.w	80010ec <HAL_GetTick>

08000928 <HAL_ETH_MspInit>:
{
 8000928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800092c:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4c36      	ldr	r4, [pc, #216]	; (8000a08 <HAL_ETH_MspInit+0xe0>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	4836      	ldr	r0, [pc, #216]	; (8000a0c <HAL_ETH_MspInit+0xe4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	9501      	str	r5, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6323      	str	r3, [r4, #48]	; 0x30
 8000940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	9502      	str	r5, [sp, #8]
 800094c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6323      	str	r3, [r4, #48]	; 0x30
 8000954:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	9503      	str	r5, [sp, #12]
 8000960:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000966:	6323      	str	r3, [r4, #48]	; 0x30
 8000968:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000974:	2703      	movs	r7, #3
 8000976:	260b      	movs	r6, #11
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000978:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2332      	movs	r3, #50	; 0x32
 800097e:	e9cd 3807 	strd	r3, r8, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000982:	e9cd 760a 	strd	r7, r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f001 f9c9 	bl	8001d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800098a:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	a907      	add	r1, sp, #28
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <HAL_ETH_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000990:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	e9cd 3807 	strd	r3, r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f001 f9bf 	bl	8001d1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800099e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a2:	a907      	add	r1, sp, #28
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <HAL_ETH_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a6:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	e9cd 3807 	strd	r3, r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b0:	f001 f9b4 	bl	8001d1c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80009b4:	462a      	mov	r2, r5
 80009b6:	2107      	movs	r1, #7
 80009b8:	203d      	movs	r0, #61	; 0x3d
 80009ba:	f000 fbc9 	bl	8001150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80009be:	203d      	movs	r0, #61	; 0x3d
 80009c0:	f000 fbf8 	bl	80011b4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 80009c4:	9504      	str	r5, [sp, #16]
 80009c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009cc:	6323      	str	r3, [r4, #48]	; 0x30
 80009ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d4:	9304      	str	r3, [sp, #16]
 80009d6:	9b04      	ldr	r3, [sp, #16]
 80009d8:	9505      	str	r5, [sp, #20]
 80009da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009e0:	6323      	str	r3, [r4, #48]	; 0x30
 80009e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009e8:	9305      	str	r3, [sp, #20]
 80009ea:	9b05      	ldr	r3, [sp, #20]
 80009ec:	9506      	str	r5, [sp, #24]
 80009ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009f4:	6323      	str	r3, [r4, #48]	; 0x30
 80009f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009fc:	9306      	str	r3, [sp, #24]
 80009fe:	9b06      	ldr	r3, [sp, #24]
}
 8000a00:	b00c      	add	sp, #48	; 0x30
 8000a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40021800 	.word	0x40021800

08000a18 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_ETH_RxCpltCallback+0xc>)
 8000a1a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8000a1e:	f003 ba41 	b.w	8003ea4 <osSemaphoreRelease>
 8000a22:	bf00      	nop
 8000a24:	200000ac 	.word	0x200000ac

08000a28 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_ETH_TxCpltCallback+0xc>)
 8000a2a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8000a2e:	f003 ba39 	b.w	8003ea4 <osSemaphoreRelease>
 8000a32:	bf00      	nop
 8000a34:	200000ac 	.word	0x200000ac

08000a38 <HAL_ETH_ErrorCallback>:
{
 8000a38:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000a3a:	f001 f96b 	bl	8001d14 <HAL_ETH_GetDMAError>
 8000a3e:	0603      	lsls	r3, r0, #24
 8000a40:	d506      	bpl.n	8000a50 <HAL_ETH_ErrorCallback+0x18>
     osSemaphoreRelease(RxPktSemaphore);
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_ETH_ErrorCallback+0x1c>)
 8000a44:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8000a4c:	f003 ba2a 	b.w	8003ea4 <osSemaphoreRelease>
}
 8000a50:	bd08      	pop	{r3, pc}
 8000a52:	bf00      	nop
 8000a54:	200000ac 	.word	0x200000ac

08000a58 <ethernet_link_thread>:
{
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	b09a      	sub	sp, #104	; 0x68
 8000a5e:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	2100      	movs	r1, #0
 8000a64:	a801      	add	r0, sp, #4
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000a66:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000af8 <ethernet_link_thread+0xa0>
 8000a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000afc <ethernet_link_thread+0xa4>
  ETH_MACConfigTypeDef MACConf = {0};
 8000a6e:	f00a fea7 	bl	800b7c0 <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8000a72:	2500      	movs	r5, #0
 8000a74:	462f      	mov	r7, r5
 8000a76:	46aa      	mov	sl, r5
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000a78:	f5a8 76fe 	sub.w	r6, r8, #508	; 0x1fc
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f000 faa0 	bl	8000fc2 <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000a82:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8000a86:	0751      	lsls	r1, r2, #29
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000a88:	4603      	mov	r3, r0
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000a8a:	d510      	bpl.n	8000aae <ethernet_link_thread+0x56>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	dc0c      	bgt.n	8000aaa <ethernet_link_thread+0x52>
      HAL_ETH_Stop_IT(&EthHandle);
 8000a90:	4630      	mov	r0, r6
 8000a92:	f000 febd 	bl	8001810 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000a96:	4620      	mov	r0, r4
 8000a98:	f006 fec2 	bl	8007820 <netif_set_down>
      netif_set_link_down(netif);
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f006 feff 	bl	80078a0 <netif_set_link_down>
    osDelay(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f003 f967 	bl	8003d76 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000aa8:	e7e8      	b.n	8000a7c <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000aaa:	0752      	lsls	r2, r2, #29
 8000aac:	d4f9      	bmi.n	8000aa2 <ethernet_link_thread+0x4a>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	ddf7      	ble.n	8000aa2 <ethernet_link_thread+0x4a>
      switch (PHYLinkState)
 8000ab2:	3b02      	subs	r3, #2
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d81b      	bhi.n	8000af0 <ethernet_link_thread+0x98>
 8000ab8:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8000abc:	f8b3 7048 	ldrh.w	r7, [r3, #72]	; 0x48
 8000ac0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000ac4:	a901      	add	r1, sp, #4
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f001 f87b 	bl	8001bc2 <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000acc:	a901      	add	r1, sp, #4
 8000ace:	4630      	mov	r0, r6
        MACConf.Speed = speed;
 8000ad0:	e9cd 7506 	strd	r7, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000ad4:	f001 f8d7 	bl	8001c86 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000ad8:	4630      	mov	r0, r6
 8000ada:	f000 fe47 	bl	800176c <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f006 fe84 	bl	80077ec <netif_set_up>
        netif_set_link_up(netif);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f006 feb7 	bl	8007858 <netif_set_link_up>
 8000aea:	f04f 0a01 	mov.w	sl, #1
 8000aee:	e7d8      	b.n	8000aa2 <ethernet_link_thread+0x4a>
      if(linkchanged)
 8000af0:	f1ba 0f00 	cmp.w	sl, #0
 8000af4:	d0d5      	beq.n	8000aa2 <ethernet_link_thread+0x4a>
 8000af6:	e7e5      	b.n	8000ac4 <ethernet_link_thread+0x6c>
 8000af8:	200002e0 	.word	0x200002e0
 8000afc:	0800cce8 	.word	0x0800cce8

08000b00 <HAL_ETH_RxAllocateCallback>:
{
 8000b00:	b513      	push	{r0, r1, r4, lr}
 8000b02:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <HAL_ETH_RxAllocateCallback+0x3c>)
 8000b06:	f006 fd05 	bl	8007514 <memp_malloc_pool>
  if (p)
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b178      	cbz	r0, 8000b2e <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000b0e:	f100 0220 	add.w	r2, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8000b12:	490b      	ldr	r1, [pc, #44]	; (8000b40 <HAL_ETH_RxAllocateCallback+0x40>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000b14:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8000b16:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8000b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b1c:	e9cd 2100 	strd	r2, r1, [sp]
 8000b20:	2100      	movs	r1, #0
 8000b22:	2241      	movs	r2, #65	; 0x41
 8000b24:	4608      	mov	r0, r1
 8000b26:	f006 ff41 	bl	80079ac <pbuf_alloced_custom>
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_ETH_RxAllocateCallback+0x44>)
    *buff = NULL;
 8000b30:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8000b32:	2101      	movs	r1, #1
 8000b34:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
}
 8000b38:	e7f7      	b.n	8000b2a <HAL_ETH_RxAllocateCallback+0x2a>
 8000b3a:	bf00      	nop
 8000b3c:	0800cce8 	.word	0x0800cce8
 8000b40:	08000715 	.word	0x08000715
 8000b44:	200000ac 	.word	0x200000ac

08000b48 <HAL_ETH_RxLinkCallback>:
{
 8000b48:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	f842 5c20 	str.w	r5, [r2, #-32]
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000b50:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
 8000b54:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8000b58:	f822 3c16 	strh.w	r3, [r2, #-22]
  if (!*ppStart)
 8000b5c:	6802      	ldr	r2, [r0, #0]
 8000b5e:	b922      	cbnz	r2, 8000b6a <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8000b60:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8000b62:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8000b64:	6802      	ldr	r2, [r0, #0]
 8000b66:	b91a      	cbnz	r2, 8000b70 <HAL_ETH_RxLinkCallback+0x28>
}
 8000b68:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8000b6a:	680a      	ldr	r2, [r1, #0]
 8000b6c:	6014      	str	r4, [r2, #0]
 8000b6e:	e7f8      	b.n	8000b62 <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8000b70:	8911      	ldrh	r1, [r2, #8]
 8000b72:	4419      	add	r1, r3
 8000b74:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	e7f5      	b.n	8000b66 <HAL_ETH_RxLinkCallback+0x1e>

08000b7a <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 8000b7a:	f006 bf69 	b.w	8007a50 <pbuf_free>
	...

08000b80 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8000b80:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000b82:	2301      	movs	r3, #1
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	4905      	ldr	r1, [pc, #20]	; (8000b9c <http_server_netconn_init+0x1c>)
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <http_server_netconn_init+0x20>)
 8000b8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f00a fd98 	bl	800b6c4 <sys_thread_new>
}
 8000b94:	b003      	add	sp, #12
 8000b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b9a:	bf00      	nop
 8000b9c:	08000c51 	.word	0x08000c51
 8000ba0:	0800d5c0 	.word	0x0800d5c0

08000ba4 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8000ba4:	b530      	push	{r4, r5, lr}
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8000ba6:	2400      	movs	r4, #0
{
 8000ba8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000bac:	4605      	mov	r5, r0

  memset(PAGE_BODY, 0,512);
 8000bae:	4621      	mov	r1, r4
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	a806      	add	r0, sp, #24
  portCHAR pagehits[10] = {0};
 8000bb6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000bba:	f8ad 4014 	strh.w	r4, [sp, #20]
  memset(PAGE_BODY, 0,512);
 8000bbe:	f00a fdff 	bl	800b7c0 <memset>

  /* Update the hit count */
  nPageHits++;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <DynWebPage+0x90>)
  sprintf(pagehits, "%d", (int)nPageHits);
 8000bc4:	491c      	ldr	r1, [pc, #112]	; (8000c38 <DynWebPage+0x94>)
  nPageHits++;
 8000bc6:	681a      	ldr	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8000bc8:	a803      	add	r0, sp, #12
  nPageHits++;
 8000bca:	3201      	adds	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8000bce:	f00a fe55 	bl	800b87c <siprintf>
  strcat(PAGE_BODY, pagehits);
 8000bd2:	a903      	add	r1, sp, #12
 8000bd4:	a806      	add	r0, sp, #24
 8000bd6:	f00a fe71 	bl	800b8bc <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8000bda:	4918      	ldr	r1, [pc, #96]	; (8000c3c <DynWebPage+0x98>)
 8000bdc:	a806      	add	r0, sp, #24
 8000bde:	f00a fe6d 	bl	800b8bc <strcat>
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 8000be2:	4917      	ldr	r1, [pc, #92]	; (8000c40 <DynWebPage+0x9c>)
 8000be4:	a806      	add	r0, sp, #24
 8000be6:	f00a fe69 	bl	800b8bc <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8000bea:	a806      	add	r0, sp, #24
 8000bec:	f7ff fb00 	bl	80001f0 <strlen>
 8000bf0:	ab06      	add	r3, sp, #24
 8000bf2:	4418      	add	r0, r3
 8000bf4:	f003 f9c9 	bl	8003f8a <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8000bf8:	4912      	ldr	r1, [pc, #72]	; (8000c44 <DynWebPage+0xa0>)
 8000bfa:	a806      	add	r0, sp, #24
 8000bfc:	f00a fe5e 	bl	800b8bc <strcat>
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000c00:	4911      	ldr	r1, [pc, #68]	; (8000c48 <DynWebPage+0xa4>)
 8000c02:	a806      	add	r0, sp, #24
 8000c04:	f00a fe5a 	bl	800b8bc <strcat>

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000c08:	4910      	ldr	r1, [pc, #64]	; (8000c4c <DynWebPage+0xa8>)
 8000c0a:	9400      	str	r4, [sp, #0]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f240 623b 	movw	r2, #1595	; 0x63b
 8000c12:	4628      	mov	r0, r5
 8000c14:	f003 fdc2 	bl	800479c <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8000c18:	a806      	add	r0, sp, #24
 8000c1a:	f7ff fae9 	bl	80001f0 <strlen>
 8000c1e:	9400      	str	r4, [sp, #0]
 8000c20:	4602      	mov	r2, r0
 8000c22:	2301      	movs	r3, #1
 8000c24:	a906      	add	r1, sp, #24
 8000c26:	4628      	mov	r0, r5
 8000c28:	f003 fdb8 	bl	800479c <netconn_write_partly>
}
 8000c2c:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8000c30:	bd30      	pop	{r4, r5, pc}
 8000c32:	bf00      	nop
 8000c34:	20002c4c 	.word	0x20002c4c
 8000c38:	0800d5c5 	.word	0x0800d5c5
 8000c3c:	0800d5c8 	.word	0x0800d5c8
 8000c40:	0800d5fc 	.word	0x0800d5fc
 8000c44:	0800d632 	.word	0x0800d632
 8000c48:	0800d668 	.word	0x0800d668
 8000c4c:	0800cd40 	.word	0x0800cd40

08000c50 <http_server_netconn_thread>:
{ 
 8000c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  conn = netconn_new(NETCONN_TCP);
 8000c52:	2200      	movs	r2, #0
 8000c54:	4611      	mov	r1, r2
 8000c56:	2010      	movs	r0, #16
 8000c58:	f003 fc78 	bl	800454c <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d036      	beq.n	8000cd0 <http_server_netconn_thread+0x80>
    err = netconn_bind(conn, NULL, 80);
 8000c62:	2250      	movs	r2, #80	; 0x50
 8000c64:	2100      	movs	r1, #0
 8000c66:	f003 fce9 	bl	800463c <netconn_bind>
    if (err == ERR_OK)
 8000c6a:	bb88      	cbnz	r0, 8000cd0 <http_server_netconn_thread+0x80>
      netconn_listen(conn);
 8000c6c:	21ff      	movs	r1, #255	; 0xff
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f003 fd0a 	bl	8004688 <netconn_listen_with_backlog>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000c74:	4e17      	ldr	r6, [pc, #92]	; (8000cd4 <http_server_netconn_thread+0x84>)
        accept_err = netconn_accept(conn, &newconn);
 8000c76:	a901      	add	r1, sp, #4
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f003 fdad 	bl	80047d8 <netconn_accept>
        if(accept_err == ERR_OK)
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1f9      	bne.n	8000c76 <http_server_netconn_thread+0x26>
          http_server_serve(newconn);
 8000c82:	9d01      	ldr	r5, [sp, #4]
  recv_err = netconn_recv(conn, &inbuf);
 8000c84:	a902      	add	r1, sp, #8
 8000c86:	4628      	mov	r0, r5
 8000c88:	f003 feac 	bl	80049e4 <netconn_recv>
  if (recv_err == ERR_OK)
 8000c8c:	b9b0      	cbnz	r0, 8000cbc <http_server_netconn_thread+0x6c>
    if (netconn_err(conn) == ERR_OK) 
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f003 fd93 	bl	80047ba <netconn_err>
 8000c94:	b990      	cbnz	r0, 8000cbc <http_server_netconn_thread+0x6c>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000c96:	9802      	ldr	r0, [sp, #8]
 8000c98:	f10d 0202 	add.w	r2, sp, #2
 8000c9c:	a903      	add	r1, sp, #12
 8000c9e:	f004 fe13 	bl	80058c8 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000ca2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d908      	bls.n	8000cbc <http_server_netconn_thread+0x6c>
 8000caa:	9803      	ldr	r0, [sp, #12]
 8000cac:	2205      	movs	r2, #5
 8000cae:	4631      	mov	r1, r6
 8000cb0:	f00a fe1b 	bl	800b8ea <strncmp>
 8000cb4:	b910      	cbnz	r0, 8000cbc <http_server_netconn_thread+0x6c>
           DynWebPage(conn);
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f7ff ff74 	bl	8000ba4 <DynWebPage>
  netconn_close(conn);
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f003 fd79 	bl	80047b4 <netconn_close>
  netbuf_delete(inbuf);
 8000cc2:	9802      	ldr	r0, [sp, #8]
 8000cc4:	f004 fdee 	bl	80058a4 <netbuf_delete>
          netconn_delete(newconn);
 8000cc8:	9801      	ldr	r0, [sp, #4]
 8000cca:	f003 fca9 	bl	8004620 <netconn_delete>
 8000cce:	e7d2      	b.n	8000c76 <http_server_netconn_thread+0x26>
}
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	0800d6a3 	.word	0x0800d6a3

08000cd8 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{
 8000cd8:	b500      	push	{lr}
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000cda:	2100      	movs	r1, #0
{
 8000cdc:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8000cde:	4608      	mov	r0, r1
 8000ce0:	f004 feca 	bl	8005a78 <tcpip_init>
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <StartThread+0x68>)
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000ce6:	4817      	ldr	r0, [pc, #92]	; (8000d44 <StartThread+0x6c>)
  ethernet_link_status_updated(&gnetif);

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000ce8:	4d17      	ldr	r5, [pc, #92]	; (8000d48 <StartThread+0x70>)
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000cea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <StartThread+0x74>)
 8000cf4:	9306      	str	r3, [sp, #24]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <StartThread+0x78>)
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <StartThread+0x7c>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	aa05      	add	r2, sp, #20
 8000d02:	a904      	add	r1, sp, #16
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	ab06      	add	r3, sp, #24
 8000d08:	f006 fcda 	bl	80076c0 <netif_add>
  netif_set_default(&gnetif);
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <StartThread+0x6c>)
 8000d0e:	f006 fd67 	bl	80077e0 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <StartThread+0x6c>)
 8000d14:	f7ff fc6f 	bl	80005f6 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000d18:	490f      	ldr	r1, [pc, #60]	; (8000d58 <StartThread+0x80>)
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <StartThread+0x6c>)
 8000d1c:	f006 fdda 	bl	80078d4 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d22:	ac07      	add	r4, sp, #28
 8000d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d26:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <StartThread+0x6c>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000d2a:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000d2c:	a807      	add	r0, sp, #28
 8000d2e:	f003 f805 	bl	8003d3c <osThreadCreate>
  http_server_netconn_init();
 8000d32:	f7ff ff25 	bl	8000b80 <http_server_netconn_init>
    osThreadTerminate(NULL);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f003 f818 	bl	8003d6c <osThreadTerminate>
  for( ;; )
 8000d3c:	e7fb      	b.n	8000d36 <StartThread+0x5e>
 8000d3e:	bf00      	nop
 8000d40:	0270030a 	.word	0x0270030a
 8000d44:	20002c50 	.word	0x20002c50
 8000d48:	0800d37c 	.word	0x0800d37c
 8000d4c:	0170030a 	.word	0x0170030a
 8000d50:	08005a3d 	.word	0x08005a3d
 8000d54:	08000795 	.word	0x08000795
 8000d58:	080005f7 	.word	0x080005f7

08000d5c <main>:
{
 8000d5c:	b500      	push	{lr}
 8000d5e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();  
 8000d60:	f000 f9a2 	bl	80010a8 <HAL_Init>
#endif
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d64:	2210      	movs	r2, #16
 8000d66:	2100      	movs	r1, #0
 8000d68:	a80a      	add	r0, sp, #40	; 0x28
 8000d6a:	f00a fd29 	bl	800b7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6e:	2214      	movs	r2, #20
 8000d70:	2100      	movs	r1, #0
 8000d72:	a803      	add	r0, sp, #12
 8000d74:	f00a fd24 	bl	800b7c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <main+0xbc>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	9101      	str	r1, [sp, #4]
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <main+0xc0>)
 8000d92:	9102      	str	r1, [sp, #8]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da6:	2101      	movs	r1, #1
 8000da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dac:	2019      	movs	r0, #25
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000db2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000db6:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dba:	2402      	movs	r4, #2
 8000dbc:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc0:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc4:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f001 f88c 	bl	8001ee8 <HAL_RCC_OscConfig>
 8000dd0:	b100      	cbz	r0, 8000dd4 <main+0x78>
  {
    while(1){
 8000dd2:	e7fe      	b.n	8000dd2 <main+0x76>
    }
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de4:	2105      	movs	r1, #5
 8000de6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dec:	f001 faa6 	bl	800233c <HAL_RCC_ClockConfig>
 8000df0:	4606      	mov	r6, r0
 8000df2:	b100      	cbz	r0, 8000df6 <main+0x9a>
  {
    while(1){
 8000df4:	e7fe      	b.n	8000df4 <main+0x98>

    }
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000df6:	4629      	mov	r1, r5
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000df8:	4d09      	ldr	r5, [pc, #36]	; (8000e20 <main+0xc4>)
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f001 fa24 	bl	8002248 <HAL_RCC_MCOConfig>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e02:	ac08      	add	r4, sp, #32
 8000e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	a808      	add	r0, sp, #32
 8000e0e:	f002 ff95 	bl	8003d3c <osThreadCreate>
  osKernelStart();
 8000e12:	f002 ff87 	bl	8003d24 <osKernelStart>
  for( ;; );
 8000e16:	e7fe      	b.n	8000e16 <main+0xba>
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	0800d390 	.word	0x0800d390

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000e24:	b510      	push	{r4, lr}
 8000e26:	4601      	mov	r1, r0
 8000e28:	b088      	sub	sp, #32
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2036      	movs	r0, #54	; 0x36
 8000e2e:	f000 f98f 	bl	8001150 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e32:	2036      	movs	r0, #54	; 0x36
 8000e34:	f000 f9be 	bl	80011b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9302      	str	r3, [sp, #8]
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_InitTick+0x78>)
 8000e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e40:	f042 0210 	orr.w	r2, r2, #16
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4e:	a901      	add	r1, sp, #4
 8000e50:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e52:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e54:	f001 fb24 	bl	80024a0 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000e58:	9b06      	ldr	r3, [sp, #24]
 8000e5a:	b9cb      	cbnz	r3, 8000e90 <HAL_InitTick+0x6c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 fb10 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000e60:	4c0f      	ldr	r4, [pc, #60]	; (8000ea0 <HAL_InitTick+0x7c>)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_InitTick+0x80>)
 8000e64:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000e66:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e6a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_InitTick+0x84>)
 8000e6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e72:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8000e74:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000e76:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000e78:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000e7a:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000e80:	f001 fc74 	bl	800276c <HAL_TIM_Base_Init>
 8000e84:	b940      	cbnz	r0, 8000e98 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000e86:	4620      	mov	r0, r4
 8000e88:	f001 fb2a 	bl	80024e0 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000e8c:	b008      	add	sp, #32
 8000e8e:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e90:	f001 faf6 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8000e94:	0040      	lsls	r0, r0, #1
 8000e96:	e7e3      	b.n	8000e60 <HAL_InitTick+0x3c>
  return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e7f7      	b.n	8000e8c <HAL_InitTick+0x68>
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	20002c84 	.word	0x20002c84
 8000ea4:	40001000 	.word	0x40001000
 8000ea8:	000f4240 	.word	0x000f4240

08000eac <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000eac:	f000 b912 	b.w	80010d4 <HAL_IncTick>

08000eb0 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <TIM6_DAC_IRQHandler+0x8>)
 8000eb2:	f001 bb53 	b.w	800255c <HAL_TIM_IRQHandler>
 8000eb6:	bf00      	nop
 8000eb8:	20002c84 	.word	0x20002c84

08000ebc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000ebc:	4770      	bx	lr

08000ebe <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler>

08000ec0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler>

08000ec2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler>

08000ec4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler>

08000ec6 <DebugMon_Handler>:
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000ec8:	f003 b855 	b.w	8003f76 <osSystickHandler>

08000ecc <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8000ecc:	4801      	ldr	r0, [pc, #4]	; (8000ed4 <ETH_IRQHandler+0x8>)
 8000ece:	f000 bdbf 	b.w	8001a50 <HAL_ETH_IRQHandler>
 8000ed2:	bf00      	nop
 8000ed4:	200000e4 	.word	0x200000e4

08000ed8 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ed8:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eda:	b170      	cbz	r0, 8000efa <LAN8742_RegisterBusIO+0x22>
 8000edc:	68cc      	ldr	r4, [r1, #12]
 8000ede:	b164      	cbz	r4, 8000efa <LAN8742_RegisterBusIO+0x22>
 8000ee0:	688a      	ldr	r2, [r1, #8]
 8000ee2:	b152      	cbz	r2, 8000efa <LAN8742_RegisterBusIO+0x22>
 8000ee4:	690b      	ldr	r3, [r1, #16]
 8000ee6:	b143      	cbz	r3, 8000efa <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ee8:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8000eea:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8000eec:	6085      	str	r5, [r0, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000eee:	e9c0 2404 	strd	r2, r4, [r0, #16]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ef2:	60c1      	str	r1, [r0, #12]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ef4:	6183      	str	r3, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000ef6:	2000      	movs	r0, #0
}
 8000ef8:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295
 8000efe:	e7fb      	b.n	8000ef8 <LAN8742_RegisterBusIO+0x20>

08000f00 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000f02:	6846      	ldr	r6, [r0, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f04:	2300      	movs	r3, #0
 {
 8000f06:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f08:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8000f0a:	b166      	cbz	r6, 8000f26 <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8000f0c:	69a3      	ldr	r3, [r4, #24]
 8000f0e:	4798      	blx	r3
 8000f10:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f12:	69a3      	ldr	r3, [r4, #24]
 8000f14:	4798      	blx	r3
 8000f16:	1b43      	subs	r3, r0, r5
 8000f18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f1c:	d9f9      	bls.n	8000f12 <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	6063      	str	r3, [r4, #4]
 8000f22:	2500      	movs	r5, #0
 8000f24:	e027      	b.n	8000f76 <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 8000f26:	6883      	ldr	r3, [r0, #8]
 8000f28:	b103      	cbz	r3, 8000f2c <LAN8742_Init+0x2c>
       pObj->IO.Init();
 8000f2a:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	6023      	str	r3, [r4, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000f30:	2500      	movs	r5, #0
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f32:	6963      	ldr	r3, [r4, #20]
 8000f34:	aa01      	add	r2, sp, #4
 8000f36:	2112      	movs	r1, #18
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4798      	blx	r3
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	db1d      	blt.n	8000f7c <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f40:	9b01      	ldr	r3, [sp, #4]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	42b3      	cmp	r3, r6
 8000f48:	d11a      	bne.n	8000f80 <LAN8742_Init+0x80>
         pObj->DevAddr = addr;
 8000f4a:	6026      	str	r6, [r4, #0]
         status = LAN8742_STATUS_OK;
 8000f4c:	2500      	movs	r5, #0
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f4e:	6820      	ldr	r0, [r4, #0]
 8000f50:	281f      	cmp	r0, #31
 8000f52:	d82d      	bhi.n	8000fb0 <LAN8742_Init+0xb0>
     if(status == LAN8742_STATUS_OK)
 8000f54:	b97d      	cbnz	r5, 8000f76 <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f56:	6923      	ldr	r3, [r4, #16]
 8000f58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	4798      	blx	r3
 8000f60:	2800      	cmp	r0, #0
 8000f62:	db28      	blt.n	8000fb6 <LAN8742_Init+0xb6>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f64:	6963      	ldr	r3, [r4, #20]
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	aa01      	add	r2, sp, #4
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	4798      	blx	r3
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	da0a      	bge.n	8000f88 <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 8000f72:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 8000f76:	4628      	mov	r0, r5
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8000f7c:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f80:	3601      	adds	r6, #1
 8000f82:	2e20      	cmp	r6, #32
 8000f84:	d1d5      	bne.n	8000f32 <LAN8742_Init+0x32>
 8000f86:	e7e2      	b.n	8000f4e <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8000f88:	69a3      	ldr	r3, [r4, #24]
 8000f8a:	4798      	blx	r3
 8000f8c:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f8e:	9b01      	ldr	r3, [sp, #4]
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f90:	69a2      	ldr	r2, [r4, #24]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	d5ba      	bpl.n	8000f0c <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f96:	4790      	blx	r2
 8000f98:	1b40      	subs	r0, r0, r5
 8000f9a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000f9e:	d80d      	bhi.n	8000fbc <LAN8742_Init+0xbc>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fa0:	6963      	ldr	r3, [r4, #20]
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	aa01      	add	r2, sp, #4
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4798      	blx	r3
 8000faa:	2800      	cmp	r0, #0
 8000fac:	daef      	bge.n	8000f8e <LAN8742_Init+0x8e>
 8000fae:	e7e0      	b.n	8000f72 <LAN8742_Init+0x72>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fb0:	f06f 0502 	mvn.w	r5, #2
 8000fb4:	e7df      	b.n	8000f76 <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fb6:	f06f 0503 	mvn.w	r5, #3
 8000fba:	e7dc      	b.n	8000f76 <LAN8742_Init+0x76>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000fbc:	f06f 0501 	mvn.w	r5, #1
   return status;
 8000fc0:	e7d9      	b.n	8000f76 <LAN8742_Init+0x76>

08000fc2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8000fc4:	2500      	movs	r5, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fc6:	6943      	ldr	r3, [r0, #20]
  uint32_t readval = 0;
 8000fc8:	9501      	str	r5, [sp, #4]
{
 8000fca:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fcc:	aa01      	add	r2, sp, #4
 8000fce:	6800      	ldr	r0, [r0, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4798      	blx	r3
 8000fd4:	42a8      	cmp	r0, r5
 8000fd6:	da03      	bge.n	8000fe0 <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fd8:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fe0:	6963      	ldr	r3, [r4, #20]
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	aa01      	add	r2, sp, #4
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4798      	blx	r3
 8000fea:	2800      	cmp	r0, #0
 8000fec:	dbf4      	blt.n	8000fd8 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	075b      	lsls	r3, r3, #29
 8000ff2:	d52c      	bpl.n	800104e <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ff4:	6963      	ldr	r3, [r4, #20]
 8000ff6:	6820      	ldr	r0, [r4, #0]
 8000ff8:	aa01      	add	r2, sp, #4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	4798      	blx	r3
 8000ffe:	2800      	cmp	r0, #0
 8001000:	dbea      	blt.n	8000fd8 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	04dd      	lsls	r5, r3, #19
 8001006:	d40e      	bmi.n	8001026 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001008:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 800100c:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001010:	d101      	bne.n	8001016 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001012:	2002      	movs	r0, #2
 8001014:	e7e2      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001016:	0498      	lsls	r0, r3, #18
 8001018:	d501      	bpl.n	800101e <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800101a:	2003      	movs	r0, #3
 800101c:	e7de      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800101e:	05d9      	lsls	r1, r3, #23
 8001020:	d513      	bpl.n	800104a <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001022:	2004      	movs	r0, #4
 8001024:	e7da      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001026:	6963      	ldr	r3, [r4, #20]
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	aa01      	add	r2, sp, #4
 800102c:	211f      	movs	r1, #31
 800102e:	4798      	blx	r3
 8001030:	2800      	cmp	r0, #0
 8001032:	dbd1      	blt.n	8000fd8 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	04da      	lsls	r2, r3, #19
 8001038:	d50b      	bpl.n	8001052 <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800103a:	f003 031c 	and.w	r3, r3, #28
 800103e:	2b18      	cmp	r3, #24
 8001040:	d0e7      	beq.n	8001012 <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001042:	2b08      	cmp	r3, #8
 8001044:	d0e9      	beq.n	800101a <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001046:	2b14      	cmp	r3, #20
 8001048:	d0eb      	beq.n	8001022 <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800104a:	2005      	movs	r0, #5
 800104c:	e7c6      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;    
 800104e:	2001      	movs	r0, #1
 8001050:	e7c4      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001052:	2006      	movs	r0, #6
 8001054:	e7c2      	b.n	8000fdc <LAN8742_GetLinkState+0x1a>
	...

08001058 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	490f      	ldr	r1, [pc, #60]	; (8001098 <SystemInit+0x40>)
 800105a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800105e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SystemInit+0x44>)
 8001068:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800106a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001072:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800107a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800107e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <SystemInit+0x48>)
 8001082:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800108a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800108c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001092:	608b      	str	r3, [r1, #8]
#endif
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	40023800 	.word	0x40023800
 80010a0:	24003010 	.word	0x24003010

080010a4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_Init>:
{
 80010a8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_Init+0x28>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f835 	bl	800112c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f7ff feae 	bl	8000e24 <HAL_InitTick>
  HAL_MspInit();
 80010c8:	f7ff ffec 	bl	80010a4 <HAL_MspInit>
}
 80010cc:	2000      	movs	r0, #0
 80010ce:	bd08      	pop	{r3, pc}
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x10>)
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_IncTick+0x14>)
 80010d8:	6811      	ldr	r1, [r2, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	440b      	add	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20002ccc 	.word	0x20002ccc
 80010e8:	20000018 	.word	0x20000018

080010ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010ec:	4b01      	ldr	r3, [pc, #4]	; (80010f4 <HAL_GetTick+0x8>)
 80010ee:	6818      	ldr	r0, [r3, #0]
}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20002ccc 	.word	0x20002ccc

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fff6 	bl	80010ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001100:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	bf1c      	itt	ne
 8001104:	4b05      	ldrne	r3, [pc, #20]	; (800111c <HAL_Delay+0x24>)
 8001106:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001108:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800110a:	bf18      	it	ne
 800110c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	f7ff ffed 	bl	80010ec <HAL_GetTick>
 8001112:	1b43      	subs	r3, r0, r5
 8001114:	42a3      	cmp	r3, r4
 8001116:	d3fa      	bcc.n	800110e <HAL_Delay+0x16>
  {
  }
}
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	bf00      	nop
 800111c:	20000018 	.word	0x20000018

08001120 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001120:	4b01      	ldr	r3, [pc, #4]	; (8001128 <HAL_GetREVID+0x8>)
 8001122:	6818      	ldr	r0, [r3, #0]
}
 8001124:	0c00      	lsrs	r0, r0, #16
 8001126:	4770      	bx	lr
 8001128:	e0042000 	.word	0xe0042000

0800112c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800112e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001130:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001148:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b530      	push	{r4, r5, lr}
 8001154:	68dc      	ldr	r4, [r3, #12]
 8001156:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	2d04      	cmp	r5, #4
 8001162:	bf28      	it	cs
 8001164:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116c:	bf8c      	ite	hi
 800116e:	3c03      	subhi	r4, #3
 8001170:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001172:	fa03 f505 	lsl.w	r5, r3, r5
 8001176:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117a:	40a3      	lsls	r3, r4
 800117c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001182:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	bfac      	ite	ge
 800118a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	4a08      	ldrlt	r2, [pc, #32]	; (80011b0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	bfb8      	it	lt
 8001196:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	b2db      	uxtb	r3, r3
 800119c:	bfaa      	itet	ge
 800119e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011a8:	bd30      	pop	{r4, r5, pc}
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	e000ed14 	.word	0xe000ed14

080011b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	db08      	blt.n	80011ca <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b8:	0942      	lsrs	r2, r0, #5
 80011ba:	2301      	movs	r3, #1
 80011bc:	f000 001f 	and.w	r0, r0, #31
 80011c0:	fa03 f000 	lsl.w	r0, r3, r0
 80011c4:	4b01      	ldr	r3, [pc, #4]	; (80011cc <HAL_NVIC_EnableIRQ+0x18>)
 80011c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80011d4:	6a86      	ldr	r6, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80011d6:	eb00 0c86 	add.w	ip, r0, r6, lsl #2
 80011da:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	2c00      	cmp	r4, #0
 80011e2:	da02      	bge.n	80011ea <ETH_Prepare_Tx_Descriptors+0x1a>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 80011e4:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80011e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80011ea:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d1f8      	bne.n	80011e4 <ETH_Prepare_Tx_Descriptors+0x14>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80011f2:	688c      	ldr	r4, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80011f4:	f8d1 e000 	ldr.w	lr, [r1]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80011f8:	6825      	ldr	r5, [r4, #0]
 80011fa:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80011fc:	685d      	ldr	r5, [r3, #4]
 80011fe:	6867      	ldr	r7, [r4, #4]
 8001200:	f425 55ff 	bic.w	r5, r5, #8160	; 0x1fe0
 8001204:	f025 051f 	bic.w	r5, r5, #31
 8001208:	433d      	orrs	r5, r7
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800120a:	f01e 0f01 	tst.w	lr, #1
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800120e:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001210:	d005      	beq.n	800121e <ETH_Prepare_Tx_Descriptors+0x4e>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001212:	681f      	ldr	r7, [r3, #0]
 8001214:	694d      	ldr	r5, [r1, #20]
 8001216:	f427 0740 	bic.w	r7, r7, #12582912	; 0xc00000
 800121a:	433d      	orrs	r5, r7
 800121c:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800121e:	f01e 0f20 	tst.w	lr, #32
 8001222:	d005      	beq.n	8001230 <ETH_Prepare_Tx_Descriptors+0x60>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001224:	681d      	ldr	r5, [r3, #0]
 8001226:	6909      	ldr	r1, [r1, #16]
 8001228:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
 800122c:	4329      	orrs	r1, r5
 800122e:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001230:	f01e 0f04 	tst.w	lr, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001234:	bf1e      	ittt	ne
 8001236:	6819      	ldrne	r1, [r3, #0]
 8001238:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
 800123c:	6019      	strne	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001244:	6019      	str	r1, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001246:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800124a:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800124c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001320 <ETH_Prepare_Tx_Descriptors+0x150>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001250:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001254:	6019      	str	r1, [r3, #0]
  uint32_t           bd_count = 0;
 8001256:	2500      	movs	r5, #0
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001258:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 800125a:	68a4      	ldr	r4, [r4, #8]
 800125c:	f105 0e01 	add.w	lr, r5, #1
 8001260:	b9b4      	cbnz	r4, 8001290 <ETH_Prepare_Tx_Descriptors+0xc0>
  if (ItMode != ((uint32_t)RESET))
 8001262:	2a00      	cmp	r2, #0
 8001264:	d057      	beq.n	8001316 <ETH_Prepare_Tx_Descriptors+0x146>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800126c:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001274:	601a      	str	r2, [r3, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001276:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800127a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800127e:	6281      	str	r1, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001282:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001284:	3301      	adds	r3, #1
 8001286:	442b      	add	r3, r5
 8001288:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800128a:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 800128c:	2000      	movs	r0, #0
 800128e:	e7aa      	b.n	80011e6 <ETH_Prepare_Tx_Descriptors+0x16>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001290:	681d      	ldr	r5, [r3, #0]
 8001292:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8001296:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001298:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800129a:	b32a      	cbz	r2, 80012e8 <ETH_Prepare_Tx_Descriptors+0x118>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800129c:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80012a0:	1c4f      	adds	r7, r1, #1
 80012a2:	2f03      	cmp	r7, #3
 80012a4:	bf88      	it	hi
 80012a6:	1ecf      	subhi	r7, r1, #3
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012a8:	601d      	str	r5, [r3, #0]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012aa:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80012ae:	69ab      	ldr	r3, [r5, #24]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80012b6:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	2900      	cmp	r1, #0
 80012bc:	da17      	bge.n	80012ee <ETH_Prepare_Tx_Descriptors+0x11e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012be:	f8dc 1018 	ldr.w	r1, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80012c2:	2200      	movs	r2, #0
 80012c4:	4572      	cmp	r2, lr
 80012c6:	d08d      	beq.n	80011e4 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 80012c8:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80012cc:	680b      	ldr	r3, [r1, #0]
 80012ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d2:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80012d4:	1c73      	adds	r3, r6, #1
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	bf88      	it	hi
 80012da:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 80012e0:	3201      	adds	r2, #1
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012e2:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80012e4:	461e      	mov	r6, r3
 80012e6:	e7ed      	b.n	80012c4 <ETH_Prepare_Tx_Descriptors+0xf4>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012e8:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 80012ec:	e7d8      	b.n	80012a0 <ETH_Prepare_Tx_Descriptors+0xd0>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80012ee:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d1e4      	bne.n	80012be <ETH_Prepare_Tx_Descriptors+0xee>
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80012f4:	6821      	ldr	r1, [r4, #0]
 80012f6:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	6865      	ldr	r5, [r4, #4]
 80012fc:	ea01 0108 	and.w	r1, r1, r8
 8001300:	4329      	orrs	r1, r5
 8001302:	6059      	str	r1, [r3, #4]
 8001304:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001308:	6819      	ldr	r1, [r3, #0]
 800130a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800130e:	6019      	str	r1, [r3, #0]
 8001310:	4675      	mov	r5, lr
 8001312:	4639      	mov	r1, r7
 8001314:	e7a1      	b.n	800125a <ETH_Prepare_Tx_Descriptors+0x8a>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800131c:	e7a6      	b.n	800126c <ETH_Prepare_Tx_Descriptors+0x9c>
 800131e:	bf00      	nop
 8001320:	ffffe000 	.word	0xffffe000

08001324 <ETH_SetMACConfig>:
{
 8001324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tmpreg1 = (heth->Instance)->MACCR;
 8001328:	6802      	ldr	r2, [r0, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800132a:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8001428 <ETH_SetMACConfig+0x104>
  tmpreg1 = (heth->Instance)->MACCR;
 800132e:	6813      	ldr	r3, [r2, #0]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001330:	f891 801f 	ldrb.w	r8, [r1, #31]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001334:	ea03 0c0c 	and.w	ip, r3, ip
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001338:	7c0b      	ldrb	r3, [r1, #16]
 800133a:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800133c:	7c4b      	ldrb	r3, [r1, #17]
{
 800133e:	460d      	mov	r5, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001340:	bf0c      	ite	eq
 8001342:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 8001346:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001348:	2b00      	cmp	r3, #0
 800134a:	688b      	ldr	r3, [r1, #8]
 800134c:	6949      	ldr	r1, [r1, #20]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800134e:	f895 901c 	ldrb.w	r9, [r5, #28]
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001352:	f895 e004 	ldrb.w	lr, [r5, #4]
 8001356:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800135a:	7fa9      	ldrb	r1, [r5, #30]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800135c:	bf0c      	ite	eq
 800135e:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 8001362:	2600      	movne	r6, #0
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001364:	2900      	cmp	r1, #0
 8001366:	69a9      	ldr	r1, [r5, #24]
 8001368:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800136c:	f895 1020 	ldrb.w	r1, [r5, #32]
{
 8001370:	4604      	mov	r4, r0
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001372:	bf0c      	ite	eq
 8001374:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001378:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800137a:	2900      	cmp	r1, #0
 800137c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800137e:	ea43 0301 	orr.w	r3, r3, r1
 8001382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001386:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 800138a:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800138e:	f895 e00f 	ldrb.w	lr, [r5, #15]
 8001392:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001396:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 800139a:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 800139e:	ea43 030c 	orr.w	r3, r3, ip
 80013a2:	ea43 0307 	orr.w	r3, r3, r7
 80013a6:	ea43 0306 	orr.w	r3, r3, r6
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013aa:	bf0c      	ite	eq
 80013ac:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 80013b0:	f04f 0a00 	movne.w	sl, #0
 80013b4:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b6:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013bc:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80013be:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c0:	f7ff fe9a 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013c4:	6821      	ldr	r1, [r4, #0]
 80013c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80013c8:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80013ca:	6988      	ldr	r0, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013cc:	6cae      	ldr	r6, [r5, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013ce:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013d2:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80013d6:	0400      	lsls	r0, r0, #16
 80013d8:	0c00      	lsrs	r0, r0, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013da:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80013de:	4302      	orrs	r2, r0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013e0:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2380      	moveq	r3, #128	; 0x80
 80013ea:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013ec:	2801      	cmp	r0, #1
 80013ee:	bf0c      	ite	eq
 80013f0:	2008      	moveq	r0, #8
 80013f2:	2000      	movne	r0, #0
 80013f4:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013f6:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
 80013fa:	4302      	orrs	r2, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013fc:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001400:	2b01      	cmp	r3, #1
 8001402:	bf0c      	ite	eq
 8001404:	2304      	moveq	r3, #4
 8001406:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001408:	2801      	cmp	r0, #1
 800140a:	bf0c      	ite	eq
 800140c:	2002      	moveq	r0, #2
 800140e:	2000      	movne	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001410:	4313      	orrs	r3, r2
 8001412:	4303      	orrs	r3, r0
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001414:	618b      	str	r3, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001416:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACFCR;
 8001418:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800141a:	f7ff fe6d 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	619d      	str	r5, [r3, #24]
}
 8001422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001426:	bf00      	nop
 8001428:	ff20810f 	.word	0xff20810f

0800142c <ETH_SetDMAConfig>:
  tmpreg1 = (heth->Instance)->DMAOMR;
 800142c:	6802      	ldr	r2, [r0, #0]
{
 800142e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 8001434:	4605      	mov	r5, r0
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001436:	6993      	ldr	r3, [r2, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001438:	4826      	ldr	r0, [pc, #152]	; (80014d4 <ETH_SetDMAConfig+0xa8>)
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143a:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800143e:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001440:	7b0b      	ldrb	r3, [r1, #12]
{
 8001442:	460c      	mov	r4, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001444:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001446:	7f4b      	ldrb	r3, [r1, #29]
 8001448:	6a27      	ldr	r7, [r4, #32]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800144a:	bf0c      	ite	eq
 800144c:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001450:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001452:	2b00      	cmp	r3, #0
 8001454:	6963      	ldr	r3, [r4, #20]
 8001456:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800145a:	7ba7      	ldrb	r7, [r4, #14]
 800145c:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 8001460:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001464:	7f27      	ldrb	r7, [r4, #28]
 8001466:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800146a:	7fa7      	ldrb	r7, [r4, #30]
 800146c:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001470:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 8001474:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8001478:	ea43 0300 	orr.w	r3, r3, r0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800147c:	bf0c      	ite	eq
 800147e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001482:	2100      	movne	r1, #0
 8001484:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001486:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001488:	6193      	str	r3, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMAOMR;
 800148c:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148e:	f7ff fe33 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001492:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001494:	69a1      	ldr	r1, [r4, #24]
 8001496:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001498:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800149c:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = tmpreg1;
 800149e:	6196      	str	r6, [r2, #24]
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014a0:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014a4:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80014a8:	6921      	ldr	r1, [r4, #16]
 80014aa:	430b      	orrs	r3, r1
 80014ac:	6821      	ldr	r1, [r4, #0]
 80014ae:	430b      	orrs	r3, r1
 80014b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014b2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b6:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014b8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMABMR;
 80014c4:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c6:	f7ff fe17 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014ca:	682b      	ldr	r3, [r5, #0]
 80014cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d0:	601c      	str	r4, [r3, #0]
}
 80014d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014d4:	f8de3f23 	.word	0xf8de3f23

080014d8 <ETH_FlushTransmitFIFO>:
{
 80014d8:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80014de:	6803      	ldr	r3, [r0, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 80014e4:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ec:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fe00 	bl	80010f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	9a01      	ldr	r2, [sp, #4]
 80014fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	b002      	add	sp, #8
 8001504:	bd10      	pop	{r4, pc}
	...

08001508 <ETH_UpdateDescriptor>:
{
 8001508:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  descidx = heth->RxDescList.RxBuildDescIdx;
 800150c:	6e87      	ldr	r7, [r0, #104]	; 0x68
  desccount = heth->RxDescList.RxBuildDescCnt;
 800150e:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001510:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001594 <ETH_UpdateDescriptor+0x8c>
  uint8_t *buff = NULL;
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001518:	f107 0312 	add.w	r3, r7, #18
{
 800151c:	4604      	mov	r4, r0
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800151e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  uint8_t allocStatus = 1U;
 8001522:	f04f 0801 	mov.w	r8, #1
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001526:	f244 59f8 	movw	r9, #17912	; 0x45f8
  while ((desccount > 0U) && (allocStatus != 0U))
 800152a:	b116      	cbz	r6, 8001532 <ETH_UpdateDescriptor+0x2a>
 800152c:	f1b8 0f00 	cmp.w	r8, #0
 8001530:	d10c      	bne.n	800154c <ETH_UpdateDescriptor+0x44>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001532:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001534:	42b3      	cmp	r3, r6
 8001536:	d006      	beq.n	8001546 <ETH_UpdateDescriptor+0x3e>
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001542:	e9c4 761a 	strd	r7, r6, [r4, #104]	; 0x68
}
 8001546:	b002      	add	sp, #8
 8001548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800154c:	6a2b      	ldr	r3, [r5, #32]
 800154e:	b933      	cbnz	r3, 800155e <ETH_UpdateDescriptor+0x56>
      HAL_ETH_RxAllocateCallback(&buff);
 8001550:	a801      	add	r0, sp, #4
 8001552:	f7ff fad5 	bl	8000b00 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	b1cb      	cbz	r3, 800158e <ETH_UpdateDescriptor+0x86>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800155a:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800155c:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 800155e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001560:	b993      	cbnz	r3, 8001588 <ETH_UpdateDescriptor+0x80>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001562:	f8c5 a004 	str.w	sl, [r5, #4]
 8001566:	f3bf 8f5f 	dmb	sy
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001570:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001572:	1c7b      	adds	r3, r7, #1
 8001574:	2b03      	cmp	r3, #3
 8001576:	bf88      	it	hi
 8001578:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800157a:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 800157e:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001580:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 8001584:	461f      	mov	r7, r3
 8001586:	e7d0      	b.n	800152a <ETH_UpdateDescriptor+0x22>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001588:	f8c5 9004 	str.w	r9, [r5, #4]
 800158c:	e7eb      	b.n	8001566 <ETH_UpdateDescriptor+0x5e>
        allocStatus = 0U;
 800158e:	4698      	mov	r8, r3
 8001590:	e7cb      	b.n	800152a <ETH_UpdateDescriptor+0x22>
 8001592:	bf00      	nop
 8001594:	800045f8 	.word	0x800045f8

08001598 <HAL_ETH_Init>:
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 800159a:	4604      	mov	r4, r0
{
 800159c:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 800159e:	2800      	cmp	r0, #0
 80015a0:	f000 80dc 	beq.w	800175c <HAL_ETH_Init+0x1c4>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015a4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80015a8:	b923      	cbnz	r3, 80015b4 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80015aa:	2323      	movs	r3, #35	; 0x23
 80015ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80015b0:	f7ff f9ba 	bl	8000928 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b69      	ldr	r3, [pc, #420]	; (8001760 <HAL_ETH_Init+0x1c8>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015ba:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_ETH_Init+0x1cc>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80015d6:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 80015de:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80015ee:	f7ff fd7d 	bl	80010ec <HAL_GetTick>
 80015f2:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	681d      	ldr	r5, [r3, #0]
 80015fc:	f015 0501 	ands.w	r5, r5, #1
 8001600:	f040 809f 	bne.w	8001742 <HAL_ETH_Init+0x1aa>
  macDefaultConf.ChecksumOffload = ENABLE;
 8001604:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 800160a:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800160e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001612:	a90d      	add	r1, sp, #52	; 0x34
 8001614:	4620      	mov	r0, r4
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001616:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  macDefaultConf.ChecksumOffload = ENABLE;
 800161a:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 800161e:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001622:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001624:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001628:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800162c:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  macDefaultConf.Watchdog = ENABLE;
 8001630:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001634:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001636:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800163a:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800163c:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001640:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001642:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001646:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  ETH_SetMACConfig(heth, &macDefaultConf);
 800164a:	f7ff fe6b 	bl	8001324 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800164e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001652:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001658:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800165c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001660:	9308      	str	r3, [sp, #32]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001662:	4620      	mov	r0, r4
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001668:	a902      	add	r1, sp, #8
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800166a:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800166e:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001672:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001676:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800167a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800167e:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001680:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001684:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001686:	9502      	str	r5, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001688:	f7ff fed0 	bl	800142c <ETH_SetDMAConfig>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800168c:	68e6      	ldr	r6, [r4, #12]
 800168e:	f104 0c18 	add.w	ip, r4, #24
 8001692:	4633      	mov	r3, r6
 8001694:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001696:	4628      	mov	r0, r5
 8001698:	6018      	str	r0, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800169a:	6058      	str	r0, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800169c:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800169e:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016a0:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016a4:	681f      	ldr	r7, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 80016ac:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016b0:	2a03      	cmp	r2, #3
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016b2:	bf14      	ite	ne
 80016b4:	60d9      	strne	r1, [r3, #12]
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016b6:	60de      	streq	r6, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016b8:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016ba:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016bc:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016c0:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016c2:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016c4:	460b      	mov	r3, r1
 80016c6:	d1e7      	bne.n	8001698 <HAL_ETH_Init+0x100>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016c8:	6821      	ldr	r1, [r4, #0]
 80016ca:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 80016ce:	2200      	movs	r2, #0
 80016d0:	62a2      	str	r2, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016d2:	610e      	str	r6, [r1, #16]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016d4:	6926      	ldr	r6, [r4, #16]
 80016d6:	f104 0748 	add.w	r7, r4, #72	; 0x48
 80016da:	4633      	mov	r3, r6
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016dc:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016e0:	f244 5ef8 	movw	lr, #17912	; 0x45f8
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80016e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80016e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80016e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80016ea:	60da      	str	r2, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016ec:	f8c3 c000 	str.w	ip, [r3]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016f0:	f8c3 e004 	str.w	lr, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016f4:	6858      	ldr	r0, [r3, #4]
 80016f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80016fa:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016fc:	2d03      	cmp	r5, #3
 80016fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001702:	f105 0501 	add.w	r5, r5, #1
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001706:	e9c3 2208 	strd	r2, r2, [r3, #32]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800170a:	f847 3b04 	str.w	r3, [r7], #4
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800170e:	bf14      	ite	ne
 8001710:	60d8      	strne	r0, [r3, #12]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001712:	60de      	streq	r6, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001714:	2d04      	cmp	r5, #4
 8001716:	4603      	mov	r3, r0
 8001718:	d1e4      	bne.n	80016e4 <HAL_ETH_Init+0x14c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800171a:	2000      	movs	r0, #0
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800171c:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001720:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001724:	6862      	ldr	r2, [r4, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001726:	65a0      	str	r0, [r4, #88]	; 0x58
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_ETH_Init+0x1d0>)
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800172a:	60ce      	str	r6, [r1, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800172c:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800172e:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001730:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001732:	645a      	str	r2, [r3, #68]	; 0x44
  heth->gState = HAL_ETH_STATE_READY;
 8001734:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001736:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800173a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 800173e:	b027      	add	sp, #156	; 0x9c
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001742:	f7ff fcd3 	bl	80010ec <HAL_GetTick>
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800174c:	f67f af52 	bls.w	80015f4 <HAL_ETH_Init+0x5c>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001750:	2304      	movs	r3, #4
 8001752:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001756:	23e0      	movs	r3, #224	; 0xe0
 8001758:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e7ee      	b.n	800173e <HAL_ETH_Init+0x1a6>
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40028000 	.word	0x40028000

0800176c <HAL_ETH_Start_IT>:
{
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 800176e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001772:	2b10      	cmp	r3, #16
{
 8001774:	4604      	mov	r4, r0
 8001776:	f04f 0501 	mov.w	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 800177a:	d147      	bne.n	800180c <HAL_ETH_Start_IT+0xa0>
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800177c:	6803      	ldr	r3, [r0, #0]
    heth->RxDescList.ItMode = 1U;
 800177e:	6585      	str	r5, [r0, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_BUSY;
 8001780:	2623      	movs	r6, #35	; 0x23
 8001782:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001788:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800178e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001792:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001796:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800179a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800179e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80017a2:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80017a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017aa:	2304      	movs	r3, #4
 80017ac:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 80017ae:	f7ff feab 	bl	8001508 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f042 0208 	orr.w	r2, r2, #8
 80017ba:	601a      	str	r2, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017bc:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 80017be:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c0:	f7ff fc9a 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f042 0204 	orr.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d0:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 80017d2:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d4:	f7ff fc90 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017d8:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 80017da:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 80017dc:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80017de:	f7ff fe7b 	bl	80014d8 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    return HAL_OK;
 80017e8:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017f0:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	f042 0202 	orr.w	r2, r2, #2
 80017f8:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8001800:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8001804:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001806:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 800180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800180c:	4628      	mov	r0, r5
 800180e:	e7fc      	b.n	800180a <HAL_ETH_Start_IT+0x9e>

08001810 <HAL_ETH_Stop_IT>:
{
 8001810:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001812:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001816:	2b23      	cmp	r3, #35	; 0x23
{
 8001818:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800181a:	d13c      	bne.n	8001896 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800181c:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 800181e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001822:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001826:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 800182e:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 8001832:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800183a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	f022 0202 	bic.w	r2, r2, #2
 8001842:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001844:	680b      	ldr	r3, [r1, #0]
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800184c:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800184e:	f7ff fc53 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001852:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8001854:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8001856:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001858:	f7ff fe3e 	bl	80014d8 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	f022 0208 	bic.w	r2, r2, #8
 8001864:	601a      	str	r2, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001866:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->MACCR;
 8001868:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800186a:	f7ff fc45 	bl	80010f8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800186e:	4623      	mov	r3, r4
 8001870:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001874:	f853 2b48 	ldr.w	r2, [r3], #72
 8001878:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800187a:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800187e:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001880:	4298      	cmp	r0, r3
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001882:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001886:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001888:	d1f7      	bne.n	800187a <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 800188a:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 800188c:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 800188e:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001890:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001894:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001896:	2001      	movs	r0, #1
 8001898:	e7fc      	b.n	8001894 <HAL_ETH_Stop_IT+0x84>

0800189a <HAL_ETH_Transmit_IT>:
{
 800189a:	b510      	push	{r4, lr}
 800189c:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 800189e:	b939      	cbnz	r1, 80018b0 <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80018a4:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 80018ac:	2001      	movs	r0, #1
 80018ae:	e024      	b.n	80018fa <HAL_ETH_Transmit_IT+0x60>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018b0:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80018b4:	2a23      	cmp	r2, #35	; 0x23
 80018b6:	d1f9      	bne.n	80018ac <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80018b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80018ba:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80018bc:	2201      	movs	r2, #1
 80018be:	f7ff fc87 	bl	80011d0 <ETH_Prepare_Tx_Descriptors>
 80018c2:	b120      	cbz	r0, 80018ce <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	e7ec      	b.n	80018a8 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 80018ce:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	2a03      	cmp	r2, #3
 80018d8:	bf84      	itt	hi
 80018da:	3b03      	subhi	r3, #3
 80018dc:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018de:	6823      	ldr	r3, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018e0:	bf98      	it	ls
 80018e2:	62a2      	strls	r2, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	2200      	movs	r2, #0
 80018ea:	6958      	ldr	r0, [r3, #20]
 80018ec:	f010 0004 	ands.w	r0, r0, #4
 80018f0:	d003      	beq.n	80018fa <HAL_ETH_Transmit_IT+0x60>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018f2:	2104      	movs	r1, #4
 80018f4:	6159      	str	r1, [r3, #20]
    return HAL_OK;
 80018f6:	4610      	mov	r0, r2
      (heth->Instance)->DMATPDR = 0U;
 80018f8:	605a      	str	r2, [r3, #4]
}
 80018fa:	bd10      	pop	{r4, pc}

080018fc <HAL_ETH_ReadData>:
{
 80018fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001900:	4604      	mov	r4, r0
 8001902:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8001904:	468a      	mov	sl, r1
 8001906:	b949      	cbnz	r1, 800191c <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001908:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001914:	2001      	movs	r0, #1
}
 8001916:	b005      	add	sp, #20
 8001918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 800191c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001920:	2b23      	cmp	r3, #35	; 0x23
 8001922:	d1f7      	bne.n	8001914 <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8001924:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001928:	f109 0312 	add.w	r3, r9, #18
  uint8_t rxdataready = 0U;
 800192c:	f04f 0800 	mov.w	r8, #0
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001930:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001934:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001936:	f1c3 0304 	rsb	r3, r3, #4
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800193a:	f100 0180 	add.w	r1, r0, #128	; 0x80
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800193e:	9301      	str	r3, [sp, #4]
  uint32_t desccnt = 0U;
 8001940:	4646      	mov	r6, r8
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001942:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8001944:	46c3      	mov	fp, r8
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001946:	682b      	ldr	r3, [r5, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db05      	blt.n	8001958 <HAL_ETH_ReadData+0x5c>
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	429e      	cmp	r6, r3
 8001950:	d002      	beq.n	8001958 <HAL_ETH_ReadData+0x5c>
         && (rxdataready == 0U))
 8001952:	f1b8 0f00 	cmp.w	r8, #0
 8001956:	d011      	beq.n	800197c <HAL_ETH_ReadData+0x80>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001958:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800195a:	441e      	add	r6, r3
 800195c:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800195e:	b116      	cbz	r6, 8001966 <HAL_ETH_ReadData+0x6a>
    ETH_UpdateDescriptor(heth);
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff fdd1 	bl	8001508 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001966:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800196a:	f1b8 0f00 	cmp.w	r8, #0
 800196e:	d0d1      	beq.n	8001914 <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8001970:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001972:	f8ca 3000 	str.w	r3, [sl]
    heth->RxDescList.pRxStart = NULL;
 8001976:	2000      	movs	r0, #0
 8001978:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 800197a:	e7cc      	b.n	8001916 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	05db      	lsls	r3, r3, #23
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001980:	bf41      	itttt	mi
 8001982:	69ab      	ldrmi	r3, [r5, #24]
 8001984:	67a3      	strmi	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001986:	69eb      	ldrmi	r3, [r5, #28]
 8001988:	6763      	strmi	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	059f      	lsls	r7, r3, #22
 800198e:	d401      	bmi.n	8001994 <HAL_ETH_ReadData+0x98>
 8001990:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001992:	b31b      	cbz	r3, 80019dc <HAL_ETH_ReadData+0xe0>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	059a      	lsls	r2, r3, #22
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001998:	682b      	ldr	r3, [r5, #0]
        heth->RxDescList.RxDataLength = 0;
 800199a:	bf48      	it	mi
 800199c:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019a0:	05db      	lsls	r3, r3, #23
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019a2:	bf4a      	itet	mi
 80019a4:	682f      	ldrmi	r7, [r5, #0]
      bufflength = heth->Init.RxBuffLen;
 80019a6:	6967      	ldrpl	r7, [r4, #20]
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019a8:	682b      	ldrmi	r3, [r5, #0]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019aa:	68aa      	ldr	r2, [r5, #8]
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019ac:	bf42      	ittt	mi
 80019ae:	6723      	strmi	r3, [r4, #112]	; 0x70
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019b0:	f3c7 470d 	ubfxmi	r7, r7, #16, #14
 80019b4:	3f04      	submi	r7, #4
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019b6:	b2bb      	uxth	r3, r7
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019b8:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
        rxdataready = 1;
 80019be:	bf48      	it	mi
 80019c0:	f04f 0801 	movmi.w	r8, #1
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019c4:	f7ff f8c0 	bl	8000b48 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80019c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019ca:	3301      	adds	r3, #1
 80019cc:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80019d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
      heth->RxDescList.RxDataLength += bufflength;
 80019d4:	443b      	add	r3, r7
 80019d6:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80019d8:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019dc:	f109 0301 	add.w	r3, r9, #1
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	bf88      	it	hi
 80019e4:	f1a9 0303 	subhi.w	r3, r9, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019e8:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 80019ec:	3601      	adds	r6, #1
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ee:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 80019f2:	4699      	mov	r9, r3
 80019f4:	e7a7      	b.n	8001946 <HAL_ETH_ReadData+0x4a>

080019f6 <HAL_ETH_ReleaseTxPacket>:
{
 80019f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019fa:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
{
 80019fe:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8001a00:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a02:	f04f 0928 	mov.w	r9, #40	; 0x28
 8001a06:	f04f 0a00 	mov.w	sl, #0
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a0a:	b106      	cbz	r6, 8001a0e <HAL_ETH_ReleaseTxPacket+0x18>
 8001a0c:	b917      	cbnz	r7, 8001a14 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8001a14:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8001a18:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a1a:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001a1e:	b138      	cbz	r0, 8001a30 <HAL_ETH_ReleaseTxPacket+0x3a>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a20:	68ea      	ldr	r2, [r5, #12]
 8001a22:	fb09 f304 	mul.w	r3, r9, r4
 8001a26:	58d3      	ldr	r3, [r2, r3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da05      	bge.n	8001a38 <HAL_ETH_ReleaseTxPacket+0x42>
        pktTxStatus = 0U;
 8001a2c:	2700      	movs	r7, #0
 8001a2e:	e7ec      	b.n	8001a0a <HAL_ETH_ReleaseTxPacket+0x14>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a30:	3401      	adds	r4, #1
 8001a32:	f004 0403 	and.w	r4, r4, #3
    if (pktInUse != 0U)
 8001a36:	e7e8      	b.n	8001a0a <HAL_ETH_ReleaseTxPacket+0x14>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a38:	3401      	adds	r4, #1
 8001a3a:	f004 0403 	and.w	r4, r4, #3
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a3e:	f7ff f89c 	bl	8000b7a <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a42:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        dmatxdesclist->releaseIndex = idx;
 8001a46:	e9c5 6410 	strd	r6, r4, [r5, #64]	; 0x40
 8001a4a:	e7de      	b.n	8001a0a <HAL_ETH_ReleaseTxPacket+0x14>

08001a4c <HAL_ETH_PMTCallback>:
 8001a4c:	4770      	bx	lr

08001a4e <HAL_ETH_WakeUpCallback>:
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a50:	6803      	ldr	r3, [r0, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 8001a56:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	0651      	lsls	r1, r2, #25
{
 8001a5c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a5e:	d506      	bpl.n	8001a6e <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	0652      	lsls	r2, r2, #25
 8001a64:	d503      	bpl.n	8001a6e <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a66:	4a2e      	ldr	r2, [pc, #184]	; (8001b20 <HAL_ETH_IRQHandler+0xd0>)
 8001a68:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001a6a:	f7fe ffd5 	bl	8000a18 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	07d0      	lsls	r0, r2, #31
 8001a78:	d508      	bpl.n	8001a8c <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	07d1      	lsls	r1, r2, #31
 8001a7e:	d505      	bpl.n	8001a8c <HAL_ETH_IRQHandler+0x3c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001a80:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001a84:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7fe ffce 	bl	8000a28 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	0412      	lsls	r2, r2, #16
 8001a96:	d521      	bpl.n	8001adc <HAL_ETH_IRQHandler+0x8c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a98:	69da      	ldr	r2, [r3, #28]
 8001a9a:	0410      	lsls	r0, r2, #16
 8001a9c:	d51e      	bpl.n	8001adc <HAL_ETH_IRQHandler+0x8c>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a9e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001aa2:	f042 0208 	orr.w	r2, r2, #8
 8001aa6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ab0:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001ab2:	d02d      	beq.n	8001b10 <HAL_ETH_IRQHandler+0xc0>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001ab4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ab8:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001abc:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001ac0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001ace:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ad0:	23e0      	movs	r3, #224	; 0xe0
 8001ad2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe ffae 	bl	8000a38 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae0:	0711      	lsls	r1, r2, #28
 8001ae2:	d50a      	bpl.n	8001afa <HAL_ETH_IRQHandler+0xaa>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001aea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff ffac 	bl	8001a4c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_ETH_IRQHandler+0xd4>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	0312      	lsls	r2, r2, #12
 8001b00:	d505      	bpl.n	8001b0e <HAL_ETH_IRQHandler+0xbe>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b06:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff ffa0 	bl	8001a4e <HAL_ETH_WakeUpCallback>
}
 8001b0e:	bd10      	pop	{r4, pc}
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b10:	f248 6180 	movw	r1, #34432	; 0x8680
 8001b14:	400a      	ands	r2, r1
 8001b16:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b1a:	6159      	str	r1, [r3, #20]
 8001b1c:	e7db      	b.n	8001ad6 <HAL_ETH_IRQHandler+0x86>
 8001b1e:	bf00      	nop
 8001b20:	00010040 	.word	0x00010040
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_ETH_ReadPHYRegister>:
{
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b2c:	6800      	ldr	r0, [r0, #0]
{
 8001b2e:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b30:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b32:	0192      	lsls	r2, r2, #6
 8001b34:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b38:	f003 021c 	and.w	r2, r3, #28
 8001b3c:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b3e:	02cc      	lsls	r4, r1, #11
 8001b40:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b42:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b44:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b48:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001b4a:	f7ff facf 	bl	80010ec <HAL_GetTick>
 8001b4e:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b50:	f014 0401 	ands.w	r4, r4, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_ETH_ReadPHYRegister+0x3a>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b56:	682b      	ldr	r3, [r5, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b5e:	4620      	mov	r0, r4
}
 8001b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b62:	f7ff fac3 	bl	80010ec <HAL_GetTick>
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b6c:	d202      	bcs.n	8001b74 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	691c      	ldr	r4, [r3, #16]
 8001b72:	e7ed      	b.n	8001b50 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7f3      	b.n	8001b60 <HAL_ETH_ReadPHYRegister+0x38>

08001b78 <HAL_ETH_WritePHYRegister>:
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b7c:	6800      	ldr	r0, [r0, #0]
 8001b7e:	6906      	ldr	r6, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b80:	0192      	lsls	r2, r2, #6
 8001b82:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b86:	f006 021c 	and.w	r2, r6, #28
 8001b8a:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b8c:	02cc      	lsls	r4, r1, #11
 8001b8e:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b90:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b98:	6143      	str	r3, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001b9a:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8001b9c:	f7ff faa6 	bl	80010ec <HAL_GetTick>
 8001ba0:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ba2:	f014 0401 	ands.w	r4, r4, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ETH_WritePHYRegister+0x34>
  return HAL_OK;
 8001ba8:	4620      	mov	r0, r4
}
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bac:	f7ff fa9e 	bl	80010ec <HAL_GetTick>
 8001bb0:	1b80      	subs	r0, r0, r6
 8001bb2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001bb6:	d202      	bcs.n	8001bbe <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	691c      	ldr	r4, [r3, #16]
 8001bbc:	e7f1      	b.n	8001ba2 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e7f3      	b.n	8001baa <HAL_ETH_WritePHYRegister+0x32>

08001bc2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001bc2:	2900      	cmp	r1, #0
 8001bc4:	d05d      	beq.n	8001c82 <HAL_ETH_GetMACConfig+0xc0>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001bce:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001bd8:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001be0:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001be4:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001be8:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001bea:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bee:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001bf6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001bfa:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001c02:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c0a:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c12:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001c1a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001c1e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c26:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c2a:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c32:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c3a:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c42:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c4a:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c54:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c58:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c62:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	0c12      	lsrs	r2, r2, #16
 8001c68:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001c70:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c74:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8001c76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c7a:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	4770      	bx	lr
    return HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
}
 8001c84:	4770      	bx	lr

08001c86 <HAL_ETH_SetMACConfig>:
{
 8001c86:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8001c88:	b139      	cbz	r1, 8001c9a <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c8a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d103      	bne.n	8001c9a <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8001c92:	f7ff fb47 	bl	8001324 <ETH_SetMACConfig>
    return HAL_OK;
 8001c96:	2000      	movs	r0, #0
}
 8001c98:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e7fc      	b.n	8001c98 <HAL_ETH_SetMACConfig+0x12>
	...

08001ca0 <HAL_ETH_SetMDIOClockRange>:
{
 8001ca0:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ca2:	6803      	ldr	r3, [r0, #0]
{
 8001ca4:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ca6:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001ca8:	f000 fbe4 	bl	8002474 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001cb0:	4403      	add	r3, r0
 8001cb2:	4293      	cmp	r3, r2
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cb4:	f024 041c 	bic.w	r4, r4, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cb8:	d204      	bcs.n	8001cc4 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cba:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	611c      	str	r4, [r3, #16]
}
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001cc8:	4403      	add	r3, r0
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d802      	bhi.n	8001cd4 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cce:	f044 040c 	orr.w	r4, r4, #12
 8001cd2:	e7f4      	b.n	8001cbe <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001cd8:	4403      	add	r3, r0
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d3ef      	bcc.n	8001cbe <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001ce2:	4403      	add	r3, r0
 8001ce4:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ce6:	bf94      	ite	ls
 8001ce8:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cec:	f044 0410 	orrhi.w	r4, r4, #16
 8001cf0:	e7e5      	b.n	8001cbe <HAL_ETH_SetMDIOClockRange+0x1e>
 8001cf2:	bf00      	nop
 8001cf4:	feced300 	.word	0xfeced300
 8001cf8:	00e4e1c0 	.word	0x00e4e1c0
 8001cfc:	fde9f140 	.word	0xfde9f140
 8001d00:	017d783f 	.word	0x017d783f
 8001d04:	fc6c7900 	.word	0xfc6c7900
 8001d08:	02625a00 	.word	0x02625a00
 8001d0c:	fa0a1f00 	.word	0xfa0a1f00
 8001d10:	02faf07f 	.word	0x02faf07f

08001d14 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001d14:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d20:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001ee4 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d24:	4a6d      	ldr	r2, [pc, #436]	; (8001edc <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d28:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001d2a:	2401      	movs	r4, #1
 8001d2c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001d32:	43ac      	bics	r4, r5
 8001d34:	f040 80b9 	bne.w	8001eaa <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d38:	684d      	ldr	r5, [r1, #4]
 8001d3a:	f005 0403 	and.w	r4, r5, #3
 8001d3e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d42:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d44:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d46:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d50:	d834      	bhi.n	8001dbc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001d52:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d58:	68cf      	ldr	r7, [r1, #12]
 8001d5a:	fa07 f708 	lsl.w	r7, r7, r8
 8001d5e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d66:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001d6e:	409f      	lsls	r7, r3
 8001d70:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d74:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d76:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d78:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	688f      	ldr	r7, [r1, #8]
 8001d7e:	fa07 f708 	lsl.w	r7, r7, r8
 8001d82:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001d88:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	d119      	bne.n	8001dc0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001d8c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001d90:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d94:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001da0:	f04f 0e0f 	mov.w	lr, #15
 8001da4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001da8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	690f      	ldr	r7, [r1, #16]
 8001dae:	fa07 f70b 	lsl.w	r7, r7, fp
 8001db2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	f8ca 7020 	str.w	r7, [sl, #32]
 8001dba:	e001      	b.n	8001dc0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	2c03      	cmp	r4, #3
 8001dbe:	d1da      	bne.n	8001d76 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001dc0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dca:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001dce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd0:	d06b      	beq.n	8001eaa <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	f04f 0a00 	mov.w	sl, #0
 8001dd6:	f8cd a004 	str.w	sl, [sp, #4]
 8001dda:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	4c40      	ldr	r4, [pc, #256]	; (8001ee0 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001de4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001de8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001dec:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001df0:	9601      	str	r6, [sp, #4]
 8001df2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001df4:	f023 0603 	bic.w	r6, r3, #3
 8001df8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001dfc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e00:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e04:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e08:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e0c:	270f      	movs	r7, #15
 8001e0e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e18:	d04e      	beq.n	8001eb8 <HAL_GPIO_Init+0x19c>
 8001e1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e1e:	42a0      	cmp	r0, r4
 8001e20:	d04c      	beq.n	8001ebc <HAL_GPIO_Init+0x1a0>
 8001e22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e26:	42a0      	cmp	r0, r4
 8001e28:	d04a      	beq.n	8001ec0 <HAL_GPIO_Init+0x1a4>
 8001e2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e2e:	42a0      	cmp	r0, r4
 8001e30:	d048      	beq.n	8001ec4 <HAL_GPIO_Init+0x1a8>
 8001e32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	d046      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ac>
 8001e3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e3e:	42a0      	cmp	r0, r4
 8001e40:	d044      	beq.n	8001ecc <HAL_GPIO_Init+0x1b0>
 8001e42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e46:	42a0      	cmp	r0, r4
 8001e48:	d042      	beq.n	8001ed0 <HAL_GPIO_Init+0x1b4>
 8001e4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e4e:	42a0      	cmp	r0, r4
 8001e50:	d040      	beq.n	8001ed4 <HAL_GPIO_Init+0x1b8>
 8001e52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e56:	42a0      	cmp	r0, r4
 8001e58:	d03e      	beq.n	8001ed8 <HAL_GPIO_Init+0x1bc>
 8001e5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e5e:	42a0      	cmp	r0, r4
 8001e60:	bf0c      	ite	eq
 8001e62:	2409      	moveq	r4, #9
 8001e64:	240a      	movne	r4, #10
 8001e66:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e6a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001e6e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e74:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001e76:	bf54      	ite	pl
 8001e78:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e7a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001e7e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e82:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001e84:	bf54      	ite	pl
 8001e86:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e88:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001e8c:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e90:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001e92:	bf54      	ite	pl
 8001e94:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001e96:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001e9a:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9e:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	bf54      	ite	pl
 8001ea2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001ea4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001ea8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	3301      	adds	r3, #1
 8001eac:	2b10      	cmp	r3, #16
 8001eae:	f47f af3b 	bne.w	8001d28 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001eb2:	b003      	add	sp, #12
 8001eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb8:	4654      	mov	r4, sl
 8001eba:	e7d4      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ebc:	2401      	movs	r4, #1
 8001ebe:	e7d2      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ec0:	2402      	movs	r4, #2
 8001ec2:	e7d0      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ec4:	2403      	movs	r4, #3
 8001ec6:	e7ce      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ec8:	2404      	movs	r4, #4
 8001eca:	e7cc      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ecc:	2405      	movs	r4, #5
 8001ece:	e7ca      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ed0:	2406      	movs	r4, #6
 8001ed2:	e7c8      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ed4:	2407      	movs	r4, #7
 8001ed6:	e7c6      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001ed8:	2408      	movs	r4, #8
 8001eda:	e7c4      	b.n	8001e66 <HAL_GPIO_Init+0x14a>
 8001edc:	40013c00 	.word	0x40013c00
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eec:	4604      	mov	r4, r0
 8001eee:	b340      	cbz	r0, 8001f42 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef0:	6803      	ldr	r3, [r0, #0]
 8001ef2:	07dd      	lsls	r5, r3, #31
 8001ef4:	d410      	bmi.n	8001f18 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	0798      	lsls	r0, r3, #30
 8001efa:	d45e      	bmi.n	8001fba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	071a      	lsls	r2, r3, #28
 8001f00:	f100 80a0 	bmi.w	8002044 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	075b      	lsls	r3, r3, #29
 8001f08:	f100 80c0 	bmi.w	800208c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0c:	69a0      	ldr	r0, [r4, #24]
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	f040 8128 	bne.w	8002164 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001f14:	2000      	movs	r0, #0
 8001f16:	e02b      	b.n	8001f70 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f18:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	f002 020c 	and.w	r2, r2, #12
 8001f20:	2a04      	cmp	r2, #4
 8001f22:	d007      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	2a08      	cmp	r2, #8
 8001f2c:	d10b      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	0251      	lsls	r1, r2, #9
 8001f32:	d508      	bpl.n	8001f46 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	039a      	lsls	r2, r3, #14
 8001f3a:	d5dc      	bpl.n	8001ef6 <HAL_RCC_OscConfig+0xe>
 8001f3c:	6863      	ldr	r3, [r4, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1d9      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	6862      	ldr	r2, [r4, #4]
 8001f48:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001f4c:	d113      	bne.n	8001f76 <HAL_RCC_OscConfig+0x8e>
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f56:	f7ff f8c9 	bl	80010ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4e7f      	ldr	r6, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001f5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	6833      	ldr	r3, [r6, #0]
 8001f60:	039b      	lsls	r3, r3, #14
 8001f62:	d4c8      	bmi.n	8001ef6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff f8c2 	bl	80010ec <HAL_GetTick>
 8001f68:	1b40      	subs	r0, r0, r5
 8001f6a:	2864      	cmp	r0, #100	; 0x64
 8001f6c:	d9f7      	bls.n	8001f5e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8001f6e:	2003      	movs	r0, #3
}
 8001f70:	b002      	add	sp, #8
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	4d78      	ldr	r5, [pc, #480]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 8001f78:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0xa8>
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	682b      	ldr	r3, [r5, #0]
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f8e:	e7e2      	b.n	8001f56 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d1d9      	bne.n	8001f56 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f8a3 	bl	80010ec <HAL_GetTick>
 8001fa6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	039f      	lsls	r7, r3, #14
 8001fac:	d5a3      	bpl.n	8001ef6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fae:	f7ff f89d 	bl	80010ec <HAL_GetTick>
 8001fb2:	1b80      	subs	r0, r0, r6
 8001fb4:	2864      	cmp	r0, #100	; 0x64
 8001fb6:	d9f7      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xc0>
 8001fb8:	e7d9      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fba:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	f012 0f0c 	tst.w	r2, #12
 8001fc2:	d007      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2a08      	cmp	r2, #8
 8001fcc:	d111      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	025e      	lsls	r6, r3, #9
 8001fd2:	d40e      	bmi.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd4:	4a60      	ldr	r2, [pc, #384]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	079d      	lsls	r5, r3, #30
 8001fda:	d502      	bpl.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
 8001fdc:	68e3      	ldr	r3, [r4, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d1af      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	6921      	ldr	r1, [r4, #16]
 8001fe6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fee:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff0:	e784      	b.n	8001efc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff2:	68e2      	ldr	r2, [r4, #12]
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x274>)
 8001ff6:	b1b2      	cbz	r2, 8002026 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f876 	bl	80010ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4d55      	ldr	r5, [pc, #340]	; (8002158 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002002:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	0798      	lsls	r0, r3, #30
 8002008:	d507      	bpl.n	800201a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	682b      	ldr	r3, [r5, #0]
 800200c:	6922      	ldr	r2, [r4, #16]
 800200e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002012:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002016:	602b      	str	r3, [r5, #0]
 8002018:	e770      	b.n	8001efc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f867 	bl	80010ec <HAL_GetTick>
 800201e:	1b80      	subs	r0, r0, r6
 8002020:	2802      	cmp	r0, #2
 8002022:	d9ef      	bls.n	8002004 <HAL_RCC_OscConfig+0x11c>
 8002024:	e7a3      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002026:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002028:	f7ff f860 	bl	80010ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202c:	4e4a      	ldr	r6, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800202e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	6833      	ldr	r3, [r6, #0]
 8002032:	0799      	lsls	r1, r3, #30
 8002034:	f57f af62 	bpl.w	8001efc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff f858 	bl	80010ec <HAL_GetTick>
 800203c:	1b40      	subs	r0, r0, r5
 800203e:	2802      	cmp	r0, #2
 8002040:	d9f6      	bls.n	8002030 <HAL_RCC_OscConfig+0x148>
 8002042:	e794      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002044:	6962      	ldr	r2, [r4, #20]
 8002046:	4b45      	ldr	r3, [pc, #276]	; (800215c <HAL_RCC_OscConfig+0x274>)
 8002048:	b182      	cbz	r2, 800206c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800204a:	2201      	movs	r2, #1
 800204c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002050:	f7ff f84c 	bl	80010ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	4e40      	ldr	r6, [pc, #256]	; (8002158 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002056:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800205a:	079f      	lsls	r7, r3, #30
 800205c:	f53f af52 	bmi.w	8001f04 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f844 	bl	80010ec <HAL_GetTick>
 8002064:	1b40      	subs	r0, r0, r5
 8002066:	2802      	cmp	r0, #2
 8002068:	d9f6      	bls.n	8002058 <HAL_RCC_OscConfig+0x170>
 800206a:	e780      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800206c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002070:	f7ff f83c 	bl	80010ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4e38      	ldr	r6, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002076:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800207a:	0798      	lsls	r0, r3, #30
 800207c:	f57f af42 	bpl.w	8001f04 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff f834 	bl	80010ec <HAL_GetTick>
 8002084:	1b40      	subs	r0, r0, r5
 8002086:	2802      	cmp	r0, #2
 8002088:	d9f6      	bls.n	8002078 <HAL_RCC_OscConfig+0x190>
 800208a:	e770      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002094:	d128      	bne.n	80020e8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	9201      	str	r2, [sp, #4]
 8002098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020aa:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4d2c      	ldr	r5, [pc, #176]	; (8002160 <HAL_RCC_OscConfig+0x278>)
 80020ae:	682b      	ldr	r3, [r5, #0]
 80020b0:	05d9      	lsls	r1, r3, #23
 80020b2:	d51b      	bpl.n	80020ec <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	68a3      	ldr	r3, [r4, #8]
 80020b6:	4d28      	ldr	r5, [pc, #160]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d127      	bne.n	800210c <HAL_RCC_OscConfig+0x224>
 80020bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020c4:	f7ff f812 	bl	80010ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	4e23      	ldr	r6, [pc, #140]	; (8002158 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80020ca:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80020d2:	079b      	lsls	r3, r3, #30
 80020d4:	d539      	bpl.n	800214a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80020d6:	2f00      	cmp	r7, #0
 80020d8:	f43f af18 	beq.w	8001f0c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x270>)
 80020de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	e711      	b.n	8001f0c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80020e8:	2700      	movs	r7, #0
 80020ea:	e7df      	b.n	80020ac <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80020f4:	f7fe fffa 	bl	80010ec <HAL_GetTick>
 80020f8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	682b      	ldr	r3, [r5, #0]
 80020fc:	05da      	lsls	r2, r3, #23
 80020fe:	d4d9      	bmi.n	80020b4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe fff4 	bl	80010ec <HAL_GetTick>
 8002104:	1b80      	subs	r0, r0, r6
 8002106:	2802      	cmp	r0, #2
 8002108:	d9f7      	bls.n	80020fa <HAL_RCC_OscConfig+0x212>
 800210a:	e730      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	2b05      	cmp	r3, #5
 800210e:	d104      	bne.n	800211a <HAL_RCC_OscConfig+0x232>
 8002110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	672b      	str	r3, [r5, #112]	; 0x70
 8002118:	e7d0      	b.n	80020bc <HAL_RCC_OscConfig+0x1d4>
 800211a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	672a      	str	r2, [r5, #112]	; 0x70
 8002122:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002124:	f022 0204 	bic.w	r2, r2, #4
 8002128:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ca      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800212e:	f7fe ffdd 	bl	80010ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002136:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800213a:	0798      	lsls	r0, r3, #30
 800213c:	d5cb      	bpl.n	80020d6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7fe ffd5 	bl	80010ec <HAL_GetTick>
 8002142:	1b80      	subs	r0, r0, r6
 8002144:	4540      	cmp	r0, r8
 8002146:	d9f7      	bls.n	8002138 <HAL_RCC_OscConfig+0x250>
 8002148:	e711      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe ffcf 	bl	80010ec <HAL_GetTick>
 800214e:	1b40      	subs	r0, r0, r5
 8002150:	4540      	cmp	r0, r8
 8002152:	d9bd      	bls.n	80020d0 <HAL_RCC_OscConfig+0x1e8>
 8002154:	e70b      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	42470000 	.word	0x42470000
 8002160:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002164:	4d36      	ldr	r5, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x358>)
 8002166:	68ab      	ldr	r3, [r5, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d03d      	beq.n	80021ec <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x35c>)
 8002172:	2200      	movs	r2, #0
 8002174:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002176:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002178:	d12b      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800217a:	f7fe ffb7 	bl	80010ec <HAL_GetTick>
 800217e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	0199      	lsls	r1, r3, #6
 8002184:	d41f      	bmi.n	80021c6 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002186:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800218a:	4313      	orrs	r3, r2
 800218c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800218e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002192:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002194:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002198:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800219a:	0852      	lsrs	r2, r2, #1
 800219c:	3a01      	subs	r2, #1
 800219e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80021a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4d26      	ldr	r5, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80021a8:	2201      	movs	r2, #1
 80021aa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80021ac:	f7fe ff9e 	bl	80010ec <HAL_GetTick>
 80021b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	019a      	lsls	r2, r3, #6
 80021b6:	f53f aead 	bmi.w	8001f14 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe ff97 	bl	80010ec <HAL_GetTick>
 80021be:	1b00      	subs	r0, r0, r4
 80021c0:	2802      	cmp	r0, #2
 80021c2:	d9f6      	bls.n	80021b2 <HAL_RCC_OscConfig+0x2ca>
 80021c4:	e6d3      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe ff91 	bl	80010ec <HAL_GetTick>
 80021ca:	1b80      	subs	r0, r0, r6
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9d7      	bls.n	8002180 <HAL_RCC_OscConfig+0x298>
 80021d0:	e6cd      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80021d2:	f7fe ff8b 	bl	80010ec <HAL_GetTick>
 80021d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	019b      	lsls	r3, r3, #6
 80021dc:	f57f ae9a 	bpl.w	8001f14 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff84 	bl	80010ec <HAL_GetTick>
 80021e4:	1b00      	subs	r0, r0, r4
 80021e6:	2802      	cmp	r0, #2
 80021e8:	d9f6      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
 80021ea:	e6c0      	b.n	8001f6e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	2801      	cmp	r0, #1
 80021ee:	f43f aebf 	beq.w	8001f70 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80021f2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	4291      	cmp	r1, r2
 80021fc:	f47f aea1 	bne.w	8001f42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002200:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	428a      	cmp	r2, r1
 8002208:	f47f ae9b 	bne.w	8001f42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002212:	401a      	ands	r2, r3
 8002214:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002218:	f47f ae93 	bne.w	8001f42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002224:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002226:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800222a:	f47f ae8a 	bne.w	8001f42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800222e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002230:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002234:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002238:	f43f ae6c 	beq.w	8001f14 <HAL_RCC_OscConfig+0x2c>
 800223c:	e681      	b.n	8001f42 <HAL_RCC_OscConfig+0x5a>
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000

08002248 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	4c22      	ldr	r4, [pc, #136]	; (80022d4 <HAL_RCC_MCOConfig+0x8c>)
 800224c:	b088      	sub	sp, #32
 800224e:	460e      	mov	r6, r1
 8002250:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002252:	b9f8      	cbnz	r0, 8002294 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002254:	9001      	str	r0, [sp, #4]
 8002256:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6323      	str	r3, [r4, #48]	; 0x30
 800225e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002260:	9007      	str	r0, [sp, #28]
    __MCO1_CLK_ENABLE();
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800226e:	2302      	movs	r3, #2
 8002270:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800227a:	a903      	add	r1, sp, #12
 800227c:	4816      	ldr	r0, [pc, #88]	; (80022d8 <HAL_RCC_MCOConfig+0x90>)
 800227e:	f7ff fd4d 	bl	8001d1c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002282:	68a3      	ldr	r3, [r4, #8]
 8002284:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8002288:	ea43 0106 	orr.w	r1, r3, r6
 800228c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800228e:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002290:	b008      	add	sp, #32
 8002292:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800229a:	4810      	ldr	r0, [pc, #64]	; (80022dc <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 800229c:	f042 0204 	orr.w	r2, r2, #4
 80022a0:	6322      	str	r2, [r4, #48]	; 0x30
 80022a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022a4:	9307      	str	r3, [sp, #28]
    __MCO2_CLK_ENABLE();
 80022a6:	f002 0204 	and.w	r2, r2, #4
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b2:	2202      	movs	r2, #2
 80022b4:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2203      	movs	r2, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80022ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	e9cd 3205 	strd	r3, r2, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80022c0:	f7ff fd2c 	bl	8001d1c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80022c4:	68a3      	ldr	r3, [r4, #8]
 80022c6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022ca:	ea43 0106 	orr.w	r1, r3, r6
 80022ce:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
 80022d2:	e7dc      	b.n	800228e <HAL_RCC_MCOConfig+0x46>
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020800 	.word	0x40020800

080022e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e0:	4913      	ldr	r1, [pc, #76]	; (8002330 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80022e2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e4:	688b      	ldr	r3, [r1, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d01c      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x48>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fc:	bf14      	ite	ne
 80022fe:	480d      	ldrne	r0, [pc, #52]	; (8002334 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	480d      	ldreq	r0, [pc, #52]	; (8002338 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002306:	bf18      	it	ne
 8002308:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	fba1 0100 	umull	r0, r1, r1, r0
 8002312:	f7fd ffc5 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetSysClockFreq+0x50>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002322:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002326:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <HAL_RCC_GetSysClockFreq+0x54>)
 800232a:	e7fc      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800232e:	e7fa      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x46>
 8002330:	40023800 	.word	0x40023800
 8002334:	007a1200 	.word	0x007a1200
 8002338:	00f42400 	.word	0x00f42400

0800233c <HAL_RCC_ClockConfig>:
{
 800233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002340:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002342:	4604      	mov	r4, r0
 8002344:	b910      	cbnz	r0, 800234c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
}
 8002348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f002 020f 	and.w	r2, r2, #15
 8002354:	428a      	cmp	r2, r1
 8002356:	d328      	bcc.n	80023aa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	0797      	lsls	r7, r2, #30
 800235c:	d42d      	bmi.n	80023ba <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	07d0      	lsls	r0, r2, #31
 8002360:	d441      	bmi.n	80023e6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f002 020f 	and.w	r2, r2, #15
 800236a:	42aa      	cmp	r2, r5
 800236c:	d866      	bhi.n	800243c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	0751      	lsls	r1, r2, #29
 8002372:	d46c      	bmi.n	800244e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	0713      	lsls	r3, r2, #28
 8002376:	d507      	bpl.n	8002388 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002378:	4a3a      	ldr	r2, [pc, #232]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 800237a:	6921      	ldr	r1, [r4, #16]
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002382:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002386:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002388:	f7ff ffaa 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 800238e:	4a36      	ldr	r2, [pc, #216]	; (8002468 <HAL_RCC_ClockConfig+0x12c>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	40d8      	lsrs	r0, r3
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_ClockConfig+0x130>)
 800239c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x134>)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	f7fe fd3f 	bl	8000e24 <HAL_InitTick>
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7ce      	b.n	8002348 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d1c6      	bne.n	8002346 <HAL_RCC_ClockConfig+0xa>
 80023b8:	e7ce      	b.n	8002358 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 80023bc:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	bf1e      	ittt	ne
 80023c2:	6899      	ldrne	r1, [r3, #8]
 80023c4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80023c8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	bf42      	ittt	mi
 80023ce:	6899      	ldrmi	r1, [r3, #8]
 80023d0:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80023d4:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d6:	4923      	ldr	r1, [pc, #140]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 80023d8:	68a0      	ldr	r0, [r4, #8]
 80023da:	688b      	ldr	r3, [r1, #8]
 80023dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e0:	4303      	orrs	r3, r0
 80023e2:	608b      	str	r3, [r1, #8]
 80023e4:	e7bb      	b.n	800235e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	6862      	ldr	r2, [r4, #4]
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 80023ea:	2a01      	cmp	r2, #1
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	d0a7      	beq.n	8002346 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4e1b      	ldr	r6, [pc, #108]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 80023f8:	68b3      	ldr	r3, [r6, #8]
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	4313      	orrs	r3, r2
 8002400:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002402:	f7fe fe73 	bl	80010ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002406:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800240a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240c:	68b3      	ldr	r3, [r6, #8]
 800240e:	6862      	ldr	r2, [r4, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002418:	d0a3      	beq.n	8002362 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fe67 	bl	80010ec <HAL_GetTick>
 800241e:	1bc0      	subs	r0, r0, r7
 8002420:	4540      	cmp	r0, r8
 8002422:	d9f3      	bls.n	800240c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002424:	2003      	movs	r0, #3
 8002426:	e78f      	b.n	8002348 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002428:	1e91      	subs	r1, r2, #2
 800242a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	d802      	bhi.n	8002436 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002434:	e7de      	b.n	80023f4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	f013 0f02 	tst.w	r3, #2
 800243a:	e7db      	b.n	80023f4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243c:	b2ea      	uxtb	r2, r5
 800243e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	42ab      	cmp	r3, r5
 8002448:	f47f af7d 	bne.w	8002346 <HAL_RCC_ClockConfig+0xa>
 800244c:	e78f      	b.n	800236e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244e:	4905      	ldr	r1, [pc, #20]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 8002450:	68e0      	ldr	r0, [r4, #12]
 8002452:	688b      	ldr	r3, [r1, #8]
 8002454:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002458:	4303      	orrs	r3, r0
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	e78a      	b.n	8002374 <HAL_RCC_ClockConfig+0x38>
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	0800d3a4 	.word	0x0800d3a4
 800246c:	20000014 	.word	0x20000014
 8002470:	2000001c 	.word	0x2000001c

08002474 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002474:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCC_GetHCLKFreq+0x8>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000014 	.word	0x20000014

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800248e:	6810      	ldr	r0, [r2, #0]
}
 8002490:	40d8      	lsrs	r0, r3
 8002492:	4770      	bx	lr
 8002494:	40023800 	.word	0x40023800
 8002498:	0800d3b4 	.word	0x0800d3b4
 800249c:	20000014 	.word	0x20000014

080024a0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a0:	230f      	movs	r3, #15
 80024a2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetClockConfig+0x34>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	f002 0203 	and.w	r2, r2, #3
 80024ac:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80024b4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80024bc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80024c6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCC_GetClockConfig+0x38>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	600b      	str	r3, [r1, #0]
}
 80024d2:	4770      	bx	lr
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40023c00 	.word	0x40023c00

080024dc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d130      	bne.n	800254a <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ee:	6803      	ldr	r3, [r0, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <HAL_TIM_Base_Start_IT+0x70>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01a      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d017      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 8002504:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 800250c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002510:	4293      	cmp	r3, r2
 8002512:	d00f      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 8002514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002518:	4293      	cmp	r3, r2
 800251a:	d00b      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 800251c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002520:	4293      	cmp	r3, r2
 8002522:	d007      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 8002524:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x54>
 800252c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002530:	4293      	cmp	r3, r2
 8002532:	d104      	bne.n	800253e <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	2a06      	cmp	r2, #6
 800253c:	d003      	beq.n	8002546 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002546:	2000      	movs	r0, #0
}
 8002548:	4770      	bx	lr
    return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000

08002554 <HAL_TIM_OC_DelayElapsedCallback>:
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_IC_CaptureCallback>:
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_TriggerCallback>:
 800255a:	4770      	bx	lr

0800255c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	0791      	lsls	r1, r2, #30
{
 8002562:	b510      	push	{r4, lr}
 8002564:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002566:	d50e      	bpl.n	8002586 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	0792      	lsls	r2, r2, #30
 800256c:	d50b      	bpl.n	8002586 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800256e:	f06f 0202 	mvn.w	r2, #2
 8002572:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002574:	2201      	movs	r2, #1
 8002576:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	079b      	lsls	r3, r3, #30
 800257c:	d077      	beq.n	800266e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257e:	f7ff ffea 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	2300      	movs	r3, #0
 8002584:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	0750      	lsls	r0, r2, #29
 800258c:	d510      	bpl.n	80025b0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	0751      	lsls	r1, r2, #29
 8002592:	d50d      	bpl.n	80025b0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	2202      	movs	r2, #2
 800259c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a6:	d068      	beq.n	800267a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80025a8:	f7ff ffd5 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ac:	2300      	movs	r3, #0
 80025ae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	0712      	lsls	r2, r2, #28
 80025b6:	d50f      	bpl.n	80025d8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	0710      	lsls	r0, r2, #28
 80025bc:	d50c      	bpl.n	80025d8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025be:	f06f 0208 	mvn.w	r2, #8
 80025c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c4:	2204      	movs	r2, #4
 80025c6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025cc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ce:	d05a      	beq.n	8002686 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80025d0:	f7ff ffc1 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d4:	2300      	movs	r3, #0
 80025d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	06d2      	lsls	r2, r2, #27
 80025de:	d510      	bpl.n	8002602 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	06d0      	lsls	r0, r2, #27
 80025e4:	d50d      	bpl.n	8002602 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e6:	f06f 0210 	mvn.w	r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ec:	2208      	movs	r2, #8
 80025ee:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	d04b      	beq.n	8002692 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	f7ff ffac 	bl	8002556 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	2300      	movs	r3, #0
 8002600:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	07d1      	lsls	r1, r2, #31
 8002608:	d508      	bpl.n	800261c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	07d2      	lsls	r2, r2, #31
 800260e:	d505      	bpl.n	800261c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002610:	f06f 0201 	mvn.w	r2, #1
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	4620      	mov	r0, r4
 8002618:	f7fe fc48 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	0610      	lsls	r0, r2, #24
 8002622:	d508      	bpl.n	8002636 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	0611      	lsls	r1, r2, #24
 8002628:	d505      	bpl.n	8002636 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800262a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800262e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002630:	4620      	mov	r0, r4
 8002632:	f000 f8c8 	bl	80027c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	0652      	lsls	r2, r2, #25
 800263c:	d508      	bpl.n	8002650 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	0650      	lsls	r0, r2, #25
 8002642:	d505      	bpl.n	8002650 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff85 	bl	800255a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	0691      	lsls	r1, r2, #26
 8002656:	d522      	bpl.n	800269e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	0692      	lsls	r2, r2, #26
 800265c:	d51f      	bpl.n	800269e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800265e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002662:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002664:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800266a:	f000 b8ab 	b.w	80027c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	f7ff ff71 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff ff70 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
 8002678:	e783      	b.n	8002582 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	f7ff ff6b 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff ff6a 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
 8002684:	e792      	b.n	80025ac <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	f7ff ff65 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff ff64 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
 8002690:	e7a0      	b.n	80025d4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	f7ff ff5f 	bl	8002554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ff5e 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
 800269c:	e7af      	b.n	80025fe <HAL_TIM_IRQHandler+0xa2>
}
 800269e:	bd10      	pop	{r4, pc}

080026a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80026a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	4290      	cmp	r0, r2
 80026a6:	d012      	beq.n	80026ce <TIM_Base_SetConfig+0x2e>
 80026a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026ac:	d00f      	beq.n	80026ce <TIM_Base_SetConfig+0x2e>
 80026ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80026b2:	4290      	cmp	r0, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x2e>
 80026b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ba:	4290      	cmp	r0, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x2e>
 80026be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c2:	4290      	cmp	r0, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x2e>
 80026c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80026ca:	4290      	cmp	r0, r2
 80026cc:	d119      	bne.n	8002702 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80026ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d6:	4a23      	ldr	r2, [pc, #140]	; (8002764 <TIM_Base_SetConfig+0xc4>)
 80026d8:	4290      	cmp	r0, r2
 80026da:	d029      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 80026dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026e0:	d026      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 80026e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80026e6:	4290      	cmp	r0, r2
 80026e8:	d022      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 80026ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ee:	4290      	cmp	r0, r2
 80026f0:	d01e      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 80026f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f6:	4290      	cmp	r0, r2
 80026f8:	d01a      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 80026fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80026fe:	4290      	cmp	r0, r2
 8002700:	d016      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <TIM_Base_SetConfig+0xc8>)
 8002704:	4290      	cmp	r0, r2
 8002706:	d013      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800270c:	4290      	cmp	r0, r2
 800270e:	d00f      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002714:	4290      	cmp	r0, r2
 8002716:	d00b      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002718:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800271c:	4290      	cmp	r0, r2
 800271e:	d007      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002724:	4290      	cmp	r0, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0x90>
 8002728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272c:	4290      	cmp	r0, r2
 800272e:	d103      	bne.n	8002738 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002730:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002738:	694a      	ldr	r2, [r1, #20]
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002740:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002742:	688b      	ldr	r3, [r1, #8]
 8002744:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002746:	680b      	ldr	r3, [r1, #0]
 8002748:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <TIM_Base_SetConfig+0xc4>)
 800274c:	4298      	cmp	r0, r3
 800274e:	d003      	beq.n	8002758 <TIM_Base_SetConfig+0xb8>
 8002750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002754:	4298      	cmp	r0, r3
 8002756:	d101      	bne.n	800275c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	690b      	ldr	r3, [r1, #16]
 800275a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800275c:	2301      	movs	r3, #1
 800275e:	6143      	str	r3, [r0, #20]
}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40010000 	.word	0x40010000
 8002768:	40014000 	.word	0x40014000

0800276c <HAL_TIM_Base_Init>:
{
 800276c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800276e:	4604      	mov	r4, r0
 8002770:	b330      	cbz	r0, 80027c0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002776:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800277a:	b91b      	cbnz	r3, 8002784 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800277c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002780:	f7ff feac 	bl	80024dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002786:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278c:	1d21      	adds	r1, r4, #4
 800278e:	f7ff ff87 	bl	80026a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002792:	2301      	movs	r3, #1
 8002794:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8002798:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800279e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80027a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80027a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80027b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80027be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7fc      	b.n	80027be <HAL_TIM_Base_Init+0x52>

080027c4 <HAL_TIMEx_CommutCallback>:
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIMEx_BreakCallback>:
 80027c6:	4770      	bx	lr

080027c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027dc:	4770      	bx	lr

080027de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027e2:	4770      	bx	lr

080027e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80027e4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027f0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80027f2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80027f4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80027f6:	3301      	adds	r3, #1
 80027f8:	6003      	str	r3, [r0, #0]
}
 80027fa:	4770      	bx	lr

080027fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027fc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027fe:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002800:	1c63      	adds	r3, r4, #1
 8002802:	d10a      	bne.n	800281a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002804:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800280a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800280c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800280e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002810:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002812:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002814:	3301      	adds	r3, #1
 8002816:	6003      	str	r3, [r0, #0]
}
 8002818:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800281a:	f100 0208 	add.w	r2, r0, #8
 800281e:	4613      	mov	r3, r2
 8002820:	6852      	ldr	r2, [r2, #4]
 8002822:	6815      	ldr	r5, [r2, #0]
 8002824:	42a5      	cmp	r5, r4
 8002826:	d9fa      	bls.n	800281e <vListInsert+0x22>
 8002828:	e7ed      	b.n	8002806 <vListInsert+0xa>

0800282a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800282a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800282e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002830:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002832:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002838:	bf08      	it	eq
 800283a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800283c:	2200      	movs	r2, #0
 800283e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	3a01      	subs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002846:	6818      	ldr	r0, [r3, #0]
}
 8002848:	4770      	bx	lr

0800284a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800284a:	b510      	push	{r4, lr}
 800284c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800284e:	f001 fcf1 	bl	8004234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002852:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002854:	f001 fd0e 	bl	8004274 <vPortExitCritical>

	return xReturn;
}
 8002858:	fab4 f084 	clz	r0, r4
 800285c:	0940      	lsrs	r0, r0, #5
 800285e:	bd10      	pop	{r4, pc}

08002860 <prvCopyDataToQueue>:
{
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002864:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002866:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8002868:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800286a:	b952      	cbnz	r2, 8002882 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800286c:	6807      	ldr	r7, [r0, #0]
 800286e:	bb47      	cbnz	r7, 80028c2 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002870:	6880      	ldr	r0, [r0, #8]
 8002872:	f001 f945 	bl	8003b00 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002876:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002878:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800287a:	3601      	adds	r6, #1
 800287c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800287e:	4628      	mov	r0, r5
 8002880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002882:	b965      	cbnz	r5, 800289e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002884:	6840      	ldr	r0, [r0, #4]
 8002886:	f008 ff73 	bl	800b770 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800288a:	6863      	ldr	r3, [r4, #4]
 800288c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800288e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002890:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002892:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002894:	4293      	cmp	r3, r2
 8002896:	d3f0      	bcc.n	800287a <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	e7ed      	b.n	800287a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800289e:	68c0      	ldr	r0, [r0, #12]
 80028a0:	f008 ff66 	bl	800b770 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028a6:	68e3      	ldr	r3, [r4, #12]
 80028a8:	4251      	negs	r1, r2
 80028aa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028ac:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028ae:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028b0:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028b2:	bf3e      	ittt	cc
 80028b4:	68a3      	ldrcc	r3, [r4, #8]
 80028b6:	185b      	addcc	r3, r3, r1
 80028b8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80028ba:	2d02      	cmp	r5, #2
 80028bc:	d101      	bne.n	80028c2 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028be:	b116      	cbz	r6, 80028c6 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80028c0:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80028c2:	2500      	movs	r5, #0
 80028c4:	e7d9      	b.n	800287a <prvCopyDataToQueue+0x1a>
 80028c6:	4635      	mov	r5, r6
 80028c8:	e7d7      	b.n	800287a <prvCopyDataToQueue+0x1a>

080028ca <prvCopyDataFromQueue>:
{
 80028ca:	4603      	mov	r3, r0
 80028cc:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80028d0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028d2:	b16a      	cbz	r2, 80028f0 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d4:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028d6:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d8:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028da:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028dc:	bf28      	it	cs
 80028de:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028e0:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028e2:	bf28      	it	cs
 80028e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028e6:	68d9      	ldr	r1, [r3, #12]
}
 80028e8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028ec:	f008 bf40 	b.w	800b770 <memcpy>
}
 80028f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <prvUnlockQueue>:
{
 80028f6:	b570      	push	{r4, r5, r6, lr}
 80028f8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80028fa:	f001 fc9b 	bl	8004234 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80028fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002902:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002906:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002908:	2d00      	cmp	r5, #0
 800290a:	dc14      	bgt.n	8002936 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800290c:	23ff      	movs	r3, #255	; 0xff
 800290e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002912:	f001 fcaf 	bl	8004274 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002916:	f001 fc8d 	bl	8004234 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800291a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002922:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002924:	2d00      	cmp	r5, #0
 8002926:	dc12      	bgt.n	800294e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002928:	23ff      	movs	r3, #255	; 0xff
 800292a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800292e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002932:	f001 bc9f 	b.w	8004274 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0e7      	beq.n	800290c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800293c:	4630      	mov	r0, r6
 800293e:	f000 ff59 	bl	80037f4 <xTaskRemoveFromEventList>
 8002942:	b108      	cbz	r0, 8002948 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002944:	f000 ffd4 	bl	80038f0 <vTaskMissedYield>
			--cTxLock;
 8002948:	3d01      	subs	r5, #1
 800294a:	b26d      	sxtb	r5, r5
 800294c:	e7dc      	b.n	8002908 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800294e:	6923      	ldr	r3, [r4, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0e9      	beq.n	8002928 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002954:	4630      	mov	r0, r6
 8002956:	f000 ff4d 	bl	80037f4 <xTaskRemoveFromEventList>
 800295a:	b108      	cbz	r0, 8002960 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800295c:	f000 ffc8 	bl	80038f0 <vTaskMissedYield>
				--cRxLock;
 8002960:	3d01      	subs	r5, #1
 8002962:	b26d      	sxtb	r5, r5
 8002964:	e7de      	b.n	8002924 <prvUnlockQueue+0x2e>

08002966 <xQueueGenericReset>:
{
 8002966:	b538      	push	{r3, r4, r5, lr}
 8002968:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800296a:	4604      	mov	r4, r0
 800296c:	b940      	cbnz	r0, 8002980 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	e7fe      	b.n	800297e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002980:	f001 fc58 	bl	8004234 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002984:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8002988:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800298a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800298c:	434b      	muls	r3, r1
 800298e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002990:	1a5b      	subs	r3, r3, r1
 8002992:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002994:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002996:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002998:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800299a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800299c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800299e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80029a6:	b9a5      	cbnz	r5, 80029d2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	b173      	cbz	r3, 80029ca <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ac:	f104 0010 	add.w	r0, r4, #16
 80029b0:	f000 ff20 	bl	80037f4 <xTaskRemoveFromEventList>
 80029b4:	b148      	cbz	r0, 80029ca <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80029b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80029ca:	f001 fc53 	bl	8004274 <vPortExitCritical>
}
 80029ce:	2001      	movs	r0, #1
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d2:	f104 0010 	add.w	r0, r4, #16
 80029d6:	f7ff fef7 	bl	80027c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029de:	f7ff fef3 	bl	80027c8 <vListInitialise>
 80029e2:	e7f2      	b.n	80029ca <xQueueGenericReset+0x64>

080029e4 <xQueueGenericCreate>:
	{
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	460d      	mov	r5, r1
 80029e8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ea:	4606      	mov	r6, r0
 80029ec:	b940      	cbnz	r0, 8002a00 <xQueueGenericCreate+0x1c>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	e7fe      	b.n	80029fe <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a00:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a02:	3050      	adds	r0, #80	; 0x50
 8002a04:	f001 faf2 	bl	8003fec <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002a08:	4604      	mov	r4, r0
 8002a0a:	b158      	cbz	r0, 8002a24 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a0c:	b165      	cbz	r5, 8002a28 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a0e:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8002a12:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8002a16:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f7ff ffa3 	bl	8002966 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002a20:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002a24:	4620      	mov	r0, r4
 8002a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a28:	4603      	mov	r3, r0
 8002a2a:	e7f2      	b.n	8002a12 <xQueueGenericCreate+0x2e>

08002a2c <xQueueCreateCountingSemaphore>:
	{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8002a30:	b940      	cbnz	r0, 8002a44 <xQueueCreateCountingSemaphore+0x18>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	e7fe      	b.n	8002a42 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002a44:	4288      	cmp	r0, r1
 8002a46:	d208      	bcs.n	8002a5a <xQueueCreateCountingSemaphore+0x2e>
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	e7fe      	b.n	8002a58 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f7ff ffc1 	bl	80029e4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8002a62:	b100      	cbz	r0, 8002a66 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a64:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8002a66:	bd10      	pop	{r4, pc}

08002a68 <xQueueGenericSend>:
{
 8002a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	4688      	mov	r8, r1
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002a74:	4604      	mov	r4, r0
 8002a76:	b940      	cbnz	r0, 8002a8a <xQueueGenericSend+0x22>
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	e7fe      	b.n	8002a88 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a8a:	b951      	cbnz	r1, 8002aa2 <xQueueGenericSend+0x3a>
 8002a8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a8e:	b143      	cbz	r3, 8002aa2 <xQueueGenericSend+0x3a>
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa2:	2f02      	cmp	r7, #2
 8002aa4:	d10b      	bne.n	8002abe <xQueueGenericSend+0x56>
 8002aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d008      	beq.n	8002abe <xQueueGenericSend+0x56>
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002abe:	f000 ffc5 	bl	8003a4c <xTaskGetSchedulerState>
 8002ac2:	4606      	mov	r6, r0
 8002ac4:	b950      	cbnz	r0, 8002adc <xQueueGenericSend+0x74>
 8002ac6:	9b01      	ldr	r3, [sp, #4]
 8002ac8:	b14b      	cbz	r3, 8002ade <xQueueGenericSend+0x76>
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	e7fe      	b.n	8002ada <xQueueGenericSend+0x72>
 8002adc:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002ade:	f04f 0900 	mov.w	r9, #0
 8002ae2:	e037      	b.n	8002b54 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ae4:	9d01      	ldr	r5, [sp, #4]
 8002ae6:	b91d      	cbnz	r5, 8002af0 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8002ae8:	f001 fbc4 	bl	8004274 <vPortExitCritical>
			return errQUEUE_FULL;
 8002aec:	2000      	movs	r0, #0
 8002aee:	e052      	b.n	8002b96 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8002af0:	b916      	cbnz	r6, 8002af8 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af2:	a802      	add	r0, sp, #8
 8002af4:	f000 feba 	bl	800386c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002af8:	f001 fbbc 	bl	8004274 <vPortExitCritical>
		vTaskSuspendAll();
 8002afc:	f000 fd10 	bl	8003520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b00:	f001 fb98 	bl	8004234 <vPortEnterCritical>
 8002b04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b08:	2bff      	cmp	r3, #255	; 0xff
 8002b0a:	bf08      	it	eq
 8002b0c:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002b10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b14:	2bff      	cmp	r3, #255	; 0xff
 8002b16:	bf08      	it	eq
 8002b18:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002b1c:	f001 fbaa 	bl	8004274 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b20:	a901      	add	r1, sp, #4
 8002b22:	a802      	add	r0, sp, #8
 8002b24:	f000 feac 	bl	8003880 <xTaskCheckForTimeOut>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d14a      	bne.n	8002bc2 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b2c:	f001 fb82 	bl	8004234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d131      	bne.n	8002b9c <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002b38:	f001 fb9c 	bl	8004274 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b3c:	9901      	ldr	r1, [sp, #4]
 8002b3e:	f104 0010 	add.w	r0, r4, #16
 8002b42:	f000 fe3f 	bl	80037c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fed5 	bl	80028f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b4c:	f000 fd74 	bl	8003638 <xTaskResumeAll>
 8002b50:	b360      	cbz	r0, 8002bac <xQueueGenericSend+0x144>
 8002b52:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002b54:	f001 fb6e 	bl	8004234 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d301      	bcc.n	8002b64 <xQueueGenericSend+0xfc>
 8002b60:	2f02      	cmp	r7, #2
 8002b62:	d1bf      	bne.n	8002ae4 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b64:	463a      	mov	r2, r7
 8002b66:	4641      	mov	r1, r8
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff fe79 	bl	8002860 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b70:	b11b      	cbz	r3, 8002b7a <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b76:	f000 fe3d 	bl	80037f4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002b7a:	b148      	cbz	r0, 8002b90 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8002b7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002b90:	f001 fb70 	bl	8004274 <vPortExitCritical>
				return pdPASS;
 8002b94:	2001      	movs	r0, #1
}
 8002b96:	b005      	add	sp, #20
 8002b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002b9c:	f001 fb6a 	bl	8004274 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff fea8 	bl	80028f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba6:	f000 fd47 	bl	8003638 <xTaskResumeAll>
 8002baa:	e7d2      	b.n	8002b52 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8002bac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	e7c7      	b.n	8002b52 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff fe97 	bl	80028f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bc8:	f000 fd36 	bl	8003638 <xTaskResumeAll>
 8002bcc:	e78e      	b.n	8002aec <xQueueGenericSend+0x84>

08002bce <xQueueCreateMutex>:
	{
 8002bce:	b570      	push	{r4, r5, r6, lr}
 8002bd0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bd2:	2050      	movs	r0, #80	; 0x50
 8002bd4:	f001 fa0a 	bl	8003fec <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002bd8:	4604      	mov	r4, r0
 8002bda:	b188      	cbz	r0, 8002c00 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8002bdc:	2500      	movs	r5, #0
 8002bde:	2101      	movs	r1, #1
 8002be0:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002be4:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be6:	f7ff febe 	bl	8002966 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002bea:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bee:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bf0:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bf2:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f7ff ff34 	bl	8002a68 <xQueueGenericSend>
	}
 8002c00:	4620      	mov	r0, r4
 8002c02:	bd70      	pop	{r4, r5, r6, pc}

08002c04 <xQueueGenericSendFromISR>:
{
 8002c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c08:	4689      	mov	r9, r1
 8002c0a:	4690      	mov	r8, r2
 8002c0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002c0e:	4604      	mov	r4, r0
 8002c10:	b940      	cbnz	r0, 8002c24 <xQueueGenericSendFromISR+0x20>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	e7fe      	b.n	8002c22 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c24:	b951      	cbnz	r1, 8002c3c <xQueueGenericSendFromISR+0x38>
 8002c26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002c28:	b143      	cbz	r3, 8002c3c <xQueueGenericSendFromISR+0x38>
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	e7fe      	b.n	8002c3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c3c:	2f02      	cmp	r7, #2
 8002c3e:	d10b      	bne.n	8002c58 <xQueueGenericSendFromISR+0x54>
 8002c40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d008      	beq.n	8002c58 <xQueueGenericSendFromISR+0x54>
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	e7fe      	b.n	8002c56 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c58:	f001 fc00 	bl	800445c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c5c:	f3ef 8611 	mrs	r6, BASEPRI
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d301      	bcc.n	8002c7c <xQueueGenericSendFromISR+0x78>
 8002c78:	2f02      	cmp	r7, #2
 8002c7a:	d123      	bne.n	8002cc4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c7c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c82:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c84:	463a      	mov	r2, r7
 8002c86:	4649      	mov	r1, r9
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fde9 	bl	8002860 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002c8e:	1c6b      	adds	r3, r5, #1
 8002c90:	d113      	bne.n	8002cba <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c94:	b90b      	cbnz	r3, 8002c9a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8002c96:	2001      	movs	r0, #1
 8002c98:	e00b      	b.n	8002cb2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c9e:	f000 fda9 	bl	80037f4 <xTaskRemoveFromEventList>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d0f7      	beq.n	8002c96 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8002ca6:	f1b8 0f00 	cmp.w	r8, #0
 8002caa:	d0f4      	beq.n	8002c96 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cac:	2001      	movs	r0, #1
 8002cae:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cb2:	f386 8811 	msr	BASEPRI, r6
}
 8002cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cba:	3501      	adds	r5, #1
 8002cbc:	b26d      	sxtb	r5, r5
 8002cbe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002cc2:	e7e8      	b.n	8002c96 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e7f4      	b.n	8002cb2 <xQueueGenericSendFromISR+0xae>

08002cc8 <xQueueGiveFromISR>:
{
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002ccc:	4604      	mov	r4, r0
 8002cce:	b940      	cbnz	r0, 8002ce2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ce2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ce4:	b143      	cbz	r3, 8002cf8 <xQueueGiveFromISR+0x30>
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	e7fe      	b.n	8002cf6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002cf8:	6803      	ldr	r3, [r0, #0]
 8002cfa:	b953      	cbnz	r3, 8002d12 <xQueueGiveFromISR+0x4a>
 8002cfc:	6883      	ldr	r3, [r0, #8]
 8002cfe:	b143      	cbz	r3, 8002d12 <xQueueGiveFromISR+0x4a>
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	e7fe      	b.n	8002d10 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d12:	f001 fba3 	bl	800445c <vPortValidateInterruptPriority>
	__asm volatile
 8002d16:	f3ef 8611 	mrs	r6, BASEPRI
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d91c      	bls.n	8002d6c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d36:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8002d38:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d3a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d3c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002d3e:	d110      	bne.n	8002d62 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d42:	b90b      	cbnz	r3, 8002d48 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e009      	b.n	8002d5c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d4c:	f000 fd52 	bl	80037f4 <xTaskRemoveFromEventList>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d0f7      	beq.n	8002d44 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	d0f5      	beq.n	8002d44 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d58:	2001      	movs	r0, #1
 8002d5a:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002d5c:	f386 8811 	msr	BASEPRI, r6
}
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d62:	3301      	adds	r3, #1
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d6a:	e7eb      	b.n	8002d44 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	e7f5      	b.n	8002d5c <xQueueGiveFromISR+0x94>

08002d70 <xQueueReceive>:
{
 8002d70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002d74:	460f      	mov	r7, r1
 8002d76:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002d78:	4604      	mov	r4, r0
 8002d7a:	b940      	cbnz	r0, 8002d8e <xQueueReceive+0x1e>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	e7fe      	b.n	8002d8c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8e:	b951      	cbnz	r1, 8002da6 <xQueueReceive+0x36>
 8002d90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d92:	b143      	cbz	r3, 8002da6 <xQueueReceive+0x36>
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	e7fe      	b.n	8002da4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da6:	f000 fe51 	bl	8003a4c <xTaskGetSchedulerState>
 8002daa:	4606      	mov	r6, r0
 8002dac:	b950      	cbnz	r0, 8002dc4 <xQueueReceive+0x54>
 8002dae:	9b01      	ldr	r3, [sp, #4]
 8002db0:	b14b      	cbz	r3, 8002dc6 <xQueueReceive+0x56>
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	e7fe      	b.n	8002dc2 <xQueueReceive+0x52>
 8002dc4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002dc6:	f04f 0800 	mov.w	r8, #0
 8002dca:	e03d      	b.n	8002e48 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dcc:	9d01      	ldr	r5, [sp, #4]
 8002dce:	b91d      	cbnz	r5, 8002dd8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8002dd0:	f001 fa50 	bl	8004274 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e056      	b.n	8002e86 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8002dd8:	b916      	cbnz	r6, 8002de0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dda:	a802      	add	r0, sp, #8
 8002ddc:	f000 fd46 	bl	800386c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002de0:	f001 fa48 	bl	8004274 <vPortExitCritical>
		vTaskSuspendAll();
 8002de4:	f000 fb9c 	bl	8003520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002de8:	f001 fa24 	bl	8004234 <vPortEnterCritical>
 8002dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002df0:	2bff      	cmp	r3, #255	; 0xff
 8002df2:	bf08      	it	eq
 8002df4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002df8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002dfc:	2bff      	cmp	r3, #255	; 0xff
 8002dfe:	bf08      	it	eq
 8002e00:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002e04:	f001 fa36 	bl	8004274 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e08:	a901      	add	r1, sp, #4
 8002e0a:	a802      	add	r0, sp, #8
 8002e0c:	f000 fd38 	bl	8003880 <xTaskCheckForTimeOut>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d141      	bne.n	8002e98 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff fd18 	bl	800284a <prvIsQueueEmpty>
 8002e1a:	b3b8      	cbz	r0, 8002e8c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e1c:	9901      	ldr	r1, [sp, #4]
 8002e1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e22:	f000 fccf 	bl	80037c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7ff fd65 	bl	80028f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e2c:	f000 fc04 	bl	8003638 <xTaskResumeAll>
 8002e30:	b948      	cbnz	r0, 8002e46 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8002e32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002e48:	f001 f9f4 	bl	8004234 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	d0bc      	beq.n	8002dcc <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e52:	4639      	mov	r1, r7
 8002e54:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e56:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e58:	f7ff fd37 	bl	80028ca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e5c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e5e:	6923      	ldr	r3, [r4, #16]
 8002e60:	b173      	cbz	r3, 8002e80 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e62:	f104 0010 	add.w	r0, r4, #16
 8002e66:	f000 fcc5 	bl	80037f4 <xTaskRemoveFromEventList>
 8002e6a:	b148      	cbz	r0, 8002e80 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002e80:	f001 f9f8 	bl	8004274 <vPortExitCritical>
				return pdPASS;
 8002e84:	2001      	movs	r0, #1
}
 8002e86:	b004      	add	sp, #16
 8002e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff fd32 	bl	80028f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e92:	f000 fbd1 	bl	8003638 <xTaskResumeAll>
 8002e96:	e7d6      	b.n	8002e46 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff fd2c 	bl	80028f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e9e:	f000 fbcb 	bl	8003638 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7ff fcd1 	bl	800284a <prvIsQueueEmpty>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d0cc      	beq.n	8002e46 <xQueueReceive+0xd6>
 8002eac:	e792      	b.n	8002dd4 <xQueueReceive+0x64>

08002eae <xQueueSemaphoreTake>:
{
 8002eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8002eb2:	4604      	mov	r4, r0
{
 8002eb4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002eb6:	b940      	cbnz	r0, 8002eca <xQueueSemaphoreTake+0x1c>
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002eca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002ecc:	b145      	cbz	r5, 8002ee0 <xQueueSemaphoreTake+0x32>
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	e7fe      	b.n	8002ede <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee0:	f000 fdb4 	bl	8003a4c <xTaskGetSchedulerState>
 8002ee4:	4606      	mov	r6, r0
 8002ee6:	b950      	cbnz	r0, 8002efe <xQueueSemaphoreTake+0x50>
 8002ee8:	9b01      	ldr	r3, [sp, #4]
 8002eea:	b15b      	cbz	r3, 8002f04 <xQueueSemaphoreTake+0x56>
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	e7fe      	b.n	8002efc <xQueueSemaphoreTake+0x4e>
 8002efe:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002f00:	2700      	movs	r7, #0
 8002f02:	e053      	b.n	8002fac <xQueueSemaphoreTake+0xfe>
 8002f04:	4605      	mov	r5, r0
 8002f06:	e7fb      	b.n	8002f00 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	b963      	cbnz	r3, 8002f26 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f0c:	b145      	cbz	r5, 8002f20 <xQueueSemaphoreTake+0x72>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	e7fe      	b.n	8002f1e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8002f20:	f001 f9a8 	bl	8004274 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002f24:	e062      	b.n	8002fec <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8002f26:	b916      	cbnz	r6, 8002f2e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f28:	a802      	add	r0, sp, #8
 8002f2a:	f000 fc9f 	bl	800386c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002f2e:	f001 f9a1 	bl	8004274 <vPortExitCritical>
		vTaskSuspendAll();
 8002f32:	f000 faf5 	bl	8003520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f36:	f001 f97d 	bl	8004234 <vPortEnterCritical>
 8002f3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	bf08      	it	eq
 8002f42:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002f46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f4a:	2bff      	cmp	r3, #255	; 0xff
 8002f4c:	bf08      	it	eq
 8002f4e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002f52:	f001 f98f 	bl	8004274 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f56:	a901      	add	r1, sp, #4
 8002f58:	a802      	add	r0, sp, #8
 8002f5a:	f000 fc91 	bl	8003880 <xTaskCheckForTimeOut>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d14d      	bne.n	8002ffe <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff fc71 	bl	800284a <prvIsQueueEmpty>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d042      	beq.n	8002ff2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	b93b      	cbnz	r3, 8002f80 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8002f70:	f001 f960 	bl	8004234 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f74:	68a0      	ldr	r0, [r4, #8]
 8002f76:	f000 fd79 	bl	8003a6c <xTaskPriorityInherit>
 8002f7a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002f7c:	f001 f97a 	bl	8004274 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f80:	9901      	ldr	r1, [sp, #4]
 8002f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f86:	f000 fc1d 	bl	80037c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fcb3 	bl	80028f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f90:	f000 fb52 	bl	8003638 <xTaskResumeAll>
 8002f94:	b948      	cbnz	r0, 8002faa <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8002f96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002fac:	f001 f942 	bl	8004234 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0a8      	beq.n	8002f08 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	b913      	cbnz	r3, 8002fc4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fbe:	f000 fea5 	bl	8003d0c <pvTaskIncrementMutexHeldCount>
 8002fc2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc4:	6923      	ldr	r3, [r4, #16]
 8002fc6:	b173      	cbz	r3, 8002fe6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc8:	f104 0010 	add.w	r0, r4, #16
 8002fcc:	f000 fc12 	bl	80037f4 <xTaskRemoveFromEventList>
 8002fd0:	b148      	cbz	r0, 8002fe6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002fd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002fe6:	f001 f945 	bl	8004274 <vPortExitCritical>
				return pdPASS;
 8002fea:	2501      	movs	r5, #1
}
 8002fec:	4628      	mov	r0, r5
 8002fee:	b005      	add	sp, #20
 8002ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fc7f 	bl	80028f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff8:	f000 fb1e 	bl	8003638 <xTaskResumeAll>
 8002ffc:	e7d5      	b.n	8002faa <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fc79 	bl	80028f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003004:	f000 fb18 	bl	8003638 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fc1e 	bl	800284a <prvIsQueueEmpty>
 800300e:	2800      	cmp	r0, #0
 8003010:	d0cb      	beq.n	8002faa <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8003012:	2d00      	cmp	r5, #0
 8003014:	d0ea      	beq.n	8002fec <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8003016:	f001 f90d 	bl	8004234 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800301a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800301c:	b119      	cbz	r1, 8003026 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800301e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003026:	68a0      	ldr	r0, [r4, #8]
 8003028:	f000 fdba 	bl	8003ba0 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800302c:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800302e:	f001 f921 	bl	8004274 <vPortExitCritical>
 8003032:	e7db      	b.n	8002fec <xQueueSemaphoreTake+0x13e>

08003034 <xQueueReceiveFromISR>:
{
 8003034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003038:	4689      	mov	r9, r1
 800303a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800303c:	4605      	mov	r5, r0
 800303e:	b940      	cbnz	r0, 8003052 <xQueueReceiveFromISR+0x1e>
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	e7fe      	b.n	8003050 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003052:	b951      	cbnz	r1, 800306a <xQueueReceiveFromISR+0x36>
 8003054:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003056:	b143      	cbz	r3, 800306a <xQueueReceiveFromISR+0x36>
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	e7fe      	b.n	8003068 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800306a:	f001 f9f7 	bl	800445c <vPortValidateInterruptPriority>
	__asm volatile
 800306e:	f3ef 8711 	mrs	r7, BASEPRI
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003082:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003084:	b31c      	cbz	r4, 80030ce <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003086:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800308a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800308c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800308e:	4628      	mov	r0, r5
 8003090:	f7ff fc1b 	bl	80028ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003094:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8003096:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003098:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800309a:	d113      	bne.n	80030c4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	692b      	ldr	r3, [r5, #16]
 800309e:	b90b      	cbnz	r3, 80030a4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e00b      	b.n	80030bc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	f105 0010 	add.w	r0, r5, #16
 80030a8:	f000 fba4 	bl	80037f4 <xTaskRemoveFromEventList>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0f7      	beq.n	80030a0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80030b0:	f1b8 0f00 	cmp.w	r8, #0
 80030b4:	d0f4      	beq.n	80030a0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030b6:	2001      	movs	r0, #1
 80030b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80030bc:	f387 8811 	msr	BASEPRI, r7
}
 80030c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030c4:	3601      	adds	r6, #1
 80030c6:	b276      	sxtb	r6, r6
 80030c8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80030cc:	e7e8      	b.n	80030a0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80030ce:	4620      	mov	r0, r4
 80030d0:	e7f4      	b.n	80030bc <xQueueReceiveFromISR+0x88>

080030d2 <uxQueueMessagesWaiting>:
{
 80030d2:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 80030d4:	4604      	mov	r4, r0
 80030d6:	b940      	cbnz	r0, 80030ea <uxQueueMessagesWaiting+0x18>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	e7fe      	b.n	80030e8 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80030ea:	f001 f8a3 	bl	8004234 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80030ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030f0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80030f2:	f001 f8bf 	bl	8004274 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80030f6:	9801      	ldr	r0, [sp, #4]
 80030f8:	b002      	add	sp, #8
 80030fa:	bd10      	pop	{r4, pc}

080030fc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80030fc:	b940      	cbnz	r0, 8003110 <uxQueueMessagesWaitingFromISR+0x14>
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	e7fe      	b.n	800310e <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003110:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003112:	4770      	bx	lr

08003114 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003114:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003118:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800311a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800311e:	684c      	ldr	r4, [r1, #4]
 8003120:	4284      	cmp	r4, r0
 8003122:	d104      	bne.n	800312e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003124:	2000      	movs	r0, #0
 8003126:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800312a:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800312c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800312e:	3301      	adds	r3, #1
 8003130:	2b08      	cmp	r3, #8
 8003132:	d1f2      	bne.n	800311a <vQueueUnregisterQueue+0x6>
 8003134:	e7fa      	b.n	800312c <vQueueUnregisterQueue+0x18>
 8003136:	bf00      	nop
 8003138:	20002cd0 	.word	0x20002cd0

0800313c <vQueueDelete>:
{
 800313c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800313e:	4604      	mov	r4, r0
 8003140:	b940      	cbnz	r0, 8003154 <vQueueDelete+0x18>
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	e7fe      	b.n	8003152 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8003154:	f7ff ffde 	bl	8003114 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8003158:	4620      	mov	r0, r4
}
 800315a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 800315e:	f000 bfc9 	b.w	80040f4 <vPortFree>
	...

08003164 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <prvResetNextTaskUnblockTime+0x1c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	b91a      	cbnz	r2, 8003174 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003170:	605a      	str	r2, [r3, #4]
	}
}
 8003172:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	e7f8      	b.n	8003170 <prvResetNextTaskUnblockTime+0xc>
 800317e:	bf00      	nop
 8003180:	20002d10 	.word	0x20002d10

08003184 <prvAddCurrentTaskToDelayedList.constprop.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003184:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003186:	4c12      	ldr	r4, [pc, #72]	; (80031d0 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003188:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 800318a:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800318c:	68e0      	ldr	r0, [r4, #12]
 800318e:	3004      	adds	r0, #4
 8003190:	f7ff fb4b 	bl	800282a <uxListRemove>
 8003194:	b938      	cbnz	r0, 80031a6 <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003196:	68e2      	ldr	r2, [r4, #12]
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800319c:	2201      	movs	r2, #1
 800319e:	408a      	lsls	r2, r1
 80031a0:	ea23 0302 	bic.w	r3, r3, r2
 80031a4:	6123      	str	r3, [r4, #16]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	1975      	adds	r5, r6, r5
 80031aa:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80031ac:	d306      	bcc.n	80031bc <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ae:	6960      	ldr	r0, [r4, #20]
 80031b0:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b6:	3104      	adds	r1, #4
 80031b8:	f7ff bb20 	b.w	80027fc <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	68e1      	ldr	r1, [r4, #12]
 80031c0:	3104      	adds	r1, #4
 80031c2:	f7ff fb1b 	bl	80027fc <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80031c6:	6863      	ldr	r3, [r4, #4]
 80031c8:	429d      	cmp	r5, r3
				xNextTaskUnblockTime = xTimeToWake;
 80031ca:	bf38      	it	cc
 80031cc:	6065      	strcc	r5, [r4, #4]
}
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	20002d10 	.word	0x20002d10

080031d4 <prvIdleTask>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d4:	4c13      	ldr	r4, [pc, #76]	; (8003224 <prvIdleTask+0x50>)
{
 80031d6:	b580      	push	{r7, lr}
				taskYIELD();
 80031d8:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 80031dc:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031e2:	b94b      	cbnz	r3, 80031f8 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d9fa      	bls.n	80031e0 <prvIdleTask+0xc>
				taskYIELD();
 80031ea:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	e7f3      	b.n	80031e0 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 80031f8:	f001 f81c 	bl	8004234 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031fe:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003200:	1d28      	adds	r0, r5, #4
 8003202:	f7ff fb12 	bl	800282a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003208:	3b01      	subs	r3, #1
 800320a:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 800320c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800320e:	3b01      	subs	r3, #1
 8003210:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8003212:	f001 f82f 	bl	8004274 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003216:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003218:	f000 ff6c 	bl	80040f4 <vPortFree>
			vPortFree( pxTCB );
 800321c:	4628      	mov	r0, r5
 800321e:	f000 ff69 	bl	80040f4 <vPortFree>
	}
 8003222:	e7dd      	b.n	80031e0 <prvIdleTask+0xc>
 8003224:	20002d10 	.word	0x20002d10

08003228 <xTaskCreate>:
	{
 8003228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800322c:	0096      	lsls	r6, r2, #2
	{
 800322e:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003230:	4630      	mov	r0, r6
	{
 8003232:	460d      	mov	r5, r1
 8003234:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003236:	f000 fed9 	bl	8003fec <pvPortMalloc>
			if( pxStack != NULL )
 800323a:	4681      	mov	r9, r0
 800323c:	b1a0      	cbz	r0, 8003268 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800323e:	205c      	movs	r0, #92	; 0x5c
 8003240:	f000 fed4 	bl	8003fec <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003244:	4604      	mov	r4, r0
 8003246:	b160      	cbz	r0, 8003262 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8003248:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800324c:	4632      	mov	r2, r6
 800324e:	21a5      	movs	r1, #165	; 0xa5
 8003250:	4648      	mov	r0, r9
 8003252:	f008 fab5 	bl	800b7c0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003256:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 800325a:	b945      	cbnz	r5, 800326e <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800325c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8003260:	e013      	b.n	800328a <xTaskCreate+0x62>
					vPortFree( pxStack );
 8003262:	4648      	mov	r0, r9
 8003264:	f000 ff46 	bl	80040f4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003268:	f04f 36ff 	mov.w	r6, #4294967295
 800326c:	e088      	b.n	8003380 <xTaskCreate+0x158>
 800326e:	1e6b      	subs	r3, r5, #1
 8003270:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003274:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003276:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800327a:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800327e:	b108      	cbz	r0, 8003284 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003280:	429d      	cmp	r5, r3
 8003282:	d1f8      	bne.n	8003276 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003284:	2300      	movs	r3, #0
 8003286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800328a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800328c:	2d06      	cmp	r5, #6
 800328e:	bf28      	it	cs
 8003290:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003292:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003296:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800329a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800329c:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800329e:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 80032a0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032a4:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032a6:	f7ff fa9a 	bl	80027de <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032aa:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032ae:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032b2:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032b4:	f7ff fa93 	bl	80027de <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80032b8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032c0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032c2:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c6:	4642      	mov	r2, r8
 80032c8:	4639      	mov	r1, r7
 80032ca:	f026 0007 	bic.w	r0, r6, #7
 80032ce:	f000 ff87 	bl	80041e0 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80032d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032d4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80032d6:	b103      	cbz	r3, 80032da <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d8:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 80032da:	4d30      	ldr	r5, [pc, #192]	; (800339c <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 80032dc:	f000 ffaa 	bl	8004234 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80032e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032e2:	3301      	adds	r3, #1
 80032e4:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 80032e6:	68ee      	ldr	r6, [r5, #12]
 80032e8:	f105 0734 	add.w	r7, r5, #52	; 0x34
 80032ec:	2e00      	cmp	r6, #0
 80032ee:	d14a      	bne.n	8003386 <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 80032f0:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d11c      	bne.n	8003332 <xTaskCreate+0x10a>
 80032f8:	46b8      	mov	r8, r7
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032fa:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032fc:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032fe:	f7ff fa63 	bl	80027c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003302:	2e07      	cmp	r6, #7
 8003304:	f108 0814 	add.w	r8, r8, #20
 8003308:	d1f7      	bne.n	80032fa <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 800330a:	4e25      	ldr	r6, [pc, #148]	; (80033a0 <xTaskCreate+0x178>)
 800330c:	4630      	mov	r0, r6
	vListInitialise( &xDelayedTaskList2 );
 800330e:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8003312:	f7ff fa59 	bl	80027c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff fa56 	bl	80027c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800331c:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8003320:	f7ff fa52 	bl	80027c8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003324:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8003328:	f7ff fa4e 	bl	80027c8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800332c:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800332e:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8003332:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8003336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003338:	6929      	ldr	r1, [r5, #16]
		uxTaskNumber++;
 800333a:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800333c:	2601      	movs	r6, #1
		uxTaskNumber++;
 800333e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003342:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003344:	2014      	movs	r0, #20
 8003346:	fa06 f302 	lsl.w	r3, r6, r2
 800334a:	430b      	orrs	r3, r1
 800334c:	fb00 7002 	mla	r0, r0, r2, r7
 8003350:	4649      	mov	r1, r9
 8003352:	612b      	str	r3, [r5, #16]
 8003354:	f7ff fa46 	bl	80027e4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003358:	f000 ff8c 	bl	8004274 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800335c:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8003360:	b173      	cbz	r3, 8003380 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003362:	68eb      	ldr	r3, [r5, #12]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003368:	429a      	cmp	r2, r3
 800336a:	d209      	bcs.n	8003380 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 800336c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	f3bf 8f6f 	isb	sy
	}
 8003380:	4630      	mov	r0, r6
 8003382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003386:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1d1      	bne.n	8003332 <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800338e:	68eb      	ldr	r3, [r5, #12]
 8003390:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003396:	bf28      	it	cs
 8003398:	60ec      	strcs	r4, [r5, #12]
 800339a:	e7ca      	b.n	8003332 <xTaskCreate+0x10a>
 800339c:	20002d10 	.word	0x20002d10
 80033a0:	20002dd0 	.word	0x20002dd0

080033a4 <vTaskDelete>:
	{
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4605      	mov	r5, r0
 80033a8:	4c2a      	ldr	r4, [pc, #168]	; (8003454 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80033aa:	f000 ff43 	bl	8004234 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80033ae:	b905      	cbnz	r5, 80033b2 <vTaskDelete+0xe>
 80033b0:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033b2:	1d2e      	adds	r6, r5, #4
 80033b4:	4630      	mov	r0, r6
 80033b6:	f7ff fa38 	bl	800282a <uxListRemove>
 80033ba:	b958      	cbnz	r0, 80033d4 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80033bc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80033be:	2014      	movs	r0, #20
 80033c0:	fb00 4001 	mla	r0, r0, r1, r4
 80033c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033c6:	b92b      	cbnz	r3, 80033d4 <vTaskDelete+0x30>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	2201      	movs	r2, #1
 80033cc:	408a      	lsls	r2, r1
 80033ce:	ea23 0302 	bic.w	r3, r3, r2
 80033d2:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80033d6:	b11b      	cbz	r3, 80033e0 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d8:	f105 0018 	add.w	r0, r5, #24
 80033dc:	f7ff fa25 	bl	800282a <uxListRemove>
			uxTaskNumber++;
 80033e0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80033e4:	3301      	adds	r3, #1
 80033e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	d11a      	bne.n	8003426 <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80033f0:	4819      	ldr	r0, [pc, #100]	; (8003458 <vTaskDelete+0xb4>)
 80033f2:	4631      	mov	r1, r6
 80033f4:	f7ff f9f6 	bl	80027e4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80033f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033fa:	3301      	adds	r3, #1
 80033fc:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 80033fe:	f000 ff39 	bl	8004274 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003402:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003406:	b323      	cbz	r3, 8003452 <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 8003408:	68e3      	ldr	r3, [r4, #12]
 800340a:	42ab      	cmp	r3, r5
 800340c:	d121      	bne.n	8003452 <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 800340e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003412:	b1a3      	cbz	r3, 800343e <vTaskDelete+0x9a>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	e7fe      	b.n	8003424 <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 8003426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003428:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 800342a:	3b01      	subs	r3, #1
 800342c:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 800342e:	f000 fe61 	bl	80040f4 <vPortFree>
			vPortFree( pxTCB );
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fe5e 	bl	80040f4 <vPortFree>
				prvResetNextTaskUnblockTime();
 8003438:	f7ff fe94 	bl	8003164 <prvResetNextTaskUnblockTime>
 800343c:	e7df      	b.n	80033fe <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 800343e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	f3bf 8f6f 	isb	sy
	}
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	20002d10 	.word	0x20002d10
 8003458:	20002d28 	.word	0x20002d28

0800345c <eTaskGetState>:
	{
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 800345e:	4605      	mov	r5, r0
 8003460:	b940      	cbnz	r0, 8003474 <eTaskGetState+0x18>
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	e7fe      	b.n	8003472 <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003474:	4c0e      	ldr	r4, [pc, #56]	; (80034b0 <eTaskGetState+0x54>)
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	4283      	cmp	r3, r0
 800347a:	d012      	beq.n	80034a2 <eTaskGetState+0x46>
			taskENTER_CRITICAL();
 800347c:	f000 feda 	bl	8004234 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003480:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003482:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003484:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 8003486:	f000 fef5 	bl	8004274 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800348a:	42bd      	cmp	r5, r7
 800348c:	d00b      	beq.n	80034a6 <eTaskGetState+0x4a>
 800348e:	42b5      	cmp	r5, r6
 8003490:	d009      	beq.n	80034a6 <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003492:	3418      	adds	r4, #24
 8003494:	42a5      	cmp	r5, r4
 8003496:	d008      	beq.n	80034aa <eTaskGetState+0x4e>
				eReturn = eReady;
 8003498:	2d00      	cmp	r5, #0
 800349a:	bf0c      	ite	eq
 800349c:	2004      	moveq	r0, #4
 800349e:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80034a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 80034a2:	2000      	movs	r0, #0
 80034a4:	e7fc      	b.n	80034a0 <eTaskGetState+0x44>
				eReturn = eBlocked;
 80034a6:	2002      	movs	r0, #2
 80034a8:	e7fa      	b.n	80034a0 <eTaskGetState+0x44>
					eReturn = eDeleted;
 80034aa:	2004      	movs	r0, #4
 80034ac:	e7f8      	b.n	80034a0 <eTaskGetState+0x44>
 80034ae:	bf00      	nop
 80034b0:	20002d10 	.word	0x20002d10

080034b4 <vTaskStartScheduler>:
{
 80034b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80034b6:	4c17      	ldr	r4, [pc, #92]	; (8003514 <vTaskStartScheduler+0x60>)
 80034b8:	4917      	ldr	r1, [pc, #92]	; (8003518 <vTaskStartScheduler+0x64>)
 80034ba:	4818      	ldr	r0, [pc, #96]	; (800351c <vTaskStartScheduler+0x68>)
 80034bc:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80034c0:	2500      	movs	r5, #0
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	9500      	str	r5, [sp, #0]
 80034c6:	462b      	mov	r3, r5
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	f7ff fead 	bl	8003228 <xTaskCreate>
	if( xReturn == pdPASS )
 80034ce:	2801      	cmp	r0, #1
 80034d0:	d112      	bne.n	80034f8 <vTaskStartScheduler+0x44>
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 80034e8:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034ec:	60a5      	str	r5, [r4, #8]
}
 80034ee:	b003      	add	sp, #12
 80034f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80034f4:	f000 bf2e 	b.w	8004354 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034f8:	3001      	adds	r0, #1
 80034fa:	d108      	bne.n	800350e <vTaskStartScheduler+0x5a>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	e7fe      	b.n	800350c <vTaskStartScheduler+0x58>
}
 800350e:	b003      	add	sp, #12
 8003510:	bd30      	pop	{r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20002d10 	.word	0x20002d10
 8003518:	0800d6b7 	.word	0x0800d6b7
 800351c:	080031d5 	.word	0x080031d5

08003520 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003520:	4a03      	ldr	r2, [pc, #12]	; (8003530 <vTaskSuspendAll+0x10>)
 8003522:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8003526:	3301      	adds	r3, #1
 8003528:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20002d10 	.word	0x20002d10

08003534 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003534:	4b01      	ldr	r3, [pc, #4]	; (800353c <xTaskGetTickCount+0x8>)
 8003536:	6898      	ldr	r0, [r3, #8]
}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20002d10 	.word	0x20002d10

08003540 <xTaskGetTickCountFromISR>:
{
 8003540:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003542:	f000 ff8b 	bl	800445c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003546:	4b01      	ldr	r3, [pc, #4]	; (800354c <xTaskGetTickCountFromISR+0xc>)
 8003548:	6898      	ldr	r0, [r3, #8]
}
 800354a:	bd08      	pop	{r3, pc}
 800354c:	20002d10 	.word	0x20002d10

08003550 <xTaskIncrementTick>:
{
 8003550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003554:	4c36      	ldr	r4, [pc, #216]	; (8003630 <xTaskIncrementTick+0xe0>)
 8003556:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800355a:	2b00      	cmp	r3, #0
 800355c:	d160      	bne.n	8003620 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800355e:	68a7      	ldr	r7, [r4, #8]
 8003560:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003562:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003564:	b9b7      	cbnz	r7, 8003594 <xTaskIncrementTick+0x44>
			taskSWITCH_DELAYED_LISTS();
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b143      	cbz	r3, 800357e <xTaskIncrementTick+0x2e>
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	e7fe      	b.n	800357c <xTaskIncrementTick+0x2c>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	6962      	ldr	r2, [r4, #20]
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	6163      	str	r3, [r4, #20]
 8003586:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800358a:	3301      	adds	r3, #1
 800358c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003590:	f7ff fde8 	bl	8003164 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	429f      	cmp	r7, r3
BaseType_t xSwitchRequired = pdFALSE;
 8003598:	f04f 0500 	mov.w	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800359c:	d210      	bcs.n	80035c0 <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2214      	movs	r2, #20
 80035a4:	fb02 4303 	mla	r3, r2, r3, r4
 80035a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 80035aa:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 80035ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 80035b0:	bf28      	it	cs
 80035b2:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf18      	it	ne
 80035b8:	2501      	movne	r5, #1
}
 80035ba:	4628      	mov	r0, r5
 80035bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 80035c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003634 <xTaskIncrementTick+0xe4>
 80035c4:	f04f 0a01 	mov.w	sl, #1
 80035c8:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b91b      	cbnz	r3, 80035da <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 80035d6:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035d8:	e7e1      	b.n	800359e <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035e0:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80035e2:	429f      	cmp	r7, r3
 80035e4:	d3f7      	bcc.n	80035d6 <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e6:	f106 0b04 	add.w	fp, r6, #4
 80035ea:	4658      	mov	r0, fp
 80035ec:	f7ff f91d 	bl	800282a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80035f2:	b11b      	cbz	r3, 80035fc <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f4:	f106 0018 	add.w	r0, r6, #24
 80035f8:	f7ff f917 	bl	800282a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035fc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80035fe:	6922      	ldr	r2, [r4, #16]
 8003600:	fa0a f300 	lsl.w	r3, sl, r0
 8003604:	4313      	orrs	r3, r2
 8003606:	4659      	mov	r1, fp
 8003608:	fb09 8000 	mla	r0, r9, r0, r8
 800360c:	6123      	str	r3, [r4, #16]
 800360e:	f7ff f8e9 	bl	80027e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003612:	68e3      	ldr	r3, [r4, #12]
 8003614:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003618:	429a      	cmp	r2, r3
 800361a:	bf28      	it	cs
 800361c:	2501      	movcs	r5, #1
 800361e:	e7d5      	b.n	80035cc <xTaskIncrementTick+0x7c>
		++xPendedTicks;
 8003620:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003624:	3301      	adds	r3, #1
 8003626:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 800362a:	2500      	movs	r5, #0
	return xSwitchRequired;
 800362c:	e7c5      	b.n	80035ba <xTaskIncrementTick+0x6a>
 800362e:	bf00      	nop
 8003630:	20002d10 	.word	0x20002d10
 8003634:	20002d44 	.word	0x20002d44

08003638 <xTaskResumeAll>:
{
 8003638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800363c:	4c34      	ldr	r4, [pc, #208]	; (8003710 <xTaskResumeAll+0xd8>)
 800363e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003642:	b943      	cbnz	r3, 8003656 <xTaskResumeAll+0x1e>
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	e7fe      	b.n	8003654 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003656:	f000 fded 	bl	8004234 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800365a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800365e:	3b01      	subs	r3, #1
 8003660:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003664:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8003668:	b135      	cbz	r5, 8003678 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800366a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800366c:	f000 fe02 	bl	8004274 <vPortExitCritical>
}
 8003670:	4620      	mov	r0, r4
 8003672:	b002      	add	sp, #8
 8003674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003678:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f5      	beq.n	800366a <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 800367e:	2601      	movs	r6, #1
 8003680:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003684:	f04f 0814 	mov.w	r8, #20
 8003688:	e01d      	b.n	80036c6 <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800368a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800368e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003690:	f105 0018 	add.w	r0, r5, #24
 8003694:	f7ff f8c9 	bl	800282a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003698:	1d29      	adds	r1, r5, #4
 800369a:	4608      	mov	r0, r1
 800369c:	9101      	str	r1, [sp, #4]
 800369e:	f7ff f8c4 	bl	800282a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80036a4:	6922      	ldr	r2, [r4, #16]
 80036a6:	9901      	ldr	r1, [sp, #4]
 80036a8:	fa06 f300 	lsl.w	r3, r6, r0
 80036ac:	4313      	orrs	r3, r2
 80036ae:	fb08 7000 	mla	r0, r8, r0, r7
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	f7ff f896 	bl	80027e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b8:	68e3      	ldr	r3, [r4, #12]
 80036ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	429a      	cmp	r2, r3
 80036c0:	d301      	bcc.n	80036c6 <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 80036c2:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1dd      	bne.n	800368a <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 80036ce:	b10d      	cbz	r5, 80036d4 <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 80036d0:	f7ff fd48 	bl	8003164 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036d4:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 80036d8:	b14d      	cbz	r5, 80036ee <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80036da:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80036dc:	f7ff ff38 	bl	8003550 <xTaskIncrementTick>
 80036e0:	b108      	cbz	r0, 80036e6 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 80036e2:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036e6:	3d01      	subs	r5, #1
 80036e8:	d1f8      	bne.n	80036dc <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 80036ea:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 80036ee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0b9      	beq.n	800366a <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80036f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80036fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800370a:	2401      	movs	r4, #1
 800370c:	e7ae      	b.n	800366c <xTaskResumeAll+0x34>
 800370e:	bf00      	nop
 8003710:	20002d10 	.word	0x20002d10

08003714 <vTaskDelay>:
	{
 8003714:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003716:	b950      	cbnz	r0, 800372e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800371c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003720:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
	}
 800372c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <vTaskDelay+0x48>)
 8003730:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003734:	b143      	cbz	r3, 8003748 <vTaskDelay+0x34>
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	e7fe      	b.n	8003746 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003748:	f7ff feea 	bl	8003520 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800374c:	f7ff fd1a 	bl	8003184 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 8003750:	f7ff ff72 	bl	8003638 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003754:	2800      	cmp	r0, #0
 8003756:	d0df      	beq.n	8003718 <vTaskDelay+0x4>
 8003758:	e7e8      	b.n	800372c <vTaskDelay+0x18>
 800375a:	bf00      	nop
 800375c:	20002d10 	.word	0x20002d10

08003760 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003760:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <vTaskSwitchContext+0x60>)
 8003762:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 8003766:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003768:	b11b      	cbz	r3, 8003772 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
}
 8003770:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003772:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003776:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f1c3 031f 	rsb	r3, r3, #31
 8003782:	2114      	movs	r1, #20
 8003784:	4359      	muls	r1, r3
 8003786:	1850      	adds	r0, r2, r1
 8003788:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800378a:	b944      	cbnz	r4, 800379e <vTaskSwitchContext+0x3e>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	e7fe      	b.n	800379c <vTaskSwitchContext+0x3c>
 800379e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80037a0:	4411      	add	r1, r2
 80037a2:	6864      	ldr	r4, [r4, #4]
 80037a4:	6384      	str	r4, [r0, #56]	; 0x38
 80037a6:	313c      	adds	r1, #60	; 0x3c
 80037a8:	428c      	cmp	r4, r1
 80037aa:	bf04      	itt	eq
 80037ac:	6861      	ldreq	r1, [r4, #4]
 80037ae:	6381      	streq	r1, [r0, #56]	; 0x38
 80037b0:	2114      	movs	r1, #20
 80037b2:	fb01 2303 	mla	r3, r1, r3, r2
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	e7d8      	b.n	8003770 <vTaskSwitchContext+0x10>
 80037be:	bf00      	nop
 80037c0:	20002d10 	.word	0x20002d10

080037c4 <vTaskPlaceOnEventList>:
{
 80037c4:	b510      	push	{r4, lr}
 80037c6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80037c8:	b940      	cbnz	r0, 80037dc <vTaskPlaceOnEventList+0x18>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	e7fe      	b.n	80037da <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <vTaskPlaceOnEventList+0x2c>)
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	3118      	adds	r1, #24
 80037e2:	f7ff f80b 	bl	80027fc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037e6:	4620      	mov	r0, r4
}
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037ec:	f7ff bcca 	b.w	8003184 <prvAddCurrentTaskToDelayedList.constprop.0>
 80037f0:	20002d10 	.word	0x20002d10

080037f4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f4:	68c3      	ldr	r3, [r0, #12]
{
 80037f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80037fa:	b945      	cbnz	r5, 800380e <xTaskRemoveFromEventList+0x1a>
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	e7fe      	b.n	800380c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800380e:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003812:	4c15      	ldr	r4, [pc, #84]	; (8003868 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003814:	9101      	str	r1, [sp, #4]
 8003816:	4608      	mov	r0, r1
 8003818:	f7ff f807 	bl	800282a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003820:	9901      	ldr	r1, [sp, #4]
 8003822:	b9eb      	cbnz	r3, 8003860 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003824:	1d29      	adds	r1, r5, #4
 8003826:	4608      	mov	r0, r1
 8003828:	9101      	str	r1, [sp, #4]
 800382a:	f7fe fffe 	bl	800282a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800382e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003830:	6920      	ldr	r0, [r4, #16]
 8003832:	9901      	ldr	r1, [sp, #4]
 8003834:	2301      	movs	r3, #1
 8003836:	4093      	lsls	r3, r2
 8003838:	4303      	orrs	r3, r0
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2014      	movs	r0, #20
 800383e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8003842:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003846:	f7fe ffcd 	bl	80027e4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800384a:	68e3      	ldr	r3, [r4, #12]
 800384c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003852:	bf8a      	itet	hi
 8003854:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8003856:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003858:	f8c4 0110 	strhi.w	r0, [r4, #272]	; 0x110
}
 800385c:	b003      	add	sp, #12
 800385e:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003860:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003864:	e7ef      	b.n	8003846 <xTaskRemoveFromEventList+0x52>
 8003866:	bf00      	nop
 8003868:	20002d10 	.word	0x20002d10

0800386c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <vTaskInternalSetTimeOutState+0x10>)
 800386e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003872:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003874:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003876:	6043      	str	r3, [r0, #4]
}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20002d10 	.word	0x20002d10

08003880 <xTaskCheckForTimeOut>:
{
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003884:	4605      	mov	r5, r0
 8003886:	b940      	cbnz	r0, 800389a <xTaskCheckForTimeOut+0x1a>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	e7fe      	b.n	8003898 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800389a:	b941      	cbnz	r1, 80038ae <xTaskCheckForTimeOut+0x2e>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	e7fe      	b.n	80038ac <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80038ae:	f000 fcc1 	bl	8004234 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038b4:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80038b6:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038bc:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038be:	4298      	cmp	r0, r3
 80038c0:	d001      	beq.n	80038c6 <xTaskCheckForTimeOut+0x46>
 80038c2:	428a      	cmp	r2, r1
 80038c4:	d910      	bls.n	80038e8 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038c6:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038c8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038ca:	4283      	cmp	r3, r0
 80038cc:	d90a      	bls.n	80038e4 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 80038ce:	1a5b      	subs	r3, r3, r1
 80038d0:	4413      	add	r3, r2
 80038d2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038d4:	4628      	mov	r0, r5
 80038d6:	f7ff ffc9 	bl	800386c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80038dc:	f000 fcca 	bl	8004274 <vPortExitCritical>
}
 80038e0:	4620      	mov	r0, r4
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80038e8:	2401      	movs	r4, #1
 80038ea:	e7f7      	b.n	80038dc <xTaskCheckForTimeOut+0x5c>
 80038ec:	20002d10 	.word	0x20002d10

080038f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80038f0:	4b02      	ldr	r3, [pc, #8]	; (80038fc <vTaskMissedYield+0xc>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20002d10 	.word	0x20002d10

08003900 <vTaskGetInfo>:
	{
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	460c      	mov	r4, r1
 8003904:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8003906:	4605      	mov	r5, r0
 8003908:	b908      	cbnz	r0, 800390e <vTaskGetInfo+0xe>
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <vTaskGetInfo+0x60>)
 800390c:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800390e:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003910:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003914:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003916:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003918:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800391a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800391c:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800391e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003920:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003922:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003924:	6162      	str	r2, [r4, #20]
		if( eState != eInvalid )
 8003926:	2b05      	cmp	r3, #5
			pxTaskStatus->ulRunTimeCounter = 0;
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 800392e:	d00e      	beq.n	800394e <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 8003930:	490b      	ldr	r1, [pc, #44]	; (8003960 <vTaskGetInfo+0x60>)
 8003932:	68c9      	ldr	r1, [r1, #12]
 8003934:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 8003936:	bf0c      	ite	eq
 8003938:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 800393a:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 800393c:	b176      	cbz	r6, 800395c <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800393e:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 8003940:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003942:	5cca      	ldrb	r2, [r1, r3]
 8003944:	2aa5      	cmp	r2, #165	; 0xa5
 8003946:	d007      	beq.n	8003958 <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003948:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800394a:	8423      	strh	r3, [r4, #32]
	}
 800394c:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800394e:	4628      	mov	r0, r5
 8003950:	f7ff fd84 	bl	800345c <eTaskGetState>
 8003954:	7320      	strb	r0, [r4, #12]
 8003956:	e7f1      	b.n	800393c <vTaskGetInfo+0x3c>
			ulCount++;
 8003958:	3301      	adds	r3, #1
 800395a:	e7f2      	b.n	8003942 <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 800395c:	8426      	strh	r6, [r4, #32]
	}
 800395e:	e7f5      	b.n	800394c <vTaskGetInfo+0x4c>
 8003960:	20002d10 	.word	0x20002d10

08003964 <prvListTasksWithinSingleList>:
	{
 8003964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003968:	680d      	ldr	r5, [r1, #0]
	{
 800396a:	4606      	mov	r6, r0
 800396c:	460c      	mov	r4, r1
 800396e:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003970:	b325      	cbz	r5, 80039bc <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003972:	684b      	ldr	r3, [r1, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	f101 0808 	add.w	r8, r1, #8
 800397c:	4543      	cmp	r3, r8
 800397e:	bf04      	itt	eq
 8003980:	68cb      	ldreq	r3, [r1, #12]
 8003982:	604b      	streq	r3, [r1, #4]
 8003984:	684b      	ldr	r3, [r1, #4]
 8003986:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 800398a:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800398c:	f04f 0b24 	mov.w	fp, #36	; 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	4598      	cmp	r8, r3
 8003998:	bf04      	itt	eq
 800399a:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 800399e:	6063      	streq	r3, [r4, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80039a6:	fb0b 6105 	mla	r1, fp, r5, r6
 80039aa:	463b      	mov	r3, r7
 80039ac:	2201      	movs	r2, #1
 80039ae:	4648      	mov	r0, r9
 80039b0:	f7ff ffa6 	bl	8003900 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 80039b4:	45ca      	cmp	sl, r9
				uxTask++;
 80039b6:	f105 0501 	add.w	r5, r5, #1
			} while( pxNextTCB != pxFirstTCB );
 80039ba:	d1e9      	bne.n	8003990 <prvListTasksWithinSingleList+0x2c>
	}
 80039bc:	4628      	mov	r0, r5
 80039be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080039c4 <uxTaskGetSystemState>:
	{
 80039c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80039c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8003a48 <uxTaskGetSystemState+0x84>
	{
 80039cc:	4617      	mov	r7, r2
		vTaskSuspendAll();
 80039ce:	f7ff fda7 	bl	8003520 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80039d2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80039d6:	428b      	cmp	r3, r1
	{
 80039d8:	4605      	mov	r5, r0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80039da:	d830      	bhi.n	8003a3e <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80039dc:	2607      	movs	r6, #7
 80039de:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80039e0:	f04f 0b14 	mov.w	fp, #20
 80039e4:	f109 0a34 	add.w	sl, r9, #52	; 0x34
 80039e8:	f04f 0824 	mov.w	r8, #36	; 0x24
					uxQueue--;
 80039ec:	3e01      	subs	r6, #1
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80039ee:	fb08 5004 	mla	r0, r8, r4, r5
 80039f2:	2201      	movs	r2, #1
 80039f4:	fb0b a106 	mla	r1, fp, r6, sl
 80039f8:	f7ff ffb4 	bl	8003964 <prvListTasksWithinSingleList>
 80039fc:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fe:	2e00      	cmp	r6, #0
 8003a00:	d1f4      	bne.n	80039ec <uxTaskGetSystemState+0x28>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003a02:	f8d9 1000 	ldr.w	r1, [r9]
 8003a06:	2202      	movs	r2, #2
 8003a08:	fb08 5004 	mla	r0, r8, r4, r5
 8003a0c:	f7ff ffaa 	bl	8003964 <prvListTasksWithinSingleList>
 8003a10:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003a12:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8003a16:	2202      	movs	r2, #2
 8003a18:	fb08 5004 	mla	r0, r8, r4, r5
 8003a1c:	f7ff ffa2 	bl	8003964 <prvListTasksWithinSingleList>
 8003a20:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003a22:	fb08 5004 	mla	r0, r8, r4, r5
 8003a26:	4907      	ldr	r1, [pc, #28]	; (8003a44 <uxTaskGetSystemState+0x80>)
 8003a28:	2204      	movs	r2, #4
 8003a2a:	f7ff ff9b 	bl	8003964 <prvListTasksWithinSingleList>
 8003a2e:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8003a30:	b107      	cbz	r7, 8003a34 <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 8003a32:	603e      	str	r6, [r7, #0]
		( void ) xTaskResumeAll();
 8003a34:	f7ff fe00 	bl	8003638 <xTaskResumeAll>
	}
 8003a38:	4620      	mov	r0, r4
 8003a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003a3e:	2400      	movs	r4, #0
 8003a40:	e7f8      	b.n	8003a34 <uxTaskGetSystemState+0x70>
 8003a42:	bf00      	nop
 8003a44:	20002d28 	.word	0x20002d28
 8003a48:	20002d10 	.word	0x20002d10

08003a4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <xTaskGetSchedulerState+0x1c>)
 8003a4e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003a52:	b132      	cbz	r2, 8003a62 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2002      	moveq	r0, #2
 8003a5e:	2000      	movne	r0, #0
 8003a60:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a62:	2001      	movs	r0, #1
	}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20002d10 	.word	0x20002d10

08003a6c <xTaskPriorityInherit>:
	{
 8003a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003a6e:	4604      	mov	r4, r0
 8003a70:	2800      	cmp	r0, #0
 8003a72:	d030      	beq.n	8003ad6 <xTaskPriorityInherit+0x6a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a74:	4d20      	ldr	r5, [pc, #128]	; (8003af8 <xTaskPriorityInherit+0x8c>)
 8003a76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a78:	68ea      	ldr	r2, [r5, #12]
 8003a7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d232      	bcs.n	8003ae6 <xTaskPriorityInherit+0x7a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a80:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a82:	4e1e      	ldr	r6, [pc, #120]	; (8003afc <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a84:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a86:	bfa1      	itttt	ge
 8003a88:	68ea      	ldrge	r2, [r5, #12]
 8003a8a:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003a8c:	f1c2 0207 	rsbge	r2, r2, #7
 8003a90:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a92:	2214      	movs	r2, #20
 8003a94:	fb02 6303 	mla	r3, r2, r3, r6
 8003a98:	6942      	ldr	r2, [r0, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11d      	bne.n	8003ada <xTaskPriorityInherit+0x6e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a9e:	1d01      	adds	r1, r0, #4
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	9101      	str	r1, [sp, #4]
 8003aa4:	f7fe fec1 	bl	800282a <uxListRemove>
 8003aa8:	9901      	ldr	r1, [sp, #4]
 8003aaa:	b930      	cbnz	r0, 8003aba <xTaskPriorityInherit+0x4e>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003aac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003aae:	692b      	ldr	r3, [r5, #16]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4082      	lsls	r2, r0
 8003ab4:	ea23 0302 	bic.w	r3, r3, r2
 8003ab8:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003aba:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003abc:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003ac2:	2401      	movs	r4, #1
 8003ac4:	fa04 f203 	lsl.w	r2, r4, r3
 8003ac8:	4302      	orrs	r2, r0
 8003aca:	2014      	movs	r0, #20
 8003acc:	fb00 6003 	mla	r0, r0, r3, r6
 8003ad0:	612a      	str	r2, [r5, #16]
 8003ad2:	f7fe fe87 	bl	80027e4 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8003ad6:	4620      	mov	r0, r4
		return xReturn;
 8003ad8:	e003      	b.n	8003ae2 <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ada:	68eb      	ldr	r3, [r5, #12]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8003ae0:	2001      	movs	r0, #1
	}
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003ae6:	68eb      	ldr	r3, [r5, #12]
 8003ae8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003aea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003aec:	42a0      	cmp	r0, r4
 8003aee:	bf2c      	ite	cs
 8003af0:	2000      	movcs	r0, #0
 8003af2:	2001      	movcc	r0, #1
 8003af4:	e7f5      	b.n	8003ae2 <xTaskPriorityInherit+0x76>
 8003af6:	bf00      	nop
 8003af8:	20002d10 	.word	0x20002d10
 8003afc:	20002d44 	.word	0x20002d44

08003b00 <xTaskPriorityDisinherit>:
	{
 8003b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003b02:	4604      	mov	r4, r0
 8003b04:	b910      	cbnz	r0, 8003b0c <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8003b06:	2000      	movs	r0, #0
	}
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003b0c:	4d22      	ldr	r5, [pc, #136]	; (8003b98 <xTaskPriorityDisinherit+0x98>)
 8003b0e:	68eb      	ldr	r3, [r5, #12]
 8003b10:	4283      	cmp	r3, r0
 8003b12:	d008      	beq.n	8003b26 <xTaskPriorityDisinherit+0x26>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	e7fe      	b.n	8003b24 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	b943      	cbnz	r3, 8003b3c <xTaskPriorityDisinherit+0x3c>
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	e7fe      	b.n	8003b3a <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b3c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003b3e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003b40:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b42:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003b44:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b46:	d0de      	beq.n	8003b06 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1dc      	bne.n	8003b06 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4c:	1d01      	adds	r1, r0, #4
 8003b4e:	4608      	mov	r0, r1
 8003b50:	9101      	str	r1, [sp, #4]
 8003b52:	f7fe fe6a 	bl	800282a <uxListRemove>
 8003b56:	9901      	ldr	r1, [sp, #4]
 8003b58:	b958      	cbnz	r0, 8003b72 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b5c:	2014      	movs	r0, #20
 8003b5e:	fb00 5006 	mla	r0, r0, r6, r5
 8003b62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b64:	b92b      	cbnz	r3, 8003b72 <xTaskPriorityDisinherit+0x72>
 8003b66:	692b      	ldr	r3, [r5, #16]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	40b2      	lsls	r2, r6
 8003b6c:	ea23 0302 	bic.w	r3, r3, r2
 8003b70:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8003b74:	6928      	ldr	r0, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b76:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b78:	f1c3 0207 	rsb	r2, r3, #7
 8003b7c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b7e:	2401      	movs	r4, #1
 8003b80:	fa04 f203 	lsl.w	r2, r4, r3
 8003b84:	4302      	orrs	r2, r0
 8003b86:	612a      	str	r2, [r5, #16]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <xTaskPriorityDisinherit+0x9c>)
 8003b8a:	2014      	movs	r0, #20
 8003b8c:	fb00 2003 	mla	r0, r0, r3, r2
 8003b90:	f7fe fe28 	bl	80027e4 <vListInsertEnd>
					xReturn = pdTRUE;
 8003b94:	4620      	mov	r0, r4
		return xReturn;
 8003b96:	e7b7      	b.n	8003b08 <xTaskPriorityDisinherit+0x8>
 8003b98:	20002d10 	.word	0x20002d10
 8003b9c:	20002d44 	.word	0x20002d44

08003ba0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d04a      	beq.n	8003c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ba8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003baa:	b942      	cbnz	r2, 8003bbe <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	e7fe      	b.n	8003bbc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003bbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003bc0:	4299      	cmp	r1, r3
 8003bc2:	bf38      	it	cc
 8003bc4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003bc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	d038      	beq.n	8003c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003bcc:	2a01      	cmp	r2, #1
 8003bce:	d136      	bne.n	8003c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					configASSERT( pxTCB != pxCurrentTCB );
 8003bd0:	4d1c      	ldr	r5, [pc, #112]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003bd2:	68ea      	ldr	r2, [r5, #12]
 8003bd4:	4282      	cmp	r2, r0
 8003bd6:	d108      	bne.n	8003bea <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	e7fe      	b.n	8003be8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bea:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003bec:	4e16      	ldr	r6, [pc, #88]	; (8003c48 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 8003bee:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bf0:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003bf2:	f04f 0214 	mov.w	r2, #20
 8003bf6:	fb02 6303 	mla	r3, r2, r3, r6
 8003bfa:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfc:	bfa4      	itt	ge
 8003bfe:	f1c1 0107 	rsbge	r1, r1, #7
 8003c02:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d11a      	bne.n	8003c3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c08:	1d01      	adds	r1, r0, #4
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	9101      	str	r1, [sp, #4]
 8003c0e:	f7fe fe0c 	bl	800282a <uxListRemove>
 8003c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c14:	9901      	ldr	r1, [sp, #4]
 8003c16:	b928      	cbnz	r0, 8003c24 <vTaskPriorityDisinheritAfterTimeout+0x84>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c18:	692b      	ldr	r3, [r5, #16]
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	4090      	lsls	r0, r2
 8003c1e:	ea23 0300 	bic.w	r3, r3, r0
 8003c22:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8003c24:	6928      	ldr	r0, [r5, #16]
 8003c26:	2301      	movs	r3, #1
 8003c28:	4093      	lsls	r3, r2
 8003c2a:	4303      	orrs	r3, r0
 8003c2c:	2014      	movs	r0, #20
 8003c2e:	fb00 6002 	mla	r0, r0, r2, r6
 8003c32:	612b      	str	r3, [r5, #16]
	}
 8003c34:	b002      	add	sp, #8
 8003c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8003c3a:	f7fe bdd3 	b.w	80027e4 <vListInsertEnd>
	}
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd70      	pop	{r4, r5, r6, pc}
 8003c42:	bf00      	nop
 8003c44:	20002d10 	.word	0x20002d10
 8003c48:	20002d44 	.word	0x20002d44

08003c4c <vTaskList>:
	{
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <vTaskList+0xb4>)
		*pcWriteBuffer = ( char ) 0x00;
 8003c52:	2700      	movs	r7, #0
		uxArraySize = uxCurrentNumberOfTasks;
 8003c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		*pcWriteBuffer = ( char ) 0x00;
 8003c56:	7007      	strb	r7, [r0, #0]
	{
 8003c58:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003c5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	{
 8003c5c:	b085      	sub	sp, #20
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003c5e:	f04f 0a24 	mov.w	sl, #36	; 0x24
 8003c62:	fb0a f000 	mul.w	r0, sl, r0
		uxArraySize = uxCurrentNumberOfTasks;
 8003c66:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003c68:	f000 f9c0 	bl	8003fec <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d042      	beq.n	8003cf8 <vTaskList+0xac>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8003c72:	9903      	ldr	r1, [sp, #12]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003c74:	f8df b090 	ldr.w	fp, [pc, #144]	; 8003d08 <vTaskList+0xbc>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8003c78:	463a      	mov	r2, r7
 8003c7a:	f7ff fea3 	bl	80039c4 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 8003c7e:	4635      	mov	r5, r6
 8003c80:	fb0a 6a00 	mla	sl, sl, r0, r6
 8003c84:	45aa      	cmp	sl, r5
 8003c86:	d105      	bne.n	8003c94 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 8003c88:	4630      	mov	r0, r6
	}
 8003c8a:	b005      	add	sp, #20
 8003c8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 8003c90:	f000 ba30 	b.w	80040f4 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8003c94:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 8003c96:	6869      	ldr	r1, [r5, #4]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	bf98      	it	ls
 8003c9c:	4a19      	ldrls	r2, [pc, #100]	; (8003d04 <vTaskList+0xb8>)
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	bf94      	ite	ls
 8003ca2:	f812 9003 	ldrbls.w	r9, [r2, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8003ca6:	f04f 0900 	movhi.w	r9, #0
		strcpy( pcBuffer, pcTaskName );
 8003caa:	f007 fe16 	bl	800b8da <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7fc fa9e 	bl	80001f0 <strlen>
			pcBuffer[ x ] = ' ';
 8003cb4:	280f      	cmp	r0, #15
 8003cb6:	f1c0 020f 	rsb	r2, r0, #15
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003cba:	4680      	mov	r8, r0
			pcBuffer[ x ] = ' ';
 8003cbc:	bf88      	it	hi
 8003cbe:	2200      	movhi	r2, #0
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	1820      	adds	r0, r4, r0
 8003cc4:	9203      	str	r2, [sp, #12]
 8003cc6:	f007 fd7b 	bl	800b7c0 <memset>
 8003cca:	9a03      	ldr	r2, [sp, #12]
 8003ccc:	eb08 0002 	add.w	r0, r8, r2
 8003cd0:	eb04 0800 	add.w	r8, r4, r0
		pcBuffer[ x ] = ( char ) 0x00;
 8003cd4:	5427      	strb	r7, [r4, r0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003cd6:	68ab      	ldr	r3, [r5, #8]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	8c2b      	ldrh	r3, [r5, #32]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	692b      	ldr	r3, [r5, #16]
 8003ce0:	464a      	mov	r2, r9
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	f007 fdc9 	bl	800b87c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8003cea:	4640      	mov	r0, r8
 8003cec:	f7fc fa80 	bl	80001f0 <strlen>
 8003cf0:	3524      	adds	r5, #36	; 0x24
 8003cf2:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 8003cf6:	e7c5      	b.n	8003c84 <vTaskList+0x38>
	}
 8003cf8:	b005      	add	sp, #20
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfe:	bf00      	nop
 8003d00:	20002d10 	.word	0x20002d10
 8003d04:	0800d3bc 	.word	0x0800d3bc
 8003d08:	0800d6bc 	.word	0x0800d6bc

08003d0c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <pvTaskIncrementMutexHeldCount+0x14>)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	b11a      	cbz	r2, 8003d1a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003d12:	68d9      	ldr	r1, [r3, #12]
 8003d14:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003d16:	3201      	adds	r2, #1
 8003d18:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8003d1a:	68d8      	ldr	r0, [r3, #12]
	}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20002d10 	.word	0x20002d10

08003d24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d24:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003d26:	f7ff fbc5 	bl	80034b4 <vTaskStartScheduler>
  
  return osOK;
}
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	bd08      	pop	{r3, pc}

08003d2e <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d2e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8003d32:	b10b      	cbz	r3, 8003d38 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8003d34:	f7ff bc04 	b.w	8003540 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8003d38:	f7ff bbfc 	b.w	8003534 <xTaskGetTickCount>

08003d3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d3c:	b530      	push	{r4, r5, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d42:	8a22      	ldrh	r2, [r4, #16]
 8003d44:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8003d48:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003d4a:	bf14      	ite	ne
 8003d4c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d4e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d50:	ad03      	add	r5, sp, #12
{
 8003d52:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d54:	e9d0 1000 	ldrd	r1, r0, [r0]
 8003d58:	e9cd 4500 	strd	r4, r5, [sp]
 8003d5c:	f7ff fa64 	bl	8003228 <xTaskCreate>
 8003d60:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d62:	bf0c      	ite	eq
 8003d64:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003d66:	2000      	movne	r0, #0
}
 8003d68:	b005      	add	sp, #20
 8003d6a:	bd30      	pop	{r4, r5, pc}

08003d6c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003d6c:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003d6e:	f7ff fb19 	bl	80033a4 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8003d72:	2000      	movs	r0, #0
 8003d74:	bd08      	pop	{r3, pc}

08003d76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d76:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d78:	2801      	cmp	r0, #1
 8003d7a:	bf38      	it	cc
 8003d7c:	2001      	movcc	r0, #1
 8003d7e:	f7ff fcc9 	bl	8003714 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd08      	pop	{r3, pc}

08003d86 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003d86:	2001      	movs	r0, #1
 8003d88:	f7fe bf21 	b.w	8002bce <xQueueCreateMutex>

08003d8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003d8c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003d8e:	2400      	movs	r4, #0
 8003d90:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8003d92:	b1f0      	cbz	r0, 8003dd2 <osMutexWait+0x46>
 8003d94:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003d98:	b1ab      	cbz	r3, 8003dc6 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003d9a:	aa01      	add	r2, sp, #4
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f7ff f949 	bl	8003034 <xQueueReceiveFromISR>
 8003da2:	2801      	cmp	r0, #1
 8003da4:	d113      	bne.n	8003dce <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003da6:	9b01      	ldr	r3, [sp, #4]
 8003da8:	b913      	cbnz	r3, 8003db0 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	b002      	add	sp, #8
 8003dae:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8003db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	e7f1      	b.n	8003daa <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003dc6:	f7ff f872 	bl	8002eae <xQueueSemaphoreTake>
 8003dca:	2801      	cmp	r0, #1
 8003dcc:	d0ed      	beq.n	8003daa <osMutexWait+0x1e>
    return osErrorOS;
 8003dce:	20ff      	movs	r0, #255	; 0xff
 8003dd0:	e7ec      	b.n	8003dac <osMutexWait+0x20>
    return osErrorParameter;
 8003dd2:	2080      	movs	r0, #128	; 0x80
 8003dd4:	e7ea      	b.n	8003dac <osMutexWait+0x20>

08003dd6 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003dd6:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8003dd8:	2400      	movs	r4, #0
 8003dda:	9401      	str	r4, [sp, #4]
 8003ddc:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8003de0:	b1a3      	cbz	r3, 8003e0c <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003de2:	a901      	add	r1, sp, #4
 8003de4:	f7fe ff70 	bl	8002cc8 <xQueueGiveFromISR>
 8003de8:	2801      	cmp	r0, #1
 8003dea:	d115      	bne.n	8003e18 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003dec:	9b01      	ldr	r3, [sp, #4]
 8003dee:	b913      	cbnz	r3, 8003df6 <osMutexRelease+0x20>
  osStatus result = osOK;
 8003df0:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8003df2:	b002      	add	sp, #8
 8003df4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003df6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	e7f1      	b.n	8003df0 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fe fe2a 	bl	8002a68 <xQueueGenericSend>
 8003e14:	2801      	cmp	r0, #1
 8003e16:	d0eb      	beq.n	8003df0 <osMutexRelease+0x1a>
    result = osErrorOS;
 8003e18:	20ff      	movs	r0, #255	; 0xff
 8003e1a:	e7ea      	b.n	8003df2 <osMutexRelease+0x1c>

08003e1c <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8003e22:	b91c      	cbnz	r4, 8003e2c <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8003e24:	f7ff f98a 	bl	800313c <vQueueDelete>

  return osOK;
}
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8003e2c:	2482      	movs	r4, #130	; 0x82
 8003e2e:	e7fb      	b.n	8003e28 <osMutexDelete+0xc>

08003e30 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003e30:	2901      	cmp	r1, #1
{ 
 8003e32:	b510      	push	{r4, lr}
 8003e34:	4608      	mov	r0, r1
  if (count == 1) {
 8003e36:	d10c      	bne.n	8003e52 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8003e38:	2203      	movs	r2, #3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f7fe fdd2 	bl	80029e4 <xQueueGenericCreate>
 8003e40:	4604      	mov	r4, r0
 8003e42:	b120      	cbz	r0, 8003e4e <osSemaphoreCreate+0x1e>
 8003e44:	2300      	movs	r3, #0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fe fe0d 	bl	8002a68 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8003e4e:	4620      	mov	r0, r4
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8003e56:	f7fe bde9 	b.w	8002a2c <xQueueCreateCountingSemaphore>

08003e5a <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003e5a:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003e5c:	2400      	movs	r4, #0
 8003e5e:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8003e60:	b1f0      	cbz	r0, 8003ea0 <osSemaphoreWait+0x46>
 8003e62:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003e66:	b1ab      	cbz	r3, 8003e94 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003e68:	aa01      	add	r2, sp, #4
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	f7ff f8e2 	bl	8003034 <xQueueReceiveFromISR>
 8003e70:	2801      	cmp	r0, #1
 8003e72:	d113      	bne.n	8003e9c <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	b913      	cbnz	r3, 8003e7e <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8003e78:	2000      	movs	r0, #0
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8003e7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	e7f1      	b.n	8003e78 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003e94:	f7ff f80b 	bl	8002eae <xQueueSemaphoreTake>
 8003e98:	2801      	cmp	r0, #1
 8003e9a:	d0ed      	beq.n	8003e78 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8003e9c:	20ff      	movs	r0, #255	; 0xff
 8003e9e:	e7ec      	b.n	8003e7a <osSemaphoreWait+0x20>
    return osErrorParameter;
 8003ea0:	2080      	movs	r0, #128	; 0x80
 8003ea2:	e7ea      	b.n	8003e7a <osSemaphoreWait+0x20>

08003ea4 <osSemaphoreRelease>:
 8003ea4:	f7ff bf97 	b.w	8003dd6 <osMutexRelease>

08003ea8 <osSemaphoreDelete>:
 8003ea8:	f7ff bfb8 	b.w	8003e1c <osMutexDelete>

08003eac <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003eac:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f7fe bd97 	b.w	80029e4 <xQueueGenericCreate>

08003eb6 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003eb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8003eb8:	2400      	movs	r4, #0
{
 8003eba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ebc:	9403      	str	r4, [sp, #12]
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8003ec2:	b1b3      	cbz	r3, 8003ef2 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	aa03      	add	r2, sp, #12
 8003ec8:	a901      	add	r1, sp, #4
 8003eca:	f7fe fe9b 	bl	8002c04 <xQueueGenericSendFromISR>
 8003ece:	2801      	cmp	r0, #1
 8003ed0:	d117      	bne.n	8003f02 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	b913      	cbnz	r3, 8003edc <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8003ed6:	2000      	movs	r0, #0
}
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	e7f1      	b.n	8003ed6 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003ef2:	2a01      	cmp	r2, #1
 8003ef4:	bf38      	it	cc
 8003ef6:	2201      	movcc	r2, #1
 8003ef8:	a901      	add	r1, sp, #4
 8003efa:	f7fe fdb5 	bl	8002a68 <xQueueGenericSend>
 8003efe:	2801      	cmp	r0, #1
 8003f00:	d0e9      	beq.n	8003ed6 <osMessagePut+0x20>
      return osErrorOS;
 8003f02:	20ff      	movs	r0, #255	; 0xff
 8003f04:	e7e8      	b.n	8003ed8 <osMessagePut+0x22>

08003f06 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003f06:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8003f08:	2300      	movs	r3, #0
{
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8003f10:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8003f12:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8003f14:	ad01      	add	r5, sp, #4
 8003f16:	b911      	cbnz	r1, 8003f1e <osMessageGet+0x18>
    event.status = osErrorParameter;
 8003f18:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	e018      	b.n	8003f50 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8003f24:	b1db      	cbz	r3, 8003f5e <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003f26:	466a      	mov	r2, sp
 8003f28:	a902      	add	r1, sp, #8
 8003f2a:	f7ff f883 	bl	8003034 <xQueueReceiveFromISR>
      event.status = osOK;
 8003f2e:	2801      	cmp	r0, #1
 8003f30:	bf0c      	ite	eq
 8003f32:	2310      	moveq	r3, #16
 8003f34:	2300      	movne	r3, #0
 8003f36:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8003f38:	9b00      	ldr	r3, [sp, #0]
 8003f3a:	b14b      	cbz	r3, 8003f50 <osMessageGet+0x4a>
 8003f3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 8003f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003f58:	4620      	mov	r0, r4
 8003f5a:	b004      	add	sp, #16
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003f5e:	a902      	add	r1, sp, #8
 8003f60:	f7fe ff06 	bl	8002d70 <xQueueReceive>
 8003f64:	2801      	cmp	r0, #1
 8003f66:	d101      	bne.n	8003f6c <osMessageGet+0x66>
      event.status = osEventMessage;
 8003f68:	2310      	movs	r3, #16
 8003f6a:	e7d6      	b.n	8003f1a <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003f6c:	2e00      	cmp	r6, #0
 8003f6e:	bf18      	it	ne
 8003f70:	2640      	movne	r6, #64	; 0x40
 8003f72:	9601      	str	r6, [sp, #4]
 8003f74:	e7ec      	b.n	8003f50 <osMessageGet+0x4a>

08003f76 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003f76:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f78:	f7ff fd68 	bl	8003a4c <xTaskGetSchedulerState>
 8003f7c:	2801      	cmp	r0, #1
 8003f7e:	d003      	beq.n	8003f88 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003f80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003f84:	f000 b9be 	b.w	8004304 <xPortSysTickHandler>
}
 8003f88:	bd08      	pop	{r3, pc}

08003f8a <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8003f8a:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 8003f8c:	f7ff fe5e 	bl	8003c4c <vTaskList>
#endif
  return osOK;
}
 8003f90:	2000      	movs	r0, #0
 8003f92:	bd08      	pop	{r3, pc}

08003f94 <osMessageWaiting>:
 8003f94:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8003f98:	b10b      	cbz	r3, 8003f9e <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003f9a:	f7ff b8af 	b.w	80030fc <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8003f9e:	f7ff b898 	b.w	80030d2 <uxQueueMessagesWaiting>

08003fa2 <osMessageDelete>:
 8003fa2:	f7ff bf3b 	b.w	8003e1c <osMutexDelete>
	...

08003fa8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <prvInsertBlockIntoFreeList+0x40>)
{
 8003faa:	b530      	push	{r4, r5, lr}
 8003fac:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fae:	461a      	mov	r2, r3
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4283      	cmp	r3, r0
 8003fb4:	d3fb      	bcc.n	8003fae <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fb6:	6854      	ldr	r4, [r2, #4]
 8003fb8:	1911      	adds	r1, r2, r4
 8003fba:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fbc:	bf01      	itttt	eq
 8003fbe:	6841      	ldreq	r1, [r0, #4]
 8003fc0:	4610      	moveq	r0, r2
 8003fc2:	1909      	addeq	r1, r1, r4
 8003fc4:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fc6:	6844      	ldr	r4, [r0, #4]
 8003fc8:	1901      	adds	r1, r0, r4
 8003fca:	428b      	cmp	r3, r1
 8003fcc:	d106      	bne.n	8003fdc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fce:	68a9      	ldr	r1, [r5, #8]
 8003fd0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fd2:	bf1f      	itttt	ne
 8003fd4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fd6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fd8:	1909      	addne	r1, r1, r4
 8003fda:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fdc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fde:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fe0:	bf18      	it	ne
 8003fe2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe4:	bd30      	pop	{r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20002e28 	.word	0x20002e28

08003fec <pvPortMalloc>:
{
 8003fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8003ff0:	4d3e      	ldr	r5, [pc, #248]	; (80040ec <pvPortMalloc+0x100>)
{
 8003ff2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003ff4:	f7ff fa94 	bl	8003520 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003ff8:	68ab      	ldr	r3, [r5, #8]
 8003ffa:	b9f3      	cbnz	r3, 800403a <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8003ffc:	493c      	ldr	r1, [pc, #240]	; (80040f0 <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ffe:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004000:	bf1f      	itttt	ne
 8004002:	1dcb      	addne	r3, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004004:	f023 0307 	bicne.w	r3, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004008:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
 800400c:	1ad2      	subne	r2, r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800400e:	bf14      	ite	ne
 8004010:	4619      	movne	r1, r3
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004012:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004016:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8004018:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800401a:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800401e:	2300      	movs	r3, #0
 8004020:	606b      	str	r3, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004022:	6029      	str	r1, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004024:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004028:	1a53      	subs	r3, r2, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800402a:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800402e:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	pxEnd = ( void * ) uxAddress;
 8004036:	60aa      	str	r2, [r5, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004038:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800403a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800403e:	ea18 0f04 	tst.w	r8, r4
 8004042:	d14e      	bne.n	80040e2 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8004044:	2c00      	cmp	r4, #0
 8004046:	d03f      	beq.n	80040c8 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8004048:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800404c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800404e:	bf1c      	itt	ne
 8004050:	f023 0307 	bicne.w	r3, r3, #7
 8004054:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004056:	2b00      	cmp	r3, #0
 8004058:	d043      	beq.n	80040e2 <pvPortMalloc+0xf6>
 800405a:	692f      	ldr	r7, [r5, #16]
 800405c:	429f      	cmp	r7, r3
 800405e:	d340      	bcc.n	80040e2 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8004060:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8004062:	4822      	ldr	r0, [pc, #136]	; (80040ec <pvPortMalloc+0x100>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004064:	6872      	ldr	r2, [r6, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d201      	bcs.n	800406e <pvPortMalloc+0x82>
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	b9a1      	cbnz	r1, 8004098 <pvPortMalloc+0xac>
				if( pxBlock != pxEnd )
 800406e:	68a9      	ldr	r1, [r5, #8]
 8004070:	42b1      	cmp	r1, r6
 8004072:	d036      	beq.n	80040e2 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004074:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004076:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004078:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800407a:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800407c:	2a10      	cmp	r2, #16
 800407e:	d912      	bls.n	80040a6 <pvPortMalloc+0xba>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004080:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004082:	0741      	lsls	r1, r0, #29
 8004084:	d00b      	beq.n	800409e <pvPortMalloc+0xb2>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	e7fe      	b.n	8004096 <pvPortMalloc+0xaa>
 8004098:	4630      	mov	r0, r6
 800409a:	460e      	mov	r6, r1
 800409c:	e7e2      	b.n	8004064 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800409e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040a0:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040a2:	f7ff ff81 	bl	8003fa8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040a6:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040a8:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040aa:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040ac:	ea48 0303 	orr.w	r3, r8, r3
 80040b0:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 80040b6:	69ab      	ldr	r3, [r5, #24]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040b8:	612f      	str	r7, [r5, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040ba:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 80040bc:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040c0:	bf38      	it	cc
 80040c2:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c4:	3408      	adds	r4, #8
					xNumberOfSuccessfulAllocations++;
 80040c6:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 80040c8:	f7ff fab6 	bl	8003638 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040cc:	0763      	lsls	r3, r4, #29
 80040ce:	d00a      	beq.n	80040e6 <pvPortMalloc+0xfa>
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	e7fe      	b.n	80040e0 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 80040e2:	2400      	movs	r4, #0
 80040e4:	e7f0      	b.n	80040c8 <pvPortMalloc+0xdc>
}
 80040e6:	4620      	mov	r0, r4
 80040e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ec:	20002e28 	.word	0x20002e28
 80040f0:	20002e48 	.word	0x20002e48

080040f4 <vPortFree>:
{
 80040f4:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 80040f6:	4604      	mov	r4, r0
 80040f8:	b380      	cbz	r0, 800415c <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040fa:	4d19      	ldr	r5, [pc, #100]	; (8004160 <vPortFree+0x6c>)
 80040fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004100:	696a      	ldr	r2, [r5, #20]
 8004102:	4213      	tst	r3, r2
 8004104:	d108      	bne.n	8004118 <vPortFree+0x24>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	e7fe      	b.n	8004116 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004118:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800411c:	b141      	cbz	r1, 8004130 <vPortFree+0x3c>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	e7fe      	b.n	800412e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004130:	ea23 0302 	bic.w	r3, r3, r2
 8004134:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004138:	f7ff f9f2 	bl	8003520 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800413c:	692a      	ldr	r2, [r5, #16]
 800413e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004142:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004146:	4413      	add	r3, r2
 8004148:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800414a:	f7ff ff2d 	bl	8003fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800414e:	69eb      	ldr	r3, [r5, #28]
 8004150:	3301      	adds	r3, #1
 8004152:	61eb      	str	r3, [r5, #28]
}
 8004154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8004158:	f7ff ba6e 	b.w	8003638 <xTaskResumeAll>
}
 800415c:	bd38      	pop	{r3, r4, r5, pc}
 800415e:	bf00      	nop
 8004160:	20002e28 	.word	0x20002e28

08004164 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004164:	4808      	ldr	r0, [pc, #32]	; (8004188 <prvPortStartFirstTask+0x24>)
 8004166:	6800      	ldr	r0, [r0, #0]
 8004168:	6800      	ldr	r0, [r0, #0]
 800416a:	f380 8808 	msr	MSP, r0
 800416e:	f04f 0000 	mov.w	r0, #0
 8004172:	f380 8814 	msr	CONTROL, r0
 8004176:	b662      	cpsie	i
 8004178:	b661      	cpsie	f
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	df00      	svc	0
 8004184:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004186:	0000      	.short	0x0000
 8004188:	e000ed08 	.word	0xe000ed08

0800418c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800418c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800419c <vPortEnableVFP+0x10>
 8004190:	6801      	ldr	r1, [r0, #0]
 8004192:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004196:	6001      	str	r1, [r0, #0]
 8004198:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800419a:	0000      	.short	0x0000
 800419c:	e000ed88 	.word	0xe000ed88

080041a0 <prvTaskExitError>:
{
 80041a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <prvTaskExitError+0x3c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	d008      	beq.n	80041c0 <prvTaskExitError+0x20>
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	e7fe      	b.n	80041be <prvTaskExitError+0x1e>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0fc      	beq.n	80041d0 <prvTaskExitError+0x30>
}
 80041d6:	b002      	add	sp, #8
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000020 	.word	0x20000020

080041e0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <pxPortInitialiseStack+0x28>)
 80041ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041ee:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041f2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041f6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041fa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041fe:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004202:	3844      	subs	r0, #68	; 0x44
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	080041a1 	.word	0x080041a1
 800420c:	00000000 	.word	0x00000000

08004210 <SVC_Handler>:
	__asm volatile (
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <pxCurrentTCBConst2>)
 8004212:	6819      	ldr	r1, [r3, #0]
 8004214:	6808      	ldr	r0, [r1, #0]
 8004216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421a:	f380 8809 	msr	PSP, r0
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f380 8811 	msr	BASEPRI, r0
 800422a:	4770      	bx	lr
 800422c:	f3af 8000 	nop.w

08004230 <pxCurrentTCBConst2>:
 8004230:	20002d1c 	.word	0x20002d1c

08004234 <vPortEnterCritical>:
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <vPortEnterCritical+0x3c>)
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800424a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800424c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800424e:	d10e      	bne.n	800426e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004254:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8004258:	b2db      	uxtb	r3, r3
 800425a:	b143      	cbz	r3, 800426e <vPortEnterCritical+0x3a>
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	e7fe      	b.n	800426c <vPortEnterCritical+0x38>
}
 800426e:	4770      	bx	lr
 8004270:	20000020 	.word	0x20000020

08004274 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <vPortExitCritical+0x24>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	b943      	cbnz	r3, 800428c <vPortExitCritical+0x18>
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	e7fe      	b.n	800428a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800428c:	3b01      	subs	r3, #1
 800428e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004290:	b90b      	cbnz	r3, 8004296 <vPortExitCritical+0x22>
	__asm volatile
 8004292:	f383 8811 	msr	BASEPRI, r3
}
 8004296:	4770      	bx	lr
 8004298:	20000020 	.word	0x20000020
 800429c:	00000000 	.word	0x00000000

080042a0 <PendSV_Handler>:
	__asm volatile
 80042a0:	f3ef 8009 	mrs	r0, PSP
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <pxCurrentTCBConst>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f01e 0f10 	tst.w	lr, #16
 80042b0:	bf08      	it	eq
 80042b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042c4:	f380 8811 	msr	BASEPRI, r0
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f7ff fa46 	bl	8003760 <vTaskSwitchContext>
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f380 8811 	msr	BASEPRI, r0
 80042dc:	bc09      	pop	{r0, r3}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e6:	f01e 0f10 	tst.w	lr, #16
 80042ea:	bf08      	it	eq
 80042ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042f0:	f380 8809 	msr	PSP, r0
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w

08004300 <pxCurrentTCBConst>:
 8004300:	20002d1c 	.word	0x20002d1c

08004304 <xPortSysTickHandler>:
{
 8004304:	b508      	push	{r3, lr}
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004316:	f7ff f91b 	bl	8003550 <xTaskIncrementTick>
 800431a:	b128      	cbz	r0, 8004328 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800431c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004324:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8004328:	2300      	movs	r3, #0
 800432a:	f383 8811 	msr	BASEPRI, r3
}
 800432e:	bd08      	pop	{r3, pc}

08004330 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004330:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004334:	2300      	movs	r3, #0
 8004336:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004338:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <vPortSetupTimerInterrupt+0x20>)
 800433c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fbb3 f3f1 	udiv	r3, r3, r1
 8004346:	3b01      	subs	r3, #1
 8004348:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800434a:	2307      	movs	r3, #7
 800434c:	6113      	str	r3, [r2, #16]
}
 800434e:	4770      	bx	lr
 8004350:	20000014 	.word	0x20000014

08004354 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004354:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8004358:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800435a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800435e:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <xPortStartScheduler+0xf4>)
 8004360:	4291      	cmp	r1, r2
 8004362:	d108      	bne.n	8004376 <xPortStartScheduler+0x22>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	e7fe      	b.n	8004374 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004376:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800437a:	4b34      	ldr	r3, [pc, #208]	; (800444c <xPortStartScheduler+0xf8>)
 800437c:	429a      	cmp	r2, r3
 800437e:	d108      	bne.n	8004392 <xPortStartScheduler+0x3e>
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	e7fe      	b.n	8004390 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <xPortStartScheduler+0xfc>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800439e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043b0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043b2:	2307      	movs	r3, #7
 80043b4:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b6:	2100      	movs	r1, #0
 80043b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80043bc:	0600      	lsls	r0, r0, #24
 80043be:	f103 34ff 	add.w	r4, r3, #4294967295
 80043c2:	d40c      	bmi.n	80043de <xPortStartScheduler+0x8a>
 80043c4:	b111      	cbz	r1, 80043cc <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	d011      	beq.n	80043f0 <xPortStartScheduler+0x9c>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	e7fe      	b.n	80043dc <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f88d 3003 	strb.w	r3, [sp, #3]
 80043ea:	2101      	movs	r1, #1
 80043ec:	4623      	mov	r3, r4
 80043ee:	e7e3      	b.n	80043b8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043f4:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	4a15      	ldr	r2, [pc, #84]	; (8004450 <xPortStartScheduler+0xfc>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043fa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004402:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004406:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800440a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800440e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8004412:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004416:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800441a:	f7ff ff89 	bl	8004330 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <xPortStartScheduler+0x104>)
 8004420:	2500      	movs	r5, #0
 8004422:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8004424:	f7ff feb2 	bl	800418c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004428:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800442c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004430:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8004434:	f7ff fe96 	bl	8004164 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004438:	f7ff f992 	bl	8003760 <vTaskSwitchContext>
	prvTaskExitError();
 800443c:	f7ff feb0 	bl	80041a0 <prvTaskExitError>
}
 8004440:	4628      	mov	r0, r5
 8004442:	b003      	add	sp, #12
 8004444:	bd30      	pop	{r4, r5, pc}
 8004446:	bf00      	nop
 8004448:	410fc271 	.word	0x410fc271
 800444c:	410fc270 	.word	0x410fc270
 8004450:	e000e400 	.word	0xe000e400
 8004454:	20009248 	.word	0x20009248
 8004458:	20000020 	.word	0x20000020

0800445c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800445c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004460:	2b0f      	cmp	r3, #15
 8004462:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <vPortValidateInterruptPriority+0x4c>)
 8004464:	d90d      	bls.n	8004482 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004466:	4911      	ldr	r1, [pc, #68]	; (80044ac <vPortValidateInterruptPriority+0x50>)
 8004468:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800446a:	7811      	ldrb	r1, [r2, #0]
 800446c:	4299      	cmp	r1, r3
 800446e:	d908      	bls.n	8004482 <vPortValidateInterruptPriority+0x26>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	e7fe      	b.n	8004480 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004482:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004486:	6852      	ldr	r2, [r2, #4]
 8004488:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800448c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004490:	4293      	cmp	r3, r2
 8004492:	d908      	bls.n	80044a6 <vPortValidateInterruptPriority+0x4a>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	e7fe      	b.n	80044a4 <vPortValidateInterruptPriority+0x48>
	}
 80044a6:	4770      	bx	lr
 80044a8:	20009248 	.word	0x20009248
 80044ac:	e000e3f0 	.word	0xe000e3f0

080044b0 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80044b0:	680a      	ldr	r2, [r1, #0]
{
 80044b2:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80044b4:	320c      	adds	r2, #12
{
 80044b6:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80044b8:	f001 face 	bl	8005a58 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80044bc:	b908      	cbnz	r0, 80044c2 <netconn_apimsg+0x12>
    return apimsg->err;
 80044be:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80044c4:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80044c6:	b160      	cbz	r0, 80044e2 <netconn_tcp_recvd_msg+0x1e>
 80044c8:	7803      	ldrb	r3, [r0, #0]
 80044ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d107      	bne.n	80044e2 <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80044d2:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 80044d4:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
}
 80044d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80044da:	4807      	ldr	r0, [pc, #28]	; (80044f8 <netconn_tcp_recvd_msg+0x34>)
 80044dc:	4611      	mov	r1, r2
 80044de:	f7ff bfe7 	b.w	80044b0 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <netconn_tcp_recvd_msg+0x38>)
 80044e4:	4906      	ldr	r1, [pc, #24]	; (8004500 <netconn_tcp_recvd_msg+0x3c>)
 80044e6:	4807      	ldr	r0, [pc, #28]	; (8004504 <netconn_tcp_recvd_msg+0x40>)
 80044e8:	f240 22a7 	movw	r2, #679	; 0x2a7
 80044ec:	f007 f970 	bl	800b7d0 <iprintf>
}
 80044f0:	f06f 000f 	mvn.w	r0, #15
 80044f4:	bd08      	pop	{r3, pc}
 80044f6:	bf00      	nop
 80044f8:	080056e9 	.word	0x080056e9
 80044fc:	0800d6cb 	.word	0x0800d6cb
 8004500:	0800d743 	.word	0x0800d743
 8004504:	0800d598 	.word	0x0800d598

08004508 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004508:	b500      	push	{lr}
 800450a:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800450c:	b958      	cbnz	r0, 8004526 <netconn_close_shutdown+0x1e>
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <netconn_close_shutdown+0x34>)
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <netconn_close_shutdown+0x38>)
 8004512:	480c      	ldr	r0, [pc, #48]	; (8004544 <netconn_close_shutdown+0x3c>)
 8004514:	f240 4247 	movw	r2, #1095	; 0x447
 8004518:	f007 f95a 	bl	800b7d0 <iprintf>
 800451c:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004520:	b009      	add	sp, #36	; 0x24
 8004522:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8004526:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004528:	f88d 1008 	strb.w	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800452c:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800452e:	4669      	mov	r1, sp
 8004530:	4805      	ldr	r0, [pc, #20]	; (8004548 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004532:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004536:	f7ff ffbb 	bl	80044b0 <netconn_apimsg>
  return err;
 800453a:	e7f1      	b.n	8004520 <netconn_close_shutdown+0x18>
 800453c:	0800d6cb 	.word	0x0800d6cb
 8004540:	0800d767 	.word	0x0800d767
 8004544:	0800d598 	.word	0x0800d598
 8004548:	080057e9 	.word	0x080057e9

0800454c <netconn_new_with_proto_and_callback>:
{
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	460d      	mov	r5, r1
 8004550:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8004552:	4611      	mov	r1, r2
 8004554:	f000 fe92 	bl	800527c <netconn_alloc>
  if (conn != NULL) {
 8004558:	4604      	mov	r4, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d03e      	beq.n	80045dc <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 800455e:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004560:	4669      	mov	r1, sp
 8004562:	4820      	ldr	r0, [pc, #128]	; (80045e4 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004564:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004568:	f7ff ffa2 	bl	80044b0 <netconn_apimsg>
    if (err != ERR_OK) {
 800456c:	2800      	cmp	r0, #0
 800456e:	d035      	beq.n	80045dc <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	b12b      	cbz	r3, 8004580 <netconn_new_with_proto_and_callback+0x34>
 8004574:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <netconn_new_with_proto_and_callback+0x9c>)
 8004576:	491d      	ldr	r1, [pc, #116]	; (80045ec <netconn_new_with_proto_and_callback+0xa0>)
 8004578:	481d      	ldr	r0, [pc, #116]	; (80045f0 <netconn_new_with_proto_and_callback+0xa4>)
 800457a:	22a3      	movs	r2, #163	; 0xa3
 800457c:	f007 f928 	bl	800b7d0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004580:	f104 0510 	add.w	r5, r4, #16
 8004584:	4628      	mov	r0, r5
 8004586:	f007 f832 	bl	800b5ee <sys_mbox_valid>
 800458a:	b928      	cbnz	r0, 8004598 <netconn_new_with_proto_and_callback+0x4c>
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <netconn_new_with_proto_and_callback+0x9c>)
 800458e:	4919      	ldr	r1, [pc, #100]	; (80045f4 <netconn_new_with_proto_and_callback+0xa8>)
 8004590:	4817      	ldr	r0, [pc, #92]	; (80045f0 <netconn_new_with_proto_and_callback+0xa4>)
 8004592:	22a4      	movs	r2, #164	; 0xa4
 8004594:	f007 f91c 	bl	800b7d0 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004598:	f104 0014 	add.w	r0, r4, #20
 800459c:	f007 f827 	bl	800b5ee <sys_mbox_valid>
 80045a0:	b128      	cbz	r0, 80045ae <netconn_new_with_proto_and_callback+0x62>
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <netconn_new_with_proto_and_callback+0x9c>)
 80045a4:	4914      	ldr	r1, [pc, #80]	; (80045f8 <netconn_new_with_proto_and_callback+0xac>)
 80045a6:	4812      	ldr	r0, [pc, #72]	; (80045f0 <netconn_new_with_proto_and_callback+0xa4>)
 80045a8:	22a6      	movs	r2, #166	; 0xa6
 80045aa:	f007 f911 	bl	800b7d0 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80045ae:	f104 060c 	add.w	r6, r4, #12
 80045b2:	4630      	mov	r0, r6
 80045b4:	f007 f85b 	bl	800b66e <sys_sem_valid>
 80045b8:	b928      	cbnz	r0, 80045c6 <netconn_new_with_proto_and_callback+0x7a>
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <netconn_new_with_proto_and_callback+0x9c>)
 80045bc:	490f      	ldr	r1, [pc, #60]	; (80045fc <netconn_new_with_proto_and_callback+0xb0>)
 80045be:	480c      	ldr	r0, [pc, #48]	; (80045f0 <netconn_new_with_proto_and_callback+0xa4>)
 80045c0:	22a9      	movs	r2, #169	; 0xa9
 80045c2:	f007 f905 	bl	800b7d0 <iprintf>
      sys_sem_free(&conn->op_completed);
 80045c6:	4630      	mov	r0, r6
 80045c8:	f007 f84e 	bl	800b668 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80045cc:	4628      	mov	r0, r5
 80045ce:	f006 ffc7 	bl	800b560 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80045d2:	4621      	mov	r1, r4
 80045d4:	2006      	movs	r0, #6
 80045d6:	f002 ffe3 	bl	80075a0 <memp_free>
      return NULL;
 80045da:	2400      	movs	r4, #0
}
 80045dc:	4620      	mov	r0, r4
 80045de:	b008      	add	sp, #32
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	bf00      	nop
 80045e4:	08005245 	.word	0x08005245
 80045e8:	0800d6cb 	.word	0x0800d6cb
 80045ec:	0800d783 	.word	0x0800d783
 80045f0:	0800d598 	.word	0x0800d598
 80045f4:	0800d7a4 	.word	0x0800d7a4
 80045f8:	0800d7b9 	.word	0x0800d7b9
 80045fc:	0800d7da 	.word	0x0800d7da

08004600 <netconn_prepare_delete>:
{
 8004600:	b500      	push	{lr}
 8004602:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004604:	b138      	cbz	r0, 8004616 <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8004606:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004608:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800460a:	4804      	ldr	r0, [pc, #16]	; (800461c <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800460c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004610:	4669      	mov	r1, sp
 8004612:	f7ff ff4d 	bl	80044b0 <netconn_apimsg>
}
 8004616:	b009      	add	sp, #36	; 0x24
 8004618:	f85d fb04 	ldr.w	pc, [sp], #4
 800461c:	08005509 	.word	0x08005509

08004620 <netconn_delete>:
{
 8004620:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004622:	4605      	mov	r5, r0
 8004624:	b140      	cbz	r0, 8004638 <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8004626:	f7ff ffeb 	bl	8004600 <netconn_prepare_delete>
  if (err == ERR_OK) {
 800462a:	4604      	mov	r4, r0
 800462c:	b910      	cbnz	r0, 8004634 <netconn_delete+0x14>
    netconn_free(conn);
 800462e:	4628      	mov	r0, r5
 8004630:	f000 fe64 	bl	80052fc <netconn_free>
}
 8004634:	4620      	mov	r0, r4
 8004636:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004638:	4604      	mov	r4, r0
 800463a:	e7fb      	b.n	8004634 <netconn_delete+0x14>

0800463c <netconn_bind>:
{
 800463c:	b500      	push	{lr}
 800463e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004640:	b958      	cbnz	r0, 800465a <netconn_bind+0x1e>
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <netconn_bind+0x38>)
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <netconn_bind+0x3c>)
 8004646:	480d      	ldr	r0, [pc, #52]	; (800467c <netconn_bind+0x40>)
 8004648:	f44f 729c 	mov.w	r2, #312	; 0x138
 800464c:	f007 f8c0 	bl	800b7d0 <iprintf>
 8004650:	f06f 000f 	mvn.w	r0, #15
}
 8004654:	b009      	add	sp, #36	; 0x24
 8004656:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 800465c:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 800465e:	2900      	cmp	r1, #0
 8004660:	bf08      	it	eq
 8004662:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004664:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004666:	4807      	ldr	r0, [pc, #28]	; (8004684 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004668:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800466c:	4669      	mov	r1, sp
 800466e:	f7ff ff1f 	bl	80044b0 <netconn_apimsg>
  return err;
 8004672:	e7ef      	b.n	8004654 <netconn_bind+0x18>
 8004674:	0800d6cb 	.word	0x0800d6cb
 8004678:	0800d84d 	.word	0x0800d84d
 800467c:	0800d598 	.word	0x0800d598
 8004680:	0800d3dc 	.word	0x0800d3dc
 8004684:	08005609 	.word	0x08005609

08004688 <netconn_listen_with_backlog>:
{
 8004688:	b500      	push	{lr}
 800468a:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800468c:	b958      	cbnz	r0, 80046a6 <netconn_listen_with_backlog+0x1e>
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <netconn_listen_with_backlog+0x2c>)
 8004690:	4909      	ldr	r1, [pc, #36]	; (80046b8 <netconn_listen_with_backlog+0x30>)
 8004692:	480a      	ldr	r0, [pc, #40]	; (80046bc <netconn_listen_with_backlog+0x34>)
 8004694:	f240 12bb 	movw	r2, #443	; 0x1bb
 8004698:	f007 f89a 	bl	800b7d0 <iprintf>
 800469c:	f06f 000f 	mvn.w	r0, #15
}
 80046a0:	b009      	add	sp, #36	; 0x24
 80046a2:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80046a6:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80046a8:	4669      	mov	r1, sp
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <netconn_listen_with_backlog+0x38>)
 80046ac:	f7ff ff00 	bl	80044b0 <netconn_apimsg>
  return err;
 80046b0:	e7f6      	b.n	80046a0 <netconn_listen_with_backlog+0x18>
 80046b2:	bf00      	nop
 80046b4:	0800d6cb 	.word	0x0800d6cb
 80046b8:	0800d8c5 	.word	0x0800d8c5
 80046bc:	0800d598 	.word	0x0800d598
 80046c0:	08005631 	.word	0x08005631

080046c4 <netconn_write_vectors_partly>:
{
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	469e      	mov	lr, r3
 80046ca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80046cc:	b958      	cbnz	r0, 80046e6 <netconn_write_vectors_partly+0x22>
 80046ce:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <netconn_write_vectors_partly+0xc0>)
 80046d0:	492d      	ldr	r1, [pc, #180]	; (8004788 <netconn_write_vectors_partly+0xc4>)
 80046d2:	482e      	ldr	r0, [pc, #184]	; (800478c <netconn_write_vectors_partly+0xc8>)
 80046d4:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80046d8:	f007 f87a 	bl	800b7d0 <iprintf>
 80046dc:	f06f 040f 	mvn.w	r4, #15
}
 80046e0:	4620      	mov	r0, r4
 80046e2:	b009      	add	sp, #36	; 0x24
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80046e6:	7804      	ldrb	r4, [r0, #0]
 80046e8:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80046ec:	2c10      	cmp	r4, #16
 80046ee:	d009      	beq.n	8004704 <netconn_write_vectors_partly+0x40>
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <netconn_write_vectors_partly+0xc0>)
 80046f2:	4927      	ldr	r1, [pc, #156]	; (8004790 <netconn_write_vectors_partly+0xcc>)
 80046f4:	4825      	ldr	r0, [pc, #148]	; (800478c <netconn_write_vectors_partly+0xc8>)
 80046f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80046fa:	f007 f869 	bl	800b7d0 <iprintf>
    return ERR_VAL;
 80046fe:	f06f 0405 	mvn.w	r4, #5
 8004702:	e7ed      	b.n	80046e0 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8004704:	7e05      	ldrb	r5, [r0, #24]
 8004706:	f003 0404 	and.w	r4, r3, #4
 800470a:	f005 0502 	and.w	r5, r5, #2
 800470e:	4325      	orrs	r5, r4
 8004710:	d002      	beq.n	8004718 <netconn_write_vectors_partly+0x54>
 8004712:	2f00      	cmp	r7, #0
 8004714:	d0f3      	beq.n	80046fe <netconn_write_vectors_partly+0x3a>
 8004716:	2501      	movs	r5, #1
 8004718:	2400      	movs	r4, #0
 800471a:	4626      	mov	r6, r4
    size += vectors[i].len;
 800471c:	f101 0c04 	add.w	ip, r1, #4
 8004720:	e004      	b.n	800472c <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 8004722:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 8004726:	199e      	adds	r6, r3, r6
 8004728:	d2e9      	bcs.n	80046fe <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 800472a:	3401      	adds	r4, #1
 800472c:	42a2      	cmp	r2, r4
 800472e:	dcf8      	bgt.n	8004722 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8004730:	2e00      	cmp	r6, #0
 8004732:	d101      	bne.n	8004738 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8004734:	2400      	movs	r4, #0
 8004736:	e7d3      	b.n	80046e0 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8004738:	da03      	bge.n	8004742 <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 800473a:	2f00      	cmp	r7, #0
 800473c:	d0df      	beq.n	80046fe <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 800473e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).conn = conn;
 8004742:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8004744:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8004746:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800474a:	4812      	ldr	r0, [pc, #72]	; (8004794 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800474c:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004750:	2200      	movs	r2, #0
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004752:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8004754:	e9cd 6205 	strd	r6, r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004758:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800475a:	f7ff fea9 	bl	80044b0 <netconn_apimsg>
  if (err == ERR_OK) {
 800475e:	4604      	mov	r4, r0
 8004760:	2800      	cmp	r0, #0
 8004762:	d1bd      	bne.n	80046e0 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8004764:	b10f      	cbz	r7, 800476a <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 800476a:	2d00      	cmp	r5, #0
 800476c:	d1e2      	bne.n	8004734 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800476e:	9b06      	ldr	r3, [sp, #24]
 8004770:	42b3      	cmp	r3, r6
 8004772:	d0df      	beq.n	8004734 <netconn_write_vectors_partly+0x70>
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <netconn_write_vectors_partly+0xc0>)
 8004776:	4908      	ldr	r1, [pc, #32]	; (8004798 <netconn_write_vectors_partly+0xd4>)
 8004778:	4804      	ldr	r0, [pc, #16]	; (800478c <netconn_write_vectors_partly+0xc8>)
 800477a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800477e:	f007 f827 	bl	800b7d0 <iprintf>
 8004782:	e7ad      	b.n	80046e0 <netconn_write_vectors_partly+0x1c>
 8004784:	0800d6cb 	.word	0x0800d6cb
 8004788:	0800d8fd 	.word	0x0800d8fd
 800478c:	0800d598 	.word	0x0800d598
 8004790:	0800d919 	.word	0x0800d919
 8004794:	08005721 	.word	0x08005721
 8004798:	0800d93b 	.word	0x0800d93b

0800479c <netconn_write_partly>:
{
 800479c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 800479e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80047a2:	9a06      	ldr	r2, [sp, #24]
 80047a4:	9200      	str	r2, [sp, #0]
 80047a6:	a902      	add	r1, sp, #8
 80047a8:	2201      	movs	r2, #1
 80047aa:	f7ff ff8b 	bl	80046c4 <netconn_write_vectors_partly>
}
 80047ae:	b005      	add	sp, #20
 80047b0:	f85d fb04 	ldr.w	pc, [sp], #4

080047b4 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80047b4:	2103      	movs	r1, #3
 80047b6:	f7ff bea7 	b.w	8004508 <netconn_close_shutdown>

080047ba <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80047ba:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80047bc:	4604      	mov	r4, r0
 80047be:	b148      	cbz	r0, 80047d4 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80047c0:	f006 ff90 	bl	800b6e4 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80047c4:	2300      	movs	r3, #0
  err = conn->pending_err;
 80047c6:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80047ca:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80047cc:	f006 ff96 	bl	800b6fc <sys_arch_unprotect>
  return err;
}
 80047d0:	4628      	mov	r0, r5
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80047d4:	4605      	mov	r5, r0
 80047d6:	e7fb      	b.n	80047d0 <netconn_err+0x16>

080047d8 <netconn_accept>:
{
 80047d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047da:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80047dc:	460e      	mov	r6, r1
 80047de:	b959      	cbnz	r1, 80047f8 <netconn_accept+0x20>
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <netconn_accept+0xa0>)
 80047e2:	4926      	ldr	r1, [pc, #152]	; (800487c <netconn_accept+0xa4>)
 80047e4:	f240 12e1 	movw	r2, #481	; 0x1e1
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80047e8:	4825      	ldr	r0, [pc, #148]	; (8004880 <netconn_accept+0xa8>)
 80047ea:	f006 fff1 	bl	800b7d0 <iprintf>
 80047ee:	f06f 040f 	mvn.w	r4, #15
}
 80047f2:	4620      	mov	r0, r4
 80047f4:	b003      	add	sp, #12
 80047f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80047fc:	b920      	cbnz	r0, 8004808 <netconn_accept+0x30>
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <netconn_accept+0xa0>)
 8004800:	4920      	ldr	r1, [pc, #128]	; (8004884 <netconn_accept+0xac>)
 8004802:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004806:	e7ef      	b.n	80047e8 <netconn_accept+0x10>
  err = netconn_err(conn);
 8004808:	f7ff ffd7 	bl	80047ba <netconn_err>
 800480c:	4604      	mov	r4, r0
 800480e:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8004812:	2800      	cmp	r0, #0
 8004814:	d1ed      	bne.n	80047f2 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004816:	f105 0714 	add.w	r7, r5, #20
 800481a:	4638      	mov	r0, r7
 800481c:	f006 fee7 	bl	800b5ee <sys_mbox_valid>
 8004820:	b910      	cbnz	r0, 8004828 <netconn_accept+0x50>
    return ERR_CLSD;
 8004822:	f06f 040e 	mvn.w	r4, #14
 8004826:	e7e4      	b.n	80047f2 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004828:	7e2b      	ldrb	r3, [r5, #24]
 800482a:	07da      	lsls	r2, r3, #31
 800482c:	d4f9      	bmi.n	8004822 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 800482e:	079b      	lsls	r3, r3, #30
 8004830:	d508      	bpl.n	8004844 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8004832:	a901      	add	r1, sp, #4
 8004834:	4638      	mov	r0, r7
 8004836:	f006 fec9 	bl	800b5cc <sys_arch_mbox_tryfetch>
 800483a:	3001      	adds	r0, #1
 800483c:	d107      	bne.n	800484e <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 800483e:	f06f 0406 	mvn.w	r4, #6
 8004842:	e7d6      	b.n	80047f2 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8004844:	4622      	mov	r2, r4
 8004846:	a901      	add	r1, sp, #4
 8004848:	4638      	mov	r0, r7
 800484a:	f006 fe9d 	bl	800b588 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800484e:	6a2b      	ldr	r3, [r5, #32]
 8004850:	b11b      	cbz	r3, 800485a <netconn_accept+0x82>
 8004852:	2200      	movs	r2, #0
 8004854:	2101      	movs	r1, #1
 8004856:	4628      	mov	r0, r5
 8004858:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800485a:	9801      	ldr	r0, [sp, #4]
 800485c:	f10d 0103 	add.w	r1, sp, #3
 8004860:	f000 fcc8 	bl	80051f4 <lwip_netconn_is_err_msg>
 8004864:	b110      	cbz	r0, 800486c <netconn_accept+0x94>
    return err;
 8004866:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800486a:	e7c2      	b.n	80047f2 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 800486c:	9b01      	ldr	r3, [sp, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0d7      	beq.n	8004822 <netconn_accept+0x4a>
  *new_conn = newconn;
 8004872:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8004874:	e7bd      	b.n	80047f2 <netconn_accept+0x1a>
 8004876:	bf00      	nop
 8004878:	0800d6cb 	.word	0x0800d6cb
 800487c:	0800d95e 	.word	0x0800d95e
 8004880:	0800d598 	.word	0x0800d598
 8004884:	0800d97e 	.word	0x0800d97e

08004888 <netconn_recv_data>:
{
 8004888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  void *buf = NULL;
 800488a:	2300      	movs	r3, #0
{
 800488c:	4604      	mov	r4, r0
 800488e:	4616      	mov	r6, r2
  void *buf = NULL;
 8004890:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004892:	460d      	mov	r5, r1
 8004894:	b951      	cbnz	r1, 80048ac <netconn_recv_data+0x24>
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <netconn_recv_data+0xb8>)
 8004898:	492a      	ldr	r1, [pc, #168]	; (8004944 <netconn_recv_data+0xbc>)
 800489a:	f44f 7212 	mov.w	r2, #584	; 0x248
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800489e:	482a      	ldr	r0, [pc, #168]	; (8004948 <netconn_recv_data+0xc0>)
 80048a0:	f006 ff96 	bl	800b7d0 <iprintf>
 80048a4:	f06f 000f 	mvn.w	r0, #15
}
 80048a8:	b003      	add	sp, #12
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80048ac:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80048ae:	b920      	cbnz	r0, 80048ba <netconn_recv_data+0x32>
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <netconn_recv_data+0xb8>)
 80048b2:	4926      	ldr	r1, [pc, #152]	; (800494c <netconn_recv_data+0xc4>)
 80048b4:	f240 224a 	movw	r2, #586	; 0x24a
 80048b8:	e7f1      	b.n	800489e <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80048ba:	f100 0710 	add.w	r7, r0, #16
 80048be:	4638      	mov	r0, r7
 80048c0:	f006 fe95 	bl	800b5ee <sys_mbox_valid>
 80048c4:	b938      	cbnz	r0, 80048d6 <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7ff ff77 	bl	80047ba <netconn_err>
    if (err != ERR_OK) {
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1eb      	bne.n	80048a8 <netconn_recv_data+0x20>
    return ERR_CONN;
 80048d0:	f06f 000a 	mvn.w	r0, #10
 80048d4:	e7e8      	b.n	80048a8 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80048d6:	7e23      	ldrb	r3, [r4, #24]
 80048d8:	f006 0604 	and.w	r6, r6, #4
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	4333      	orrs	r3, r6
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80048e2:	a901      	add	r1, sp, #4
 80048e4:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80048e6:	d102      	bne.n	80048ee <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80048e8:	f994 2008 	ldrsb.w	r2, [r4, #8]
 80048ec:	b172      	cbz	r2, 800490c <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80048ee:	f006 fe6d 	bl	800b5cc <sys_arch_mbox_tryfetch>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d10c      	bne.n	8004910 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ff5f 	bl	80047ba <netconn_err>
      if (err != ERR_OK) {
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d1d3      	bne.n	80048a8 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8004900:	7e23      	ldrb	r3, [r4, #24]
 8004902:	07db      	lsls	r3, r3, #31
 8004904:	d4e4      	bmi.n	80048d0 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8004906:	f06f 0006 	mvn.w	r0, #6
 800490a:	e7cd      	b.n	80048a8 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800490c:	f006 fe3c 	bl	800b588 <sys_arch_mbox_fetch>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8004910:	9801      	ldr	r0, [sp, #4]
 8004912:	f10d 0103 	add.w	r1, sp, #3
 8004916:	f000 fc6d 	bl	80051f4 <lwip_netconn_is_err_msg>
 800491a:	b130      	cbz	r0, 800492a <netconn_recv_data+0xa2>
      if (err == ERR_CLSD) {
 800491c:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8004920:	f110 0f0f 	cmn.w	r0, #15
 8004924:	bf08      	it	eq
 8004926:	2000      	moveq	r0, #0
 8004928:	e7be      	b.n	80048a8 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800492e:	6a23      	ldr	r3, [r4, #32]
 8004930:	b113      	cbz	r3, 8004938 <netconn_recv_data+0xb0>
 8004932:	2101      	movs	r1, #1
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
  *new_buf = buf;
 8004938:	9b01      	ldr	r3, [sp, #4]
 800493a:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800493c:	2000      	movs	r0, #0
 800493e:	e7b3      	b.n	80048a8 <netconn_recv_data+0x20>
 8004940:	0800d6cb 	.word	0x0800d6cb
 8004944:	0800d99b 	.word	0x0800d99b
 8004948:	0800d598 	.word	0x0800d598
 800494c:	0800d9b9 	.word	0x0800d9b9

08004950 <netconn_recv_data_tcp>:
{
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004952:	4604      	mov	r4, r0
 8004954:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004956:	3010      	adds	r0, #16
{
 8004958:	460f      	mov	r7, r1
 800495a:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800495c:	f006 fe47 	bl	800b5ee <sys_mbox_valid>
 8004960:	2800      	cmp	r0, #0
 8004962:	d03c      	beq.n	80049de <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8004964:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8004968:	7e23      	ldrb	r3, [r4, #24]
 800496a:	2a00      	cmp	r2, #0
 800496c:	da12      	bge.n	8004994 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004974:	6a23      	ldr	r3, [r4, #32]
 8004976:	b11b      	cbz	r3, 8004980 <netconn_recv_data_tcp+0x30>
 8004978:	2200      	movs	r2, #0
 800497a:	2101      	movs	r1, #1
 800497c:	4620      	mov	r0, r4
 800497e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	bb2b      	cbnz	r3, 80049d0 <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8004984:	4620      	mov	r0, r4
 8004986:	f7ff ff18 	bl	80047ba <netconn_err>
        return ERR_RST;
 800498a:	1e05      	subs	r5, r0, #0
 800498c:	bf08      	it	eq
 800498e:	f06f 050d 	mvneq.w	r5, #13
 8004992:	e018      	b.n	80049c6 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004994:	4632      	mov	r2, r6
 8004996:	4639      	mov	r1, r7
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ff75 	bl	8004888 <netconn_recv_data>
  if (err != ERR_OK) {
 800499e:	4605      	mov	r5, r0
 80049a0:	b988      	cbnz	r0, 80049c6 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80049a2:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 80049a4:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80049a6:	d405      	bmi.n	80049b4 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 80049a8:	b187      	cbz	r7, 80049cc <netconn_recv_data_tcp+0x7c>
 80049aa:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80049ac:	466a      	mov	r2, sp
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff fd88 	bl	80044c4 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 80049b4:	b93f      	cbnz	r7, 80049c6 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 80049b6:	06f3      	lsls	r3, r6, #27
 80049b8:	d5dc      	bpl.n	8004974 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80049ba:	7e23      	ldrb	r3, [r4, #24]
 80049bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049c0:	7623      	strb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 80049c2:	f06f 0506 	mvn.w	r5, #6
}
 80049c6:	4628      	mov	r0, r5
 80049c8:	b009      	add	sp, #36	; 0x24
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 80049cc:	2101      	movs	r1, #1
 80049ce:	e7ed      	b.n	80049ac <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80049d0:	2101      	movs	r1, #1
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7ff fd98 	bl	8004508 <netconn_close_shutdown>
      return ERR_CLSD;
 80049d8:	f06f 050e 	mvn.w	r5, #14
 80049dc:	e7f3      	b.n	80049c6 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 80049de:	f06f 050a 	mvn.w	r5, #10
 80049e2:	e7f0      	b.n	80049c6 <netconn_recv_data_tcp+0x76>

080049e4 <netconn_recv>:
{
 80049e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e6:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80049e8:	460e      	mov	r6, r1
 80049ea:	b959      	cbnz	r1, 8004a04 <netconn_recv+0x20>
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <netconn_recv+0x7c>)
 80049ee:	491d      	ldr	r1, [pc, #116]	; (8004a64 <netconn_recv+0x80>)
 80049f0:	f240 3263 	movw	r2, #867	; 0x363
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80049f4:	481c      	ldr	r0, [pc, #112]	; (8004a68 <netconn_recv+0x84>)
 80049f6:	f006 feeb 	bl	800b7d0 <iprintf>
 80049fa:	f06f 050f 	mvn.w	r5, #15
}
 80049fe:	4628      	mov	r0, r5
 8004a00:	b003      	add	sp, #12
 8004a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8004a04:	2700      	movs	r7, #0
 8004a06:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004a08:	b920      	cbnz	r0, 8004a14 <netconn_recv+0x30>
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <netconn_recv+0x7c>)
 8004a0c:	4917      	ldr	r1, [pc, #92]	; (8004a6c <netconn_recv+0x88>)
 8004a0e:	f240 3265 	movw	r2, #869	; 0x365
 8004a12:	e7ef      	b.n	80049f4 <netconn_recv+0x10>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004a14:	2005      	movs	r0, #5
    struct pbuf *p = NULL;
 8004a16:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004a18:	f002 fd92 	bl	8007540 <memp_malloc>
    if (buf == NULL) {
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	b1e0      	cbz	r0, 8004a5a <netconn_recv+0x76>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8004a20:	4628      	mov	r0, r5
 8004a22:	463a      	mov	r2, r7
 8004a24:	a901      	add	r1, sp, #4
 8004a26:	f7ff ff93 	bl	8004950 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	b120      	cbz	r0, 8004a38 <netconn_recv+0x54>
      memp_free(MEMP_NETBUF, buf);
 8004a2e:	4621      	mov	r1, r4
 8004a30:	2005      	movs	r0, #5
 8004a32:	f002 fdb5 	bl	80075a0 <memp_free>
      return err;
 8004a36:	e7e2      	b.n	80049fe <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004a38:	9b01      	ldr	r3, [sp, #4]
 8004a3a:	b933      	cbnz	r3, 8004a4a <netconn_recv+0x66>
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <netconn_recv+0x7c>)
 8004a3e:	490c      	ldr	r1, [pc, #48]	; (8004a70 <netconn_recv+0x8c>)
 8004a40:	4809      	ldr	r0, [pc, #36]	; (8004a68 <netconn_recv+0x84>)
 8004a42:	f240 3279 	movw	r2, #889	; 0x379
 8004a46:	f006 fec3 	bl	800b7d0 <iprintf>
    buf->p = p;
 8004a4a:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8004a4c:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8004a54:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8004a56:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 8004a58:	e7d1      	b.n	80049fe <netconn_recv+0x1a>
      return ERR_MEM;
 8004a5a:	f04f 35ff 	mov.w	r5, #4294967295
 8004a5e:	e7ce      	b.n	80049fe <netconn_recv+0x1a>
 8004a60:	0800d6cb 	.word	0x0800d6cb
 8004a64:	0800d99b 	.word	0x0800d99b
 8004a68:	0800d598 	.word	0x0800d598
 8004a6c:	0800d9b9 	.word	0x0800d9b9
 8004a70:	0800ed7c 	.word	0x0800ed7c

08004a74 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004a74:	b507      	push	{r0, r1, r2, lr}
 8004a76:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004a78:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8004a7a:	9001      	str	r0, [sp, #4]
 8004a7c:	f003 fc28 	bl	80082d0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004a80:	9801      	ldr	r0, [sp, #4]
 8004a82:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <setup_tcp+0x34>)
 8004a84:	f003 fc28 	bl	80082d8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004a88:	9801      	ldr	r0, [sp, #4]
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <setup_tcp+0x38>)
 8004a8c:	f003 fc3c 	bl	8008308 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004a90:	9801      	ldr	r0, [sp, #4]
 8004a92:	4907      	ldr	r1, [pc, #28]	; (8004ab0 <setup_tcp+0x3c>)
 8004a94:	2202      	movs	r2, #2
 8004a96:	f003 fc6b 	bl	8008370 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004a9a:	4906      	ldr	r1, [pc, #24]	; (8004ab4 <setup_tcp+0x40>)
 8004a9c:	9801      	ldr	r0, [sp, #4]
}
 8004a9e:	b003      	add	sp, #12
 8004aa0:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8004aa4:	f003 bc46 	b.w	8008334 <tcp_err>
 8004aa8:	08004fe1 	.word	0x08004fe1
 8004aac:	08004f71 	.word	0x08004f71
 8004ab0:	08004ef5 	.word	0x08004ef5
 8004ab4:	080050b1 	.word	0x080050b1

08004ab8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004abe:	4604      	mov	r4, r0
 8004ac0:	b930      	cbnz	r0, 8004ad0 <lwip_netconn_do_writemore+0x18>
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004ac4:	4989      	ldr	r1, [pc, #548]	; (8004cec <lwip_netconn_do_writemore+0x234>)
 8004ac6:	488a      	ldr	r0, [pc, #552]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004ac8:	f240 6273 	movw	r2, #1651	; 0x673
 8004acc:	f006 fe80 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004ad0:	7863      	ldrb	r3, [r4, #1]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d006      	beq.n	8004ae4 <lwip_netconn_do_writemore+0x2c>
 8004ad6:	4b84      	ldr	r3, [pc, #528]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004ad8:	4986      	ldr	r1, [pc, #536]	; (8004cf4 <lwip_netconn_do_writemore+0x23c>)
 8004ada:	4885      	ldr	r0, [pc, #532]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004adc:	f240 6274 	movw	r2, #1652	; 0x674
 8004ae0:	f006 fe76 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004ae4:	69e3      	ldr	r3, [r4, #28]
 8004ae6:	b933      	cbnz	r3, 8004af6 <lwip_netconn_do_writemore+0x3e>
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004aea:	4983      	ldr	r1, [pc, #524]	; (8004cf8 <lwip_netconn_do_writemore+0x240>)
 8004aec:	4880      	ldr	r0, [pc, #512]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004aee:	f240 6275 	movw	r2, #1653	; 0x675
 8004af2:	f006 fe6d 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	b933      	cbnz	r3, 8004b08 <lwip_netconn_do_writemore+0x50>
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004afc:	497f      	ldr	r1, [pc, #508]	; (8004cfc <lwip_netconn_do_writemore+0x244>)
 8004afe:	487c      	ldr	r0, [pc, #496]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004b00:	f240 6276 	movw	r2, #1654	; 0x676
 8004b04:	f006 fe64 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8004b08:	69e3      	ldr	r3, [r4, #28]
 8004b0a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d306      	bcc.n	8004b20 <lwip_netconn_do_writemore+0x68>
 8004b12:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004b14:	497a      	ldr	r1, [pc, #488]	; (8004d00 <lwip_netconn_do_writemore+0x248>)
 8004b16:	4876      	ldr	r0, [pc, #472]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004b18:	f240 6277 	movw	r2, #1655	; 0x677
 8004b1c:	f006 fe58 	bl	800b7d0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8004b20:	69e3      	ldr	r3, [r4, #28]
 8004b22:	899b      	ldrh	r3, [r3, #12]
 8004b24:	b933      	cbnz	r3, 8004b34 <lwip_netconn_do_writemore+0x7c>
 8004b26:	4b70      	ldr	r3, [pc, #448]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004b28:	4976      	ldr	r1, [pc, #472]	; (8004d04 <lwip_netconn_do_writemore+0x24c>)
 8004b2a:	4871      	ldr	r0, [pc, #452]	; (8004cf0 <lwip_netconn_do_writemore+0x238>)
 8004b2c:	f240 6279 	movw	r2, #1657	; 0x679
 8004b30:	f006 fe4e 	bl	800b7d0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8004b34:	69e3      	ldr	r3, [r4, #28]
 8004b36:	7e26      	ldrb	r6, [r4, #24]
 8004b38:	f893 801c 	ldrb.w	r8, [r3, #28]
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004b3c:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8004cf0 <lwip_netconn_do_writemore+0x238>
 8004b40:	f006 0602 	and.w	r6, r6, #2
 8004b44:	f008 0304 	and.w	r3, r8, #4
 8004b48:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004b4a:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004b4c:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004b4e:	688a      	ldr	r2, [r1, #8]
 8004b50:	690b      	ldr	r3, [r1, #16]
 8004b52:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004b54:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004b58:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8004b5c:	6850      	ldr	r0, [r2, #4]
 8004b5e:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8004b62:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8004b66:	bf2a      	itet	cs
 8004b68:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8004b6c:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004b70:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8004b74:	42aa      	cmp	r2, r5
 8004b76:	d979      	bls.n	8004c6c <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8004b78:	2e00      	cmp	r6, #0
 8004b7a:	d038      	beq.n	8004bee <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	d138      	bne.n	8004bf2 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004b80:	698b      	ldr	r3, [r1, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	f06f 0a06 	mvneq.w	sl, #6
 8004b8a:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004b8e:	69e3      	ldr	r3, [r4, #28]
 8004b90:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d276      	bcs.n	8004c86 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004b98:	6a23      	ldr	r3, [r4, #32]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <lwip_netconn_do_writemore+0xec>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2103      	movs	r1, #3
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004ba4:	7e23      	ldrb	r3, [r4, #24]
 8004ba6:	f043 0310 	orr.w	r3, r3, #16
 8004baa:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8004bac:	f1ba 0f00 	cmp.w	sl, #0
 8004bb0:	d17e      	bne.n	8004cb0 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8004bb2:	69e3      	ldr	r3, [r4, #28]
 8004bb4:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d077      	beq.n	8004cac <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8004bbc:	3e00      	subs	r6, #0
 8004bbe:	bf18      	it	ne
 8004bc0:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004bc2:	6860      	ldr	r0, [r4, #4]
 8004bc4:	f006 f8e4 	bl	800ad90 <tcp_output>
      if (out_err == ERR_RTE) {
 8004bc8:	3004      	adds	r0, #4
 8004bca:	f040 8084 	bne.w	8004cd6 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8004bce:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004bd2:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8004bd4:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004bd6:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8004bd8:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8004bdc:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 8004bde:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8004be0:	2f00      	cmp	r7, #0
 8004be2:	d07e      	beq.n	8004ce2 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8004be4:	300c      	adds	r0, #12
 8004be6:	f006 fd3c 	bl	800b662 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8004bea:	4628      	mov	r0, r5
 8004bec:	e06b      	b.n	8004cc6 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8004bee:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004bf2:	442b      	add	r3, r5
 8004bf4:	4298      	cmp	r0, r3
 8004bf6:	d206      	bcs.n	8004c06 <lwip_netconn_do_writemore+0x14e>
 8004bf8:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <lwip_netconn_do_writemore+0x230>)
 8004bfa:	4943      	ldr	r1, [pc, #268]	; (8004d08 <lwip_netconn_do_writemore+0x250>)
 8004bfc:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004c00:	4658      	mov	r0, fp
 8004c02:	f006 fde5 	bl	800b7d0 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8004c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	d102      	bne.n	8004c14 <lwip_netconn_do_writemore+0x15c>
 8004c0e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8004c12:	d207      	bcs.n	8004c24 <lwip_netconn_do_writemore+0x16c>
 8004c14:	fa1f f989 	uxth.w	r9, r9
 8004c18:	45a9      	cmp	r9, r5
 8004c1a:	d129      	bne.n	8004c70 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8004c1c:	69e3      	ldr	r3, [r4, #28]
 8004c1e:	899b      	ldrh	r3, [r3, #12]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d925      	bls.n	8004c70 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004c24:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8004c28:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	6860      	ldr	r0, [r4, #4]
 8004c30:	4643      	mov	r3, r8
 8004c32:	462a      	mov	r2, r5
 8004c34:	f005 fb4c 	bl	800a2d0 <tcp_write>
      if (err == ERR_OK) {
 8004c38:	4682      	mov	sl, r0
 8004c3a:	b9e0      	cbnz	r0, 8004c76 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8004c3c:	69e3      	ldr	r3, [r4, #28]
 8004c3e:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004c40:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8004c42:	442a      	add	r2, r5
 8004c44:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004c4a:	684a      	ldr	r2, [r1, #4]
        conn->current_msg->msg.w.vector_off += len;
 8004c4c:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004c4e:	4295      	cmp	r5, r2
 8004c50:	d107      	bne.n	8004c62 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 8004c52:	899a      	ldrh	r2, [r3, #12]
 8004c54:	3a01      	subs	r2, #1
 8004c56:	b292      	uxth	r2, r2
 8004c58:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8004c5a:	b112      	cbz	r2, 8004c62 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 8004c5c:	3108      	adds	r1, #8
 8004c5e:	6099      	str	r1, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8004c60:	6118      	str	r0, [r3, #16]
    } while (write_more && err == ERR_OK);
 8004c62:	f1b9 0f00 	cmp.w	r9, #0
 8004c66:	f47f af70 	bne.w	8004b4a <lwip_netconn_do_writemore+0x92>
 8004c6a:	e00a      	b.n	8004c82 <lwip_netconn_do_writemore+0x1ca>
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	e7c0      	b.n	8004bf2 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8004c70:	f04f 0900 	mov.w	r9, #0
 8004c74:	e7da      	b.n	8004c2c <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d8a9      	bhi.n	8004bd2 <lwip_netconn_do_writemore+0x11a>
err_mem:
 8004c7e:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004c82:	2e00      	cmp	r6, #0
 8004c84:	d183      	bne.n	8004b8e <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8004c8c:	f640 3269 	movw	r2, #2921	; 0xb69
 8004c90:	4291      	cmp	r1, r2
 8004c92:	d903      	bls.n	8004c9c <lwip_netconn_do_writemore+0x1e4>
 8004c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d987      	bls.n	8004bac <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004c9c:	6a23      	ldr	r3, [r4, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d084      	beq.n	8004bac <lwip_netconn_do_writemore+0xf4>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2103      	movs	r1, #3
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4798      	blx	r3
 8004caa:	e77f      	b.n	8004bac <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 8004cac:	2601      	movs	r6, #1
 8004cae:	e788      	b.n	8004bc2 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8004cb0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004cb4:	d18d      	bne.n	8004bd2 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004cb6:	6860      	ldr	r0, [r4, #4]
 8004cb8:	f006 f86a 	bl	800ad90 <tcp_output>
      if (out_err == ERR_RTE) {
 8004cbc:	3004      	adds	r0, #4
 8004cbe:	d086      	beq.n	8004bce <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8004cc0:	b91e      	cbnz	r6, 8004cca <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8004cc2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004cc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004cca:	69e3      	ldr	r3, [r4, #28]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	b12b      	cbz	r3, 8004cdc <lwip_netconn_do_writemore+0x224>
 8004cd0:	f04f 0a00 	mov.w	sl, #0
 8004cd4:	e77d      	b.n	8004bd2 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d1fa      	bne.n	8004cd0 <lwip_netconn_do_writemore+0x218>
 8004cda:	e7f2      	b.n	8004cc2 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004cdc:	f06f 0a06 	mvn.w	sl, #6
 8004ce0:	e777      	b.n	8004bd2 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	e7ef      	b.n	8004cc6 <lwip_netconn_do_writemore+0x20e>
 8004ce6:	bf00      	nop
 8004ce8:	0800d9fe 	.word	0x0800d9fe
 8004cec:	0800daef 	.word	0x0800daef
 8004cf0:	0800d598 	.word	0x0800d598
 8004cf4:	0800dafc 	.word	0x0800dafc
 8004cf8:	0800db19 	.word	0x0800db19
 8004cfc:	0800db33 	.word	0x0800db33
 8004d00:	0800db49 	.word	0x0800db49
 8004d04:	0800db88 	.word	0x0800db88
 8004d08:	0800dbb0 	.word	0x0800dbb0

08004d0c <lwip_netconn_do_close_internal>:
{
 8004d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d10:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004d12:	4604      	mov	r4, r0
 8004d14:	b930      	cbnz	r0, 8004d24 <lwip_netconn_do_close_internal+0x18>
 8004d16:	4b6c      	ldr	r3, [pc, #432]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004d18:	496c      	ldr	r1, [pc, #432]	; (8004ecc <lwip_netconn_do_close_internal+0x1c0>)
 8004d1a:	486d      	ldr	r0, [pc, #436]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004d1c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8004d20:	f006 fd56 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004d24:	7823      	ldrb	r3, [r4, #0]
 8004d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2a:	2b10      	cmp	r3, #16
 8004d2c:	d006      	beq.n	8004d3c <lwip_netconn_do_close_internal+0x30>
 8004d2e:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004d30:	4968      	ldr	r1, [pc, #416]	; (8004ed4 <lwip_netconn_do_close_internal+0x1c8>)
 8004d32:	4867      	ldr	r0, [pc, #412]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004d34:	f240 32a3 	movw	r2, #931	; 0x3a3
 8004d38:	f006 fd4a 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004d3c:	7863      	ldrb	r3, [r4, #1]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d006      	beq.n	8004d50 <lwip_netconn_do_close_internal+0x44>
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004d44:	4964      	ldr	r1, [pc, #400]	; (8004ed8 <lwip_netconn_do_close_internal+0x1cc>)
 8004d46:	4862      	ldr	r0, [pc, #392]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004d48:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8004d4c:	f006 fd40 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	b933      	cbnz	r3, 8004d62 <lwip_netconn_do_close_internal+0x56>
 8004d54:	4b5c      	ldr	r3, [pc, #368]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004d56:	4961      	ldr	r1, [pc, #388]	; (8004edc <lwip_netconn_do_close_internal+0x1d0>)
 8004d58:	485d      	ldr	r0, [pc, #372]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004d5a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8004d5e:	f006 fd37 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	b933      	cbnz	r3, 8004d74 <lwip_netconn_do_close_internal+0x68>
 8004d66:	4b58      	ldr	r3, [pc, #352]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004d68:	495d      	ldr	r1, [pc, #372]	; (8004ee0 <lwip_netconn_do_close_internal+0x1d4>)
 8004d6a:	4859      	ldr	r0, [pc, #356]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004d6c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004d70:	f006 fd2e 	bl	800b7d0 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8004d74:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 8004d76:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8004d78:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8004d7a:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8004d7c:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004d80:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004d84:	d00f      	beq.n	8004da6 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8004d86:	f1ba 0f00 	cmp.w	sl, #0
 8004d8a:	d005      	beq.n	8004d98 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8004d8c:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8004d8e:	1f5a      	subs	r2, r3, #5
 8004d90:	2a01      	cmp	r2, #1
 8004d92:	d908      	bls.n	8004da6 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d006      	beq.n	8004da6 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004d98:	f1b8 0f00 	cmp.w	r8, #0
 8004d9c:	d016      	beq.n	8004dcc <lwip_netconn_do_close_internal+0xc0>
 8004d9e:	8b6f      	ldrh	r7, [r5, #26]
 8004da0:	f017 0710 	ands.w	r7, r7, #16
 8004da4:	d004      	beq.n	8004db0 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8004da6:	2100      	movs	r1, #0
 8004da8:	4628      	mov	r0, r5
 8004daa:	f003 fa91 	bl	80082d0 <tcp_arg>
 8004dae:	2701      	movs	r7, #1
  if (tpcb->state == LISTEN) {
 8004db0:	7d2b      	ldrb	r3, [r5, #20]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10c      	bne.n	8004dd0 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8004db6:	2100      	movs	r1, #0
 8004db8:	4628      	mov	r0, r5
 8004dba:	f003 fad3 	bl	8008364 <tcp_accept>
  if (shut_close) {
 8004dbe:	bb27      	cbnz	r7, 8004e0a <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f003 fef1 	bl	8008bac <tcp_shutdown>
 8004dca:	e021      	b.n	8004e10 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 8004dcc:	4647      	mov	r7, r8
 8004dce:	e7ef      	b.n	8004db0 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8004dd0:	f1ba 0f00 	cmp.w	sl, #0
 8004dd4:	d007      	beq.n	8004de6 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f003 fa7d 	bl	80082d8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004dde:	2100      	movs	r1, #0
 8004de0:	4628      	mov	r0, r5
 8004de2:	f003 fabf 	bl	8008364 <tcp_accept>
    if (shut_tx) {
 8004de6:	f1b8 0f00 	cmp.w	r8, #0
 8004dea:	d003      	beq.n	8004df4 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8004dec:	2100      	movs	r1, #0
 8004dee:	4628      	mov	r0, r5
 8004df0:	f003 fa8a 	bl	8008308 <tcp_sent>
    if (shut_close) {
 8004df4:	2f00      	cmp	r7, #0
 8004df6:	d0e3      	beq.n	8004dc0 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f003 fab7 	bl	8008370 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004e02:	2100      	movs	r1, #0
 8004e04:	4628      	mov	r0, r5
 8004e06:	f003 fa95 	bl	8008334 <tcp_err>
      err = tcp_close(tpcb);
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f003 fe00 	bl	8008a10 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004e10:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004e12:	b160      	cbz	r0, 8004e2e <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d10a      	bne.n	8004e2e <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004e18:	69e3      	ldr	r3, [r4, #28]
 8004e1a:	f893 b009 	ldrb.w	fp, [r3, #9]
 8004e1e:	f1bb 0f00 	cmp.w	fp, #0
 8004e22:	d130      	bne.n	8004e86 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8004e24:	b11f      	cbz	r7, 8004e2e <lwip_netconn_do_close_internal+0x122>
          tcp_abort(tpcb);
 8004e26:	4628      	mov	r0, r5
 8004e28:	f003 ff76 	bl	8008d18 <tcp_abort>
          err = ERR_OK;
 8004e2c:	465e      	mov	r6, fp
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004e2e:	69e3      	ldr	r3, [r4, #28]
 8004e30:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8004e32:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8004e38:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004e3a:	b9ce      	cbnz	r6, 8004e70 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8004e3c:	b137      	cbz	r7, 8004e4c <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004e3e:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8004e40:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004e42:	b11b      	cbz	r3, 8004e4c <lwip_netconn_do_close_internal+0x140>
 8004e44:	4632      	mov	r2, r6
 8004e46:	2104      	movs	r1, #4
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4798      	blx	r3
      if (shut_rx) {
 8004e4c:	f1ba 0f00 	cmp.w	sl, #0
 8004e50:	d005      	beq.n	8004e5e <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004e52:	6a23      	ldr	r3, [r4, #32]
 8004e54:	b11b      	cbz	r3, 8004e5e <lwip_netconn_do_close_internal+0x152>
 8004e56:	2200      	movs	r2, #0
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4798      	blx	r3
      if (shut_tx) {
 8004e5e:	f1b8 0f00 	cmp.w	r8, #0
 8004e62:	d005      	beq.n	8004e70 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004e64:	6a23      	ldr	r3, [r4, #32]
 8004e66:	b11b      	cbz	r3, 8004e70 <lwip_netconn_do_close_internal+0x164>
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4798      	blx	r3
    if (delayed)
 8004e70:	f1b9 0f00 	cmp.w	r9, #0
 8004e74:	d026      	beq.n	8004ec4 <lwip_netconn_do_close_internal+0x1b8>
      sys_sem_signal(op_completed_sem);
 8004e76:	f105 000c 	add.w	r0, r5, #12
 8004e7a:	f006 fbf2 	bl	800b662 <sys_sem_signal>
    return ERR_OK;
 8004e7e:	2600      	movs	r6, #0
}
 8004e80:	4630      	mov	r0, r6
 8004e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004e86:	7d2b      	ldrb	r3, [r5, #20]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <lwip_netconn_do_close_internal+0x18e>
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <lwip_netconn_do_close_internal+0x1bc>)
 8004e8e:	4915      	ldr	r1, [pc, #84]	; (8004ee4 <lwip_netconn_do_close_internal+0x1d8>)
 8004e90:	480f      	ldr	r0, [pc, #60]	; (8004ed0 <lwip_netconn_do_close_internal+0x1c4>)
 8004e92:	f240 4241 	movw	r2, #1089	; 0x441
 8004e96:	f006 fc9b 	bl	800b7d0 <iprintf>
    if (shut_tx) {
 8004e9a:	f1b8 0f00 	cmp.w	r8, #0
 8004e9e:	d003      	beq.n	8004ea8 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8004ea0:	4911      	ldr	r1, [pc, #68]	; (8004ee8 <lwip_netconn_do_close_internal+0x1dc>)
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f003 fa30 	bl	8008308 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4628      	mov	r0, r5
 8004eac:	490f      	ldr	r1, [pc, #60]	; (8004eec <lwip_netconn_do_close_internal+0x1e0>)
 8004eae:	f003 fa5f 	bl	8008370 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	490e      	ldr	r1, [pc, #56]	; (8004ef0 <lwip_netconn_do_close_internal+0x1e4>)
 8004eb6:	f003 fa3d 	bl	8008334 <tcp_err>
    tcp_arg(tpcb, conn);
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f003 fa07 	bl	80082d0 <tcp_arg>
  return err;
 8004ec2:	e7dd      	b.n	8004e80 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8004ec4:	464e      	mov	r6, r9
 8004ec6:	e7db      	b.n	8004e80 <lwip_netconn_do_close_internal+0x174>
 8004ec8:	0800d9fe 	.word	0x0800d9fe
 8004ecc:	0800d8f0 	.word	0x0800d8f0
 8004ed0:	0800d598 	.word	0x0800d598
 8004ed4:	0800dbdb 	.word	0x0800dbdb
 8004ed8:	0800dbf9 	.word	0x0800dbf9
 8004edc:	0800dc1d 	.word	0x0800dc1d
 8004ee0:	0800db19 	.word	0x0800db19
 8004ee4:	0800dc30 	.word	0x0800dc30
 8004ee8:	08004f71 	.word	0x08004f71
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	080050b1 	.word	0x080050b1

08004ef4 <poll_tcp>:
{
 8004ef4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	b930      	cbnz	r0, 8004f08 <poll_tcp+0x14>
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <poll_tcp+0x70>)
 8004efc:	491a      	ldr	r1, [pc, #104]	; (8004f68 <poll_tcp+0x74>)
 8004efe:	481b      	ldr	r0, [pc, #108]	; (8004f6c <poll_tcp+0x78>)
 8004f00:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004f04:	f006 fc64 	bl	800b7d0 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8004f08:	7861      	ldrb	r1, [r4, #1]
 8004f0a:	2901      	cmp	r1, #1
 8004f0c:	d11c      	bne.n	8004f48 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff fdd2 	bl	8004ab8 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004f14:	7e23      	ldrb	r3, [r4, #24]
 8004f16:	06da      	lsls	r2, r3, #27
 8004f18:	d514      	bpl.n	8004f44 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	b192      	cbz	r2, 8004f44 <poll_tcp+0x50>
 8004f1e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8004f22:	f640 3169 	movw	r1, #2921	; 0xb69
 8004f26:	4288      	cmp	r0, r1
 8004f28:	d90c      	bls.n	8004f44 <poll_tcp+0x50>
 8004f2a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8004f2e:	2a04      	cmp	r2, #4
 8004f30:	d808      	bhi.n	8004f44 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004f38:	6a23      	ldr	r3, [r4, #32]
 8004f3a:	b11b      	cbz	r3, 8004f44 <poll_tcp+0x50>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4620      	mov	r0, r4
 8004f42:	4798      	blx	r3
}
 8004f44:	2000      	movs	r0, #0
 8004f46:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8004f48:	2904      	cmp	r1, #4
 8004f4a:	d1e3      	bne.n	8004f14 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004f4c:	69e2      	ldr	r2, [r4, #28]
 8004f4e:	b11a      	cbz	r2, 8004f58 <poll_tcp+0x64>
 8004f50:	7a53      	ldrb	r3, [r2, #9]
 8004f52:	b10b      	cbz	r3, 8004f58 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8004f54:	3b01      	subs	r3, #1
 8004f56:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff fed6 	bl	8004d0c <lwip_netconn_do_close_internal>
 8004f60:	e7d8      	b.n	8004f14 <poll_tcp+0x20>
 8004f62:	bf00      	nop
 8004f64:	0800d9fe 	.word	0x0800d9fe
 8004f68:	0800daef 	.word	0x0800daef
 8004f6c:	0800d598 	.word	0x0800d598

08004f70 <sent_tcp>:
{
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004f74:	4604      	mov	r4, r0
 8004f76:	b970      	cbnz	r0, 8004f96 <sent_tcp+0x26>
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <sent_tcp+0x64>)
 8004f7a:	4917      	ldr	r1, [pc, #92]	; (8004fd8 <sent_tcp+0x68>)
 8004f7c:	4817      	ldr	r0, [pc, #92]	; (8004fdc <sent_tcp+0x6c>)
 8004f7e:	f240 1293 	movw	r2, #403	; 0x193
 8004f82:	f006 fc25 	bl	800b7d0 <iprintf>
}
 8004f86:	2000      	movs	r0, #0
 8004f88:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8004f8a:	2904      	cmp	r1, #4
 8004f8c:	d108      	bne.n	8004fa0 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004f8e:	2101      	movs	r1, #1
 8004f90:	f7ff febc 	bl	8004d0c <lwip_netconn_do_close_internal>
 8004f94:	e004      	b.n	8004fa0 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8004f96:	7841      	ldrb	r1, [r0, #1]
 8004f98:	2901      	cmp	r1, #1
 8004f9a:	d1f6      	bne.n	8004f8a <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004f9c:	f7ff fd8c 	bl	8004ab8 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ef      	beq.n	8004f86 <sent_tcp+0x16>
 8004fa6:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8004faa:	f640 3269 	movw	r2, #2921	; 0xb69
 8004fae:	4291      	cmp	r1, r2
 8004fb0:	d9e9      	bls.n	8004f86 <sent_tcp+0x16>
 8004fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d8e5      	bhi.n	8004f86 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8004fba:	7e23      	ldrb	r3, [r4, #24]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004fc2:	6a23      	ldr	r3, [r4, #32]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0de      	beq.n	8004f86 <sent_tcp+0x16>
 8004fc8:	462a      	mov	r2, r5
 8004fca:	2102      	movs	r1, #2
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4798      	blx	r3
  return ERR_OK;
 8004fd0:	e7d9      	b.n	8004f86 <sent_tcp+0x16>
 8004fd2:	bf00      	nop
 8004fd4:	0800d9fe 	.word	0x0800d9fe
 8004fd8:	0800daef 	.word	0x0800daef
 8004fdc:	0800d598 	.word	0x0800d598

08004fe0 <recv_tcp>:
{
 8004fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004fea:	460f      	mov	r7, r1
 8004fec:	b931      	cbnz	r1, 8004ffc <recv_tcp+0x1c>
 8004fee:	4b29      	ldr	r3, [pc, #164]	; (8005094 <recv_tcp+0xb4>)
 8004ff0:	4929      	ldr	r1, [pc, #164]	; (8005098 <recv_tcp+0xb8>)
 8004ff2:	482a      	ldr	r0, [pc, #168]	; (800509c <recv_tcp+0xbc>)
 8004ff4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ff8:	f006 fbea 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004ffc:	bb4e      	cbnz	r6, 8005052 <recv_tcp+0x72>
 8004ffe:	4b25      	ldr	r3, [pc, #148]	; (8005094 <recv_tcp+0xb4>)
 8005000:	4927      	ldr	r1, [pc, #156]	; (80050a0 <recv_tcp+0xc0>)
 8005002:	4826      	ldr	r0, [pc, #152]	; (800509c <recv_tcp+0xbc>)
 8005004:	f240 122d 	movw	r2, #301	; 0x12d
 8005008:	f006 fbe2 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800500c:	bb14      	cbnz	r4, 8005054 <recv_tcp+0x74>
    return ERR_VAL;
 800500e:	f06f 0405 	mvn.w	r4, #5
}
 8005012:	4620      	mov	r0, r4
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8005018:	4638      	mov	r0, r7
 800501a:	8929      	ldrh	r1, [r5, #8]
 800501c:	f003 f904 	bl	8008228 <tcp_recved>
      pbuf_free(p);
 8005020:	4628      	mov	r0, r5
 8005022:	f002 fd15 	bl	8007a50 <pbuf_free>
 8005026:	e7f4      	b.n	8005012 <recv_tcp+0x32>
  if (p != NULL) {
 8005028:	b16d      	cbz	r5, 8005046 <recv_tcp+0x66>
    len = p->tot_len;
 800502a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800502c:	4629      	mov	r1, r5
 800502e:	4640      	mov	r0, r8
 8005030:	f006 faa0 	bl	800b574 <sys_mbox_trypost>
 8005034:	4604      	mov	r4, r0
 8005036:	b948      	cbnz	r0, 800504c <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005038:	6a33      	ldr	r3, [r6, #32]
 800503a:	b343      	cbz	r3, 800508e <recv_tcp+0xae>
 800503c:	4601      	mov	r1, r0
 800503e:	463a      	mov	r2, r7
 8005040:	4630      	mov	r0, r6
 8005042:	4798      	blx	r3
 8005044:	e7e5      	b.n	8005012 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8005046:	4d17      	ldr	r5, [pc, #92]	; (80050a4 <recv_tcp+0xc4>)
    len = 0;
 8005048:	2700      	movs	r7, #0
 800504a:	e7ef      	b.n	800502c <recv_tcp+0x4c>
    return ERR_MEM;
 800504c:	f04f 34ff 	mov.w	r4, #4294967295
 8005050:	e7df      	b.n	8005012 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005052:	b144      	cbz	r4, 8005066 <recv_tcp+0x86>
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <recv_tcp+0xb4>)
 8005056:	4914      	ldr	r1, [pc, #80]	; (80050a8 <recv_tcp+0xc8>)
 8005058:	4810      	ldr	r0, [pc, #64]	; (800509c <recv_tcp+0xbc>)
 800505a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800505e:	f006 fbb7 	bl	800b7d0 <iprintf>
  if (conn == NULL) {
 8005062:	2e00      	cmp	r6, #0
 8005064:	d0d3      	beq.n	800500e <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005066:	6873      	ldr	r3, [r6, #4]
 8005068:	42bb      	cmp	r3, r7
 800506a:	d006      	beq.n	800507a <recv_tcp+0x9a>
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <recv_tcp+0xb4>)
 800506e:	490f      	ldr	r1, [pc, #60]	; (80050ac <recv_tcp+0xcc>)
 8005070:	480a      	ldr	r0, [pc, #40]	; (800509c <recv_tcp+0xbc>)
 8005072:	f240 1235 	movw	r2, #309	; 0x135
 8005076:	f006 fbab 	bl	800b7d0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800507a:	f106 0810 	add.w	r8, r6, #16
 800507e:	4640      	mov	r0, r8
 8005080:	f006 fab5 	bl	800b5ee <sys_mbox_valid>
 8005084:	4604      	mov	r4, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	d1ce      	bne.n	8005028 <recv_tcp+0x48>
    if (p != NULL) {
 800508a:	2d00      	cmp	r5, #0
 800508c:	d1c4      	bne.n	8005018 <recv_tcp+0x38>
    return ERR_OK;
 800508e:	2400      	movs	r4, #0
 8005090:	e7bf      	b.n	8005012 <recv_tcp+0x32>
 8005092:	bf00      	nop
 8005094:	0800d9fe 	.word	0x0800d9fe
 8005098:	0800dc53 	.word	0x0800dc53
 800509c:	0800d598 	.word	0x0800d598
 80050a0:	0800dc75 	.word	0x0800dc75
 80050a4:	0800d3c4 	.word	0x0800d3c4
 80050a8:	0800dc94 	.word	0x0800dc94
 80050ac:	0800dcac 	.word	0x0800dcac

080050b0 <err_tcp>:
{
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80050b6:	4604      	mov	r4, r0
 80050b8:	b930      	cbnz	r0, 80050c8 <err_tcp+0x18>
 80050ba:	4b46      	ldr	r3, [pc, #280]	; (80051d4 <err_tcp+0x124>)
 80050bc:	4946      	ldr	r1, [pc, #280]	; (80051d8 <err_tcp+0x128>)
 80050be:	4847      	ldr	r0, [pc, #284]	; (80051dc <err_tcp+0x12c>)
 80050c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80050c4:	f006 fb84 	bl	800b7d0 <iprintf>
  SYS_ARCH_PROTECT(lev);
 80050c8:	f006 fb0c 	bl	800b6e4 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80050cc:	7e23      	ldrb	r3, [r4, #24]
  old_state = conn->state;
 80050ce:	7867      	ldrb	r7, [r4, #1]
  conn->pending_err = err;
 80050d0:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80050d2:	f043 0301 	orr.w	r3, r3, #1
  conn->pcb.tcp = NULL;
 80050d6:	2600      	movs	r6, #0
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80050d8:	7623      	strb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 80050da:	6066      	str	r6, [r4, #4]
  conn->state = NETCONN_NONE;
 80050dc:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80050de:	f006 fb0d 	bl	800b6fc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80050e2:	6a23      	ldr	r3, [r4, #32]
 80050e4:	b11b      	cbz	r3, 80050ee <err_tcp+0x3e>
 80050e6:	4632      	mov	r2, r6
 80050e8:	2104      	movs	r1, #4
 80050ea:	4620      	mov	r0, r4
 80050ec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80050ee:	6a23      	ldr	r3, [r4, #32]
 80050f0:	b11b      	cbz	r3, 80050fa <err_tcp+0x4a>
 80050f2:	2200      	movs	r2, #0
 80050f4:	4611      	mov	r1, r2
 80050f6:	4620      	mov	r0, r4
 80050f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80050fa:	6a23      	ldr	r3, [r4, #32]
 80050fc:	b11b      	cbz	r3, 8005106 <err_tcp+0x56>
 80050fe:	2200      	movs	r2, #0
 8005100:	2102      	movs	r1, #2
 8005102:	4620      	mov	r0, r4
 8005104:	4798      	blx	r3
  switch (err) {
 8005106:	f105 030f 	add.w	r3, r5, #15
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d848      	bhi.n	80051a2 <err_tcp+0xf2>
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <err_tcp+0x130>)
 8005112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005116:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005118:	f104 0810 	add.w	r8, r4, #16
 800511c:	4640      	mov	r0, r8
 800511e:	f006 fa66 	bl	800b5ee <sys_mbox_valid>
 8005122:	b118      	cbz	r0, 800512c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8005124:	4631      	mov	r1, r6
 8005126:	4640      	mov	r0, r8
 8005128:	f006 fa24 	bl	800b574 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800512c:	f104 0814 	add.w	r8, r4, #20
 8005130:	4640      	mov	r0, r8
 8005132:	f006 fa5c 	bl	800b5ee <sys_mbox_valid>
 8005136:	b118      	cbz	r0, 8005140 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8005138:	4631      	mov	r1, r6
 800513a:	4640      	mov	r0, r8
 800513c:	f006 fa1a 	bl	800b574 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005140:	2f01      	cmp	r7, #1
 8005142:	d002      	beq.n	800514a <err_tcp+0x9a>
 8005144:	1efb      	subs	r3, r7, #3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d836      	bhi.n	80051b8 <err_tcp+0x108>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800514a:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800514c:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005150:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005152:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8005154:	d43b      	bmi.n	80051ce <err_tcp+0x11e>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005156:	69e3      	ldr	r3, [r4, #28]
 8005158:	b933      	cbnz	r3, 8005168 <err_tcp+0xb8>
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <err_tcp+0x124>)
 800515c:	4921      	ldr	r1, [pc, #132]	; (80051e4 <err_tcp+0x134>)
 800515e:	481f      	ldr	r0, [pc, #124]	; (80051dc <err_tcp+0x12c>)
 8005160:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005164:	f006 fb34 	bl	800b7d0 <iprintf>
        conn->current_msg->err = ERR_OK;
 8005168:	69e3      	ldr	r3, [r4, #28]
      if (old_state == NETCONN_CLOSE) {
 800516a:	2f04      	cmp	r7, #4
        conn->current_msg->err = err;
 800516c:	bf18      	it	ne
 800516e:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005170:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8005172:	bf08      	it	eq
 8005174:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005176:	f105 050c 	add.w	r5, r5, #12
        conn->current_msg->err = ERR_OK;
 800517a:	bf08      	it	eq
 800517c:	711a      	strbeq	r2, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800517e:	4628      	mov	r0, r5
 8005180:	f006 fa75 	bl	800b66e <sys_sem_valid>
 8005184:	b930      	cbnz	r0, 8005194 <err_tcp+0xe4>
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <err_tcp+0x124>)
 8005188:	4917      	ldr	r1, [pc, #92]	; (80051e8 <err_tcp+0x138>)
 800518a:	4814      	ldr	r0, [pc, #80]	; (80051dc <err_tcp+0x12c>)
 800518c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005190:	f006 fb1e 	bl	800b7d0 <iprintf>
      conn->current_msg = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61e3      	str	r3, [r4, #28]
      sys_sem_signal(op_completed_sem);
 8005198:	4628      	mov	r0, r5
}
 800519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800519e:	f006 ba60 	b.w	800b662 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80051a2:	b13d      	cbz	r5, 80051b4 <err_tcp+0x104>
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <err_tcp+0x124>)
 80051a6:	4911      	ldr	r1, [pc, #68]	; (80051ec <err_tcp+0x13c>)
 80051a8:	480c      	ldr	r0, [pc, #48]	; (80051dc <err_tcp+0x12c>)
 80051aa:	227d      	movs	r2, #125	; 0x7d
 80051ac:	f006 fb10 	bl	800b7d0 <iprintf>
 80051b0:	2600      	movs	r6, #0
 80051b2:	e7b1      	b.n	8005118 <err_tcp+0x68>
      return NULL;
 80051b4:	462e      	mov	r6, r5
 80051b6:	e7af      	b.n	8005118 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80051b8:	69e3      	ldr	r3, [r4, #28]
 80051ba:	b143      	cbz	r3, 80051ce <err_tcp+0x11e>
}
 80051bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <err_tcp+0x124>)
 80051c2:	490b      	ldr	r1, [pc, #44]	; (80051f0 <err_tcp+0x140>)
 80051c4:	4805      	ldr	r0, [pc, #20]	; (80051dc <err_tcp+0x12c>)
 80051c6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80051ca:	f006 bb01 	b.w	800b7d0 <iprintf>
}
 80051ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d2:	bf00      	nop
 80051d4:	0800d9fe 	.word	0x0800d9fe
 80051d8:	0800daef 	.word	0x0800daef
 80051dc:	0800d598 	.word	0x0800d598
 80051e0:	0800d3c4 	.word	0x0800d3c4
 80051e4:	0800db19 	.word	0x0800db19
 80051e8:	0800dcda 	.word	0x0800dcda
 80051ec:	0800dcca 	.word	0x0800dcca
 80051f0:	0800dcf3 	.word	0x0800dcf3

080051f4 <lwip_netconn_is_err_msg>:
{
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 80051f8:	460c      	mov	r4, r1
 80051fa:	b929      	cbnz	r1, 8005208 <lwip_netconn_is_err_msg+0x14>
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <lwip_netconn_is_err_msg+0x40>)
 80051fe:	490e      	ldr	r1, [pc, #56]	; (8005238 <lwip_netconn_is_err_msg+0x44>)
 8005200:	480e      	ldr	r0, [pc, #56]	; (800523c <lwip_netconn_is_err_msg+0x48>)
 8005202:	2285      	movs	r2, #133	; 0x85
 8005204:	f006 fae4 	bl	800b7d0 <iprintf>
  if (msg == &netconn_aborted) {
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <lwip_netconn_is_err_msg+0x4c>)
 800520a:	f103 0210 	add.w	r2, r3, #16
 800520e:	4295      	cmp	r5, r2
 8005210:	d103      	bne.n	800521a <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8005212:	23f3      	movs	r3, #243	; 0xf3
    *err = ERR_CLSD;
 8005214:	7023      	strb	r3, [r4, #0]
    return 1;
 8005216:	2001      	movs	r0, #1
}
 8005218:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 800521a:	f103 0211 	add.w	r2, r3, #17
 800521e:	4295      	cmp	r5, r2
 8005220:	d101      	bne.n	8005226 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8005222:	23f2      	movs	r3, #242	; 0xf2
 8005224:	e7f6      	b.n	8005214 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8005226:	429d      	cmp	r5, r3
 8005228:	d101      	bne.n	800522e <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 800522a:	23f1      	movs	r3, #241	; 0xf1
 800522c:	e7f2      	b.n	8005214 <lwip_netconn_is_err_msg+0x20>
  return 0;
 800522e:	2000      	movs	r0, #0
 8005230:	e7f2      	b.n	8005218 <lwip_netconn_is_err_msg+0x24>
 8005232:	bf00      	nop
 8005234:	0800d9fe 	.word	0x0800d9fe
 8005238:	0800dd0d 	.word	0x0800dd0d
 800523c:	0800d598 	.word	0x0800d598
 8005240:	0800d3c4 	.word	0x0800d3c4

08005244 <lwip_netconn_do_newconn>:
{
 8005244:	b538      	push	{r3, r4, r5, lr}
  if (msg->conn->pcb.tcp == NULL) {
 8005246:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	7103      	strb	r3, [r0, #4]
{
 800524c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800524e:	6868      	ldr	r0, [r5, #4]
 8005250:	b998      	cbnz	r0, 800527a <lwip_netconn_do_newconn+0x36>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005252:	782b      	ldrb	r3, [r5, #0]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005258:	2b10      	cmp	r3, #16
 800525a:	d10c      	bne.n	8005276 <lwip_netconn_do_newconn+0x32>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800525c:	f003 fe3e 	bl	8008edc <tcp_new_ip_type>
 8005260:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	6843      	ldr	r3, [r0, #4]
 8005266:	b123      	cbz	r3, 8005272 <lwip_netconn_do_newconn+0x2e>
        setup_tcp(msg->conn);
 8005268:	f7ff fc04 	bl	8004a74 <setup_tcp>
  if (msg->conn->pcb.ip == NULL) {
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	b91b      	cbnz	r3, 800527a <lwip_netconn_do_newconn+0x36>
    msg->err = ERR_MEM;
 8005272:	23ff      	movs	r3, #255	; 0xff
 8005274:	e000      	b.n	8005278 <lwip_netconn_do_newconn+0x34>
      msg->err = ERR_VAL;
 8005276:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005278:	7123      	strb	r3, [r4, #4]
}
 800527a:	bd38      	pop	{r3, r4, r5, pc}

0800527c <netconn_alloc>:
{
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005280:	2006      	movs	r0, #6
{
 8005282:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005284:	f002 f95c 	bl	8007540 <memp_malloc>
  if (conn == NULL) {
 8005288:	4604      	mov	r4, r0
 800528a:	b378      	cbz	r0, 80052ec <netconn_alloc+0x70>
  conn->type = t;
 800528c:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800528e:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8005292:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8005294:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8005296:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8005298:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800529a:	d10d      	bne.n	80052b8 <netconn_alloc+0x3c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800529c:	f100 0710 	add.w	r7, r0, #16
 80052a0:	2106      	movs	r1, #6
 80052a2:	4638      	mov	r0, r7
 80052a4:	f006 f94c 	bl	800b540 <sys_mbox_new>
 80052a8:	4601      	mov	r1, r0
 80052aa:	b168      	cbz	r0, 80052c8 <netconn_alloc+0x4c>
  memp_free(MEMP_NETCONN, conn);
 80052ac:	4621      	mov	r1, r4
 80052ae:	2006      	movs	r0, #6
 80052b0:	f002 f976 	bl	80075a0 <memp_free>
  return NULL;
 80052b4:	2400      	movs	r4, #0
 80052b6:	e019      	b.n	80052ec <netconn_alloc+0x70>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <netconn_alloc+0x74>)
 80052ba:	490e      	ldr	r1, [pc, #56]	; (80052f4 <netconn_alloc+0x78>)
 80052bc:	480e      	ldr	r0, [pc, #56]	; (80052f8 <netconn_alloc+0x7c>)
 80052be:	f240 22e5 	movw	r2, #741	; 0x2e5
 80052c2:	f006 fa85 	bl	800b7d0 <iprintf>
      goto free_and_return;
 80052c6:	e7f1      	b.n	80052ac <netconn_alloc+0x30>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80052c8:	f104 000c 	add.w	r0, r4, #12
 80052cc:	f006 f997 	bl	800b5fe <sys_sem_new>
 80052d0:	4605      	mov	r5, r0
 80052d2:	b118      	cbz	r0, 80052dc <netconn_alloc+0x60>
    sys_mbox_free(&conn->recvmbox);
 80052d4:	4638      	mov	r0, r7
 80052d6:	f006 f943 	bl	800b560 <sys_mbox_free>
    goto free_and_return;
 80052da:	e7e7      	b.n	80052ac <netconn_alloc+0x30>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80052dc:	f104 0014 	add.w	r0, r4, #20
 80052e0:	f006 f98a 	bl	800b5f8 <sys_mbox_set_invalid>
  conn->current_msg  = NULL;
 80052e4:	e9c4 5607 	strd	r5, r6, [r4, #28]
  conn->state        = NETCONN_NONE;
 80052e8:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 80052ea:	7625      	strb	r5, [r4, #24]
}
 80052ec:	4620      	mov	r0, r4
 80052ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f0:	0800d9fe 	.word	0x0800d9fe
 80052f4:	0800dd19 	.word	0x0800dd19
 80052f8:	0800d598 	.word	0x0800d598

080052fc <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80052fc:	6843      	ldr	r3, [r0, #4]
{
 80052fe:	b513      	push	{r0, r1, r4, lr}
 8005300:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005302:	b133      	cbz	r3, 8005312 <netconn_free+0x16>
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <netconn_free+0x64>)
 8005306:	4917      	ldr	r1, [pc, #92]	; (8005364 <netconn_free+0x68>)
 8005308:	4817      	ldr	r0, [pc, #92]	; (8005368 <netconn_free+0x6c>)
 800530a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800530e:	f006 fa5f 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005312:	f104 0010 	add.w	r0, r4, #16
 8005316:	f006 f96a 	bl	800b5ee <sys_mbox_valid>
 800531a:	b130      	cbz	r0, 800532a <netconn_free+0x2e>
 800531c:	4b10      	ldr	r3, [pc, #64]	; (8005360 <netconn_free+0x64>)
 800531e:	4913      	ldr	r1, [pc, #76]	; (800536c <netconn_free+0x70>)
 8005320:	4811      	ldr	r0, [pc, #68]	; (8005368 <netconn_free+0x6c>)
 8005322:	f240 3223 	movw	r2, #803	; 0x323
 8005326:	f006 fa53 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800532a:	f104 0014 	add.w	r0, r4, #20
 800532e:	f006 f95e 	bl	800b5ee <sys_mbox_valid>
 8005332:	b130      	cbz	r0, 8005342 <netconn_free+0x46>
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <netconn_free+0x64>)
 8005336:	490e      	ldr	r1, [pc, #56]	; (8005370 <netconn_free+0x74>)
 8005338:	480b      	ldr	r0, [pc, #44]	; (8005368 <netconn_free+0x6c>)
 800533a:	f240 3226 	movw	r2, #806	; 0x326
 800533e:	f006 fa47 	bl	800b7d0 <iprintf>
  sys_sem_free(&conn->op_completed);
 8005342:	f104 000c 	add.w	r0, r4, #12
 8005346:	9001      	str	r0, [sp, #4]
 8005348:	f006 f98e 	bl	800b668 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800534c:	9801      	ldr	r0, [sp, #4]
 800534e:	f006 f993 	bl	800b678 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005352:	4621      	mov	r1, r4
 8005354:	2006      	movs	r0, #6
}
 8005356:	b002      	add	sp, #8
 8005358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 800535c:	f002 b920 	b.w	80075a0 <memp_free>
 8005360:	0800d9fe 	.word	0x0800d9fe
 8005364:	0800dd3f 	.word	0x0800dd3f
 8005368:	0800d598 	.word	0x0800d598
 800536c:	0800dd6d 	.word	0x0800dd6d
 8005370:	0800dda7 	.word	0x0800dda7

08005374 <netconn_drain>:
{
 8005374:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005376:	f100 0510 	add.w	r5, r0, #16
{
 800537a:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800537c:	4628      	mov	r0, r5
 800537e:	f006 f936 	bl	800b5ee <sys_mbox_valid>
 8005382:	b158      	cbz	r0, 800539c <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8005384:	a901      	add	r1, sp, #4
 8005386:	4628      	mov	r0, r5
 8005388:	f006 f920 	bl	800b5cc <sys_arch_mbox_tryfetch>
 800538c:	3001      	adds	r0, #1
 800538e:	d118      	bne.n	80053c2 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8005390:	4628      	mov	r0, r5
 8005392:	f006 f8e5 	bl	800b560 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8005396:	4628      	mov	r0, r5
 8005398:	f006 f92e 	bl	800b5f8 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800539c:	3414      	adds	r4, #20
 800539e:	4620      	mov	r0, r4
 80053a0:	f006 f925 	bl	800b5ee <sys_mbox_valid>
 80053a4:	b158      	cbz	r0, 80053be <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80053a6:	a901      	add	r1, sp, #4
 80053a8:	4620      	mov	r0, r4
 80053aa:	f006 f90f 	bl	800b5cc <sys_arch_mbox_tryfetch>
 80053ae:	3001      	adds	r0, #1
 80053b0:	d11a      	bne.n	80053e8 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 80053b2:	4620      	mov	r0, r4
 80053b4:	f006 f8d4 	bl	800b560 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f006 f91d 	bl	800b5f8 <sys_mbox_set_invalid>
}
 80053be:	b002      	add	sp, #8
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80053c2:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80053c4:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80053c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d109      	bne.n	80053e2 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80053ce:	f10d 0103 	add.w	r1, sp, #3
 80053d2:	f7ff ff0f 	bl	80051f4 <lwip_netconn_is_err_msg>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d1d4      	bne.n	8005384 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 80053da:	9801      	ldr	r0, [sp, #4]
 80053dc:	f002 fb38 	bl	8007a50 <pbuf_free>
 80053e0:	e7d0      	b.n	8005384 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 80053e2:	f000 fa5f 	bl	80058a4 <netbuf_delete>
 80053e6:	e7cd      	b.n	8005384 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	f10d 0103 	add.w	r1, sp, #3
 80053ee:	f7ff ff01 	bl	80051f4 <lwip_netconn_is_err_msg>
 80053f2:	4606      	mov	r6, r0
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d1d6      	bne.n	80053a6 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 80053f8:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7ff ffba 	bl	8005374 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8005400:	6868      	ldr	r0, [r5, #4]
 8005402:	b110      	cbz	r0, 800540a <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8005404:	f003 fc88 	bl	8008d18 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005408:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 800540a:	4628      	mov	r0, r5
 800540c:	f7ff ff76 	bl	80052fc <netconn_free>
 8005410:	e7c9      	b.n	80053a6 <netconn_drain+0x32>
	...

08005414 <accept_function>:
{
 8005414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005416:	460f      	mov	r7, r1
 8005418:	4616      	mov	r6, r2
  if (conn == NULL) {
 800541a:	4605      	mov	r5, r0
 800541c:	b920      	cbnz	r0, 8005428 <accept_function+0x14>
    return ERR_VAL;
 800541e:	f06f 0405 	mvn.w	r4, #5
}
 8005422:	4620      	mov	r0, r4
 8005424:	b003      	add	sp, #12
 8005426:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005428:	f100 0414 	add.w	r4, r0, #20
 800542c:	4620      	mov	r0, r4
 800542e:	f006 f8de 	bl	800b5ee <sys_mbox_valid>
 8005432:	2800      	cmp	r0, #0
 8005434:	d0f3      	beq.n	800541e <accept_function+0xa>
  if (newpcb == NULL) {
 8005436:	b96f      	cbnz	r7, 8005454 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005438:	492f      	ldr	r1, [pc, #188]	; (80054f8 <accept_function+0xe4>)
 800543a:	4620      	mov	r0, r4
 800543c:	f006 f89a 	bl	800b574 <sys_mbox_trypost>
 8005440:	4602      	mov	r2, r0
 8005442:	2800      	cmp	r0, #0
 8005444:	d1eb      	bne.n	800541e <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005446:	6a2b      	ldr	r3, [r5, #32]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0e8      	beq.n	800541e <accept_function+0xa>
 800544c:	4601      	mov	r1, r0
 800544e:	4628      	mov	r0, r5
 8005450:	4798      	blx	r3
 8005452:	e7e4      	b.n	800541e <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8005454:	b136      	cbz	r6, 8005464 <accept_function+0x50>
 8005456:	4b29      	ldr	r3, [pc, #164]	; (80054fc <accept_function+0xe8>)
 8005458:	4929      	ldr	r1, [pc, #164]	; (8005500 <accept_function+0xec>)
 800545a:	482a      	ldr	r0, [pc, #168]	; (8005504 <accept_function+0xf0>)
 800545c:	f240 222a 	movw	r2, #554	; 0x22a
 8005460:	f006 f9b6 	bl	800b7d0 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005464:	6a29      	ldr	r1, [r5, #32]
 8005466:	7828      	ldrb	r0, [r5, #0]
 8005468:	f7ff ff08 	bl	800527c <netconn_alloc>
  if (newconn == NULL) {
 800546c:	4606      	mov	r6, r0
 800546e:	b968      	cbnz	r0, 800548c <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005470:	4921      	ldr	r1, [pc, #132]	; (80054f8 <accept_function+0xe4>)
 8005472:	4620      	mov	r0, r4
 8005474:	f006 f87e 	bl	800b574 <sys_mbox_trypost>
 8005478:	4602      	mov	r2, r0
 800547a:	b920      	cbnz	r0, 8005486 <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800547c:	6a2b      	ldr	r3, [r5, #32]
 800547e:	b113      	cbz	r3, 8005486 <accept_function+0x72>
 8005480:	4601      	mov	r1, r0
 8005482:	4628      	mov	r0, r5
 8005484:	4798      	blx	r3
    return ERR_MEM;
 8005486:	f04f 34ff 	mov.w	r4, #4294967295
 800548a:	e7ca      	b.n	8005422 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 800548c:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 800548e:	f7ff faf1 	bl	8004a74 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005492:	4620      	mov	r0, r4
 8005494:	4631      	mov	r1, r6
 8005496:	f006 f86d 	bl	800b574 <sys_mbox_trypost>
 800549a:	4604      	mov	r4, r0
 800549c:	b318      	cbz	r0, 80054e6 <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800549e:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 80054a0:	9001      	str	r0, [sp, #4]
 80054a2:	2100      	movs	r1, #0
 80054a4:	f002 ff14 	bl	80082d0 <tcp_arg>
    tcp_recv(pcb, NULL);
 80054a8:	9801      	ldr	r0, [sp, #4]
 80054aa:	2100      	movs	r1, #0
 80054ac:	f002 ff14 	bl	80082d8 <tcp_recv>
    tcp_sent(pcb, NULL);
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	2100      	movs	r1, #0
 80054b4:	f002 ff28 	bl	8008308 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80054b8:	2200      	movs	r2, #0
 80054ba:	4611      	mov	r1, r2
 80054bc:	9801      	ldr	r0, [sp, #4]
 80054be:	f002 ff57 	bl	8008370 <tcp_poll>
    tcp_err(pcb, NULL);
 80054c2:	2100      	movs	r1, #0
 80054c4:	9801      	ldr	r0, [sp, #4]
 80054c6:	f002 ff35 	bl	8008334 <tcp_err>
    newconn->pcb.tcp = NULL;
 80054ca:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 80054cc:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 80054d0:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 80054d2:	9001      	str	r0, [sp, #4]
 80054d4:	f006 f844 	bl	800b560 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80054d8:	9801      	ldr	r0, [sp, #4]
 80054da:	f006 f88d 	bl	800b5f8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80054de:	4630      	mov	r0, r6
 80054e0:	f7ff ff0c 	bl	80052fc <netconn_free>
    return ERR_MEM;
 80054e4:	e7cf      	b.n	8005486 <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80054e6:	6a2b      	ldr	r3, [r5, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d09a      	beq.n	8005422 <accept_function+0xe>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4601      	mov	r1, r0
 80054f0:	4628      	mov	r0, r5
 80054f2:	4798      	blx	r3
 80054f4:	e795      	b.n	8005422 <accept_function+0xe>
 80054f6:	bf00      	nop
 80054f8:	0800d3d4 	.word	0x0800d3d4
 80054fc:	0800d9fe 	.word	0x0800d9fe
 8005500:	0800dde3 	.word	0x0800dde3
 8005504:	0800d598 	.word	0x0800d598

08005508 <lwip_netconn_do_delconn>:
{
 8005508:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	785d      	ldrb	r5, [r3, #1]
{
 800550e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8005510:	b16d      	cbz	r5, 800552e <lwip_netconn_do_delconn+0x26>
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005518:	2b10      	cmp	r3, #16
 800551a:	d006      	beq.n	800552a <lwip_netconn_do_delconn+0x22>
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <lwip_netconn_do_delconn+0xe8>)
 800551e:	4935      	ldr	r1, [pc, #212]	; (80055f4 <lwip_netconn_do_delconn+0xec>)
 8005520:	4835      	ldr	r0, [pc, #212]	; (80055f8 <lwip_netconn_do_delconn+0xf0>)
 8005522:	f240 425e 	movw	r2, #1118	; 0x45e
 8005526:	f006 f953 	bl	800b7d0 <iprintf>
  if (((state != NETCONN_NONE) &&
 800552a:	2d02      	cmp	r5, #2
 800552c:	d143      	bne.n	80055b6 <lwip_netconn_do_delconn+0xae>
    msg->err = ERR_OK;
 800552e:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8005530:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8005532:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8005534:	f7ff ff1e 	bl	8005374 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	6843      	ldr	r3, [r0, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d049      	beq.n	80055d4 <lwip_netconn_do_delconn+0xcc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005540:	7803      	ldrb	r3, [r0, #0]
 8005542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005546:	2b10      	cmp	r3, #16
 8005548:	d143      	bne.n	80055d2 <lwip_netconn_do_delconn+0xca>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800554a:	69c3      	ldr	r3, [r0, #28]
 800554c:	b133      	cbz	r3, 800555c <lwip_netconn_do_delconn+0x54>
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <lwip_netconn_do_delconn+0xe8>)
 8005550:	492a      	ldr	r1, [pc, #168]	; (80055fc <lwip_netconn_do_delconn+0xf4>)
 8005552:	4829      	ldr	r0, [pc, #164]	; (80055f8 <lwip_netconn_do_delconn+0xf0>)
 8005554:	f240 4294 	movw	r2, #1172	; 0x494
 8005558:	f006 f93a 	bl	800b7d0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	2304      	movs	r3, #4
 8005560:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005562:	2303      	movs	r3, #3
 8005564:	7223      	strb	r3, [r4, #8]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005566:	2100      	movs	r1, #0
          msg->conn->current_msg = msg;
 8005568:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800556a:	f7ff fbcf 	bl	8004d0c <lwip_netconn_do_close_internal>
 800556e:	2800      	cmp	r0, #0
 8005570:	d03d      	beq.n	80055ee <lwip_netconn_do_delconn+0xe6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	2b04      	cmp	r3, #4
 8005578:	d006      	beq.n	8005588 <lwip_netconn_do_delconn+0x80>
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <lwip_netconn_do_delconn+0xe8>)
 800557c:	4920      	ldr	r1, [pc, #128]	; (8005600 <lwip_netconn_do_delconn+0xf8>)
 800557e:	481e      	ldr	r0, [pc, #120]	; (80055f8 <lwip_netconn_do_delconn+0xf0>)
 8005580:	f240 429a 	movw	r2, #1178	; 0x49a
 8005584:	f006 f924 	bl	800b7d0 <iprintf>
            UNLOCK_TCPIP_CORE();
 8005588:	481e      	ldr	r0, [pc, #120]	; (8005604 <lwip_netconn_do_delconn+0xfc>)
 800558a:	f006 f898 	bl	800b6be <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800558e:	6820      	ldr	r0, [r4, #0]
 8005590:	2100      	movs	r1, #0
 8005592:	300c      	adds	r0, #12
 8005594:	f006 f84a 	bl	800b62c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8005598:	481a      	ldr	r0, [pc, #104]	; (8005604 <lwip_netconn_do_delconn+0xfc>)
 800559a:	f006 f88b 	bl	800b6b4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	b323      	cbz	r3, 80055ee <lwip_netconn_do_delconn+0xe6>
}
 80055a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <lwip_netconn_do_delconn+0xe8>)
 80055aa:	4915      	ldr	r1, [pc, #84]	; (8005600 <lwip_netconn_do_delconn+0xf8>)
 80055ac:	4812      	ldr	r0, [pc, #72]	; (80055f8 <lwip_netconn_do_delconn+0xf0>)
 80055ae:	f240 429e 	movw	r2, #1182	; 0x49e
 80055b2:	f006 b90d 	b.w	800b7d0 <iprintf>
       (state != NETCONN_LISTEN) &&
 80055b6:	2d03      	cmp	r5, #3
 80055b8:	d103      	bne.n	80055c2 <lwip_netconn_do_delconn+0xba>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	7e1b      	ldrb	r3, [r3, #24]
 80055be:	075b      	lsls	r3, r3, #29
 80055c0:	d4b5      	bmi.n	800552e <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 80055c2:	23fb      	movs	r3, #251	; 0xfb
 80055c4:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80055c6:	6820      	ldr	r0, [r4, #0]
}
 80055c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80055cc:	300c      	adds	r0, #12
 80055ce:	f006 b84e 	b.w	800b66e <sys_sem_valid>
      msg->conn->pcb.tcp = NULL;
 80055d2:	6045      	str	r5, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80055d4:	6a03      	ldr	r3, [r0, #32]
 80055d6:	b113      	cbz	r3, 80055de <lwip_netconn_do_delconn+0xd6>
 80055d8:	2200      	movs	r2, #0
 80055da:	4611      	mov	r1, r2
 80055dc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	6a03      	ldr	r3, [r0, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <lwip_netconn_do_delconn+0xbe>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2102      	movs	r1, #2
 80055ea:	4798      	blx	r3
 80055ec:	e7eb      	b.n	80055c6 <lwip_netconn_do_delconn+0xbe>
}
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	0800d9fe 	.word	0x0800d9fe
 80055f4:	0800de0a 	.word	0x0800de0a
 80055f8:	0800d598 	.word	0x0800d598
 80055fc:	0800de1e 	.word	0x0800de1e
 8005600:	0800de39 	.word	0x0800de39
 8005604:	20009250 	.word	0x20009250

08005608 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8005608:	6803      	ldr	r3, [r0, #0]
{
 800560a:	b510      	push	{r4, lr}
 800560c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800560e:	6858      	ldr	r0, [r3, #4]
 8005610:	b150      	cbz	r0, 8005628 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005618:	2b10      	cmp	r3, #16
 800561a:	d105      	bne.n	8005628 <lwip_netconn_do_bind+0x20>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800561c:	89a2      	ldrh	r2, [r4, #12]
 800561e:	68a1      	ldr	r1, [r4, #8]
 8005620:	f002 fd12 	bl	8008048 <tcp_bind>
  msg->err = err;
 8005624:	7120      	strb	r0, [r4, #4]
}
 8005626:	bd10      	pop	{r4, pc}
    err = ERR_VAL;
 8005628:	f06f 0005 	mvn.w	r0, #5
 800562c:	e7fa      	b.n	8005624 <lwip_netconn_do_bind+0x1c>
	...

08005630 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8005630:	6803      	ldr	r3, [r0, #0]
{
 8005632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005634:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005636:	6858      	ldr	r0, [r3, #4]
 8005638:	2800      	cmp	r0, #0
 800563a:	d04f      	beq.n	80056dc <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005642:	2a10      	cmp	r2, #16
 8005644:	d14c      	bne.n	80056e0 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d143      	bne.n	80056d4 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800564c:	7d03      	ldrb	r3, [r0, #20]
 800564e:	b11b      	cbz	r3, 8005658 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8005650:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8005652:	f88d 3007 	strb.w	r3, [sp, #7]
 8005656:	e031      	b.n	80056bc <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8005658:	f10d 0207 	add.w	r2, sp, #7
 800565c:	21ff      	movs	r1, #255	; 0xff
 800565e:	f002 fd49 	bl	80080f4 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8005662:	4605      	mov	r5, r0
 8005664:	b350      	cbz	r0, 80056bc <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	3010      	adds	r0, #16
 800566a:	f005 ffc0 	bl	800b5ee <sys_mbox_valid>
 800566e:	b138      	cbz	r0, 8005680 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	3010      	adds	r0, #16
 8005674:	f005 ff74 	bl	800b560 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	3010      	adds	r0, #16
 800567c:	f005 ffbc 	bl	800b5f8 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005680:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8005682:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005684:	3014      	adds	r0, #20
            err = ERR_OK;
 8005686:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800568a:	f005 ffb0 	bl	800b5ee <sys_mbox_valid>
 800568e:	b930      	cbnz	r0, 800569e <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	2106      	movs	r1, #6
 8005694:	3014      	adds	r0, #20
 8005696:	f005 ff53 	bl	800b540 <sys_mbox_new>
 800569a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800569e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80056a2:	b983      	cbnz	r3, 80056c6 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 80056a4:	6821      	ldr	r1, [r4, #0]
 80056a6:	2302      	movs	r3, #2
 80056a8:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 80056aa:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80056ac:	4628      	mov	r0, r5
 80056ae:	f002 fe0f 	bl	80082d0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	490b      	ldr	r1, [pc, #44]	; (80056e4 <lwip_netconn_do_listen+0xb4>)
 80056b6:	6858      	ldr	r0, [r3, #4]
 80056b8:	f002 fe54 	bl	8008364 <tcp_accept>
  msg->err = err;
 80056bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056c0:	7123      	strb	r3, [r4, #4]
}
 80056c2:	b003      	add	sp, #12
 80056c4:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 80056c6:	4628      	mov	r0, r5
 80056c8:	f003 f9a2 	bl	8008a10 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	e7f3      	b.n	80056bc <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d101      	bne.n	80056dc <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e7ba      	b.n	8005652 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 80056dc:	23f5      	movs	r3, #245	; 0xf5
 80056de:	e7b8      	b.n	8005652 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 80056e0:	23f0      	movs	r3, #240	; 0xf0
 80056e2:	e7b6      	b.n	8005652 <lwip_netconn_do_listen+0x22>
 80056e4:	08005415 	.word	0x08005415

080056e8 <lwip_netconn_do_recv>:
{
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
{
 80056f2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80056f4:	b192      	cbz	r2, 800571c <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d10d      	bne.n	800571c <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8005700:	6885      	ldr	r5, [r0, #8]
 8005702:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8005706:	42bd      	cmp	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	462e      	mov	r6, r5
 800570c:	bf28      	it	cs
 800570e:	463e      	movcs	r6, r7
 8005710:	6858      	ldr	r0, [r3, #4]
 8005712:	b2b1      	uxth	r1, r6
 8005714:	f002 fd88 	bl	8008228 <tcp_recved>
      } while (remaining != 0);
 8005718:	1bad      	subs	r5, r5, r6
 800571a:	d1f4      	bne.n	8005706 <lwip_netconn_do_recv+0x1e>
}
 800571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005720 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005720:	b510      	push	{r4, lr}
 8005722:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8005724:	6800      	ldr	r0, [r0, #0]
 8005726:	f7ff f848 	bl	80047ba <netconn_err>
  if (err == ERR_OK) {
 800572a:	2800      	cmp	r0, #0
 800572c:	d14a      	bne.n	80057c4 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005736:	2a10      	cmp	r2, #16
 8005738:	d144      	bne.n	80057c4 <lwip_netconn_do_write+0xa4>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800573a:	785a      	ldrb	r2, [r3, #1]
 800573c:	2a00      	cmp	r2, #0
 800573e:	d13f      	bne.n	80057c0 <lwip_netconn_do_write+0xa0>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	2a00      	cmp	r2, #0
 8005744:	d040      	beq.n	80057c8 <lwip_netconn_do_write+0xa8>
        msg->conn->state = NETCONN_WRITE;
 8005746:	2201      	movs	r2, #1
 8005748:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	b133      	cbz	r3, 800575c <lwip_netconn_do_write+0x3c>
 800574e:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <lwip_netconn_do_write+0xb0>)
 8005750:	4920      	ldr	r1, [pc, #128]	; (80057d4 <lwip_netconn_do_write+0xb4>)
 8005752:	4821      	ldr	r0, [pc, #132]	; (80057d8 <lwip_netconn_do_write+0xb8>)
 8005754:	f240 7223 	movw	r2, #1827	; 0x723
 8005758:	f006 f83a 	bl	800b7d0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800575c:	6963      	ldr	r3, [r4, #20]
 800575e:	b933      	cbnz	r3, 800576e <lwip_netconn_do_write+0x4e>
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <lwip_netconn_do_write+0xb0>)
 8005762:	491e      	ldr	r1, [pc, #120]	; (80057dc <lwip_netconn_do_write+0xbc>)
 8005764:	481c      	ldr	r0, [pc, #112]	; (80057d8 <lwip_netconn_do_write+0xb8>)
 8005766:	f240 7224 	movw	r2, #1828	; 0x724
 800576a:	f006 f831 	bl	800b7d0 <iprintf>
        msg->conn->current_msg = msg;
 800576e:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005770:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8005772:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005774:	f7ff f9a0 	bl	8004ab8 <lwip_netconn_do_writemore>
 8005778:	b328      	cbz	r0, 80057c6 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d006      	beq.n	8005790 <lwip_netconn_do_write+0x70>
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <lwip_netconn_do_write+0xb0>)
 8005784:	4916      	ldr	r1, [pc, #88]	; (80057e0 <lwip_netconn_do_write+0xc0>)
 8005786:	4814      	ldr	r0, [pc, #80]	; (80057d8 <lwip_netconn_do_write+0xb8>)
 8005788:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800578c:	f006 f820 	bl	800b7d0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8005790:	4814      	ldr	r0, [pc, #80]	; (80057e4 <lwip_netconn_do_write+0xc4>)
 8005792:	f005 ff94 	bl	800b6be <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005796:	6820      	ldr	r0, [r4, #0]
 8005798:	2100      	movs	r1, #0
 800579a:	300c      	adds	r0, #12
 800579c:	f005 ff46 	bl	800b62c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80057a0:	4810      	ldr	r0, [pc, #64]	; (80057e4 <lwip_netconn_do_write+0xc4>)
 80057a2:	f005 ff87 	bl	800b6b4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10b      	bne.n	80057c6 <lwip_netconn_do_write+0xa6>
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 80057ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <lwip_netconn_do_write+0xb0>)
 80057b4:	490a      	ldr	r1, [pc, #40]	; (80057e0 <lwip_netconn_do_write+0xc0>)
 80057b6:	4808      	ldr	r0, [pc, #32]	; (80057d8 <lwip_netconn_do_write+0xb8>)
 80057b8:	f240 722c 	movw	r2, #1836	; 0x72c
 80057bc:	f006 b808 	b.w	800b7d0 <iprintf>
        err = ERR_INPROGRESS;
 80057c0:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 80057c4:	7120      	strb	r0, [r4, #4]
}
 80057c6:	bd10      	pop	{r4, pc}
        err = ERR_CONN;
 80057c8:	f06f 000a 	mvn.w	r0, #10
 80057cc:	e7fa      	b.n	80057c4 <lwip_netconn_do_write+0xa4>
 80057ce:	bf00      	nop
 80057d0:	0800d9fe 	.word	0x0800d9fe
 80057d4:	0800de1e 	.word	0x0800de1e
 80057d8:	0800d598 	.word	0x0800d598
 80057dc:	0800de55 	.word	0x0800de55
 80057e0:	0800de39 	.word	0x0800de39
 80057e4:	20009250 	.word	0x20009250

080057e8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80057ec:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80057ee:	6843      	ldr	r3, [r0, #4]
 80057f0:	b163      	cbz	r3, 800580c <lwip_netconn_do_close+0x24>
 80057f2:	7803      	ldrb	r3, [r0, #0]
 80057f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d107      	bne.n	800580c <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80057fc:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80057fe:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005800:	2a03      	cmp	r2, #3
 8005802:	d001      	beq.n	8005808 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005804:	2b02      	cmp	r3, #2
 8005806:	d001      	beq.n	800580c <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8005808:	2b03      	cmp	r3, #3
 800580a:	d102      	bne.n	8005812 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800580c:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800580e:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8005810:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8005816:	23fb      	movs	r3, #251	; 0xfb
 8005818:	e7f9      	b.n	800580e <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800581a:	07d3      	lsls	r3, r2, #31
 800581c:	d501      	bpl.n	8005822 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 800581e:	f7ff fda9 	bl	8005374 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	b133      	cbz	r3, 8005836 <lwip_netconn_do_close+0x4e>
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <lwip_netconn_do_close+0xa8>)
 800582a:	491a      	ldr	r1, [pc, #104]	; (8005894 <lwip_netconn_do_close+0xac>)
 800582c:	481a      	ldr	r0, [pc, #104]	; (8005898 <lwip_netconn_do_close+0xb0>)
 800582e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005832:	f005 ffcd 	bl	800b7d0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	2304      	movs	r3, #4
 800583a:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800583c:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800583e:	2100      	movs	r1, #0
 8005840:	f7ff fa64 	bl	8004d0c <lwip_netconn_do_close_internal>
 8005844:	2800      	cmp	r0, #0
 8005846:	d0e3      	beq.n	8005810 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d006      	beq.n	800585e <lwip_netconn_do_close+0x76>
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <lwip_netconn_do_close+0xa8>)
 8005852:	4912      	ldr	r1, [pc, #72]	; (800589c <lwip_netconn_do_close+0xb4>)
 8005854:	4810      	ldr	r0, [pc, #64]	; (8005898 <lwip_netconn_do_close+0xb0>)
 8005856:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800585a:	f005 ffb9 	bl	800b7d0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800585e:	4810      	ldr	r0, [pc, #64]	; (80058a0 <lwip_netconn_do_close+0xb8>)
 8005860:	f005 ff2d 	bl	800b6be <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	300c      	adds	r0, #12
 800586a:	f005 fedf 	bl	800b62c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800586e:	480c      	ldr	r0, [pc, #48]	; (80058a0 <lwip_netconn_do_close+0xb8>)
 8005870:	f005 ff20 	bl	800b6b4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0c9      	beq.n	8005810 <lwip_netconn_do_close+0x28>
}
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <lwip_netconn_do_close+0xa8>)
 8005882:	4906      	ldr	r1, [pc, #24]	; (800589c <lwip_netconn_do_close+0xb4>)
 8005884:	4804      	ldr	r0, [pc, #16]	; (8005898 <lwip_netconn_do_close+0xb0>)
 8005886:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800588a:	f005 bfa1 	b.w	800b7d0 <iprintf>
 800588e:	bf00      	nop
 8005890:	0800d9fe 	.word	0x0800d9fe
 8005894:	0800de1e 	.word	0x0800de1e
 8005898:	0800d598 	.word	0x0800d598
 800589c:	0800de39 	.word	0x0800de39
 80058a0:	20009250 	.word	0x20009250

080058a4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80058a4:	b510      	push	{r4, lr}
  if (buf != NULL) {
 80058a6:	4604      	mov	r4, r0
 80058a8:	b160      	cbz	r0, 80058c4 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	b120      	cbz	r0, 80058b8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80058ae:	f002 f8cf 	bl	8007a50 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 80058b8:	4621      	mov	r1, r4
 80058ba:	2005      	movs	r0, #5
  }
}
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 80058c0:	f001 be6e 	b.w	80075a0 <memp_free>
}
 80058c4:	bd10      	pop	{r4, pc}
	...

080058c8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80058c8:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80058ca:	b940      	cbnz	r0, 80058de <netbuf_data+0x16>
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <netbuf_data+0x44>)
 80058ce:	4910      	ldr	r1, [pc, #64]	; (8005910 <netbuf_data+0x48>)
 80058d0:	22c6      	movs	r2, #198	; 0xc6
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80058d2:	4810      	ldr	r0, [pc, #64]	; (8005914 <netbuf_data+0x4c>)
 80058d4:	f005 ff7c 	bl	800b7d0 <iprintf>
 80058d8:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80058dc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80058de:	b919      	cbnz	r1, 80058e8 <netbuf_data+0x20>
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <netbuf_data+0x44>)
 80058e2:	490d      	ldr	r1, [pc, #52]	; (8005918 <netbuf_data+0x50>)
 80058e4:	22c7      	movs	r2, #199	; 0xc7
 80058e6:	e7f4      	b.n	80058d2 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80058e8:	b91a      	cbnz	r2, 80058f2 <netbuf_data+0x2a>
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <netbuf_data+0x44>)
 80058ec:	490b      	ldr	r1, [pc, #44]	; (800591c <netbuf_data+0x54>)
 80058ee:	22c8      	movs	r2, #200	; 0xc8
 80058f0:	e7ef      	b.n	80058d2 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 80058f2:	6843      	ldr	r3, [r0, #4]
 80058f4:	b133      	cbz	r3, 8005904 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80058fa:	6843      	ldr	r3, [r0, #4]
 80058fc:	895b      	ldrh	r3, [r3, #10]
 80058fe:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8005900:	2000      	movs	r0, #0
 8005902:	e7eb      	b.n	80058dc <netbuf_data+0x14>
    return ERR_BUF;
 8005904:	f06f 0001 	mvn.w	r0, #1
 8005908:	e7e8      	b.n	80058dc <netbuf_data+0x14>
 800590a:	bf00      	nop
 800590c:	0800de7e 	.word	0x0800de7e
 8005910:	0800df9a 	.word	0x0800df9a
 8005914:	0800d598 	.word	0x0800d598
 8005918:	0800dfb3 	.word	0x0800dfb3
 800591c:	0800dfd0 	.word	0x0800dfd0

08005920 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8005920:	4c2c      	ldr	r4, [pc, #176]	; (80059d4 <tcpip_thread+0xb4>)
{
 8005922:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 8005924:	4620      	mov	r0, r4
 8005926:	f005 fec5 	bl	800b6b4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800592a:	6863      	ldr	r3, [r4, #4]
 800592c:	b10b      	cbz	r3, 8005932 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 800592e:	68a0      	ldr	r0, [r4, #8]
 8005930:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8005932:	4d28      	ldr	r5, [pc, #160]	; (80059d4 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005934:	4e28      	ldr	r6, [pc, #160]	; (80059d8 <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005936:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 800593a:	f005 fd67 	bl	800b40c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800593e:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8005940:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005942:	d113      	bne.n	800596c <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8005944:	4628      	mov	r0, r5
 8005946:	f005 feba 	bl	800b6be <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800594a:	2200      	movs	r2, #0
 800594c:	a901      	add	r1, sp, #4
 800594e:	4638      	mov	r0, r7
 8005950:	f005 fe1a 	bl	800b588 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005954:	4628      	mov	r0, r5
 8005956:	f005 fead 	bl	800b6b4 <sys_mutex_lock>
    if (msg == NULL) {
 800595a:	9c01      	ldr	r4, [sp, #4]
 800595c:	b9cc      	cbnz	r4, 8005992 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800595e:	4633      	mov	r3, r6
 8005960:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005962:	491e      	ldr	r1, [pc, #120]	; (80059dc <tcpip_thread+0xbc>)
 8005964:	481e      	ldr	r0, [pc, #120]	; (80059e0 <tcpip_thread+0xc0>)
 8005966:	f005 ff33 	bl	800b7d0 <iprintf>
      break;
 800596a:	e7e6      	b.n	800593a <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 800596c:	b910      	cbnz	r0, 8005974 <tcpip_thread+0x54>
    sys_check_timeouts();
 800596e:	f005 fd31 	bl	800b3d4 <sys_check_timeouts>
    goto again;
 8005972:	e7e2      	b.n	800593a <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8005974:	4628      	mov	r0, r5
 8005976:	f005 fea2 	bl	800b6be <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800597a:	4622      	mov	r2, r4
 800597c:	a901      	add	r1, sp, #4
 800597e:	4638      	mov	r0, r7
 8005980:	f005 fe02 	bl	800b588 <sys_arch_mbox_fetch>
 8005984:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005986:	4628      	mov	r0, r5
 8005988:	f005 fe94 	bl	800b6b4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800598c:	3401      	adds	r4, #1
 800598e:	d0ee      	beq.n	800596e <tcpip_thread+0x4e>
 8005990:	e7e3      	b.n	800595a <tcpip_thread+0x3a>
  switch (msg->type) {
 8005992:	7823      	ldrb	r3, [r4, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d00f      	beq.n	80059b8 <tcpip_thread+0x98>
 8005998:	2b02      	cmp	r3, #2
 800599a:	d013      	beq.n	80059c4 <tcpip_thread+0xa4>
 800599c:	b9b3      	cbnz	r3, 80059cc <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800599e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80059a2:	6860      	ldr	r0, [r4, #4]
 80059a4:	4798      	blx	r3
 80059a6:	b110      	cbz	r0, 80059ae <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 80059a8:	6860      	ldr	r0, [r4, #4]
 80059aa:	f002 f851 	bl	8007a50 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80059ae:	4621      	mov	r1, r4
 80059b0:	2008      	movs	r0, #8
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80059b2:	f001 fdf5 	bl	80075a0 <memp_free>
      break;
 80059b6:	e7c0      	b.n	800593a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80059b8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80059bc:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80059be:	4621      	mov	r1, r4
 80059c0:	2007      	movs	r0, #7
 80059c2:	e7f6      	b.n	80059b2 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80059c4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80059c8:	4798      	blx	r3
      break;
 80059ca:	e7b6      	b.n	800593a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80059cc:	4633      	mov	r3, r6
 80059ce:	22cf      	movs	r2, #207	; 0xcf
 80059d0:	e7c7      	b.n	8005962 <tcpip_thread+0x42>
 80059d2:	bf00      	nop
 80059d4:	20009250 	.word	0x20009250
 80059d8:	0800e01c 	.word	0x0800e01c
 80059dc:	0800e092 	.word	0x0800e092
 80059e0:	0800d598 	.word	0x0800d598

080059e4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80059e8:	4810      	ldr	r0, [pc, #64]	; (8005a2c <tcpip_inpkt+0x48>)
{
 80059ea:	460e      	mov	r6, r1
 80059ec:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80059ee:	f005 fdfe 	bl	800b5ee <sys_mbox_valid>
 80059f2:	b928      	cbnz	r0, 8005a00 <tcpip_inpkt+0x1c>
 80059f4:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <tcpip_inpkt+0x4c>)
 80059f6:	490f      	ldr	r1, [pc, #60]	; (8005a34 <tcpip_inpkt+0x50>)
 80059f8:	480f      	ldr	r0, [pc, #60]	; (8005a38 <tcpip_inpkt+0x54>)
 80059fa:	22fc      	movs	r2, #252	; 0xfc
 80059fc:	f005 fee8 	bl	800b7d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005a00:	2008      	movs	r0, #8
 8005a02:	f001 fd9d 	bl	8007540 <memp_malloc>
  if (msg == NULL) {
 8005a06:	4604      	mov	r4, r0
 8005a08:	b168      	cbz	r0, 8005a26 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005a0a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 8005a0c:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_INPKT;
 8005a10:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8005a12:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005a14:	4601      	mov	r1, r0
 8005a16:	4805      	ldr	r0, [pc, #20]	; (8005a2c <tcpip_inpkt+0x48>)
 8005a18:	f005 fdac 	bl	800b574 <sys_mbox_trypost>
 8005a1c:	b128      	cbz	r0, 8005a2a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005a1e:	4621      	mov	r1, r4
 8005a20:	2008      	movs	r0, #8
 8005a22:	f001 fdbd 	bl	80075a0 <memp_free>
    return ERR_MEM;
 8005a26:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2c:	2000925c 	.word	0x2000925c
 8005a30:	0800e01c 	.word	0x0800e01c
 8005a34:	0800e0b0 	.word	0x0800e0b0
 8005a38:	0800d598 	.word	0x0800d598

08005a3c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005a3c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8005a40:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8005a44:	bf14      	ite	ne
 8005a46:	4a02      	ldrne	r2, [pc, #8]	; (8005a50 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005a48:	4a02      	ldreq	r2, [pc, #8]	; (8005a54 <tcpip_input+0x18>)
 8005a4a:	f7ff bfcb 	b.w	80059e4 <tcpip_inpkt>
 8005a4e:	bf00      	nop
 8005a50:	0800b431 	.word	0x0800b431
 8005a54:	08006481 	.word	0x08006481

08005a58 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8005a58:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8005a5a:	4e06      	ldr	r6, [pc, #24]	; (8005a74 <tcpip_send_msg_wait_sem+0x1c>)
{
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005a60:	4630      	mov	r0, r6
 8005a62:	f005 fe27 	bl	800b6b4 <sys_mutex_lock>
  fn(apimsg);
 8005a66:	4628      	mov	r0, r5
 8005a68:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f005 fe27 	bl	800b6be <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8005a70:	2000      	movs	r0, #0
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	20009250 	.word	0x20009250

08005a78 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	460c      	mov	r4, r1
  lwip_init();
 8005a7e:	f001 fa83 	bl	8006f88 <lwip_init>

  tcpip_init_done = initfunc;
 8005a82:	4812      	ldr	r0, [pc, #72]	; (8005acc <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005a84:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8005a86:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8005a8a:	300c      	adds	r0, #12
 8005a8c:	f005 fd58 	bl	800b540 <sys_mbox_new>
 8005a90:	b130      	cbz	r0, 8005aa0 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <tcpip_init+0x58>)
 8005a94:	490f      	ldr	r1, [pc, #60]	; (8005ad4 <tcpip_init+0x5c>)
 8005a96:	4810      	ldr	r0, [pc, #64]	; (8005ad8 <tcpip_init+0x60>)
 8005a98:	f240 2261 	movw	r2, #609	; 0x261
 8005a9c:	f005 fe98 	bl	800b7d0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8005aa0:	480a      	ldr	r0, [pc, #40]	; (8005acc <tcpip_init+0x54>)
 8005aa2:	f005 fdf9 	bl	800b698 <sys_mutex_new>
 8005aa6:	b130      	cbz	r0, 8005ab6 <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <tcpip_init+0x58>)
 8005aaa:	490c      	ldr	r1, [pc, #48]	; (8005adc <tcpip_init+0x64>)
 8005aac:	480a      	ldr	r0, [pc, #40]	; (8005ad8 <tcpip_init+0x60>)
 8005aae:	f240 2265 	movw	r2, #613	; 0x265
 8005ab2:	f005 fe8d 	bl	800b7d0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	4909      	ldr	r1, [pc, #36]	; (8005ae0 <tcpip_init+0x68>)
 8005abc:	4809      	ldr	r0, [pc, #36]	; (8005ae4 <tcpip_init+0x6c>)
 8005abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f005 fdfe 	bl	800b6c4 <sys_thread_new>
}
 8005ac8:	b003      	add	sp, #12
 8005aca:	bd30      	pop	{r4, r5, pc}
 8005acc:	20009250 	.word	0x20009250
 8005ad0:	0800e01c 	.word	0x0800e01c
 8005ad4:	0800e0bd 	.word	0x0800e0bd
 8005ad8:	0800d598 	.word	0x0800d598
 8005adc:	0800e0e0 	.word	0x0800e0e0
 8005ae0:	08005921 	.word	0x08005921
 8005ae4:	0800e101 	.word	0x0800e101

08005ae8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005ae8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005aea:	2618      	movs	r6, #24
 8005aec:	4c07      	ldr	r4, [pc, #28]	; (8005b0c <etharp_free_entry+0x24>)
 8005aee:	4346      	muls	r6, r0
{
 8005af0:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8005af2:	59a0      	ldr	r0, [r4, r6]
 8005af4:	b118      	cbz	r0, 8005afe <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005af6:	f001 ffab 	bl	8007a50 <pbuf_free>
    arp_table[i].q = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8005afe:	2018      	movs	r0, #24
 8005b00:	fb00 4405 	mla	r4, r0, r5, r4
 8005b04:	2300      	movs	r3, #0
 8005b06:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20009260 	.word	0x20009260

08005b10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8005b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8005b16:	f04f 0e0a 	mov.w	lr, #10
{
 8005b1a:	e9cd 2100 	strd	r2, r1, [sp]
 8005b1e:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <etharp_find_entry+0x10c>)
 8005b20:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005b22:	4699      	mov	r9, r3
 8005b24:	469b      	mov	fp, r3
 8005b26:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8005b28:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005b2a:	4675      	mov	r5, lr
 8005b2c:	46f0      	mov	r8, lr
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005b2e:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8005b30:	f892 a014 	ldrb.w	sl, [r2, #20]
 8005b34:	b218      	sxth	r0, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005b36:	d11a      	bne.n	8005b6e <etharp_find_entry+0x5e>
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	d05e      	beq.n	8005bfc <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005b3e:	b156      	cbz	r6, 8005b56 <etharp_find_entry+0x46>
 8005b40:	6831      	ldr	r1, [r6, #0]
 8005b42:	6857      	ldr	r7, [r2, #4]
 8005b44:	42b9      	cmp	r1, r7
 8005b46:	d106      	bne.n	8005b56 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8005b48:	9900      	ldr	r1, [sp, #0]
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d049      	beq.n	8005be2 <etharp_find_entry+0xd2>
 8005b4e:	6891      	ldr	r1, [r2, #8]
 8005b50:	9f00      	ldr	r7, [sp, #0]
 8005b52:	42b9      	cmp	r1, r7
 8005b54:	d045      	beq.n	8005be2 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005b56:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 8005b5a:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8005b5c:	d149      	bne.n	8005bf2 <etharp_find_entry+0xe2>
        if (arp_table[i].q != NULL) {
 8005b5e:	6817      	ldr	r7, [r2, #0]
 8005b60:	2f00      	cmp	r7, #0
 8005b62:	d041      	beq.n	8005be8 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8005b64:	4561      	cmp	r1, ip
 8005b66:	d305      	bcc.n	8005b74 <etharp_find_entry+0x64>
 8005b68:	468c      	mov	ip, r1
 8005b6a:	4686      	mov	lr, r0
 8005b6c:	e002      	b.n	8005b74 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005b6e:	f1ba 0f00 	cmp.w	sl, #0
 8005b72:	d1e4      	bne.n	8005b3e <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005b74:	3301      	adds	r3, #1
 8005b76:	2b0a      	cmp	r3, #10
 8005b78:	f102 0218 	add.w	r2, r2, #24
 8005b7c:	d1d7      	bne.n	8005b2e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d143      	bne.n	8005c0c <etharp_find_entry+0xfc>
 8005b84:	2c0a      	cmp	r4, #10
 8005b86:	d111      	bne.n	8005bac <etharp_find_entry+0x9c>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8005b88:	2d0a      	cmp	r5, #10
 8005b8a:	d039      	beq.n	8005c00 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005b8c:	2318      	movs	r3, #24
 8005b8e:	4a23      	ldr	r2, [pc, #140]	; (8005c1c <etharp_find_entry+0x10c>)
 8005b90:	436b      	muls	r3, r5
 8005b92:	58d3      	ldr	r3, [r2, r3]
 8005b94:	b133      	cbz	r3, 8005ba4 <etharp_find_entry+0x94>
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <etharp_find_entry+0x110>)
 8005b98:	4922      	ldr	r1, [pc, #136]	; (8005c24 <etharp_find_entry+0x114>)
 8005b9a:	4823      	ldr	r0, [pc, #140]	; (8005c28 <etharp_find_entry+0x118>)
 8005b9c:	f240 126d 	movw	r2, #365	; 0x16d
 8005ba0:	f005 fe16 	bl	800b7d0 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f7ff ff9f 	bl	8005ae8 <etharp_free_entry>
 8005baa:	462c      	mov	r4, r5
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005bac:	4d1b      	ldr	r5, [pc, #108]	; (8005c1c <etharp_find_entry+0x10c>)
 8005bae:	2318      	movs	r3, #24
 8005bb0:	fb03 5304 	mla	r3, r3, r4, r5
 8005bb4:	7d1b      	ldrb	r3, [r3, #20]
 8005bb6:	b133      	cbz	r3, 8005bc6 <etharp_find_entry+0xb6>
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <etharp_find_entry+0x110>)
 8005bba:	491c      	ldr	r1, [pc, #112]	; (8005c2c <etharp_find_entry+0x11c>)
 8005bbc:	481a      	ldr	r0, [pc, #104]	; (8005c28 <etharp_find_entry+0x118>)
 8005bbe:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005bc2:	f005 fe05 	bl	800b7d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8005bc6:	b126      	cbz	r6, 8005bd2 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8005bc8:	2318      	movs	r3, #24
 8005bca:	fb03 5304 	mla	r3, r3, r4, r5
 8005bce:	6832      	ldr	r2, [r6, #0]
 8005bd0:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8005bd2:	2318      	movs	r3, #24
 8005bd4:	fb03 5304 	mla	r3, r3, r4, r5
 8005bd8:	2200      	movs	r2, #0
 8005bda:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8005bdc:	9a00      	ldr	r2, [sp, #0]
 8005bde:	609a      	str	r2, [r3, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8005be0:	4620      	mov	r0, r4
}
 8005be2:	b003      	add	sp, #12
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005be8:	4559      	cmp	r1, fp
 8005bea:	d3c3      	bcc.n	8005b74 <etharp_find_entry+0x64>
 8005bec:	468b      	mov	fp, r1
 8005bee:	4680      	mov	r8, r0
 8005bf0:	e7c0      	b.n	8005b74 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8005bf2:	4549      	cmp	r1, r9
 8005bf4:	d3be      	bcc.n	8005b74 <etharp_find_entry+0x64>
 8005bf6:	4689      	mov	r9, r1
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	e7bb      	b.n	8005b74 <etharp_find_entry+0x64>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	e7b9      	b.n	8005b74 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005c00:	f1b8 0f0a 	cmp.w	r8, #10
 8005c04:	d105      	bne.n	8005c12 <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005c06:	f1be 0f0a 	cmp.w	lr, #10
 8005c0a:	d104      	bne.n	8005c16 <etharp_find_entry+0x106>
    return (s16_t)ERR_MEM;
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	e7e7      	b.n	8005be2 <etharp_find_entry+0xd2>
 8005c12:	4645      	mov	r5, r8
 8005c14:	e7c6      	b.n	8005ba4 <etharp_find_entry+0x94>
 8005c16:	4675      	mov	r5, lr
 8005c18:	e7c4      	b.n	8005ba4 <etharp_find_entry+0x94>
 8005c1a:	bf00      	nop
 8005c1c:	20009260 	.word	0x20009260
 8005c20:	0800e108 	.word	0x0800e108
 8005c24:	0800e185 	.word	0x0800e185
 8005c28:	0800d598 	.word	0x0800d598
 8005c2c:	0800e19c 	.word	0x0800e19c

08005c30 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005c30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005c38:	4688      	mov	r8, r1
 8005c3a:	4691      	mov	r9, r2
 8005c3c:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005c3e:	4607      	mov	r7, r0
 8005c40:	b930      	cbnz	r0, 8005c50 <etharp_raw+0x20>
 8005c42:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <etharp_raw+0xc8>)
 8005c44:	492d      	ldr	r1, [pc, #180]	; (8005cfc <etharp_raw+0xcc>)
 8005c46:	482e      	ldr	r0, [pc, #184]	; (8005d00 <etharp_raw+0xd0>)
 8005c48:	f240 4257 	movw	r2, #1111	; 0x457
 8005c4c:	f005 fdc0 	bl	800b7d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005c50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005c54:	211c      	movs	r1, #28
 8005c56:	200e      	movs	r0, #14
 8005c58:	f001 ff62 	bl	8007b20 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d047      	beq.n	8005cf2 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005c62:	8943      	ldrh	r3, [r0, #10]
 8005c64:	2b1b      	cmp	r3, #27
 8005c66:	d806      	bhi.n	8005c76 <etharp_raw+0x46>
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <etharp_raw+0xc8>)
 8005c6a:	4926      	ldr	r1, [pc, #152]	; (8005d04 <etharp_raw+0xd4>)
 8005c6c:	4824      	ldr	r0, [pc, #144]	; (8005d00 <etharp_raw+0xd0>)
 8005c6e:	f240 4262 	movw	r2, #1122	; 0x462
 8005c72:	f005 fdad 	bl	800b7d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005c76:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8005c7a:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8005c7c:	f001 f930 	bl	8006ee0 <lwip_htons>
 8005c80:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d006      	beq.n	8005c98 <etharp_raw+0x68>
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <etharp_raw+0xc8>)
 8005c8c:	491e      	ldr	r1, [pc, #120]	; (8005d08 <etharp_raw+0xd8>)
 8005c8e:	481c      	ldr	r0, [pc, #112]	; (8005d00 <etharp_raw+0xd0>)
 8005c90:	f240 4269 	movw	r2, #1129	; 0x469
 8005c94:	f005 fd9c 	bl	800b7d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	88b3      	ldrh	r3, [r6, #4]
 8005c9e:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8005ca0:	f8da 3000 	ldr.w	r3, [sl]
 8005ca4:	f8c4 3012 	str.w	r3, [r4, #18]
 8005ca8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8005cac:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8005cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8005cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005cc8:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005cca:	2600      	movs	r6, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8005ccc:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005cce:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8005cd2:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005cd4:	70e6      	strb	r6, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	4629      	mov	r1, r5
 8005cdc:	464b      	mov	r3, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f005 fbf6 	bl	800b4d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f001 feb3 	bl	8007a50 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8005cea:	4630      	mov	r0, r6
}
 8005cec:	b002      	add	sp, #8
 8005cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	e7f9      	b.n	8005cec <etharp_raw+0xbc>
 8005cf8:	0800e108 	.word	0x0800e108
 8005cfc:	0800d58a 	.word	0x0800d58a
 8005d00:	0800d598 	.word	0x0800d598
 8005d04:	0800e1c5 	.word	0x0800e1c5
 8005d08:	0800e1f6 	.word	0x0800e1f6

08005d0c <etharp_cleanup_netif>:
{
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4d08      	ldr	r5, [pc, #32]	; (8005d30 <etharp_cleanup_netif+0x24>)
 8005d10:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005d12:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005d14:	7d2b      	ldrb	r3, [r5, #20]
 8005d16:	b12b      	cbz	r3, 8005d24 <etharp_cleanup_netif+0x18>
 8005d18:	68ab      	ldr	r3, [r5, #8]
 8005d1a:	42b3      	cmp	r3, r6
 8005d1c:	d102      	bne.n	8005d24 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7ff fee2 	bl	8005ae8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005d24:	3401      	adds	r4, #1
 8005d26:	2c0a      	cmp	r4, #10
 8005d28:	f105 0518 	add.w	r5, r5, #24
 8005d2c:	d1f2      	bne.n	8005d14 <etharp_cleanup_netif+0x8>
}
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	20009260 	.word	0x20009260

08005d34 <etharp_input>:
{
 8005d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	4607      	mov	r7, r0
 8005d3a:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	b949      	cbnz	r1, 8005d54 <etharp_input+0x20>
 8005d40:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <etharp_input+0x138>)
 8005d42:	494b      	ldr	r1, [pc, #300]	; (8005e70 <etharp_input+0x13c>)
 8005d44:	484b      	ldr	r0, [pc, #300]	; (8005e74 <etharp_input+0x140>)
 8005d46:	f240 228a 	movw	r2, #650	; 0x28a
}
 8005d4a:	b008      	add	sp, #32
 8005d4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005d50:	f005 bd3e 	b.w	800b7d0 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 8005d54:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8005d56:	882b      	ldrh	r3, [r5, #0]
 8005d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5c:	d108      	bne.n	8005d70 <etharp_input+0x3c>
 8005d5e:	792b      	ldrb	r3, [r5, #4]
 8005d60:	2b06      	cmp	r3, #6
 8005d62:	d105      	bne.n	8005d70 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005d64:	796b      	ldrb	r3, [r5, #5]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d102      	bne.n	8005d70 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005d6a:	886b      	ldrh	r3, [r5, #2]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d005      	beq.n	8005d7c <etharp_input+0x48>
    pbuf_free(p);
 8005d70:	4638      	mov	r0, r7
}
 8005d72:	b008      	add	sp, #32
 8005d74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8005d78:	f001 be6a 	b.w	8007a50 <pbuf_free>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d7c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8005d7e:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8005d82:	9307      	str	r3, [sp, #28]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005d84:	f105 0808 	add.w	r8, r5, #8
 8005d88:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	d06a      	beq.n	8005e64 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005d8e:	1af3      	subs	r3, r6, r3
 8005d90:	425e      	negs	r6, r3
 8005d92:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005d94:	f1c6 0a02 	rsb	sl, r6, #2
 8005d98:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005d9c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d006      	beq.n	8005db2 <etharp_input+0x7e>
 8005da4:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <etharp_input+0x138>)
 8005da6:	4934      	ldr	r1, [pc, #208]	; (8005e78 <etharp_input+0x144>)
 8005da8:	4832      	ldr	r0, [pc, #200]	; (8005e74 <etharp_input+0x140>)
 8005daa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8005dae:	f005 fd0f 	bl	800b7d0 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8005db2:	9807      	ldr	r0, [sp, #28]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d03c      	beq.n	8005e32 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005db8:	4621      	mov	r1, r4
 8005dba:	f000 fc9c 	bl	80066f6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005dbe:	4681      	mov	r9, r0
 8005dc0:	bbb8      	cbnz	r0, 8005e32 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8005dc2:	9b07      	ldr	r3, [sp, #28]
 8005dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dc8:	2be0      	cmp	r3, #224	; 0xe0
 8005dca:	d032      	beq.n	8005e32 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4651      	mov	r1, sl
 8005dd0:	a807      	add	r0, sp, #28
 8005dd2:	f7ff fe9d 	bl	8005b10 <etharp_find_entry>
  if (i < 0) {
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	db2b      	blt.n	8005e32 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005dda:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <etharp_input+0x148>)
 8005ddc:	2018      	movs	r0, #24
 8005dde:	fb00 fc03 	mul.w	ip, r0, r3
 8005de2:	eb02 010c 	add.w	r1, r2, ip
 8005de6:	f04f 0e02 	mov.w	lr, #2
 8005dea:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8005dee:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8005df2:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8005df4:	fb13 e300 	smlabb	r3, r3, r0, lr
 8005df8:	68a8      	ldr	r0, [r5, #8]
 8005dfa:	50d0      	str	r0, [r2, r3]
 8005dfc:	eb02 0e03 	add.w	lr, r2, r3
 8005e00:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005e04:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8005e08:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8005e0c:	f852 100c 	ldr.w	r1, [r2, ip]
 8005e10:	b179      	cbz	r1, 8005e32 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8005e16:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8005e22:	4643      	mov	r3, r8
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	f005 fb53 	bl	800b4d0 <ethernet_output>
    pbuf_free(p);
 8005e2a:	9905      	ldr	r1, [sp, #20]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	f001 fe0f 	bl	8007a50 <pbuf_free>
  switch (hdr->opcode) {
 8005e32:	88eb      	ldrh	r3, [r5, #6]
 8005e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e38:	d10e      	bne.n	8005e58 <etharp_input+0x124>
      if (for_us) {
 8005e3a:	b16e      	cbz	r6, 8005e58 <etharp_input+0x124>
        etharp_raw(netif,
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	9203      	str	r2, [sp, #12]
 8005e40:	aa07      	add	r2, sp, #28
 8005e42:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005e46:	f104 0326 	add.w	r3, r4, #38	; 0x26
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005e4a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8005e4c:	9200      	str	r2, [sp, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4642      	mov	r2, r8
 8005e52:	4620      	mov	r0, r4
 8005e54:	f7ff feec 	bl	8005c30 <etharp_raw>
  pbuf_free(p);
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f001 fdf9 	bl	8007a50 <pbuf_free>
}
 8005e5e:	b008      	add	sp, #32
 8005e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005e64:	f04f 0a02 	mov.w	sl, #2
 8005e68:	e798      	b.n	8005d9c <etharp_input+0x68>
 8005e6a:	bf00      	nop
 8005e6c:	0800e108 	.word	0x0800e108
 8005e70:	0800d58a 	.word	0x0800d58a
 8005e74:	0800d598 	.word	0x0800d598
 8005e78:	0800e278 	.word	0x0800e278
 8005e7c:	20009260 	.word	0x20009260

08005e80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e82:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005e84:	2401      	movs	r4, #1
 8005e86:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8005e8a:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8005e8e:	4905      	ldr	r1, [pc, #20]	; (8005ea4 <etharp_request+0x24>)
 8005e90:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005e92:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005e94:	9200      	str	r2, [sp, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	4a03      	ldr	r2, [pc, #12]	; (8005ea8 <etharp_request+0x28>)
 8005e9a:	f7ff fec9 	bl	8005c30 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8005e9e:	b004      	add	sp, #16
 8005ea0:	bd10      	pop	{r4, pc}
 8005ea2:	bf00      	nop
 8005ea4:	0800d512 	.word	0x0800d512
 8005ea8:	0800d50c 	.word	0x0800d50c

08005eac <etharp_tmr>:
{
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	4c13      	ldr	r4, [pc, #76]	; (8005efc <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005eb0:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005eb2:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005eb4:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005eb6:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8005eb8:	b16a      	cbz	r2, 8005ed6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005eba:	8a63      	ldrh	r3, [r4, #18]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005ec0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005ec4:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005ec6:	d203      	bcs.n	8005ed0 <etharp_tmr+0x24>
 8005ec8:	2a01      	cmp	r2, #1
 8005eca:	d10a      	bne.n	8005ee2 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d910      	bls.n	8005ef2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f7ff fe09 	bl	8005ae8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	2d0a      	cmp	r5, #10
 8005eda:	f104 0418 	add.w	r4, r4, #24
 8005ede:	d1ea      	bne.n	8005eb6 <etharp_tmr+0xa>
}
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005ee2:	2a03      	cmp	r2, #3
 8005ee4:	d101      	bne.n	8005eea <etharp_tmr+0x3e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005ee6:	7527      	strb	r7, [r4, #20]
 8005ee8:	e7f5      	b.n	8005ed6 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005eea:	2a04      	cmp	r2, #4
 8005eec:	d1f3      	bne.n	8005ed6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005eee:	7526      	strb	r6, [r4, #20]
 8005ef0:	e7f1      	b.n	8005ed6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005ef2:	68a0      	ldr	r0, [r4, #8]
 8005ef4:	1d21      	adds	r1, r4, #4
 8005ef6:	f7ff ffc3 	bl	8005e80 <etharp_request>
 8005efa:	e7ec      	b.n	8005ed6 <etharp_tmr+0x2a>
 8005efc:	20009260 	.word	0x20009260

08005f00 <etharp_output_to_arp_index>:
{
 8005f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f04:	4f24      	ldr	r7, [pc, #144]	; (8005f98 <etharp_output_to_arp_index+0x98>)
 8005f06:	2318      	movs	r3, #24
 8005f08:	fb03 7302 	mla	r3, r3, r2, r7
{
 8005f0c:	4606      	mov	r6, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f0e:	7d1b      	ldrb	r3, [r3, #20]
 8005f10:	2b01      	cmp	r3, #1
{
 8005f12:	4688      	mov	r8, r1
 8005f14:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005f16:	d806      	bhi.n	8005f26 <etharp_output_to_arp_index+0x26>
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <etharp_output_to_arp_index+0x9c>)
 8005f1a:	4921      	ldr	r1, [pc, #132]	; (8005fa0 <etharp_output_to_arp_index+0xa0>)
 8005f1c:	4821      	ldr	r0, [pc, #132]	; (8005fa4 <etharp_output_to_arp_index+0xa4>)
 8005f1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8005f22:	f005 fc55 	bl	800b7d0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005f26:	2218      	movs	r2, #24
 8005f28:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005f2c:	fb02 7404 	mla	r4, r2, r4, r7
 8005f30:	00ed      	lsls	r5, r5, #3
 8005f32:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f34:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005f38:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f3a:	44ba      	add	sl, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f3c:	f106 0926 	add.w	r9, r6, #38	; 0x26
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005f40:	d10b      	bne.n	8005f5a <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005f42:	8a63      	ldrh	r3, [r4, #18]
 8005f44:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005f48:	d913      	bls.n	8005f72 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005f4a:	3504      	adds	r5, #4
 8005f4c:	1979      	adds	r1, r7, r5
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff ff96 	bl	8005e80 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f54:	b908      	cbnz	r0, 8005f5a <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005f56:	2303      	movs	r3, #3
 8005f58:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	464a      	mov	r2, r9
 8005f62:	4653      	mov	r3, sl
 8005f64:	4641      	mov	r1, r8
 8005f66:	4630      	mov	r0, r6
 8005f68:	f005 fab2 	bl	800b4d0 <ethernet_output>
}
 8005f6c:	b004      	add	sp, #16
 8005f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005f72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005f76:	d3f0      	bcc.n	8005f5a <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f78:	2301      	movs	r3, #1
 8005f7a:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f7c:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <etharp_output_to_arp_index+0xa8>)
 8005f80:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005f82:	443d      	add	r5, r7
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005f84:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	9502      	str	r5, [sp, #8]
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7ff fe4d 	bl	8005c30 <etharp_raw>
 8005f96:	e7dd      	b.n	8005f54 <etharp_output_to_arp_index+0x54>
 8005f98:	20009260 	.word	0x20009260
 8005f9c:	0800e108 	.word	0x0800e108
 8005fa0:	0800e29c 	.word	0x0800e29c
 8005fa4:	0800d598 	.word	0x0800d598
 8005fa8:	0800d512 	.word	0x0800d512

08005fac <etharp_query>:
{
 8005fac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	4688      	mov	r8, r1
 8005fb2:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	f8d8 0000 	ldr.w	r0, [r8]
{
 8005fba:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fbc:	f000 fb9b 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d16a      	bne.n	800609a <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 8005fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005fcc:	2ae0      	cmp	r2, #224	; 0xe0
 8005fce:	d064      	beq.n	800609a <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d062      	beq.n	800609a <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4640      	mov	r0, r8
 8005fda:	f7ff fd99 	bl	8005b10 <etharp_find_entry>
  if (i_err < 0) {
 8005fde:	1e04      	subs	r4, r0, #0
 8005fe0:	da03      	bge.n	8005fea <etharp_query+0x3e>
    return (err_t)i_err;
 8005fe2:	b260      	sxtb	r0, r4
}
 8005fe4:	b002      	add	sp, #8
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8005fea:	2c7e      	cmp	r4, #126	; 0x7e
 8005fec:	dd06      	ble.n	8005ffc <etharp_query+0x50>
 8005fee:	4b35      	ldr	r3, [pc, #212]	; (80060c4 <etharp_query+0x118>)
 8005ff0:	4935      	ldr	r1, [pc, #212]	; (80060c8 <etharp_query+0x11c>)
 8005ff2:	4836      	ldr	r0, [pc, #216]	; (80060cc <etharp_query+0x120>)
 8005ff4:	f240 32c1 	movw	r2, #961	; 0x3c1
 8005ff8:	f005 fbea 	bl	800b7d0 <iprintf>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005ffc:	4f34      	ldr	r7, [pc, #208]	; (80060d0 <etharp_query+0x124>)
  i = (netif_addr_idx_t)i_err;
 8005ffe:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006000:	2318      	movs	r3, #24
 8006002:	fb03 7304 	mla	r3, r3, r4, r7
 8006006:	7d1a      	ldrb	r2, [r3, #20]
 8006008:	2a00      	cmp	r2, #0
 800600a:	d155      	bne.n	80060b8 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800600c:	2201      	movs	r2, #1
 800600e:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 8006010:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 8006012:	4641      	mov	r1, r8
 8006014:	4630      	mov	r0, r6
 8006016:	f7ff ff33 	bl	8005e80 <etharp_request>
    if (q == NULL) {
 800601a:	2d00      	cmp	r5, #0
 800601c:	d0e2      	beq.n	8005fe4 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800601e:	2318      	movs	r3, #24
 8006020:	fb03 7204 	mla	r2, r3, r4, r7
 8006024:	7d12      	ldrb	r2, [r2, #20]
 8006026:	2a01      	cmp	r2, #1
 8006028:	d90e      	bls.n	8006048 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800602a:	fb03 7304 	mla	r3, r3, r4, r7
 800602e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006032:	9200      	str	r2, [sp, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800603e:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006042:	f005 fa45 	bl	800b4d0 <ethernet_output>
 8006046:	e7cd      	b.n	8005fe4 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006048:	d1cc      	bne.n	8005fe4 <etharp_query+0x38>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800604a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80060c4 <etharp_query+0x118>
 800604e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80060d4 <etharp_query+0x128>
 8006052:	f8df a078 	ldr.w	sl, [pc, #120]	; 80060cc <etharp_query+0x120>
 8006056:	462e      	mov	r6, r5
 8006058:	8972      	ldrh	r2, [r6, #10]
 800605a:	8933      	ldrh	r3, [r6, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d108      	bne.n	8006072 <etharp_query+0xc6>
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	b133      	cbz	r3, 8006072 <etharp_query+0xc6>
 8006064:	4643      	mov	r3, r8
 8006066:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800606a:	4649      	mov	r1, r9
 800606c:	4650      	mov	r0, sl
 800606e:	f005 fbaf 	bl	800b7d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8006072:	7b33      	ldrb	r3, [r6, #12]
 8006074:	065b      	lsls	r3, r3, #25
 8006076:	d413      	bmi.n	80060a0 <etharp_query+0xf4>
      p = p->next;
 8006078:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800607a:	2e00      	cmp	r6, #0
 800607c:	d1ec      	bne.n	8006058 <etharp_query+0xac>
      pbuf_ref(p);
 800607e:	4628      	mov	r0, r5
 8006080:	f001 fe2a 	bl	8007cd8 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8006084:	2618      	movs	r6, #24
 8006086:	fb06 f304 	mul.w	r3, r6, r4
 800608a:	58f8      	ldr	r0, [r7, r3]
 800608c:	b108      	cbz	r0, 8006092 <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 800608e:	f001 fcdf 	bl	8007a50 <pbuf_free>
      arp_table[i].q = p;
 8006092:	4374      	muls	r4, r6
      result = ERR_OK;
 8006094:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8006096:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8006098:	e7a4      	b.n	8005fe4 <etharp_query+0x38>
    return ERR_ARG;
 800609a:	f06f 000f 	mvn.w	r0, #15
 800609e:	e7a1      	b.n	8005fe4 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80060a0:	462a      	mov	r2, r5
 80060a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80060a6:	200e      	movs	r0, #14
 80060a8:	f001 ff34 	bl	8007f14 <pbuf_clone>
    if (p != NULL) {
 80060ac:	4605      	mov	r5, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d1e8      	bne.n	8006084 <etharp_query+0xd8>
      result = ERR_MEM;
 80060b2:	f04f 30ff 	mov.w	r0, #4294967295
 80060b6:	e795      	b.n	8005fe4 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	d0aa      	beq.n	8006012 <etharp_query+0x66>
  err_t result = ERR_MEM;
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	e7ad      	b.n	800601e <etharp_query+0x72>
 80060c2:	bf00      	nop
 80060c4:	0800e108 	.word	0x0800e108
 80060c8:	0800e2cc 	.word	0x0800e2cc
 80060cc:	0800d598 	.word	0x0800d598
 80060d0:	20009260 	.word	0x20009260
 80060d4:	0800e2da 	.word	0x0800e2da

080060d8 <etharp_output>:
{
 80060d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060da:	460e      	mov	r6, r1
 80060dc:	b085      	sub	sp, #20
 80060de:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80060e0:	4604      	mov	r4, r0
 80060e2:	b930      	cbnz	r0, 80060f2 <etharp_output+0x1a>
 80060e4:	4b45      	ldr	r3, [pc, #276]	; (80061fc <etharp_output+0x124>)
 80060e6:	4946      	ldr	r1, [pc, #280]	; (8006200 <etharp_output+0x128>)
 80060e8:	4846      	ldr	r0, [pc, #280]	; (8006204 <etharp_output+0x12c>)
 80060ea:	f240 321e 	movw	r2, #798	; 0x31e
 80060ee:	f005 fb6f 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80060f2:	b936      	cbnz	r6, 8006102 <etharp_output+0x2a>
 80060f4:	4b41      	ldr	r3, [pc, #260]	; (80061fc <etharp_output+0x124>)
 80060f6:	4944      	ldr	r1, [pc, #272]	; (8006208 <etharp_output+0x130>)
 80060f8:	4842      	ldr	r0, [pc, #264]	; (8006204 <etharp_output+0x12c>)
 80060fa:	f240 321f 	movw	r2, #799	; 0x31f
 80060fe:	f005 fb67 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006102:	b935      	cbnz	r5, 8006112 <etharp_output+0x3a>
 8006104:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <etharp_output+0x124>)
 8006106:	4941      	ldr	r1, [pc, #260]	; (800620c <etharp_output+0x134>)
 8006108:	483e      	ldr	r0, [pc, #248]	; (8006204 <etharp_output+0x12c>)
 800610a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800610e:	f005 fb5f 	bl	800b7d0 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006112:	6828      	ldr	r0, [r5, #0]
 8006114:	4621      	mov	r1, r4
 8006116:	f000 faee 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 800611a:	2800      	cmp	r0, #0
 800611c:	d168      	bne.n	80061f0 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006124:	2ae0      	cmp	r2, #224	; 0xe0
 8006126:	d11e      	bne.n	8006166 <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006128:	2301      	movs	r3, #1
 800612a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800612e:	235e      	movs	r3, #94	; 0x5e
 8006130:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006134:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006136:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800613a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006142:	78ab      	ldrb	r3, [r5, #2]
 8006144:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006148:	78eb      	ldrb	r3, [r5, #3]
 800614a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800614e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8006150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006154:	9200      	str	r2, [sp, #0]
 8006156:	4631      	mov	r1, r6
 8006158:	f104 0226 	add.w	r2, r4, #38	; 0x26
 800615c:	4620      	mov	r0, r4
 800615e:	f005 f9b7 	bl	800b4d0 <ethernet_output>
}
 8006162:	b005      	add	sp, #20
 8006164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006166:	6862      	ldr	r2, [r4, #4]
 8006168:	68a1      	ldr	r1, [r4, #8]
 800616a:	405a      	eors	r2, r3
 800616c:	420a      	tst	r2, r1
 800616e:	d009      	beq.n	8006184 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8006170:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006172:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d039      	beq.n	80061f4 <etharp_output+0x11c>
            dst_addr = netif_ip4_gw(netif);
 8006180:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006184:	4822      	ldr	r0, [pc, #136]	; (8006210 <etharp_output+0x138>)
 8006186:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 800618a:	2318      	movs	r3, #24
 800618c:	fb03 0302 	mla	r3, r3, r2, r0
 8006190:	7d19      	ldrb	r1, [r3, #20]
 8006192:	2901      	cmp	r1, #1
 8006194:	d90d      	bls.n	80061b2 <etharp_output+0xda>
 8006196:	6899      	ldr	r1, [r3, #8]
 8006198:	42a1      	cmp	r1, r4
 800619a:	d10a      	bne.n	80061b2 <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4299      	cmp	r1, r3
 80061a2:	d106      	bne.n	80061b2 <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 80061a4:	4631      	mov	r1, r6
 80061a6:	4620      	mov	r0, r4
}
 80061a8:	b005      	add	sp, #20
 80061aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 80061ae:	f7ff bea7 	b.w	8005f00 <etharp_output_to_arp_index>
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <etharp_output+0x138>)
{
 80061b4:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80061b6:	7d1f      	ldrb	r7, [r3, #20]
 80061b8:	2f01      	cmp	r7, #1
 80061ba:	fa5f fc81 	uxtb.w	ip, r1
 80061be:	d90a      	bls.n	80061d6 <etharp_output+0xfe>
 80061c0:	689f      	ldr	r7, [r3, #8]
 80061c2:	42a7      	cmp	r7, r4
 80061c4:	d107      	bne.n	80061d6 <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 80061c6:	685f      	ldr	r7, [r3, #4]
 80061c8:	682a      	ldr	r2, [r5, #0]
 80061ca:	42ba      	cmp	r2, r7
 80061cc:	d103      	bne.n	80061d6 <etharp_output+0xfe>
        ETHARP_SET_ADDRHINT(netif, i);
 80061ce:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 80061d2:	4662      	mov	r2, ip
 80061d4:	e7e6      	b.n	80061a4 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80061d6:	3101      	adds	r1, #1
 80061d8:	290a      	cmp	r1, #10
 80061da:	f103 0318 	add.w	r3, r3, #24
 80061de:	d1ea      	bne.n	80061b6 <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 80061e0:	4632      	mov	r2, r6
 80061e2:	4629      	mov	r1, r5
 80061e4:	4620      	mov	r0, r4
}
 80061e6:	b005      	add	sp, #20
 80061e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80061ec:	f7ff bede 	b.w	8005fac <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <etharp_output+0x13c>)
 80061f2:	e7ad      	b.n	8006150 <etharp_output+0x78>
            return ERR_RTE;
 80061f4:	f06f 0003 	mvn.w	r0, #3
 80061f8:	e7b3      	b.n	8006162 <etharp_output+0x8a>
 80061fa:	bf00      	nop
 80061fc:	0800e108 	.word	0x0800e108
 8006200:	0800d58a 	.word	0x0800d58a
 8006204:	0800d598 	.word	0x0800d598
 8006208:	0800ed94 	.word	0x0800ed94
 800620c:	0800e259 	.word	0x0800e259
 8006210:	20009260 	.word	0x20009260
 8006214:	0800d50c 	.word	0x0800d50c

08006218 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8006218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621a:	4604      	mov	r4, r0
 800621c:	b087      	sub	sp, #28
 800621e:	460f      	mov	r7, r1
 8006220:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006222:	2124      	movs	r1, #36	; 0x24
 8006224:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006228:	2022      	movs	r0, #34	; 0x22
 800622a:	f001 fc79 	bl	8007b20 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800622e:	4605      	mov	r5, r0
 8006230:	b390      	cbz	r0, 8006298 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006232:	8943      	ldrh	r3, [r0, #10]
 8006234:	2b23      	cmp	r3, #35	; 0x23
 8006236:	d806      	bhi.n	8006246 <icmp_send_response+0x2e>
 8006238:	4b18      	ldr	r3, [pc, #96]	; (800629c <icmp_send_response+0x84>)
 800623a:	4919      	ldr	r1, [pc, #100]	; (80062a0 <icmp_send_response+0x88>)
 800623c:	4819      	ldr	r0, [pc, #100]	; (80062a4 <icmp_send_response+0x8c>)
 800623e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006242:	f005 fac5 	bl	800b7d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006246:	6860      	ldr	r0, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006248:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	7123      	strb	r3, [r4, #4]
 800624e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006250:	71a3      	strb	r3, [r4, #6]
 8006252:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8006254:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8006256:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006258:	4603      	mov	r3, r0
 800625a:	f104 0208 	add.w	r2, r4, #8
 800625e:	f100 011c 	add.w	r1, r0, #28
 8006262:	f853 6b04 	ldr.w	r6, [r3], #4
 8006266:	f842 6b04 	str.w	r6, [r2], #4
 800626a:	428b      	cmp	r3, r1
 800626c:	d1f9      	bne.n	8006262 <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800626e:	68c3      	ldr	r3, [r0, #12]
 8006270:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006272:	a805      	add	r0, sp, #20
 8006274:	f000 f8d6 	bl	8006424 <ip4_route>
#endif
  if (netif != NULL) {
 8006278:	b158      	cbz	r0, 8006292 <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800627a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800627c:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800627e:	70a1      	strb	r1, [r4, #2]
 8006280:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006282:	aa05      	add	r2, sp, #20
 8006284:	e9cd 1300 	strd	r1, r3, [sp]
 8006288:	9002      	str	r0, [sp, #8]
 800628a:	23ff      	movs	r3, #255	; 0xff
 800628c:	4628      	mov	r0, r5
 800628e:	f000 fa21 	bl	80066d4 <ip4_output_if>
  }
  pbuf_free(q);
 8006292:	4628      	mov	r0, r5
 8006294:	f001 fbdc 	bl	8007a50 <pbuf_free>
}
 8006298:	b007      	add	sp, #28
 800629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800629c:	0800e2f4 	.word	0x0800e2f4
 80062a0:	0800e36f 	.word	0x0800e36f
 80062a4:	0800d598 	.word	0x0800d598

080062a8 <icmp_input>:
{
 80062a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80062ac:	4f46      	ldr	r7, [pc, #280]	; (80063c8 <icmp_input+0x120>)
 80062ae:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80062b2:	f899 5000 	ldrb.w	r5, [r9]
 80062b6:	f005 050f 	and.w	r5, r5, #15
 80062ba:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80062bc:	2d13      	cmp	r5, #19
{
 80062be:	b087      	sub	sp, #28
 80062c0:	4604      	mov	r4, r0
 80062c2:	4688      	mov	r8, r1
  if (hlen < IP_HLEN) {
 80062c4:	d916      	bls.n	80062f4 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 80062c6:	8943      	ldrh	r3, [r0, #10]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d913      	bls.n	80062f4 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 80062cc:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d10f      	bne.n	80062f4 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80062da:	2be0      	cmp	r3, #224	; 0xe0
 80062dc:	d00a      	beq.n	80062f4 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	f000 fa09 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 80062e4:	b930      	cbnz	r0, 80062f4 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80062e6:	8923      	ldrh	r3, [r4, #8]
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	d903      	bls.n	80062f4 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fe29 	bl	8006f44 <inet_chksum_pbuf>
 80062f2:	b128      	cbz	r0, 8006300 <icmp_input+0x58>
  pbuf_free(p);
 80062f4:	4620      	mov	r0, r4
}
 80062f6:	b007      	add	sp, #28
 80062f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80062fc:	f001 bba8 	b.w	8007a50 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006300:	f105 010e 	add.w	r1, r5, #14
 8006304:	4620      	mov	r0, r4
 8006306:	9105      	str	r1, [sp, #20]
 8006308:	f001 fb6a 	bl	80079e0 <pbuf_add_header>
 800630c:	9905      	ldr	r1, [sp, #20]
 800630e:	2800      	cmp	r0, #0
 8006310:	d04e      	beq.n	80063b0 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006312:	8923      	ldrh	r3, [r4, #8]
 8006314:	1959      	adds	r1, r3, r5
 8006316:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8006318:	428b      	cmp	r3, r1
 800631a:	d8eb      	bhi.n	80062f4 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800631c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006320:	200e      	movs	r0, #14
 8006322:	f001 fbfd 	bl	8007b20 <pbuf_alloc>
        if (r == NULL) {
 8006326:	4606      	mov	r6, r0
 8006328:	2800      	cmp	r0, #0
 800632a:	d0e3      	beq.n	80062f4 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800632c:	8942      	ldrh	r2, [r0, #10]
 800632e:	f105 0308 	add.w	r3, r5, #8
 8006332:	429a      	cmp	r2, r3
 8006334:	d203      	bcs.n	800633e <icmp_input+0x96>
          pbuf_free(r);
 8006336:	4630      	mov	r0, r6
 8006338:	f001 fb8a 	bl	8007a50 <pbuf_free>
          goto icmperr;
 800633c:	e7da      	b.n	80062f4 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800633e:	4649      	mov	r1, r9
 8006340:	6840      	ldr	r0, [r0, #4]
 8006342:	462a      	mov	r2, r5
 8006344:	f005 fa14 	bl	800b770 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8006348:	4629      	mov	r1, r5
 800634a:	4630      	mov	r0, r6
 800634c:	f001 fb4c 	bl	80079e8 <pbuf_remove_header>
 8006350:	b130      	cbz	r0, 8006360 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006352:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <icmp_input+0x124>)
 8006354:	491e      	ldr	r1, [pc, #120]	; (80063d0 <icmp_input+0x128>)
 8006356:	481f      	ldr	r0, [pc, #124]	; (80063d4 <icmp_input+0x12c>)
 8006358:	22b6      	movs	r2, #182	; 0xb6
 800635a:	f005 fa39 	bl	800b7d0 <iprintf>
          pbuf_free(r);
 800635e:	e7ea      	b.n	8006336 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8006360:	4621      	mov	r1, r4
 8006362:	4630      	mov	r0, r6
 8006364:	f001 fd0e 	bl	8007d84 <pbuf_copy>
 8006368:	2800      	cmp	r0, #0
 800636a:	d1e4      	bne.n	8006336 <icmp_input+0x8e>
        pbuf_free(p);
 800636c:	4620      	mov	r0, r4
 800636e:	f001 fb6f 	bl	8007a50 <pbuf_free>
        p = r;
 8006372:	4634      	mov	r4, r6
      if (pbuf_add_header(p, hlen)) {
 8006374:	4629      	mov	r1, r5
 8006376:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006378:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800637a:	f001 fb31 	bl	80079e0 <pbuf_add_header>
 800637e:	2800      	cmp	r0, #0
 8006380:	d1b8      	bne.n	80062f4 <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006382:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800638c:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800638e:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8006390:	70b0      	strb	r0, [r6, #2]
 8006392:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006394:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006396:	7290      	strb	r0, [r2, #10]
 8006398:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800639a:	2201      	movs	r2, #1
 800639c:	e9cd 0200 	strd	r0, r2, [sp]
 80063a0:	490d      	ldr	r1, [pc, #52]	; (80063d8 <icmp_input+0x130>)
 80063a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80063a6:	4602      	mov	r2, r0
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f993 	bl	80066d4 <ip4_output_if>
  pbuf_free(p);
 80063ae:	e7a1      	b.n	80062f4 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 fb19 	bl	80079e8 <pbuf_remove_header>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d0dc      	beq.n	8006374 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <icmp_input+0x124>)
 80063bc:	4907      	ldr	r1, [pc, #28]	; (80063dc <icmp_input+0x134>)
 80063be:	4805      	ldr	r0, [pc, #20]	; (80063d4 <icmp_input+0x12c>)
 80063c0:	22c7      	movs	r2, #199	; 0xc7
 80063c2:	f005 fa05 	bl	800b7d0 <iprintf>
          goto icmperr;
 80063c6:	e795      	b.n	80062f4 <icmp_input+0x4c>
 80063c8:	2000935c 	.word	0x2000935c
 80063cc:	0800e2f4 	.word	0x0800e2f4
 80063d0:	0800e39b 	.word	0x0800e39b
 80063d4:	0800d598 	.word	0x0800d598
 80063d8:	20009370 	.word	0x20009370
 80063dc:	0800e3d0 	.word	0x0800e3d0

080063e0 <icmp_dest_unreach>:
{
 80063e0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80063e2:	2103      	movs	r1, #3
 80063e4:	f7ff bf18 	b.w	8006218 <icmp_send_response>

080063e8 <icmp_time_exceeded>:
{
 80063e8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80063ea:	210b      	movs	r1, #11
 80063ec:	f7ff bf14 	b.w	8006218 <icmp_send_response>

080063f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80063f0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80063f2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80063f6:	f013 0301 	ands.w	r3, r3, #1
{
 80063fa:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80063fc:	d00b      	beq.n	8006416 <ip4_input_accept+0x26>
 80063fe:	6843      	ldr	r3, [r0, #4]
 8006400:	b14b      	cbz	r3, 8006416 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006402:	4a07      	ldr	r2, [pc, #28]	; (8006420 <ip4_input_accept+0x30>)
 8006404:	6950      	ldr	r0, [r2, #20]
 8006406:	4283      	cmp	r3, r0
 8006408:	d007      	beq.n	800641a <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800640a:	f000 f974 	bl	80066f6 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800640e:	3800      	subs	r0, #0
 8006410:	bf18      	it	ne
 8006412:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8006414:	bd08      	pop	{r3, pc}
  return 0;
 8006416:	4618      	mov	r0, r3
 8006418:	e7fc      	b.n	8006414 <ip4_input_accept+0x24>
      return 1;
 800641a:	2001      	movs	r0, #1
 800641c:	e7fa      	b.n	8006414 <ip4_input_accept+0x24>
 800641e:	bf00      	nop
 8006420:	2000935c 	.word	0x2000935c

08006424 <ip4_route>:
{
 8006424:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <ip4_route+0x54>)
{
 8006428:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	b978      	cbnz	r0, 800644e <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <ip4_route+0x58>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b15b      	cbz	r3, 800644c <ip4_route+0x28>
 8006434:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8006438:	f001 0105 	and.w	r1, r1, #5
 800643c:	2905      	cmp	r1, #5
 800643e:	d105      	bne.n	800644c <ip4_route+0x28>
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	b119      	cbz	r1, 800644c <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	2a7f      	cmp	r2, #127	; 0x7f
 8006448:	bf18      	it	ne
 800644a:	4618      	movne	r0, r3
}
 800644c:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800644e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 8006452:	07cd      	lsls	r5, r1, #31
 8006454:	d50d      	bpl.n	8006472 <ip4_route+0x4e>
 8006456:	074c      	lsls	r4, r1, #29
 8006458:	d50b      	bpl.n	8006472 <ip4_route+0x4e>
 800645a:	6843      	ldr	r3, [r0, #4]
 800645c:	b14b      	cbz	r3, 8006472 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800645e:	6814      	ldr	r4, [r2, #0]
 8006460:	6885      	ldr	r5, [r0, #8]
 8006462:	4063      	eors	r3, r4
 8006464:	422b      	tst	r3, r5
 8006466:	d0f1      	beq.n	800644c <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006468:	078b      	lsls	r3, r1, #30
 800646a:	d402      	bmi.n	8006472 <ip4_route+0x4e>
 800646c:	68c3      	ldr	r3, [r0, #12]
 800646e:	429c      	cmp	r4, r3
 8006470:	d0ec      	beq.n	800644c <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8006472:	6800      	ldr	r0, [r0, #0]
 8006474:	e7da      	b.n	800642c <ip4_route+0x8>
 8006476:	bf00      	nop
 8006478:	2000f810 	.word	0x2000f810
 800647c:	2000f814 	.word	0x2000f814

08006480 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006484:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8006488:	f898 5000 	ldrb.w	r5, [r8]
 800648c:	092b      	lsrs	r3, r5, #4
 800648e:	2b04      	cmp	r3, #4
{
 8006490:	4604      	mov	r4, r0
 8006492:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8006494:	d005      	beq.n	80064a2 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006496:	4620      	mov	r0, r4
 8006498:	f001 fada 	bl	8007a50 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800649c:	2000      	movs	r0, #0
 800649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80064a2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80064a6:	f000 fd1b 	bl	8006ee0 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80064aa:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80064ac:	f005 050f 	and.w	r5, r5, #15
 80064b0:	ea4f 0985 	mov.w	r9, r5, lsl #2
  if (iphdr_len < p->tot_len) {
 80064b4:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80064b6:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80064b8:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 80064ba:	d903      	bls.n	80064c4 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80064bc:	4601      	mov	r1, r0
 80064be:	4620      	mov	r0, r4
 80064c0:	f001 fbaa 	bl	8007c18 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80064c4:	8963      	ldrh	r3, [r4, #10]
 80064c6:	42ab      	cmp	r3, r5
 80064c8:	d3e5      	bcc.n	8006496 <ip4_input+0x16>
 80064ca:	8923      	ldrh	r3, [r4, #8]
 80064cc:	42bb      	cmp	r3, r7
 80064ce:	d3e2      	bcc.n	8006496 <ip4_input+0x16>
 80064d0:	2d13      	cmp	r5, #19
 80064d2:	d9e0      	bls.n	8006496 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80064d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80064d8:	4d3e      	ldr	r5, [pc, #248]	; (80065d4 <ip4_input+0x154>)
 80064da:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80064e0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80064e4:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064e6:	2be0      	cmp	r3, #224	; 0xe0
 80064e8:	d141      	bne.n	800656e <ip4_input+0xee>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80064ea:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 80064ee:	07db      	lsls	r3, r3, #31
 80064f0:	d548      	bpl.n	8006584 <ip4_input+0x104>
 80064f2:	6873      	ldr	r3, [r6, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d045      	beq.n	8006584 <ip4_input+0x104>
      netif = NULL;
 80064f8:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80064fa:	6928      	ldr	r0, [r5, #16]
 80064fc:	4631      	mov	r1, r6
 80064fe:	f000 f8fa 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 8006502:	2800      	cmp	r0, #0
 8006504:	d1c7      	bne.n	8006496 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006506:	692b      	ldr	r3, [r5, #16]
 8006508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800650c:	2be0      	cmp	r3, #224	; 0xe0
 800650e:	d0c2      	beq.n	8006496 <ip4_input+0x16>
  if (netif == NULL) {
 8006510:	2f00      	cmp	r7, #0
 8006512:	d0c0      	beq.n	8006496 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006514:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8006518:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800651c:	b13b      	cbz	r3, 800652e <ip4_input+0xae>
    p = ip4_reass(p);
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fa1c 	bl	800695c <ip4_reass>
    if (p == NULL) {
 8006524:	4604      	mov	r4, r0
 8006526:	2800      	cmp	r0, #0
 8006528:	d0b8      	beq.n	800649c <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 800652a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800652e:	f8c5 8008 	str.w	r8, [r5, #8]
  ip_data.current_input_netif = inp;
 8006532:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006536:	f898 3000 	ldrb.w	r3, [r8]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	009b      	lsls	r3, r3, #2
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006540:	4649      	mov	r1, r9
 8006542:	4620      	mov	r0, r4
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006544:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006546:	f001 fa4f 	bl	80079e8 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800654a:	f898 3009 	ldrb.w	r3, [r8, #9]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d024      	beq.n	800659c <ip4_input+0x11c>
 8006552:	2b06      	cmp	r3, #6
 8006554:	d127      	bne.n	80065a6 <ip4_input+0x126>
        tcp_input(p, inp);
 8006556:	4631      	mov	r1, r6
 8006558:	4620      	mov	r0, r4
 800655a:	f003 f839 	bl	80095d0 <tcp_input>
  ip_data.current_netif = NULL;
 800655e:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8006560:	e9c5 3300 	strd	r3, r3, [r5]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006564:	e9c5 3304 	strd	r3, r3, [r5, #16]
  ip_data.current_ip4_header = NULL;
 8006568:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800656a:	81ab      	strh	r3, [r5, #12]
  return ERR_OK;
 800656c:	e796      	b.n	800649c <ip4_input+0x1c>
    if (ip4_input_accept(inp)) {
 800656e:	4630      	mov	r0, r6
 8006570:	f7ff ff3e 	bl	80063f0 <ip4_input_accept>
 8006574:	2800      	cmp	r0, #0
 8006576:	d1bf      	bne.n	80064f8 <ip4_input+0x78>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8006578:	7d2b      	ldrb	r3, [r5, #20]
 800657a:	2b7f      	cmp	r3, #127	; 0x7f
 800657c:	d002      	beq.n	8006584 <ip4_input+0x104>
        NETIF_FOREACH(netif) {
 800657e:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <ip4_input+0x158>)
 8006580:	681f      	ldr	r7, [r3, #0]
 8006582:	b90f      	cbnz	r7, 8006588 <ip4_input+0x108>
      netif = NULL;
 8006584:	2700      	movs	r7, #0
 8006586:	e7b8      	b.n	80064fa <ip4_input+0x7a>
          if (netif == inp) {
 8006588:	42b7      	cmp	r7, r6
 800658a:	d101      	bne.n	8006590 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 800658c:	683f      	ldr	r7, [r7, #0]
 800658e:	e7f8      	b.n	8006582 <ip4_input+0x102>
          if (ip4_input_accept(netif)) {
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ff2d 	bl	80063f0 <ip4_input_accept>
 8006596:	2800      	cmp	r0, #0
 8006598:	d0f8      	beq.n	800658c <ip4_input+0x10c>
 800659a:	e7ae      	b.n	80064fa <ip4_input+0x7a>
        icmp_input(p, inp);
 800659c:	4631      	mov	r1, r6
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff fe82 	bl	80062a8 <icmp_input>
        break;
 80065a4:	e7db      	b.n	800655e <ip4_input+0xde>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065a6:	6968      	ldr	r0, [r5, #20]
 80065a8:	4639      	mov	r1, r7
 80065aa:	f000 f8a4 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 80065ae:	b960      	cbnz	r0, 80065ca <ip4_input+0x14a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80065b0:	696b      	ldr	r3, [r5, #20]
 80065b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80065b6:	2be0      	cmp	r3, #224	; 0xe0
 80065b8:	d007      	beq.n	80065ca <ip4_input+0x14a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80065ba:	4649      	mov	r1, r9
 80065bc:	4620      	mov	r0, r4
 80065be:	f001 fa3f 	bl	8007a40 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80065c2:	2102      	movs	r1, #2
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ff0b 	bl	80063e0 <icmp_dest_unreach>
        pbuf_free(p);
 80065ca:	4620      	mov	r0, r4
 80065cc:	f001 fa40 	bl	8007a50 <pbuf_free>
        break;
 80065d0:	e7c5      	b.n	800655e <ip4_input+0xde>
 80065d2:	bf00      	nop
 80065d4:	2000935c 	.word	0x2000935c
 80065d8:	2000f810 	.word	0x2000f810

080065dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80065dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065e2:	7b83      	ldrb	r3, [r0, #14]
{
 80065e4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065e6:	2b01      	cmp	r3, #1
{
 80065e8:	4604      	mov	r4, r0
 80065ea:	4689      	mov	r9, r1
 80065ec:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80065ee:	d006      	beq.n	80065fe <ip4_output_if_src+0x22>
 80065f0:	4b32      	ldr	r3, [pc, #200]	; (80066bc <ip4_output_if_src+0xe0>)
 80065f2:	4933      	ldr	r1, [pc, #204]	; (80066c0 <ip4_output_if_src+0xe4>)
 80065f4:	4833      	ldr	r0, [pc, #204]	; (80066c4 <ip4_output_if_src+0xe8>)
 80065f6:	f44f 7255 	mov.w	r2, #852	; 0x354
 80065fa:	f005 f8e9 	bl	800b7d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80065fe:	2e00      	cmp	r6, #0
 8006600:	d04e      	beq.n	80066a0 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8006602:	2114      	movs	r1, #20
 8006604:	4620      	mov	r0, r4
 8006606:	f001 f9eb 	bl	80079e0 <pbuf_add_header>
 800660a:	b120      	cbz	r0, 8006616 <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800660c:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8006610:	b002      	add	sp, #8
 8006612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006616:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8006618:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800661a:	2b13      	cmp	r3, #19
 800661c:	d806      	bhi.n	800662c <ip4_output_if_src+0x50>
 800661e:	4b27      	ldr	r3, [pc, #156]	; (80066bc <ip4_output_if_src+0xe0>)
 8006620:	4929      	ldr	r1, [pc, #164]	; (80066c8 <ip4_output_if_src+0xec>)
 8006622:	4828      	ldr	r0, [pc, #160]	; (80066c4 <ip4_output_if_src+0xe8>)
 8006624:	f44f 7262 	mov.w	r2, #904	; 0x388
 8006628:	f005 f8d2 	bl	800b7d0 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 800662c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8006630:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006634:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8006636:	6833      	ldr	r3, [r6, #0]
 8006638:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800663a:	2345      	movs	r3, #69	; 0x45
 800663c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800663e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006642:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006644:	8920      	ldrh	r0, [r4, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006646:	f8df a088 	ldr.w	sl, [pc, #136]	; 80066d0 <ip4_output_if_src+0xf4>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800664a:	f000 fc49 	bl	8006ee0 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800664e:	f04f 0800 	mov.w	r8, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006652:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8006654:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006658:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 800665c:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006660:	f000 fc3e 	bl	8006ee0 <lwip_htons>
    ++ip_id;
 8006664:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006668:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800666a:	3301      	adds	r3, #1
 800666c:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8006670:	f1b9 0f00 	cmp.w	r9, #0
 8006674:	d111      	bne.n	800669a <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8006676:	4b15      	ldr	r3, [pc, #84]	; (80066cc <ip4_output_if_src+0xf0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800667c:	f885 800a 	strb.w	r8, [r5, #10]
 8006680:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8006684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006686:	b19b      	cbz	r3, 80066b0 <ip4_output_if_src+0xd4>
 8006688:	8922      	ldrh	r2, [r4, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d910      	bls.n	80066b0 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 800668e:	4632      	mov	r2, r6
 8006690:	4639      	mov	r1, r7
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fb38 	bl	8006d08 <ip4_frag>
 8006698:	e7ba      	b.n	8006610 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 800669a:	f8d9 3000 	ldr.w	r3, [r9]
 800669e:	e7ec      	b.n	800667a <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 80066a0:	8963      	ldrh	r3, [r4, #10]
 80066a2:	2b13      	cmp	r3, #19
 80066a4:	d9b2      	bls.n	800660c <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80066ac:	ae01      	add	r6, sp, #4
 80066ae:	e7e9      	b.n	8006684 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4632      	mov	r2, r6
 80066b4:	4621      	mov	r1, r4
 80066b6:	4638      	mov	r0, r7
 80066b8:	4798      	blx	r3
 80066ba:	e7a9      	b.n	8006610 <ip4_output_if_src+0x34>
 80066bc:	0800e402 	.word	0x0800e402
 80066c0:	0800e47c 	.word	0x0800e47c
 80066c4:	0800d598 	.word	0x0800d598
 80066c8:	0800e488 	.word	0x0800e488
 80066cc:	0800d3dc 	.word	0x0800d3dc
 80066d0:	20009352 	.word	0x20009352

080066d4 <ip4_output_if>:
{
 80066d4:	b4f0      	push	{r4, r5, r6, r7}
 80066d6:	9c06      	ldr	r4, [sp, #24]
 80066d8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80066dc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80066e0:	b11a      	cbz	r2, 80066ea <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80066e2:	b109      	cbz	r1, 80066e8 <ip4_output_if+0x14>
 80066e4:	680f      	ldr	r7, [r1, #0]
 80066e6:	b907      	cbnz	r7, 80066ea <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80066e8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80066ea:	e9cd 6405 	strd	r6, r4, [sp, #20]
 80066ee:	9504      	str	r5, [sp, #16]
}
 80066f0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80066f2:	f7ff bf73 	b.w	80065dc <ip4_output_if_src>

080066f6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80066f6:	1e43      	subs	r3, r0, #1
 80066f8:	3303      	adds	r3, #3
{
 80066fa:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 80066fc:	d812      	bhi.n	8006724 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80066fe:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8006702:	f013 0002 	ands.w	r0, r3, #2
 8006706:	d010      	beq.n	800672a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006708:	684b      	ldr	r3, [r1, #4]
 800670a:	4293      	cmp	r3, r2
 800670c:	d00c      	beq.n	8006728 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800670e:	6888      	ldr	r0, [r1, #8]
 8006710:	4053      	eors	r3, r2
 8006712:	4203      	tst	r3, r0
 8006714:	d108      	bne.n	8006728 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006716:	43c3      	mvns	r3, r0
 8006718:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800671c:	1ac3      	subs	r3, r0, r3
 800671e:	4258      	negs	r0, r3
 8006720:	4158      	adcs	r0, r3
 8006722:	4770      	bx	lr
    return 1;
 8006724:	2001      	movs	r0, #1
 8006726:	4770      	bx	lr
    return 0;
 8006728:	2000      	movs	r0, #0
  }
}
 800672a:	4770      	bx	lr

0800672c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800672c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <ip_reass_dequeue_datagram+0x34>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4282      	cmp	r2, r0
{
 8006734:	4604      	mov	r4, r0
 8006736:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8006738:	d107      	bne.n	800674a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800673a:	6802      	ldr	r2, [r0, #0]
 800673c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800673e:	4621      	mov	r1, r4
 8006740:	2003      	movs	r0, #3
}
 8006742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8006746:	f000 bf2b 	b.w	80075a0 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800674a:	b931      	cbnz	r1, 800675a <ip_reass_dequeue_datagram+0x2e>
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <ip_reass_dequeue_datagram+0x38>)
 800674e:	4906      	ldr	r1, [pc, #24]	; (8006768 <ip_reass_dequeue_datagram+0x3c>)
 8006750:	4806      	ldr	r0, [pc, #24]	; (800676c <ip_reass_dequeue_datagram+0x40>)
 8006752:	f240 1245 	movw	r2, #325	; 0x145
 8006756:	f005 f83b 	bl	800b7d0 <iprintf>
    prev->next = ipr->next;
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	e7ee      	b.n	800673e <ip_reass_dequeue_datagram+0x12>
 8006760:	20009354 	.word	0x20009354
 8006764:	0800e4b5 	.word	0x0800e4b5
 8006768:	0800e534 	.word	0x0800e534
 800676c:	0800d598 	.word	0x0800d598

08006770 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006770:	4281      	cmp	r1, r0
{
 8006772:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800677a:	d105      	bne.n	8006788 <ip_reass_free_complete_datagram+0x18>
 800677c:	4b2f      	ldr	r3, [pc, #188]	; (800683c <ip_reass_free_complete_datagram+0xcc>)
 800677e:	4930      	ldr	r1, [pc, #192]	; (8006840 <ip_reass_free_complete_datagram+0xd0>)
 8006780:	4830      	ldr	r0, [pc, #192]	; (8006844 <ip_reass_free_complete_datagram+0xd4>)
 8006782:	22ab      	movs	r2, #171	; 0xab
 8006784:	f005 f824 	bl	800b7d0 <iprintf>
  if (prev != NULL) {
 8006788:	b146      	cbz	r6, 800679c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800678a:	6833      	ldr	r3, [r6, #0]
 800678c:	42a3      	cmp	r3, r4
 800678e:	d005      	beq.n	800679c <ip_reass_free_complete_datagram+0x2c>
 8006790:	4b2a      	ldr	r3, [pc, #168]	; (800683c <ip_reass_free_complete_datagram+0xcc>)
 8006792:	492d      	ldr	r1, [pc, #180]	; (8006848 <ip_reass_free_complete_datagram+0xd8>)
 8006794:	482b      	ldr	r0, [pc, #172]	; (8006844 <ip_reass_free_complete_datagram+0xd4>)
 8006796:	22ad      	movs	r2, #173	; 0xad
 8006798:	f005 f81a 	bl	800b7d0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800679c:	6867      	ldr	r7, [r4, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80067a0:	889a      	ldrh	r2, [r3, #4]
 80067a2:	bb92      	cbnz	r2, 800680a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80067a8:	f104 011c 	add.w	r1, r4, #28
 80067ac:	f104 0208 	add.w	r2, r4, #8
 80067b0:	f852 0b04 	ldr.w	r0, [r2], #4
 80067b4:	f843 0b04 	str.w	r0, [r3], #4
 80067b8:	428a      	cmp	r2, r1
 80067ba:	d1f9      	bne.n	80067b0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80067bc:	2101      	movs	r1, #1
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff fe12 	bl	80063e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80067c4:	4638      	mov	r0, r7
 80067c6:	f001 fa7f 	bl	8007cc8 <pbuf_clen>
 80067ca:	4605      	mov	r5, r0
    pbuf_free(p);
 80067cc:	4638      	mov	r0, r7
 80067ce:	f001 f93f 	bl	8007a50 <pbuf_free>
  p = ipr->p;
 80067d2:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80067d4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800683c <ip_reass_free_complete_datagram+0xcc>
 80067d8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006854 <ip_reass_free_complete_datagram+0xe4>
 80067dc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006844 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 80067e0:	b9af      	cbnz	r7, 800680e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 80067e2:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80067e4:	4c19      	ldr	r4, [pc, #100]	; (800684c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80067e6:	4631      	mov	r1, r6
 80067e8:	f7ff ffa0 	bl	800672c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80067ec:	88a3      	ldrh	r3, [r4, #4]
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	d205      	bcs.n	80067fe <ip_reass_free_complete_datagram+0x8e>
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <ip_reass_free_complete_datagram+0xcc>)
 80067f4:	4916      	ldr	r1, [pc, #88]	; (8006850 <ip_reass_free_complete_datagram+0xe0>)
 80067f6:	4813      	ldr	r0, [pc, #76]	; (8006844 <ip_reass_free_complete_datagram+0xd4>)
 80067f8:	22d2      	movs	r2, #210	; 0xd2
 80067fa:	f004 ffe9 	bl	800b7d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80067fe:	88a3      	ldrh	r3, [r4, #4]
 8006800:	1b5b      	subs	r3, r3, r5
 8006802:	80a3      	strh	r3, [r4, #4]
}
 8006804:	4628      	mov	r0, r5
 8006806:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800680a:	2500      	movs	r5, #0
 800680c:	e7e1      	b.n	80067d2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800680e:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8006810:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8006812:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8006816:	f001 fa57 	bl	8007cc8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800681a:	4405      	add	r5, r0
 800681c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006820:	db05      	blt.n	800682e <ip_reass_free_complete_datagram+0xbe>
 8006822:	4643      	mov	r3, r8
 8006824:	22cc      	movs	r2, #204	; 0xcc
 8006826:	4649      	mov	r1, r9
 8006828:	4650      	mov	r0, sl
 800682a:	f004 ffd1 	bl	800b7d0 <iprintf>
    pbuf_free(pcur);
 800682e:	4638      	mov	r0, r7
 8006830:	f001 f90e 	bl	8007a50 <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8006834:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8006836:	465f      	mov	r7, fp
 8006838:	e7d2      	b.n	80067e0 <ip_reass_free_complete_datagram+0x70>
 800683a:	bf00      	nop
 800683c:	0800e4b5 	.word	0x0800e4b5
 8006840:	0800e54d 	.word	0x0800e54d
 8006844:	0800d598 	.word	0x0800d598
 8006848:	0800e559 	.word	0x0800e559
 800684c:	20009354 	.word	0x20009354
 8006850:	0800e588 	.word	0x0800e588
 8006854:	0800e56b 	.word	0x0800e56b

08006858 <ip_reass_remove_oldest_datagram>:
{
 8006858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800685c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80068cc <ip_reass_remove_oldest_datagram+0x74>
{
 8006860:	4605      	mov	r5, r0
 8006862:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006864:	2600      	movs	r6, #0
    other_datagrams = 0;
 8006866:	2400      	movs	r4, #0
    r = reassdatagrams;
 8006868:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800686c:	4621      	mov	r1, r4
    prev = NULL;
 800686e:	46a4      	mov	ip, r4
    oldest = NULL;
 8006870:	4620      	mov	r0, r4
    while (r != NULL) {
 8006872:	b953      	cbnz	r3, 800688a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8006874:	b110      	cbz	r0, 800687c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8006876:	f7ff ff7b 	bl	8006770 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800687a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800687c:	42be      	cmp	r6, r7
 800687e:	da01      	bge.n	8006884 <ip_reass_remove_oldest_datagram+0x2c>
 8006880:	2c01      	cmp	r4, #1
 8006882:	dcf0      	bgt.n	8006866 <ip_reass_remove_oldest_datagram+0xe>
}
 8006884:	4630      	mov	r0, r6
 8006886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800688a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	4572      	cmp	r2, lr
 8006892:	d109      	bne.n	80068a8 <ip_reass_remove_oldest_datagram+0x50>
 8006894:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	4572      	cmp	r2, lr
 800689c:	d104      	bne.n	80068a8 <ip_reass_remove_oldest_datagram+0x50>
 800689e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80068a2:	88aa      	ldrh	r2, [r5, #4]
 80068a4:	4596      	cmp	lr, r2
 80068a6:	d008      	beq.n	80068ba <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80068a8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80068aa:	b160      	cbz	r0, 80068c6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80068ac:	7fc2      	ldrb	r2, [r0, #31]
 80068ae:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80068b2:	4596      	cmp	lr, r2
 80068b4:	bf9c      	itt	ls
 80068b6:	4661      	movls	r1, ip
 80068b8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	2a00      	cmp	r2, #0
 80068be:	bf18      	it	ne
 80068c0:	469c      	movne	ip, r3
 80068c2:	4613      	mov	r3, r2
 80068c4:	e7d5      	b.n	8006872 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80068c6:	4661      	mov	r1, ip
 80068c8:	4618      	mov	r0, r3
 80068ca:	e7f6      	b.n	80068ba <ip_reass_remove_oldest_datagram+0x62>
 80068cc:	20009354 	.word	0x20009354

080068d0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80068d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80068d2:	4604      	mov	r4, r0
 80068d4:	b930      	cbnz	r0, 80068e4 <ip_frag_free_pbuf_custom_ref+0x14>
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80068d8:	4906      	ldr	r1, [pc, #24]	; (80068f4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80068da:	4807      	ldr	r0, [pc, #28]	; (80068f8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80068dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80068e0:	f004 ff76 	bl	800b7d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80068e4:	4621      	mov	r1, r4
 80068e6:	2004      	movs	r0, #4
}
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80068ec:	f000 be58 	b.w	80075a0 <memp_free>
 80068f0:	0800e4b5 	.word	0x0800e4b5
 80068f4:	0800ed7c 	.word	0x0800ed7c
 80068f8:	0800d598 	.word	0x0800d598

080068fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80068fc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80068fe:	4604      	mov	r4, r0
 8006900:	b930      	cbnz	r0, 8006910 <ipfrag_free_pbuf_custom+0x14>
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <ipfrag_free_pbuf_custom+0x28>)
 8006904:	4908      	ldr	r1, [pc, #32]	; (8006928 <ipfrag_free_pbuf_custom+0x2c>)
 8006906:	4809      	ldr	r0, [pc, #36]	; (800692c <ipfrag_free_pbuf_custom+0x30>)
 8006908:	f240 22ce 	movw	r2, #718	; 0x2ce
 800690c:	f004 ff60 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8006910:	6960      	ldr	r0, [r4, #20]
 8006912:	b108      	cbz	r0, 8006918 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8006914:	f001 f89c 	bl	8007a50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006918:	4620      	mov	r0, r4
}
 800691a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800691e:	f7ff bfd7 	b.w	80068d0 <ip_frag_free_pbuf_custom_ref>
 8006922:	bf00      	nop
 8006924:	0800e4b5 	.word	0x0800e4b5
 8006928:	0800e5aa 	.word	0x0800e5aa
 800692c:	0800d598 	.word	0x0800d598

08006930 <ip_reass_tmr>:
{
 8006930:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <ip_reass_tmr+0x28>)
 8006934:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8006936:	2400      	movs	r4, #0
  while (r != NULL) {
 8006938:	b900      	cbnz	r0, 800693c <ip_reass_tmr+0xc>
}
 800693a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800693c:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 800693e:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8006940:	b123      	cbz	r3, 800694c <ip_reass_tmr+0x1c>
      r->timer--;
 8006942:	3b01      	subs	r3, #1
 8006944:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8006946:	4604      	mov	r4, r0
 8006948:	4628      	mov	r0, r5
 800694a:	e7f5      	b.n	8006938 <ip_reass_tmr+0x8>
 800694c:	4621      	mov	r1, r4
 800694e:	f7ff ff0f 	bl	8006770 <ip_reass_free_complete_datagram>
 8006952:	4620      	mov	r0, r4
 8006954:	e7f7      	b.n	8006946 <ip_reass_tmr+0x16>
 8006956:	bf00      	nop
 8006958:	20009354 	.word	0x20009354

0800695c <ip4_reass>:
{
 800695c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8006960:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8006962:	782b      	ldrb	r3, [r5, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	2b05      	cmp	r3, #5
{
 800696a:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800696c:	f040 80a0 	bne.w	8006ab0 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006970:	88e8      	ldrh	r0, [r5, #6]
 8006972:	f000 fab5 	bl	8006ee0 <lwip_htons>
 8006976:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006978:	8868      	ldrh	r0, [r5, #2]
 800697a:	f000 fab1 	bl	8006ee0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800697e:	782a      	ldrb	r2, [r5, #0]
 8006980:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8006984:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8006988:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800698c:	f0c0 8090 	bcc.w	8006ab0 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8006990:	1ac3      	subs	r3, r0, r3
 8006992:	b29b      	uxth	r3, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006994:	4eb4      	ldr	r6, [pc, #720]	; (8006c68 <ip4_reass+0x30c>)
  len = (u16_t)(len - hlen);
 8006996:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8006998:	4640      	mov	r0, r8
 800699a:	f001 f995 	bl	8007cc8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800699e:	88b3      	ldrh	r3, [r6, #4]
 80069a0:	4403      	add	r3, r0
 80069a2:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80069a4:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80069a6:	dc79      	bgt.n	8006a9c <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80069a8:	6834      	ldr	r4, [r6, #0]
 80069aa:	2c00      	cmp	r4, #0
 80069ac:	f040 8085 	bne.w	8006aba <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80069b0:	2003      	movs	r0, #3
 80069b2:	f000 fdc5 	bl	8007540 <memp_malloc>
  if (ipr == NULL) {
 80069b6:	4604      	mov	r4, r0
 80069b8:	b958      	cbnz	r0, 80069d2 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80069ba:	4649      	mov	r1, r9
 80069bc:	4628      	mov	r0, r5
 80069be:	f7ff ff4b 	bl	8006858 <ip_reass_remove_oldest_datagram>
 80069c2:	4581      	cmp	r9, r0
 80069c4:	dc74      	bgt.n	8006ab0 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80069c6:	2003      	movs	r0, #3
 80069c8:	f000 fdba 	bl	8007540 <memp_malloc>
    if (ipr == NULL)
 80069cc:	4604      	mov	r4, r0
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d06e      	beq.n	8006ab0 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80069d2:	221c      	movs	r2, #28
 80069d4:	2100      	movs	r1, #0
 80069d6:	1d20      	adds	r0, r4, #4
 80069d8:	f004 fef2 	bl	800b7c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80069dc:	230f      	movs	r3, #15
 80069de:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80069e0:	6833      	ldr	r3, [r6, #0]
 80069e2:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 80069e4:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80069e6:	462b      	mov	r3, r5
 80069e8:	f104 0208 	add.w	r2, r4, #8
 80069ec:	f105 0114 	add.w	r1, r5, #20
 80069f0:	f853 0b04 	ldr.w	r0, [r3], #4
 80069f4:	f842 0b04 	str.w	r0, [r2], #4
 80069f8:	428b      	cmp	r3, r1
 80069fa:	d1f9      	bne.n	80069f0 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80069fc:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006a00:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 8006a04:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006a08:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8006a0c:	d10a      	bne.n	8006a24 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006a14:	429f      	cmp	r7, r3
 8006a16:	f200 8137 	bhi.w	8006c88 <ip4_reass+0x32c>
 8006a1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f200 8132 	bhi.w	8006c88 <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8006a24:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8006a28:	8868      	ldrh	r0, [r5, #2]
 8006a2a:	f000 fa59 	bl	8006ee0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8006a2e:	782b      	ldrb	r3, [r5, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8006a34:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8006a38:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8006a3c:	f0c0 8124 	bcc.w	8006c88 <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 8006a40:	1a80      	subs	r0, r0, r2
 8006a42:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8006a46:	88e8      	ldrh	r0, [r5, #6]
 8006a48:	f000 fa4a 	bl	8006ee0 <lwip_htons>
 8006a4c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006a50:	00c0      	lsls	r0, r0, #3
  iprh->end = (u16_t)(offset + len);
 8006a52:	eb0a 0300 	add.w	r3, sl, r0
  iprh = (struct ip_reass_helper *)new_p->payload;
 8006a56:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->end = (u16_t)(offset + len);
 8006a5a:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8006a5e:	2500      	movs	r5, #0
  if (iprh->end < offset) {
 8006a60:	4560      	cmp	r0, ip
  iprh->next_pbuf = NULL;
 8006a62:	7035      	strb	r5, [r6, #0]
 8006a64:	7075      	strb	r5, [r6, #1]
 8006a66:	70b5      	strb	r5, [r6, #2]
 8006a68:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8006a6a:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 8006a6c:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8006a6e:	f200 810b 	bhi.w	8006c88 <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 8006a72:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8006a76:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8006a7a:	4671      	mov	r1, lr
 8006a7c:	bb61      	cbnz	r1, 8006ad8 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	f040 80a9 	bne.w	8006bd6 <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006a84:	f1be 0f00 	cmp.w	lr, #0
 8006a88:	f000 8095 	beq.w	8006bb6 <ip4_reass+0x25a>
 8006a8c:	4b77      	ldr	r3, [pc, #476]	; (8006c6c <ip4_reass+0x310>)
 8006a8e:	4978      	ldr	r1, [pc, #480]	; (8006c70 <ip4_reass+0x314>)
 8006a90:	4878      	ldr	r0, [pc, #480]	; (8006c74 <ip4_reass+0x318>)
 8006a92:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8006a96:	f004 fe9b 	bl	800b7d0 <iprintf>
 8006a9a:	e08c      	b.n	8006bb6 <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff feda 	bl	8006858 <ip_reass_remove_oldest_datagram>
 8006aa4:	b120      	cbz	r0, 8006ab0 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006aa6:	88b3      	ldrh	r3, [r6, #4]
 8006aa8:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006aaa:	2b0a      	cmp	r3, #10
 8006aac:	f77f af7c 	ble.w	80069a8 <ip4_reass+0x4c>
  pbuf_free(p);
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	f000 ffcd 	bl	8007a50 <pbuf_free>
  return NULL;
 8006ab6:	2700      	movs	r7, #0
 8006ab8:	e077      	b.n	8006baa <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006aba:	68eb      	ldr	r3, [r5, #12]
 8006abc:	6962      	ldr	r2, [r4, #20]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d108      	bne.n	8006ad4 <ip4_reass+0x178>
 8006ac2:	692b      	ldr	r3, [r5, #16]
 8006ac4:	69a2      	ldr	r2, [r4, #24]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d104      	bne.n	8006ad4 <ip4_reass+0x178>
 8006aca:	89a2      	ldrh	r2, [r4, #12]
 8006acc:	88ab      	ldrh	r3, [r5, #4]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f000 80ee 	beq.w	8006cb0 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006ad4:	6824      	ldr	r4, [r4, #0]
 8006ad6:	e768      	b.n	80069aa <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8006ad8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8006ada:	889a      	ldrh	r2, [r3, #4]
 8006adc:	4290      	cmp	r0, r2
 8006ade:	d26d      	bcs.n	8006bbc <ip4_reass+0x260>
      iprh->next_pbuf = q;
 8006ae0:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8006ae2:	2d00      	cmp	r5, #0
 8006ae4:	d065      	beq.n	8006bb2 <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006ae6:	88eb      	ldrh	r3, [r5, #6]
 8006ae8:	4298      	cmp	r0, r3
 8006aea:	f0c0 80cd 	bcc.w	8006c88 <ip4_reass+0x32c>
 8006aee:	4594      	cmp	ip, r2
 8006af0:	f200 80ca 	bhi.w	8006c88 <ip4_reass+0x32c>
        iprh_prev->next_pbuf = new_p;
 8006af4:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8006af8:	4298      	cmp	r0, r3
      if (iprh_prev->end != iprh->start) {
 8006afa:	f040 80f5 	bne.w	8006ce8 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006afe:	f1bb 0f00 	cmp.w	fp, #0
 8006b02:	d004      	beq.n	8006b0e <ip4_reass+0x1b2>
 8006b04:	7fa3      	ldrb	r3, [r4, #30]
 8006b06:	f013 0301 	ands.w	r3, r3, #1
 8006b0a:	f000 809b 	beq.w	8006c44 <ip4_reass+0x2e8>
    if (valid) {
 8006b0e:	f1ba 0f00 	cmp.w	sl, #0
 8006b12:	d170      	bne.n	8006bf6 <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 8006b14:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006b18:	4e53      	ldr	r6, [pc, #332]	; (8006c68 <ip4_reass+0x30c>)
 8006b1a:	88b0      	ldrh	r0, [r6, #4]
 8006b1c:	4481      	add	r9, r0
 8006b1e:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 8006b22:	f1bb 0f00 	cmp.w	fp, #0
 8006b26:	d106      	bne.n	8006b36 <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006b2c:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8006b2e:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006b36:	f1ba 0f01 	cmp.w	sl, #1
 8006b3a:	d1bc      	bne.n	8006ab6 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006b3c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006b3e:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006b40:	685f      	ldr	r7, [r3, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006b42:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8006b44:	683d      	ldr	r5, [r7, #0]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8006b46:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006b48:	f104 0308 	add.w	r3, r4, #8
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	f104 011c 	add.w	r1, r4, #28
 8006b52:	f853 cb04 	ldr.w	ip, [r3], #4
 8006b56:	f842 cb04 	str.w	ip, [r2], #4
 8006b5a:	428b      	cmp	r3, r1
 8006b5c:	d1f9      	bne.n	8006b52 <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006b5e:	f000 f9bf 	bl	8006ee0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8006b62:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8006b64:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006b66:	71bb      	strb	r3, [r7, #6]
 8006b68:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006b6a:	72bb      	strb	r3, [r7, #10]
 8006b6c:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8006b6e:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	d169      	bne.n	8006c48 <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 8006b74:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	d002      	beq.n	8006b80 <ip4_reass+0x224>
 8006b7a:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d170      	bne.n	8006c62 <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7ff fdd2 	bl	800672c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f001 f89d 	bl	8007cc8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006b8e:	88b3      	ldrh	r3, [r6, #4]
 8006b90:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 8006b92:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8006b94:	d206      	bcs.n	8006ba4 <ip4_reass+0x248>
 8006b96:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <ip4_reass+0x310>)
 8006b98:	4937      	ldr	r1, [pc, #220]	; (8006c78 <ip4_reass+0x31c>)
 8006b9a:	4836      	ldr	r0, [pc, #216]	; (8006c74 <ip4_reass+0x318>)
 8006b9c:	f240 229b 	movw	r2, #667	; 0x29b
 8006ba0:	f004 fe16 	bl	800b7d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8006ba4:	88b0      	ldrh	r0, [r6, #4]
 8006ba6:	1b04      	subs	r4, r0, r4
 8006ba8:	80b4      	strh	r4, [r6, #4]
}
 8006baa:	4638      	mov	r0, r7
 8006bac:	b003      	add	sp, #12
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8006bb2:	4594      	cmp	ip, r2
 8006bb4:	d868      	bhi.n	8006c88 <ip4_reass+0x32c>
      ipr->p = new_p;
 8006bb6:	f8c4 8004 	str.w	r8, [r4, #4]
 8006bba:	e7a0      	b.n	8006afe <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8006bbc:	d064      	beq.n	8006c88 <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 8006bbe:	88d9      	ldrh	r1, [r3, #6]
 8006bc0:	4281      	cmp	r1, r0
 8006bc2:	d861      	bhi.n	8006c88 <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 8006bc4:	b125      	cbz	r5, 8006bd0 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 8006bc6:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8006bc8:	4291      	cmp	r1, r2
 8006bca:	bf18      	it	ne
 8006bcc:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	461d      	mov	r5, r3
 8006bd4:	e752      	b.n	8006a7c <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006bd6:	88eb      	ldrh	r3, [r5, #6]
 8006bd8:	4283      	cmp	r3, r0
 8006bda:	d906      	bls.n	8006bea <ip4_reass+0x28e>
 8006bdc:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <ip4_reass+0x310>)
 8006bde:	4927      	ldr	r1, [pc, #156]	; (8006c7c <ip4_reass+0x320>)
 8006be0:	4824      	ldr	r0, [pc, #144]	; (8006c74 <ip4_reass+0x318>)
 8006be2:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8006be6:	f004 fdf3 	bl	800b7d0 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8006bea:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8006bee:	88ea      	ldrh	r2, [r5, #6]
 8006bf0:	88b3      	ldrh	r3, [r6, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	e781      	b.n	8006afa <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d08b      	beq.n	8006b14 <ip4_reass+0x1b8>
 8006bfc:	6859      	ldr	r1, [r3, #4]
 8006bfe:	888b      	ldrh	r3, [r1, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d187      	bne.n	8006b14 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8006c04:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8006c06:	b9a3      	cbnz	r3, 8006c32 <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 8006c08:	42b1      	cmp	r1, r6
 8006c0a:	d106      	bne.n	8006c1a <ip4_reass+0x2be>
 8006c0c:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <ip4_reass+0x310>)
 8006c0e:	491c      	ldr	r1, [pc, #112]	; (8006c80 <ip4_reass+0x324>)
 8006c10:	4818      	ldr	r0, [pc, #96]	; (8006c74 <ip4_reass+0x318>)
 8006c12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006c16:	f004 fddb 	bl	800b7d0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006c1a:	6833      	ldr	r3, [r6, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f43f af7b 	beq.w	8006b18 <ip4_reass+0x1bc>
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <ip4_reass+0x310>)
 8006c24:	4917      	ldr	r1, [pc, #92]	; (8006c84 <ip4_reass+0x328>)
 8006c26:	4813      	ldr	r0, [pc, #76]	; (8006c74 <ip4_reass+0x318>)
 8006c28:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8006c2c:	f004 fdd0 	bl	800b7d0 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006c30:	e772      	b.n	8006b18 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8006c32:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8006c34:	88f0      	ldrh	r0, [r6, #6]
 8006c36:	8893      	ldrh	r3, [r2, #4]
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	f47f af6b 	bne.w	8006b14 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	4616      	mov	r6, r2
 8006c42:	e7e0      	b.n	8006c06 <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006c44:	469a      	mov	sl, r3
 8006c46:	e767      	b.n	8006b18 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8006c48:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8006c4c:	2114      	movs	r1, #20
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 feca 	bl	80079e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8006c54:	4629      	mov	r1, r5
 8006c56:	4638      	mov	r0, r7
 8006c58:	f001 f85a 	bl	8007d10 <pbuf_cat>
      r = iprh->next_pbuf;
 8006c5c:	f8d8 5000 	ldr.w	r5, [r8]
 8006c60:	e786      	b.n	8006b70 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	e787      	b.n	8006b76 <ip4_reass+0x21a>
 8006c66:	bf00      	nop
 8006c68:	20009354 	.word	0x20009354
 8006c6c:	0800e4b5 	.word	0x0800e4b5
 8006c70:	0800e5d4 	.word	0x0800e5d4
 8006c74:	0800d598 	.word	0x0800d598
 8006c78:	0800e63a 	.word	0x0800e63a
 8006c7c:	0800e5b6 	.word	0x0800e5b6
 8006c80:	0800e60b 	.word	0x0800e60b
 8006c84:	0800e618 	.word	0x0800e618
  if (ipr->p == NULL) {
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f47f af10 	bne.w	8006ab0 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <ip4_reass+0x39c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d006      	beq.n	8006ca6 <ip4_reass+0x34a>
 8006c98:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <ip4_reass+0x3a0>)
 8006c9a:	4919      	ldr	r1, [pc, #100]	; (8006d00 <ip4_reass+0x3a4>)
 8006c9c:	4819      	ldr	r0, [pc, #100]	; (8006d04 <ip4_reass+0x3a8>)
 8006c9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006ca2:	f004 fd95 	bl	800b7d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fd3f 	bl	800672c <ip_reass_dequeue_datagram>
 8006cae:	e6ff      	b.n	8006ab0 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006cb0:	88e8      	ldrh	r0, [r5, #6]
 8006cb2:	f000 f915 	bl	8006ee0 <lwip_htons>
 8006cb6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f47f ae9e 	bne.w	80069fc <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006cc0:	89e0      	ldrh	r0, [r4, #14]
 8006cc2:	f000 f90d 	bl	8006ee0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006cc6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f43f ae96 	beq.w	80069fc <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f104 0208 	add.w	r2, r4, #8
 8006cd6:	f105 0114 	add.w	r1, r5, #20
 8006cda:	f853 0b04 	ldr.w	r0, [r3], #4
 8006cde:	f842 0b04 	str.w	r0, [r2], #4
 8006ce2:	428b      	cmp	r3, r1
 8006ce4:	d1f9      	bne.n	8006cda <ip4_reass+0x37e>
 8006ce6:	e689      	b.n	80069fc <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006ce8:	f1bb 0f00 	cmp.w	fp, #0
 8006cec:	f43f af12 	beq.w	8006b14 <ip4_reass+0x1b8>
 8006cf0:	f04f 0a00 	mov.w	sl, #0
 8006cf4:	e706      	b.n	8006b04 <ip4_reass+0x1a8>
 8006cf6:	bf00      	nop
 8006cf8:	20009354 	.word	0x20009354
 8006cfc:	0800e4b5 	.word	0x0800e4b5
 8006d00:	0800e655 	.word	0x0800e655
 8006d04:	0800d598 	.word	0x0800d598

08006d08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d0c:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 8006d0e:	ed2d 8b02 	vpush	{d8}
 8006d12:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d16:	f1b3 0214 	subs.w	r2, r3, #20
{
 8006d1a:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8006d1c:	bf48      	it	mi
 8006d1e:	f1a3 020d 	submi.w	r2, r3, #13
 8006d22:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8006d26:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006d28:	6843      	ldr	r3, [r0, #4]
 8006d2a:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	2b05      	cmp	r3, #5
{
 8006d34:	4605      	mov	r5, r0
 8006d36:	468a      	mov	sl, r1
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8006d38:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8006d3c:	d109      	bne.n	8006d52 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8006d3e:	8943      	ldrh	r3, [r0, #10]
 8006d40:	2b13      	cmp	r3, #19
 8006d42:	d809      	bhi.n	8006d58 <ip4_frag+0x50>
 8006d44:	4b60      	ldr	r3, [pc, #384]	; (8006ec8 <ip4_frag+0x1c0>)
 8006d46:	4961      	ldr	r1, [pc, #388]	; (8006ecc <ip4_frag+0x1c4>)
 8006d48:	4861      	ldr	r0, [pc, #388]	; (8006ed0 <ip4_frag+0x1c8>)
 8006d4a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8006d4e:	f004 fd3f 	bl	800b7d0 <iprintf>
    return ERR_VAL;
 8006d52:	f06f 0005 	mvn.w	r0, #5
 8006d56:	e013      	b.n	8006d80 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	88d8      	ldrh	r0, [r3, #6]
 8006d5c:	f000 f8c0 	bl	8006ee0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006d60:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8006d64:	9303      	str	r3, [sp, #12]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8006d66:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8006d6a:	9307      	str	r3, [sp, #28]

  left = (u16_t)(p->tot_len - IP_HLEN);

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d6c:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8006d6e:	892c      	ldrh	r4, [r5, #8]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d70:	00db      	lsls	r3, r3, #3
  left = (u16_t)(p->tot_len - IP_HLEN);
 8006d72:	3c14      	subs	r4, #20
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d74:	b29b      	uxth	r3, r3
  left = (u16_t)(p->tot_len - IP_HLEN);
 8006d76:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d78:	9306      	str	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8006d7a:	2600      	movs	r6, #0
  while (left) {
 8006d7c:	b92c      	cbnz	r4, 8006d8a <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8006d7e:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8006d80:	b00b      	add	sp, #44	; 0x2c
 8006d82:	ecbd 8b02 	vpop	{d8}
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d8a:	9b06      	ldr	r3, [sp, #24]
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	bf28      	it	cs
 8006d90:	4623      	movcs	r3, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006d96:	2114      	movs	r1, #20
 8006d98:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8006d9a:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006d9c:	f000 fec0 	bl	8007b20 <pbuf_alloc>
    if (rambuf == NULL) {
 8006da0:	4680      	mov	r8, r0
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d036      	beq.n	8006e14 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006da6:	8943      	ldrh	r3, [r0, #10]
 8006da8:	2b13      	cmp	r3, #19
 8006daa:	d806      	bhi.n	8006dba <ip4_frag+0xb2>
 8006dac:	4b46      	ldr	r3, [pc, #280]	; (8006ec8 <ip4_frag+0x1c0>)
 8006dae:	4949      	ldr	r1, [pc, #292]	; (8006ed4 <ip4_frag+0x1cc>)
 8006db0:	4847      	ldr	r0, [pc, #284]	; (8006ed0 <ip4_frag+0x1c8>)
 8006db2:	f44f 7249 	mov.w	r2, #804	; 0x324
 8006db6:	f004 fd0b 	bl	800b7d0 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006dba:	9b02      	ldr	r3, [sp, #8]
 8006dbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	3114      	adds	r1, #20
 8006dc4:	f853 0b04 	ldr.w	r0, [r3], #4
 8006dc8:	f842 0b04 	str.w	r0, [r2], #4
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	d1f9      	bne.n	8006dc4 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006dd0:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8006dd4:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	d041      	beq.n	8006e62 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8006dde:	896b      	ldrh	r3, [r5, #10]
 8006de0:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006de2:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8006de4:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8006de6:	d206      	bcs.n	8006df6 <ip4_frag+0xee>
 8006de8:	4b37      	ldr	r3, [pc, #220]	; (8006ec8 <ip4_frag+0x1c0>)
 8006dea:	493b      	ldr	r1, [pc, #236]	; (8006ed8 <ip4_frag+0x1d0>)
 8006dec:	4838      	ldr	r0, [pc, #224]	; (8006ed0 <ip4_frag+0x1c8>)
 8006dee:	f240 322d 	movw	r2, #813	; 0x32d
 8006df2:	f004 fced 	bl	800b7d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006df6:	454e      	cmp	r6, r9
 8006df8:	bf28      	it	cs
 8006dfa:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8006dfc:	b916      	cbnz	r6, 8006e04 <ip4_frag+0xfc>
        p = p->next;
 8006dfe:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006e00:	2700      	movs	r7, #0
 8006e02:	e7e9      	b.n	8006dd8 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8006e04:	2004      	movs	r0, #4
 8006e06:	f000 fb9b 	bl	8007540 <memp_malloc>
      if (pcr == NULL) {
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <ip4_frag+0x112>
        pbuf_free(rambuf);
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f000 fe1e 	bl	8007a50 <pbuf_free>
  return ERR_MEM;
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	e7b2      	b.n	8006d80 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006e1a:	9601      	str	r6, [sp, #4]
 8006e1c:	686a      	ldr	r2, [r5, #4]
 8006e1e:	9008      	str	r0, [sp, #32]
 8006e20:	443a      	add	r2, r7
 8006e22:	9200      	str	r2, [sp, #0]
 8006e24:	4631      	mov	r1, r6
 8006e26:	2241      	movs	r2, #65	; 0x41
 8006e28:	2000      	movs	r0, #0
 8006e2a:	f000 fdbf 	bl	80079ac <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006e2e:	9b08      	ldr	r3, [sp, #32]
 8006e30:	b918      	cbnz	r0, 8006e3a <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fd4c 	bl	80068d0 <ip_frag_free_pbuf_custom_ref>
 8006e38:	e7e9      	b.n	8006e0e <ip4_frag+0x106>
 8006e3a:	e9cd 0308 	strd	r0, r3, [sp, #32]
      pbuf_ref(p);
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 ff4a 	bl	8007cd8 <pbuf_ref>
      pcr->original = p;
 8006e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006e46:	4a25      	ldr	r2, [pc, #148]	; (8006edc <ip4_frag+0x1d4>)
      pbuf_cat(rambuf, newpbuf);
 8006e48:	9908      	ldr	r1, [sp, #32]
      pcr->original = p;
 8006e4a:	615d      	str	r5, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006e4c:	eba9 0906 	sub.w	r9, r9, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006e50:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8006e52:	4640      	mov	r0, r8
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8006e54:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8006e58:	f000 ff5a 	bl	8007d10 <pbuf_cat>
      if (left_to_copy) {
 8006e5c:	f1b9 0f00 	cmp.w	r9, #0
 8006e60:	d1cd      	bne.n	8006dfe <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8006e62:	9b03      	ldr	r3, [sp, #12]
 8006e64:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8006e68:	f8ba 3024 	ldrh.w	r3, [sl, #36]	; 0x24
 8006e6c:	3b13      	subs	r3, #19
    poff = (u16_t)(poff + newpbuflen);
 8006e6e:	4437      	add	r7, r6
    if (!last || mf_set) {
 8006e70:	42a3      	cmp	r3, r4
    poff = (u16_t)(poff + newpbuflen);
 8006e72:	b2bf      	uxth	r7, r7
    if (!last || mf_set) {
 8006e74:	dd01      	ble.n	8006e7a <ip4_frag+0x172>
 8006e76:	9b07      	ldr	r3, [sp, #28]
 8006e78:	b10b      	cbz	r3, 8006e7e <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8006e7a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006e7e:	f000 f82f 	bl	8006ee0 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006e82:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006e84:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006e88:	f103 0014 	add.w	r0, r3, #20
 8006e8c:	b280      	uxth	r0, r0
 8006e8e:	f000 f827 	bl	8006ee0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8006e92:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8006e94:	ee18 2a10 	vmov	r2, s16
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8006e98:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006e9c:	f88b 300a 	strb.w	r3, [fp, #10]
 8006ea0:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4798      	blx	r3
    pbuf_free(rambuf);
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f000 fdce 	bl	8007a50 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8006eb4:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8006eb6:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8006eb8:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8006ec0:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	e75a      	b.n	8006d7c <ip4_frag+0x74>
 8006ec6:	bf00      	nop
 8006ec8:	0800e4b5 	.word	0x0800e4b5
 8006ecc:	0800e675 	.word	0x0800e675
 8006ed0:	0800d598 	.word	0x0800d598
 8006ed4:	0800e690 	.word	0x0800e690
 8006ed8:	0800e6b0 	.word	0x0800e6b0
 8006edc:	080068fd 	.word	0x080068fd

08006ee0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006ee0:	ba40      	rev16	r0, r0
}
 8006ee2:	b280      	uxth	r0, r0
 8006ee4:	4770      	bx	lr

08006ee6 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8006ee6:	ba00      	rev	r0, r0
 8006ee8:	4770      	bx	lr

08006eea <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006eea:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8006eec:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006eee:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8006ef2:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8006ef6:	d007      	beq.n	8006f08 <lwip_standard_chksum+0x1e>
 8006ef8:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8006efa:	bfc2      	ittt	gt
 8006efc:	f810 3b01 	ldrbgt.w	r3, [r0], #1
 8006f00:	f88d 3007 	strbgt.w	r3, [sp, #7]
    len--;
 8006f04:	f101 31ff 	addgt.w	r1, r1, #4294967295
  u32_t sum = 0;
 8006f08:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8006f0a:	2901      	cmp	r1, #1
 8006f0c:	dc15      	bgt.n	8006f3a <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006f0e:	bf04      	itt	eq
 8006f10:	7803      	ldrbeq	r3, [r0, #0]
 8006f12:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8006f16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006f1a:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006f1c:	b298      	uxth	r0, r3
 8006f1e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8006f22:	b298      	uxth	r0, r3
 8006f24:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8006f28:	b124      	cbz	r4, 8006f34 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006f2a:	0203      	lsls	r3, r0, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006f32:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8006f34:	b280      	uxth	r0, r0
 8006f36:	b002      	add	sp, #8
 8006f38:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8006f3a:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8006f3e:	3902      	subs	r1, #2
    sum += *ps++;
 8006f40:	441a      	add	r2, r3
    len -= 2;
 8006f42:	e7e2      	b.n	8006f0a <lwip_standard_chksum+0x20>

08006f44 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8006f44:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8006f46:	2600      	movs	r6, #0
{
 8006f48:	4605      	mov	r5, r0

  acc = 0;
 8006f4a:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8006f4c:	b945      	cbnz	r5, 8006f60 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8006f4e:	b126      	cbz	r6, 8006f5a <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006f50:	0223      	lsls	r3, r4, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006f58:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8006f5a:	43e0      	mvns	r0, r4
}
 8006f5c:	b280      	uxth	r0, r0
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006f60:	8969      	ldrh	r1, [r5, #10]
 8006f62:	6868      	ldr	r0, [r5, #4]
 8006f64:	f7ff ffc1 	bl	8006eea <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8006f68:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006f6a:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8006f6c:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8006f6e:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8006f70:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8006f74:	d506      	bpl.n	8006f84 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8006f76:	0223      	lsls	r3, r4, #8
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006f7e:	f086 0601 	eor.w	r6, r6, #1
 8006f82:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8006f84:	682d      	ldr	r5, [r5, #0]
 8006f86:	e7e1      	b.n	8006f4c <inet_chksum_pbuf+0x8>

08006f88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006f88:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006f8a:	f004 fb79 	bl	800b680 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006f8e:	f000 f80b 	bl	8006fa8 <mem_init>
  memp_init();
 8006f92:	f000 fab1 	bl	80074f8 <memp_init>
  pbuf_init();
  netif_init();
 8006f96:	f000 fb65 	bl	8007664 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006f9a:	f001 f831 	bl	8008000 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8006f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8006fa2:	f004 ba01 	b.w	800b3a8 <sys_timeouts_init>
	...

08006fa8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006fa8:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <mem_init+0x4c>)
 8006faa:	4813      	ldr	r0, [pc, #76]	; (8006ff8 <mem_init+0x50>)
 8006fac:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006fb0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
{
 8006fb4:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8006fb6:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
 8006fb8:	2200      	movs	r2, #0
 8006fba:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8006fbc:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006fc0:	6042      	str	r2, [r0, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006fc2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8006fc6:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
 8006fca:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  ram_end->used = 1;
 8006fce:	2101      	movs	r1, #1
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006fd0:	6003      	str	r3, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006fd2:	6083      	str	r3, [r0, #8]
  ram_end->used = 1;
 8006fd4:	f882 1804 	strb.w	r1, [r2, #2052]	; 0x804

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006fd8:	300c      	adds	r0, #12
 8006fda:	f004 fb5d 	bl	800b698 <sys_mutex_new>
 8006fde:	b140      	cbz	r0, 8006ff2 <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <mem_init+0x54>)
 8006fe6:	4906      	ldr	r1, [pc, #24]	; (8007000 <mem_init+0x58>)
 8006fe8:	4806      	ldr	r0, [pc, #24]	; (8007004 <mem_init+0x5c>)
 8006fea:	f240 221f 	movw	r2, #543	; 0x21f
 8006fee:	f004 bbef 	b.w	800b7d0 <iprintf>
}
 8006ff2:	bd10      	pop	{r4, pc}
 8006ff4:	20009387 	.word	0x20009387
 8006ff8:	20009374 	.word	0x20009374
 8006ffc:	0800e6bf 	.word	0x0800e6bf
 8007000:	0800e734 	.word	0x0800e734
 8007004:	0800d598 	.word	0x0800d598

08007008 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007008:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800700a:	4604      	mov	r4, r0
 800700c:	2800      	cmp	r0, #0
 800700e:	f000 80b7 	beq.w	8007180 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007012:	0783      	lsls	r3, r0, #30
 8007014:	d00c      	beq.n	8007030 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007016:	4b5b      	ldr	r3, [pc, #364]	; (8007184 <mem_free+0x17c>)
 8007018:	495b      	ldr	r1, [pc, #364]	; (8007188 <mem_free+0x180>)
 800701a:	f240 2273 	movw	r2, #627	; 0x273
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800701e:	485b      	ldr	r0, [pc, #364]	; (800718c <mem_free+0x184>)
 8007020:	f004 fbd6 	bl	800b7d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007024:	f004 fb5e 	bl	800b6e4 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800702c:	f004 bb66 	b.w	800b6fc <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007030:	4d57      	ldr	r5, [pc, #348]	; (8007190 <mem_free+0x188>)
 8007032:	682b      	ldr	r3, [r5, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007034:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007038:	42b3      	cmp	r3, r6
 800703a:	d804      	bhi.n	8007046 <mem_free+0x3e>
 800703c:	686a      	ldr	r2, [r5, #4]
 800703e:	f100 030c 	add.w	r3, r0, #12
 8007042:	429a      	cmp	r2, r3
 8007044:	d204      	bcs.n	8007050 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007046:	4b4f      	ldr	r3, [pc, #316]	; (8007184 <mem_free+0x17c>)
 8007048:	4952      	ldr	r1, [pc, #328]	; (8007194 <mem_free+0x18c>)
 800704a:	f240 227f 	movw	r2, #639	; 0x27f
 800704e:	e7e6      	b.n	800701e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8007050:	f105 000c 	add.w	r0, r5, #12
 8007054:	f004 fb2e 	bl	800b6b4 <sys_mutex_lock>
  if (!mem->used) {
 8007058:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800705c:	b95b      	cbnz	r3, 8007076 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800705e:	4b49      	ldr	r3, [pc, #292]	; (8007184 <mem_free+0x17c>)
 8007060:	494d      	ldr	r1, [pc, #308]	; (8007198 <mem_free+0x190>)
 8007062:	484a      	ldr	r0, [pc, #296]	; (800718c <mem_free+0x184>)
 8007064:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007068:	f004 fbb2 	bl	800b7d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800706c:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 8007070:	f004 fb25 	bl	800b6be <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007074:	e7d6      	b.n	8007024 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8007076:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800707a:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800707e:	d813      	bhi.n	80070a8 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 8007080:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007084:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007088:	d80e      	bhi.n	80070a8 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 800708a:	6829      	ldr	r1, [r5, #0]
 800708c:	1a73      	subs	r3, r6, r1
 800708e:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007090:	4283      	cmp	r3, r0
 8007092:	d002      	beq.n	800709a <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007094:	5a08      	ldrh	r0, [r1, r0]
 8007096:	4298      	cmp	r0, r3
 8007098:	d106      	bne.n	80070a8 <mem_free+0xa0>
 800709a:	6868      	ldr	r0, [r5, #4]
  return (struct mem *)(void *)&ram[ptr];
 800709c:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800709e:	4282      	cmp	r2, r0
 80070a0:	d00b      	beq.n	80070ba <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070a2:	8852      	ldrh	r2, [r2, #2]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d008      	beq.n	80070ba <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80070a8:	4b36      	ldr	r3, [pc, #216]	; (8007184 <mem_free+0x17c>)
 80070aa:	493c      	ldr	r1, [pc, #240]	; (800719c <mem_free+0x194>)
 80070ac:	4837      	ldr	r0, [pc, #220]	; (800718c <mem_free+0x184>)
 80070ae:	f240 2295 	movw	r2, #661	; 0x295
 80070b2:	f004 fb8d 	bl	800b7d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80070b6:	483a      	ldr	r0, [pc, #232]	; (80071a0 <mem_free+0x198>)
 80070b8:	e7da      	b.n	8007070 <mem_free+0x68>
  mem->used = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80070c0:	68ab      	ldr	r3, [r5, #8]
 80070c2:	42b3      	cmp	r3, r6
    lfree = mem;
 80070c4:	bf88      	it	hi
 80070c6:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80070c8:	428e      	cmp	r6, r1
 80070ca:	d206      	bcs.n	80070da <mem_free+0xd2>
 80070cc:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <mem_free+0x17c>)
 80070ce:	4935      	ldr	r1, [pc, #212]	; (80071a4 <mem_free+0x19c>)
 80070d0:	482e      	ldr	r0, [pc, #184]	; (800718c <mem_free+0x184>)
 80070d2:	f240 12df 	movw	r2, #479	; 0x1df
 80070d6:	f004 fb7b 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80070da:	686b      	ldr	r3, [r5, #4]
 80070dc:	429e      	cmp	r6, r3
 80070de:	d306      	bcc.n	80070ee <mem_free+0xe6>
 80070e0:	4b28      	ldr	r3, [pc, #160]	; (8007184 <mem_free+0x17c>)
 80070e2:	4931      	ldr	r1, [pc, #196]	; (80071a8 <mem_free+0x1a0>)
 80070e4:	4829      	ldr	r0, [pc, #164]	; (800718c <mem_free+0x184>)
 80070e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80070ea:	f004 fb71 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80070ee:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80070f2:	b133      	cbz	r3, 8007102 <mem_free+0xfa>
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <mem_free+0x17c>)
 80070f6:	492d      	ldr	r1, [pc, #180]	; (80071ac <mem_free+0x1a4>)
 80070f8:	4824      	ldr	r0, [pc, #144]	; (800718c <mem_free+0x184>)
 80070fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80070fe:	f004 fb67 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007102:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007106:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800710a:	d906      	bls.n	800711a <mem_free+0x112>
 800710c:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <mem_free+0x17c>)
 800710e:	4928      	ldr	r1, [pc, #160]	; (80071b0 <mem_free+0x1a8>)
 8007110:	481e      	ldr	r0, [pc, #120]	; (800718c <mem_free+0x184>)
 8007112:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007116:	f004 fb5b 	bl	800b7d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007120:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007122:	4296      	cmp	r6, r2
 8007124:	d012      	beq.n	800714c <mem_free+0x144>
 8007126:	7910      	ldrb	r0, [r2, #4]
 8007128:	b980      	cbnz	r0, 800714c <mem_free+0x144>
 800712a:	6868      	ldr	r0, [r5, #4]
 800712c:	4282      	cmp	r2, r0
 800712e:	d00d      	beq.n	800714c <mem_free+0x144>
    if (lfree == nmem) {
 8007130:	68a8      	ldr	r0, [r5, #8]
 8007132:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8007134:	5a5a      	ldrh	r2, [r3, r1]
 8007136:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800713a:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800713c:	bf08      	it	eq
 800713e:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007140:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007144:	bf1e      	ittt	ne
 8007146:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007148:	1af1      	subne	r1, r6, r3
 800714a:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800714c:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007150:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8007152:	428e      	cmp	r6, r1
 8007154:	d00f      	beq.n	8007176 <mem_free+0x16e>
 8007156:	7908      	ldrb	r0, [r1, #4]
 8007158:	b968      	cbnz	r0, 8007176 <mem_free+0x16e>
    if (lfree == mem) {
 800715a:	68a8      	ldr	r0, [r5, #8]
 800715c:	4286      	cmp	r6, r0
      lfree = pmem;
 800715e:	bf08      	it	eq
 8007160:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8007162:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007166:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007168:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800716c:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007170:	bf1c      	itt	ne
 8007172:	185b      	addne	r3, r3, r1
 8007174:	805a      	strhne	r2, [r3, #2]
}
 8007176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800717a:	4809      	ldr	r0, [pc, #36]	; (80071a0 <mem_free+0x198>)
 800717c:	f004 ba9f 	b.w	800b6be <sys_mutex_unlock>
}
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	bf00      	nop
 8007184:	0800e6bf 	.word	0x0800e6bf
 8007188:	0800e74f 	.word	0x0800e74f
 800718c:	0800d598 	.word	0x0800d598
 8007190:	20009374 	.word	0x20009374
 8007194:	0800e770 	.word	0x0800e770
 8007198:	0800e789 	.word	0x0800e789
 800719c:	0800e7af 	.word	0x0800e7af
 80071a0:	20009380 	.word	0x20009380
 80071a4:	0800e7e1 	.word	0x0800e7e1
 80071a8:	0800e7f8 	.word	0x0800e7f8
 80071ac:	0800e812 	.word	0x0800e812
 80071b0:	0800e82d 	.word	0x0800e82d

080071b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80071b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80071b8:	1ccc      	adds	r4, r1, #3
 80071ba:	f024 0403 	bic.w	r4, r4, #3
 80071be:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80071c0:	2c0b      	cmp	r4, #11
{
 80071c2:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 80071c4:	d904      	bls.n	80071d0 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80071c6:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 80071ca:	d902      	bls.n	80071d2 <mem_trim+0x1e>
    return NULL;
 80071cc:	2500      	movs	r5, #0
 80071ce:	e01a      	b.n	8007206 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 80071d0:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80071d2:	42a1      	cmp	r1, r4
 80071d4:	d8fa      	bhi.n	80071cc <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80071d6:	4e47      	ldr	r6, [pc, #284]	; (80072f4 <mem_trim+0x140>)
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	42ab      	cmp	r3, r5
 80071dc:	d802      	bhi.n	80071e4 <mem_trim+0x30>
 80071de:	6873      	ldr	r3, [r6, #4]
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	d806      	bhi.n	80071f2 <mem_trim+0x3e>
 80071e4:	4b44      	ldr	r3, [pc, #272]	; (80072f8 <mem_trim+0x144>)
 80071e6:	4945      	ldr	r1, [pc, #276]	; (80072fc <mem_trim+0x148>)
 80071e8:	4845      	ldr	r0, [pc, #276]	; (8007300 <mem_trim+0x14c>)
 80071ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 80071ee:	f004 faef 	bl	800b7d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80071f2:	6833      	ldr	r3, [r6, #0]
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	d802      	bhi.n	80071fe <mem_trim+0x4a>
 80071f8:	6872      	ldr	r2, [r6, #4]
 80071fa:	42aa      	cmp	r2, r5
 80071fc:	d806      	bhi.n	800720c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80071fe:	f004 fa71 	bl	800b6e4 <sys_arch_protect>
 8007202:	f004 fa7b 	bl	800b6fc <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007206:	4628      	mov	r0, r5
 8007208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800720c:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007210:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007214:	1aff      	subs	r7, r7, r3
 8007216:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007218:	f1a8 0808 	sub.w	r8, r8, #8
 800721c:	eba8 0807 	sub.w	r8, r8, r7
 8007220:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007224:	45a0      	cmp	r8, r4
 8007226:	d207      	bcs.n	8007238 <mem_trim+0x84>
 8007228:	4b33      	ldr	r3, [pc, #204]	; (80072f8 <mem_trim+0x144>)
 800722a:	4936      	ldr	r1, [pc, #216]	; (8007304 <mem_trim+0x150>)
 800722c:	4834      	ldr	r0, [pc, #208]	; (8007300 <mem_trim+0x14c>)
 800722e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007232:	f004 facd 	bl	800b7d0 <iprintf>
  if (newsize > size) {
 8007236:	e7c9      	b.n	80071cc <mem_trim+0x18>
  if (newsize == size) {
 8007238:	d0e5      	beq.n	8007206 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 800723a:	4833      	ldr	r0, [pc, #204]	; (8007308 <mem_trim+0x154>)
 800723c:	f004 fa3a 	bl	800b6b4 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007240:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007244:	f8d6 b000 	ldr.w	fp, [r6]
 8007248:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 800724c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8007250:	bb3b      	cbnz	r3, 80072a2 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007252:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8007256:	d106      	bne.n	8007266 <mem_trim+0xb2>
 8007258:	4b27      	ldr	r3, [pc, #156]	; (80072f8 <mem_trim+0x144>)
 800725a:	492c      	ldr	r1, [pc, #176]	; (800730c <mem_trim+0x158>)
 800725c:	4828      	ldr	r0, [pc, #160]	; (8007300 <mem_trim+0x14c>)
 800725e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007262:	f004 fab5 	bl	800b7d0 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007266:	f107 0308 	add.w	r3, r7, #8
 800726a:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 800726c:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 800726e:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8007270:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007274:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8007276:	fa13 f484 	uxtah	r4, r3, r4
    if (lfree == mem2) {
 800727a:	4551      	cmp	r1, sl
    mem2->used = 0;
 800727c:	f04f 0100 	mov.w	r1, #0
 8007280:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8007282:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8007284:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8007286:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800728a:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 800728c:	bf08      	it	eq
 800728e:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007290:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8007294:	d001      	beq.n	800729a <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007296:	440b      	add	r3, r1
 8007298:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800729a:	481b      	ldr	r0, [pc, #108]	; (8007308 <mem_trim+0x154>)
 800729c:	f004 fa0f 	bl	800b6be <sys_mutex_unlock>
  return rmem;
 80072a0:	e7b1      	b.n	8007206 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80072a2:	f104 0314 	add.w	r3, r4, #20
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4598      	cmp	r8, r3
 80072aa:	d3f6      	bcc.n	800729a <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80072ac:	f107 0308 	add.w	r3, r7, #8
 80072b0:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072b2:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80072b6:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072b8:	d106      	bne.n	80072c8 <mem_trim+0x114>
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <mem_trim+0x144>)
 80072bc:	4913      	ldr	r1, [pc, #76]	; (800730c <mem_trim+0x158>)
 80072be:	4810      	ldr	r0, [pc, #64]	; (8007300 <mem_trim+0x14c>)
 80072c0:	f240 3216 	movw	r2, #790	; 0x316
 80072c4:	f004 fa84 	bl	800b7d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80072c8:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 80072ca:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 80072cc:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80072ce:	4291      	cmp	r1, r2
    mem2->used = 0;
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 80072d6:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 80072da:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 80072dc:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 80072de:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = mem2;
 80072e2:	bf88      	it	hi
 80072e4:	60b2      	strhi	r2, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80072e6:	5b1a      	ldrh	r2, [r3, r4]
 80072e8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 80072ec:	bf1c      	itt	ne
 80072ee:	189b      	addne	r3, r3, r2
 80072f0:	805c      	strhne	r4, [r3, #2]
 80072f2:	e7d2      	b.n	800729a <mem_trim+0xe6>
 80072f4:	20009374 	.word	0x20009374
 80072f8:	0800e6bf 	.word	0x0800e6bf
 80072fc:	0800e857 	.word	0x0800e857
 8007300:	0800d598 	.word	0x0800d598
 8007304:	0800e86e 	.word	0x0800e86e
 8007308:	20009380 	.word	0x20009380
 800730c:	0800e88e 	.word	0x0800e88e

08007310 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007314:	2800      	cmp	r0, #0
 8007316:	f000 8084 	beq.w	8007422 <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800731a:	1cc5      	adds	r5, r0, #3
 800731c:	f025 0503 	bic.w	r5, r5, #3
 8007320:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8007322:	2d0b      	cmp	r5, #11
 8007324:	d904      	bls.n	8007330 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007326:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800732a:	d902      	bls.n	8007332 <mem_malloc+0x22>
    return NULL;
 800732c:	2000      	movs	r0, #0
 800732e:	e078      	b.n	8007422 <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 8007330:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007332:	42a8      	cmp	r0, r5
 8007334:	d8fa      	bhi.n	800732c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007336:	4f40      	ldr	r7, [pc, #256]	; (8007438 <mem_malloc+0x128>)
 8007338:	f107 000c 	add.w	r0, r7, #12
 800733c:	f004 f9ba 	bl	800b6b4 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	68be      	ldr	r6, [r7, #8]
 8007344:	1ab6      	subs	r6, r6, r2
 8007346:	b2b6      	uxth	r6, r6
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007348:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800734c:	f06f 0c07 	mvn.w	ip, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007350:	4286      	cmp	r6, r0
 8007352:	d303      	bcc.n	800735c <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007354:	4839      	ldr	r0, [pc, #228]	; (800743c <mem_malloc+0x12c>)
 8007356:	f004 f9b2 	bl	800b6be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800735a:	e7e7      	b.n	800732c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 800735c:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800735e:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8007360:	7923      	ldrb	r3, [r4, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d165      	bne.n	8007432 <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007366:	ebac 0306 	sub.w	r3, ip, r6
 800736a:	440b      	add	r3, r1
      if ((!mem->used) &&
 800736c:	42ab      	cmp	r3, r5
 800736e:	d360      	bcc.n	8007432 <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007370:	f105 0808 	add.w	r8, r5, #8
 8007374:	3514      	adds	r5, #20
 8007376:	b2ad      	uxth	r5, r5
 8007378:	42ab      	cmp	r3, r5
 800737a:	fa1f f888 	uxth.w	r8, r8
 800737e:	d352      	bcc.n	8007426 <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007380:	eb08 0506 	add.w	r5, r8, r6
 8007384:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007386:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800738a:	d106      	bne.n	800739a <mem_malloc+0x8a>
 800738c:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <mem_malloc+0x130>)
 800738e:	492d      	ldr	r1, [pc, #180]	; (8007444 <mem_malloc+0x134>)
 8007390:	482d      	ldr	r0, [pc, #180]	; (8007448 <mem_malloc+0x138>)
 8007392:	f240 3287 	movw	r2, #903	; 0x387
 8007396:	f004 fa1b 	bl	800b7d0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 800739e:	2100      	movs	r1, #0
 80073a0:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 80073a2:	8821      	ldrh	r1, [r4, #0]
 80073a4:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 80073a6:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 80073a8:	2201      	movs	r2, #1
          mem->next = ptr2;
 80073aa:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 80073ac:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80073ae:	5b5a      	ldrh	r2, [r3, r5]
 80073b0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80073b4:	d001      	beq.n	80073ba <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80073b6:	4413      	add	r3, r2
 80073b8:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d110      	bne.n	80073e2 <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 80073c0:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 80073c4:	791a      	ldrb	r2, [r3, #4]
 80073c6:	b10a      	cbz	r2, 80073cc <mem_malloc+0xbc>
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d12f      	bne.n	800742c <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80073cc:	4299      	cmp	r1, r3
          lfree = cur;
 80073ce:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80073d0:	d007      	beq.n	80073e2 <mem_malloc+0xd2>
 80073d2:	b132      	cbz	r2, 80073e2 <mem_malloc+0xd2>
 80073d4:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <mem_malloc+0x130>)
 80073d6:	491d      	ldr	r1, [pc, #116]	; (800744c <mem_malloc+0x13c>)
 80073d8:	481b      	ldr	r0, [pc, #108]	; (8007448 <mem_malloc+0x138>)
 80073da:	f240 32b5 	movw	r2, #949	; 0x3b5
 80073de:	f004 f9f7 	bl	800b7d0 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 80073e2:	4816      	ldr	r0, [pc, #88]	; (800743c <mem_malloc+0x12c>)
 80073e4:	f004 f96b 	bl	800b6be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	44a0      	add	r8, r4
 80073ec:	4543      	cmp	r3, r8
 80073ee:	d206      	bcs.n	80073fe <mem_malloc+0xee>
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <mem_malloc+0x130>)
 80073f2:	4917      	ldr	r1, [pc, #92]	; (8007450 <mem_malloc+0x140>)
 80073f4:	4814      	ldr	r0, [pc, #80]	; (8007448 <mem_malloc+0x138>)
 80073f6:	f240 32b9 	movw	r2, #953	; 0x3b9
 80073fa:	f004 f9e9 	bl	800b7d0 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80073fe:	07a3      	lsls	r3, r4, #30
 8007400:	d00d      	beq.n	800741e <mem_malloc+0x10e>
 8007402:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <mem_malloc+0x130>)
 8007404:	4913      	ldr	r1, [pc, #76]	; (8007454 <mem_malloc+0x144>)
 8007406:	4810      	ldr	r0, [pc, #64]	; (8007448 <mem_malloc+0x138>)
 8007408:	f240 32bb 	movw	r2, #955	; 0x3bb
 800740c:	f004 f9e0 	bl	800b7d0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <mem_malloc+0x130>)
 8007412:	4911      	ldr	r1, [pc, #68]	; (8007458 <mem_malloc+0x148>)
 8007414:	480c      	ldr	r0, [pc, #48]	; (8007448 <mem_malloc+0x138>)
 8007416:	f240 32bd 	movw	r2, #957	; 0x3bd
 800741a:	f004 f9d9 	bl	800b7d0 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800741e:	f104 0008 	add.w	r0, r4, #8
}
 8007422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8007426:	2301      	movs	r3, #1
 8007428:	7123      	strb	r3, [r4, #4]
 800742a:	e7c6      	b.n	80073ba <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	4403      	add	r3, r0
 8007430:	e7c8      	b.n	80073c4 <mem_malloc+0xb4>
 8007432:	460e      	mov	r6, r1
 8007434:	e78c      	b.n	8007350 <mem_malloc+0x40>
 8007436:	bf00      	nop
 8007438:	20009374 	.word	0x20009374
 800743c:	20009380 	.word	0x20009380
 8007440:	0800e6bf 	.word	0x0800e6bf
 8007444:	0800e88e 	.word	0x0800e88e
 8007448:	0800d598 	.word	0x0800d598
 800744c:	0800e89f 	.word	0x0800e89f
 8007450:	0800e8b8 	.word	0x0800e8b8
 8007454:	0800e8e8 	.word	0x0800e8e8
 8007458:	0800e917 	.word	0x0800e917

0800745c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007460:	f004 f940 	bl	800b6e4 <sys_arch_protect>

  memp = *desc->tab;
 8007464:	68a3      	ldr	r3, [r4, #8]
 8007466:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8007468:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800746a:	b15c      	cbz	r4, 8007484 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800746c:	6822      	ldr	r2, [r4, #0]
 800746e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007470:	07a3      	lsls	r3, r4, #30
 8007472:	d006      	beq.n	8007482 <do_memp_malloc_pool+0x26>
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <do_memp_malloc_pool+0x30>)
 8007476:	4906      	ldr	r1, [pc, #24]	; (8007490 <do_memp_malloc_pool+0x34>)
 8007478:	4806      	ldr	r0, [pc, #24]	; (8007494 <do_memp_malloc_pool+0x38>)
 800747a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800747e:	f004 f9a7 	bl	800b7d0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007482:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007484:	f004 f93a 	bl	800b6fc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007488:	4620      	mov	r0, r4
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	0800e93a 	.word	0x0800e93a
 8007490:	0800e9b0 	.word	0x0800e9b0
 8007494:	0800d598 	.word	0x0800d598

08007498 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007498:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800749a:	078b      	lsls	r3, r1, #30
{
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80074a0:	d006      	beq.n	80074b0 <do_memp_free_pool+0x18>
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <do_memp_free_pool+0x2c>)
 80074a4:	4908      	ldr	r1, [pc, #32]	; (80074c8 <do_memp_free_pool+0x30>)
 80074a6:	4809      	ldr	r0, [pc, #36]	; (80074cc <do_memp_free_pool+0x34>)
 80074a8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80074ac:	f004 f990 	bl	800b7d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80074b0:	f004 f918 	bl	800b6e4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80074b4:	68ab      	ldr	r3, [r5, #8]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80074ba:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80074bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80074c0:	f004 b91c 	b.w	800b6fc <sys_arch_unprotect>
 80074c4:	0800e93a 	.word	0x0800e93a
 80074c8:	0800e9d3 	.word	0x0800e9d3
 80074cc:	0800d598 	.word	0x0800d598

080074d0 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80074d0:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80074d2:	6881      	ldr	r1, [r0, #8]
{
 80074d4:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 80074d6:	2200      	movs	r2, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80074d8:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 80074da:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80074dc:	600a      	str	r2, [r1, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80074de:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80074e2:	4294      	cmp	r4, r2
 80074e4:	dc00      	bgt.n	80074e8 <memp_init_pool+0x18>
}
 80074e6:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80074e8:	680d      	ldr	r5, [r1, #0]
 80074ea:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80074ec:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80074ee:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80074f0:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80074f2:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 80074f4:	e7f5      	b.n	80074e2 <memp_init_pool+0x12>
	...

080074f8 <memp_init>:
{
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d05      	ldr	r5, [pc, #20]	; (8007510 <memp_init+0x18>)
 80074fc:	240c      	movs	r4, #12
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80074fe:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 8007500:	f855 0b04 	ldr.w	r0, [r5], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007504:	b2a4      	uxth	r4, r4
    memp_init_pool(memp_pools[i]);
 8007506:	f7ff ffe3 	bl	80074d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800750a:	2c00      	cmp	r4, #0
 800750c:	d1f7      	bne.n	80074fe <memp_init+0x6>
}
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	0800d3e0 	.word	0x0800d3e0

08007514 <memp_malloc_pool>:
{
 8007514:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007516:	4604      	mov	r4, r0
 8007518:	b118      	cbz	r0, 8007522 <memp_malloc_pool+0xe>
}
 800751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800751e:	f7ff bf9d 	b.w	800745c <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007522:	4b04      	ldr	r3, [pc, #16]	; (8007534 <memp_malloc_pool+0x20>)
 8007524:	4904      	ldr	r1, [pc, #16]	; (8007538 <memp_malloc_pool+0x24>)
 8007526:	4805      	ldr	r0, [pc, #20]	; (800753c <memp_malloc_pool+0x28>)
 8007528:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800752c:	f004 f950 	bl	800b7d0 <iprintf>
}
 8007530:	4620      	mov	r0, r4
 8007532:	bd10      	pop	{r4, pc}
 8007534:	0800e93a 	.word	0x0800e93a
 8007538:	0800e9f3 	.word	0x0800e9f3
 800753c:	0800d598 	.word	0x0800d598

08007540 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007540:	280b      	cmp	r0, #11
{
 8007542:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007544:	d806      	bhi.n	8007554 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <memp_malloc+0x28>)
 8007548:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800754c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007550:	f7ff bf84 	b.w	800745c <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <memp_malloc+0x2c>)
 8007556:	4906      	ldr	r1, [pc, #24]	; (8007570 <memp_malloc+0x30>)
 8007558:	4806      	ldr	r0, [pc, #24]	; (8007574 <memp_malloc+0x34>)
 800755a:	f240 1257 	movw	r2, #343	; 0x157
 800755e:	f004 f937 	bl	800b7d0 <iprintf>
}
 8007562:	2000      	movs	r0, #0
 8007564:	bd08      	pop	{r3, pc}
 8007566:	bf00      	nop
 8007568:	0800d3e0 	.word	0x0800d3e0
 800756c:	0800e93a 	.word	0x0800e93a
 8007570:	0800ea05 	.word	0x0800ea05
 8007574:	0800d598 	.word	0x0800d598

08007578 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007578:	b940      	cbnz	r0, 800758c <memp_free_pool+0x14>
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <memp_free_pool+0x1c>)
 800757c:	4906      	ldr	r1, [pc, #24]	; (8007598 <memp_free_pool+0x20>)
 800757e:	4807      	ldr	r0, [pc, #28]	; (800759c <memp_free_pool+0x24>)
 8007580:	f240 1295 	movw	r2, #405	; 0x195
 8007584:	f004 b924 	b.w	800b7d0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 8007588:	f7ff bf86 	b.w	8007498 <do_memp_free_pool>
  if ((desc == NULL) || (mem == NULL)) {
 800758c:	2900      	cmp	r1, #0
 800758e:	d1fb      	bne.n	8007588 <memp_free_pool+0x10>
}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	0800e93a 	.word	0x0800e93a
 8007598:	0800e9f3 	.word	0x0800e9f3
 800759c:	0800d598 	.word	0x0800d598

080075a0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80075a0:	280b      	cmp	r0, #11
 80075a2:	d906      	bls.n	80075b2 <memp_free+0x12>
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <memp_free+0x20>)
 80075a6:	4907      	ldr	r1, [pc, #28]	; (80075c4 <memp_free+0x24>)
 80075a8:	4807      	ldr	r0, [pc, #28]	; (80075c8 <memp_free+0x28>)
 80075aa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80075ae:	f004 b90f 	b.w	800b7d0 <iprintf>

  if (mem == NULL) {
 80075b2:	b121      	cbz	r1, 80075be <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <memp_free+0x2c>)
 80075b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80075ba:	f7ff bf6d 	b.w	8007498 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80075be:	4770      	bx	lr
 80075c0:	0800e93a 	.word	0x0800e93a
 80075c4:	0800ea22 	.word	0x0800ea22
 80075c8:	0800d598 	.word	0x0800d598
 80075cc:	0800d3e0 	.word	0x0800d3e0

080075d0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80075d0:	f06f 000b 	mvn.w	r0, #11
 80075d4:	4770      	bx	lr
	...

080075d8 <netif_issue_reports>:
{
 80075d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80075da:	4604      	mov	r4, r0
 80075dc:	b930      	cbnz	r0, 80075ec <netif_issue_reports+0x14>
 80075de:	4b0c      	ldr	r3, [pc, #48]	; (8007610 <netif_issue_reports+0x38>)
 80075e0:	490c      	ldr	r1, [pc, #48]	; (8007614 <netif_issue_reports+0x3c>)
 80075e2:	480d      	ldr	r0, [pc, #52]	; (8007618 <netif_issue_reports+0x40>)
 80075e4:	f240 326d 	movw	r2, #877	; 0x36d
 80075e8:	f004 f8f2 	bl	800b7d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80075ec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80075f0:	f003 0205 	and.w	r2, r3, #5
 80075f4:	2a05      	cmp	r2, #5
 80075f6:	d109      	bne.n	800760c <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80075f8:	6862      	ldr	r2, [r4, #4]
 80075fa:	b13a      	cbz	r2, 800760c <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80075fc:	071b      	lsls	r3, r3, #28
 80075fe:	d505      	bpl.n	800760c <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 8007600:	1d21      	adds	r1, r4, #4
 8007602:	4620      	mov	r0, r4
}
 8007604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8007608:	f7fe bc3a 	b.w	8005e80 <etharp_request>
}
 800760c:	bd10      	pop	{r4, pc}
 800760e:	bf00      	nop
 8007610:	0800ea3d 	.word	0x0800ea3d
 8007614:	0800eab4 	.word	0x0800eab4
 8007618:	0800d598 	.word	0x0800d598

0800761c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800761c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800761e:	4605      	mov	r5, r0
 8007620:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007622:	460c      	mov	r4, r1
 8007624:	b931      	cbnz	r1, 8007634 <netif_do_set_ipaddr.isra.0+0x18>
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <netif_do_set_ipaddr.isra.0+0x3c>)
 8007628:	490c      	ldr	r1, [pc, #48]	; (800765c <netif_do_set_ipaddr.isra.0+0x40>)
 800762a:	480d      	ldr	r0, [pc, #52]	; (8007660 <netif_do_set_ipaddr.isra.0+0x44>)
 800762c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007630:	f004 f8ce 	bl	800b7d0 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007634:	686b      	ldr	r3, [r5, #4]
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d00b      	beq.n	8007654 <netif_do_set_ipaddr.isra.0+0x38>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800763c:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800763e:	a901      	add	r1, sp, #4
 8007640:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007642:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007644:	f001 fc86 	bl	8008f54 <tcp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800764c:	2101      	movs	r1, #1
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff ffc2 	bl	80075d8 <netif_issue_reports>
}
 8007654:	b002      	add	sp, #8
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	0800ea3d 	.word	0x0800ea3d
 800765c:	0800d96e 	.word	0x0800d96e
 8007660:	0800d598 	.word	0x0800d598

08007664 <netif_init>:
}
 8007664:	4770      	bx	lr
	...

08007668 <netif_set_addr>:
{
 8007668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800766a:	4d14      	ldr	r5, [pc, #80]	; (80076bc <netif_set_addr+0x54>)
 800766c:	2900      	cmp	r1, #0
 800766e:	bf14      	ite	ne
 8007670:	460e      	movne	r6, r1
 8007672:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 8007674:	2a00      	cmp	r2, #0
 8007676:	bf14      	ite	ne
 8007678:	4617      	movne	r7, r2
 800767a:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf18      	it	ne
 8007680:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 8007682:	6833      	ldr	r3, [r6, #0]
{
 8007684:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
 8007686:	b9b3      	cbnz	r3, 80076b6 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007688:	aa01      	add	r2, sp, #4
 800768a:	4631      	mov	r1, r6
 800768c:	f7ff ffc6 	bl	800761c <netif_do_set_ipaddr.isra.0>
 8007690:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	68a1      	ldr	r1, [r4, #8]
 8007696:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007698:	bf18      	it	ne
 800769a:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800769c:	682a      	ldr	r2, [r5, #0]
 800769e:	68e1      	ldr	r1, [r4, #12]
 80076a0:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80076a2:	bf18      	it	ne
 80076a4:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 80076a6:	b923      	cbnz	r3, 80076b2 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80076a8:	aa01      	add	r2, sp, #4
 80076aa:	4631      	mov	r1, r6
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7ff ffb5 	bl	800761c <netif_do_set_ipaddr.isra.0>
}
 80076b2:	b003      	add	sp, #12
 80076b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 80076b6:	2300      	movs	r3, #0
 80076b8:	e7eb      	b.n	8007692 <netif_set_addr+0x2a>
 80076ba:	bf00      	nop
 80076bc:	0800d3dc 	.word	0x0800d3dc

080076c0 <netif_add>:
{
 80076c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80076c8:	4604      	mov	r4, r0
 80076ca:	b948      	cbnz	r0, 80076e0 <netif_add+0x20>
 80076cc:	4b3b      	ldr	r3, [pc, #236]	; (80077bc <netif_add+0xfc>)
 80076ce:	493c      	ldr	r1, [pc, #240]	; (80077c0 <netif_add+0x100>)
 80076d0:	483c      	ldr	r0, [pc, #240]	; (80077c4 <netif_add+0x104>)
 80076d2:	f240 1227 	movw	r2, #295	; 0x127
 80076d6:	f004 f87b 	bl	800b7d0 <iprintf>
}
 80076da:	4620      	mov	r0, r4
 80076dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80076e0:	f1b8 0f00 	cmp.w	r8, #0
 80076e4:	d108      	bne.n	80076f8 <netif_add+0x38>
 80076e6:	4b35      	ldr	r3, [pc, #212]	; (80077bc <netif_add+0xfc>)
 80076e8:	4937      	ldr	r1, [pc, #220]	; (80077c8 <netif_add+0x108>)
 80076ea:	4836      	ldr	r0, [pc, #216]	; (80077c4 <netif_add+0x104>)
 80076ec:	f44f 7294 	mov.w	r2, #296	; 0x128
 80076f0:	f004 f86e 	bl	800b7d0 <iprintf>
 80076f4:	4644      	mov	r4, r8
 80076f6:	e7f0      	b.n	80076da <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 80076f8:	4e34      	ldr	r6, [pc, #208]	; (80077cc <netif_add+0x10c>)
 80076fa:	6146      	str	r6, [r0, #20]
  netif->state = state;
 80076fc:	9e08      	ldr	r6, [sp, #32]
 80076fe:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8007700:	4e33      	ldr	r6, [pc, #204]	; (80077d0 <netif_add+0x110>)
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007702:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 80077d8 <netif_add+0x118>
  netif->num = netif_num;
 8007706:	7837      	ldrb	r7, [r6, #0]
 8007708:	f880 7030 	strb.w	r7, [r0, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800770c:	2500      	movs	r5, #0
  netif->input = input;
 800770e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->gw);
 8007710:	60c5      	str	r5, [r0, #12]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007712:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif->mtu = 0;
 8007716:	8485      	strh	r5, [r0, #36]	; 0x24
  netif->flags = 0;
 8007718:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->link_callback = NULL;
 800771c:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 800771e:	6107      	str	r7, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007720:	42ab      	cmp	r3, r5
 8007722:	bf08      	it	eq
 8007724:	4663      	moveq	r3, ip
 8007726:	42aa      	cmp	r2, r5
 8007728:	bf08      	it	eq
 800772a:	4662      	moveq	r2, ip
 800772c:	42a9      	cmp	r1, r5
 800772e:	bf08      	it	eq
 8007730:	4661      	moveq	r1, ip
 8007732:	f7ff ff99 	bl	8007668 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007736:	4620      	mov	r0, r4
 8007738:	47c0      	blx	r8
 800773a:	2800      	cmp	r0, #0
 800773c:	d13b      	bne.n	80077b6 <netif_add+0xf6>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800773e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80077bc <netif_add+0xfc>
 8007742:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80077dc <netif_add+0x11c>
 8007746:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80077c4 <netif_add+0x104>
      if (netif->num == 255) {
 800774a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800774e:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 8007750:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8007752:	bf04      	itt	eq
 8007754:	2300      	moveq	r3, #0
 8007756:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
      num_netifs = 0;
 800775a:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800775c:	b92d      	cbnz	r5, 800776a <netif_add+0xaa>
  if (netif->num == 254) {
 800775e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007762:	2bfe      	cmp	r3, #254	; 0xfe
 8007764:	d120      	bne.n	80077a8 <netif_add+0xe8>
    netif_num = 0;
 8007766:	462b      	mov	r3, r5
 8007768:	e020      	b.n	80077ac <netif_add+0xec>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800776a:	42a5      	cmp	r5, r4
 800776c:	d106      	bne.n	800777c <netif_add+0xbc>
 800776e:	4653      	mov	r3, sl
 8007770:	f240 128b 	movw	r2, #395	; 0x18b
 8007774:	4649      	mov	r1, r9
 8007776:	4640      	mov	r0, r8
 8007778:	f004 f82a 	bl	800b7d0 <iprintf>
        num_netifs++;
 800777c:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800777e:	2fff      	cmp	r7, #255	; 0xff
 8007780:	dd06      	ble.n	8007790 <netif_add+0xd0>
 8007782:	4914      	ldr	r1, [pc, #80]	; (80077d4 <netif_add+0x114>)
 8007784:	4653      	mov	r3, sl
 8007786:	f240 128d 	movw	r2, #397	; 0x18d
 800778a:	4640      	mov	r0, r8
 800778c:	f004 f820 	bl	800b7d0 <iprintf>
        if (netif2->num == netif->num) {
 8007790:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007794:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8007798:	429a      	cmp	r2, r3
 800779a:	d103      	bne.n	80077a4 <netif_add+0xe4>
          netif->num++;
 800779c:	3201      	adds	r2, #1
 800779e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    } while (netif2 != NULL);
 80077a2:	e7d2      	b.n	800774a <netif_add+0x8a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80077a4:	682d      	ldr	r5, [r5, #0]
 80077a6:	e7d9      	b.n	800775c <netif_add+0x9c>
    netif_num = (u8_t)(netif->num + 1);
 80077a8:	3301      	adds	r3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 80077ae:	6873      	ldr	r3, [r6, #4]
 80077b0:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80077b2:	6074      	str	r4, [r6, #4]
  return netif;
 80077b4:	e791      	b.n	80076da <netif_add+0x1a>
    return NULL;
 80077b6:	462c      	mov	r4, r5
 80077b8:	e78f      	b.n	80076da <netif_add+0x1a>
 80077ba:	bf00      	nop
 80077bc:	0800ea3d 	.word	0x0800ea3d
 80077c0:	0800eb69 	.word	0x0800eb69
 80077c4:	0800d598 	.word	0x0800d598
 80077c8:	0800eb82 	.word	0x0800eb82
 80077cc:	080075d1 	.word	0x080075d1
 80077d0:	2000f80c 	.word	0x2000f80c
 80077d4:	0800ebb8 	.word	0x0800ebb8
 80077d8:	0800d3dc 	.word	0x0800d3dc
 80077dc:	0800eba4 	.word	0x0800eba4

080077e0 <netif_set_default>:
  netif_default = netif;
 80077e0:	4b01      	ldr	r3, [pc, #4]	; (80077e8 <netif_set_default+0x8>)
 80077e2:	6098      	str	r0, [r3, #8]
}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	2000f80c 	.word	0x2000f80c

080077ec <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80077ec:	b930      	cbnz	r0, 80077fc <netif_set_up+0x10>
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <netif_set_up+0x28>)
 80077f0:	4909      	ldr	r1, [pc, #36]	; (8007818 <netif_set_up+0x2c>)
 80077f2:	480a      	ldr	r0, [pc, #40]	; (800781c <netif_set_up+0x30>)
 80077f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80077f8:	f003 bfea 	b.w	800b7d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80077fc:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8007800:	07d1      	lsls	r1, r2, #31
 8007802:	d406      	bmi.n	8007812 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007804:	f042 0201 	orr.w	r2, r2, #1
 8007808:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800780c:	2103      	movs	r1, #3
 800780e:	f7ff bee3 	b.w	80075d8 <netif_issue_reports>
}
 8007812:	4770      	bx	lr
 8007814:	0800ea3d 	.word	0x0800ea3d
 8007818:	0800ebe6 	.word	0x0800ebe6
 800781c:	0800d598 	.word	0x0800d598

08007820 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007820:	b930      	cbnz	r0, 8007830 <netif_set_down+0x10>
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <netif_set_down+0x2c>)
 8007824:	490a      	ldr	r1, [pc, #40]	; (8007850 <netif_set_down+0x30>)
 8007826:	480b      	ldr	r0, [pc, #44]	; (8007854 <netif_set_down+0x34>)
 8007828:	f240 329b 	movw	r2, #923	; 0x39b
 800782c:	f003 bfd0 	b.w	800b7d0 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8007830:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8007834:	07d1      	lsls	r1, r2, #31
 8007836:	d507      	bpl.n	8007848 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007838:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800783c:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800783e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007842:	d501      	bpl.n	8007848 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8007844:	f7fe ba62 	b.w	8005d0c <etharp_cleanup_netif>
}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	0800ea3d 	.word	0x0800ea3d
 8007850:	0800ec02 	.word	0x0800ec02
 8007854:	0800d598 	.word	0x0800d598

08007858 <netif_set_link_up>:
{
 8007858:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800785a:	4604      	mov	r4, r0
 800785c:	b940      	cbnz	r0, 8007870 <netif_set_link_up+0x18>
}
 800785e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <netif_set_link_up+0x3c>)
 8007864:	490c      	ldr	r1, [pc, #48]	; (8007898 <netif_set_link_up+0x40>)
 8007866:	480d      	ldr	r0, [pc, #52]	; (800789c <netif_set_link_up+0x44>)
 8007868:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800786c:	f003 bfb0 	b.w	800b7d0 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007870:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007874:	075a      	lsls	r2, r3, #29
 8007876:	d40c      	bmi.n	8007892 <netif_set_link_up+0x3a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007878:	f043 0304 	orr.w	r3, r3, #4
 800787c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007880:	2103      	movs	r1, #3
 8007882:	f7ff fea9 	bl	80075d8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8007886:	69e3      	ldr	r3, [r4, #28]
 8007888:	b11b      	cbz	r3, 8007892 <netif_set_link_up+0x3a>
 800788a:	4620      	mov	r0, r4
}
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8007890:	4718      	bx	r3
}
 8007892:	bd10      	pop	{r4, pc}
 8007894:	0800ea3d 	.word	0x0800ea3d
 8007898:	0800ec20 	.word	0x0800ec20
 800789c:	0800d598 	.word	0x0800d598

080078a0 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80078a0:	b930      	cbnz	r0, 80078b0 <netif_set_link_down+0x10>
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <netif_set_link_down+0x28>)
 80078a4:	4909      	ldr	r1, [pc, #36]	; (80078cc <netif_set_link_down+0x2c>)
 80078a6:	480a      	ldr	r0, [pc, #40]	; (80078d0 <netif_set_link_down+0x30>)
 80078a8:	f240 4206 	movw	r2, #1030	; 0x406
 80078ac:	f003 bf90 	b.w	800b7d0 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80078b0:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 80078b4:	0751      	lsls	r1, r2, #29
 80078b6:	d506      	bpl.n	80078c6 <netif_set_link_down+0x26>
    NETIF_LINK_CALLBACK(netif);
 80078b8:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80078ba:	f022 0204 	bic.w	r2, r2, #4
 80078be:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80078c2:	b103      	cbz	r3, 80078c6 <netif_set_link_down+0x26>
 80078c4:	4718      	bx	r3
}
 80078c6:	4770      	bx	lr
 80078c8:	0800ea3d 	.word	0x0800ea3d
 80078cc:	0800ec41 	.word	0x0800ec41
 80078d0:	0800d598 	.word	0x0800d598

080078d4 <netif_set_link_callback>:
  if (netif) {
 80078d4:	b100      	cbz	r0, 80078d8 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80078d6:	61c1      	str	r1, [r0, #28]
}
 80078d8:	4770      	bx	lr
	...

080078dc <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80078dc:	4603      	mov	r3, r0
 80078de:	b158      	cbz	r0, 80078f8 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80078e0:	4a06      	ldr	r2, [pc, #24]	; (80078fc <netif_get_by_index+0x20>)
 80078e2:	6850      	ldr	r0, [r2, #4]
 80078e4:	b900      	cbnz	r0, 80078e8 <netif_get_by_index+0xc>
 80078e6:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 80078e8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80078ec:	3201      	adds	r2, #1
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80078f4:	6800      	ldr	r0, [r0, #0]
 80078f6:	e7f5      	b.n	80078e4 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	2000f80c 	.word	0x2000f80c

08007900 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007900:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007902:	b968      	cbnz	r0, 8007920 <pbuf_add_header_impl+0x20>
 8007904:	4b14      	ldr	r3, [pc, #80]	; (8007958 <pbuf_add_header_impl+0x58>)
 8007906:	4915      	ldr	r1, [pc, #84]	; (800795c <pbuf_add_header_impl+0x5c>)
 8007908:	4815      	ldr	r0, [pc, #84]	; (8007960 <pbuf_add_header_impl+0x60>)
 800790a:	f240 12df 	movw	r2, #479	; 0x1df
 800790e:	f003 ff5f 	bl	800b7d0 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8007912:	2001      	movs	r0, #1
 8007914:	e01f      	b.n	8007956 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007916:	2a00      	cmp	r2, #0
 8007918:	d0fb      	beq.n	8007912 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800791a:	6842      	ldr	r2, [r0, #4]
 800791c:	1a51      	subs	r1, r2, r1
 800791e:	e014      	b.n	800794a <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007920:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007924:	d2f5      	bcs.n	8007912 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8007926:	b1a9      	cbz	r1, 8007954 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007928:	8903      	ldrh	r3, [r0, #8]
 800792a:	fa13 f381 	uxtah	r3, r3, r1
  increment_magnitude = (u16_t)header_size_increment;
 800792e:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007930:	b29b      	uxth	r3, r3
 8007932:	429c      	cmp	r4, r3
 8007934:	d8ed      	bhi.n	8007912 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007936:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800793a:	2d00      	cmp	r5, #0
 800793c:	daeb      	bge.n	8007916 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800793e:	6842      	ldr	r2, [r0, #4]
 8007940:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007942:	f100 0210 	add.w	r2, r0, #16
 8007946:	4291      	cmp	r1, r2
 8007948:	d3e3      	bcc.n	8007912 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800794a:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800794c:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800794e:	4414      	add	r4, r2
 8007950:	8144      	strh	r4, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007952:	8103      	strh	r3, [r0, #8]


  return 0;
 8007954:	2000      	movs	r0, #0
}
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	0800ec64 	.word	0x0800ec64
 800795c:	0800ed7c 	.word	0x0800ed7c
 8007960:	0800d598 	.word	0x0800d598

08007964 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007964:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007968:	2b01      	cmp	r3, #1
{
 800796a:	b570      	push	{r4, r5, r6, lr}
 800796c:	4606      	mov	r6, r0
 800796e:	460d      	mov	r5, r1
 8007970:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007972:	d006      	beq.n	8007982 <pbuf_alloc_reference+0x1e>
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <pbuf_alloc_reference+0x3c>)
 8007976:	490b      	ldr	r1, [pc, #44]	; (80079a4 <pbuf_alloc_reference+0x40>)
 8007978:	480b      	ldr	r0, [pc, #44]	; (80079a8 <pbuf_alloc_reference+0x44>)
 800797a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800797e:	f003 ff27 	bl	800b7d0 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007982:	200a      	movs	r0, #10
 8007984:	f7ff fddc 	bl	8007540 <memp_malloc>
  if (p == NULL) {
 8007988:	b140      	cbz	r0, 800799c <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800798a:	2300      	movs	r3, #0
  p->payload = payload;
 800798c:	e9c0 3600 	strd	r3, r6, [r0]
  p->flags = flags;
 8007990:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8007992:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8007994:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8007996:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8007998:	7304      	strb	r4, [r0, #12]
  p->ref = 1;
 800799a:	81c3      	strh	r3, [r0, #14]
}
 800799c:	bd70      	pop	{r4, r5, r6, pc}
 800799e:	bf00      	nop
 80079a0:	0800ec64 	.word	0x0800ec64
 80079a4:	0800ecda 	.word	0x0800ecda
 80079a8:	0800d598 	.word	0x0800d598

080079ac <pbuf_alloced_custom>:
{
 80079ac:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079ae:	3003      	adds	r0, #3
 80079b0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 80079b4:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80079b6:	f020 0003 	bic.w	r0, r0, #3
 80079ba:	180e      	adds	r6, r1, r0
 80079bc:	42ae      	cmp	r6, r5
 80079be:	d80d      	bhi.n	80079dc <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 80079c0:	b104      	cbz	r4, 80079c4 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80079c2:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80079c4:	4618      	mov	r0, r3
  p->next = NULL;
 80079c6:	2300      	movs	r3, #0
  p->payload = payload;
 80079c8:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 80079cc:	2302      	movs	r3, #2
 80079ce:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80079d0:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 80079d2:	8101      	strh	r1, [r0, #8]
  p->len = len;
 80079d4:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 80079d6:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80079d8:	81c3      	strh	r3, [r0, #14]
}
 80079da:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80079dc:	2000      	movs	r0, #0
 80079de:	e7fc      	b.n	80079da <pbuf_alloced_custom+0x2e>

080079e0 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7ff bf8d 	b.w	8007900 <pbuf_add_header_impl>
	...

080079e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80079e8:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079ea:	b990      	cbnz	r0, 8007a12 <pbuf_remove_header+0x2a>
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <pbuf_remove_header+0x48>)
 80079ee:	4911      	ldr	r1, [pc, #68]	; (8007a34 <pbuf_remove_header+0x4c>)
 80079f0:	f240 224b 	movw	r2, #587	; 0x24b
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079f4:	4810      	ldr	r0, [pc, #64]	; (8007a38 <pbuf_remove_header+0x50>)
 80079f6:	f003 feeb 	bl	800b7d0 <iprintf>
    return 1;
 80079fa:	2001      	movs	r0, #1
 80079fc:	e008      	b.n	8007a10 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079fe:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007a00:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007a02:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007a04:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007a06:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007a08:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007a0a:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007a0c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007a0e:	2000      	movs	r0, #0
}
 8007a10:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007a12:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007a16:	d2f0      	bcs.n	80079fa <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8007a18:	2900      	cmp	r1, #0
 8007a1a:	d0f8      	beq.n	8007a0e <pbuf_remove_header+0x26>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a1c:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
 8007a1e:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d9ec      	bls.n	80079fe <pbuf_remove_header+0x16>
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <pbuf_remove_header+0x48>)
 8007a26:	4905      	ldr	r1, [pc, #20]	; (8007a3c <pbuf_remove_header+0x54>)
 8007a28:	f240 2255 	movw	r2, #597	; 0x255
 8007a2c:	e7e2      	b.n	80079f4 <pbuf_remove_header+0xc>
 8007a2e:	bf00      	nop
 8007a30:	0800ec64 	.word	0x0800ec64
 8007a34:	0800ed7c 	.word	0x0800ed7c
 8007a38:	0800d598 	.word	0x0800d598
 8007a3c:	0800ecec 	.word	0x0800ecec

08007a40 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8007a40:	1e0b      	subs	r3, r1, #0
 8007a42:	da02      	bge.n	8007a4a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007a44:	4259      	negs	r1, r3
 8007a46:	f7ff bfcf 	b.w	80079e8 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f7ff bf58 	b.w	8007900 <pbuf_add_header_impl>

08007a50 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007a54:	4604      	mov	r4, r0
 8007a56:	b950      	cbnz	r0, 8007a6e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <pbuf_free+0xb8>)
 8007a5a:	492c      	ldr	r1, [pc, #176]	; (8007b0c <pbuf_free+0xbc>)
 8007a5c:	482c      	ldr	r0, [pc, #176]	; (8007b10 <pbuf_free+0xc0>)
 8007a5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007a62:	f003 feb5 	bl	800b7d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007a66:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007a68:	4628      	mov	r0, r5
 8007a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007a6e:	4f26      	ldr	r7, [pc, #152]	; (8007b08 <pbuf_free+0xb8>)
 8007a70:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8007b1c <pbuf_free+0xcc>
 8007a74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007b10 <pbuf_free+0xc0>
  count = 0;
 8007a78:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 8007a7a:	f003 fe33 	bl	800b6e4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007a7e:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8007a80:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007a82:	b933      	cbnz	r3, 8007a92 <pbuf_free+0x42>
 8007a84:	463b      	mov	r3, r7
 8007a86:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007a8a:	4651      	mov	r1, sl
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	f003 fe9f 	bl	800b7d0 <iprintf>
    ref = --(p->ref);
 8007a92:	7ba6      	ldrb	r6, [r4, #14]
 8007a94:	3e01      	subs	r6, #1
 8007a96:	b2f6      	uxtb	r6, r6
 8007a98:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007a9a:	4648      	mov	r0, r9
 8007a9c:	f003 fe2e 	bl	800b6fc <sys_arch_unprotect>
    if (ref == 0) {
 8007aa0:	2e00      	cmp	r6, #0
 8007aa2:	d1e1      	bne.n	8007a68 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007aa4:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8007aa6:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007aa8:	079b      	lsls	r3, r3, #30
 8007aaa:	d511      	bpl.n	8007ad0 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	b933      	cbnz	r3, 8007abe <pbuf_free+0x6e>
 8007ab0:	4918      	ldr	r1, [pc, #96]	; (8007b14 <pbuf_free+0xc4>)
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f003 fe89 	bl	800b7d0 <iprintf>
        pc->custom_free_function(p);
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4798      	blx	r3
      count++;
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	d0cd      	beq.n	8007a68 <pbuf_free+0x18>
 8007acc:	4634      	mov	r4, r6
 8007ace:	e7d4      	b.n	8007a7a <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 8007ad0:	7b23      	ldrb	r3, [r4, #12]
 8007ad2:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d104      	bne.n	8007ae4 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 8007ada:	4621      	mov	r1, r4
 8007adc:	200b      	movs	r0, #11
          memp_free(MEMP_PBUF, p);
 8007ade:	f7ff fd5f 	bl	80075a0 <memp_free>
 8007ae2:	e7ef      	b.n	8007ac4 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d102      	bne.n	8007aee <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8007ae8:	4621      	mov	r1, r4
 8007aea:	200a      	movs	r0, #10
 8007aec:	e7f7      	b.n	8007ade <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007aee:	b91b      	cbnz	r3, 8007af8 <pbuf_free+0xa8>
          mem_free(p);
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7ff fa89 	bl	8007008 <mem_free>
 8007af6:	e7e5      	b.n	8007ac4 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007af8:	4907      	ldr	r1, [pc, #28]	; (8007b18 <pbuf_free+0xc8>)
 8007afa:	463b      	mov	r3, r7
 8007afc:	f240 320f 	movw	r2, #783	; 0x30f
 8007b00:	4640      	mov	r0, r8
 8007b02:	f003 fe65 	bl	800b7d0 <iprintf>
 8007b06:	e7dd      	b.n	8007ac4 <pbuf_free+0x74>
 8007b08:	0800ec64 	.word	0x0800ec64
 8007b0c:	0800ed7c 	.word	0x0800ed7c
 8007b10:	0800d598 	.word	0x0800d598
 8007b14:	0800ed20 	.word	0x0800ed20
 8007b18:	0800ed41 	.word	0x0800ed41
 8007b1c:	0800ed0a 	.word	0x0800ed0a

08007b20 <pbuf_alloc>:
  switch (type) {
 8007b20:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	4606      	mov	r6, r0
 8007b2a:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8007b2c:	b284      	uxth	r4, r0
  switch (type) {
 8007b2e:	d014      	beq.n	8007b5a <pbuf_alloc+0x3a>
 8007b30:	d808      	bhi.n	8007b44 <pbuf_alloc+0x24>
 8007b32:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d107      	bne.n	8007b4a <pbuf_alloc+0x2a>
}
 8007b3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7ff bf10 	b.w	8007964 <pbuf_alloc_reference>
  switch (type) {
 8007b44:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8007b48:	d03c      	beq.n	8007bc4 <pbuf_alloc+0xa4>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007b4a:	4b2e      	ldr	r3, [pc, #184]	; (8007c04 <pbuf_alloc+0xe4>)
 8007b4c:	492e      	ldr	r1, [pc, #184]	; (8007c08 <pbuf_alloc+0xe8>)
 8007b4e:	482f      	ldr	r0, [pc, #188]	; (8007c0c <pbuf_alloc+0xec>)
 8007b50:	f240 1227 	movw	r2, #295	; 0x127
 8007b54:	f003 fe3c 	bl	800b7d0 <iprintf>
 8007b58:	e00c      	b.n	8007b74 <pbuf_alloc+0x54>
  switch (type) {
 8007b5a:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 8007b5c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8007c14 <pbuf_alloc+0xf4>
  switch (type) {
 8007b60:	4635      	mov	r5, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b62:	f240 58f4 	movw	r8, #1524	; 0x5f4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007b66:	200b      	movs	r0, #11
 8007b68:	f7ff fcea 	bl	8007540 <memp_malloc>
        if (q == NULL) {
 8007b6c:	46b2      	mov	sl, r6
 8007b6e:	4606      	mov	r6, r0
 8007b70:	b930      	cbnz	r0, 8007b80 <pbuf_alloc+0x60>
          if (p) {
 8007b72:	b90d      	cbnz	r5, 8007b78 <pbuf_alloc+0x58>
      return NULL;
 8007b74:	2500      	movs	r5, #0
 8007b76:	e020      	b.n	8007bba <pbuf_alloc+0x9a>
            pbuf_free(p);
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff ff69 	bl	8007a50 <pbuf_free>
 8007b7e:	e7f9      	b.n	8007b74 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b80:	1ce3      	adds	r3, r4, #3
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	eba8 0303 	sub.w	r3, r8, r3
 8007b8a:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b8c:	4404      	add	r4, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b8e:	42bb      	cmp	r3, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b90:	f104 0413 	add.w	r4, r4, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b94:	bf28      	it	cs
 8007b96:	463b      	movcs	r3, r7
  p->next = NULL;
 8007b98:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b9a:	f024 0403 	bic.w	r4, r4, #3
  p->next = NULL;
 8007b9e:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8007ba0:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8007ba2:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8007ba4:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8007ba6:	f8c0 900c 	str.w	r9, [r0, #12]
        if (p == NULL) {
 8007baa:	b14d      	cbz	r5, 8007bc0 <pbuf_alloc+0xa0>
          last->next = q;
 8007bac:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8007bb0:	1afb      	subs	r3, r7, r3
 8007bb2:	b29f      	uxth	r7, r3
        offset = 0;
 8007bb4:	2400      	movs	r4, #0
      } while (rem_len > 0);
 8007bb6:	2f00      	cmp	r7, #0
 8007bb8:	d1d5      	bne.n	8007b66 <pbuf_alloc+0x46>
}
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	e7f5      	b.n	8007bb0 <pbuf_alloc+0x90>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007bc4:	3403      	adds	r4, #3
 8007bc6:	1ccb      	adds	r3, r1, #3
 8007bc8:	f023 0303 	bic.w	r3, r3, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	441c      	add	r4, r3
 8007bd2:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007bd4:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007bd8:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007bda:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007bdc:	d3ca      	bcc.n	8007b74 <pbuf_alloc+0x54>
 8007bde:	4283      	cmp	r3, r0
 8007be0:	d8c8      	bhi.n	8007b74 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007be2:	f7ff fb95 	bl	8007310 <mem_malloc>
      if (p == NULL) {
 8007be6:	4605      	mov	r5, r0
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0e6      	beq.n	8007bba <pbuf_alloc+0x9a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007bec:	4406      	add	r6, r0
  p->next = NULL;
 8007bee:	2300      	movs	r3, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007bf0:	3613      	adds	r6, #19
  p->next = NULL;
 8007bf2:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007bf4:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <pbuf_alloc+0xf0>)
  p->payload = payload;
 8007bfa:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8007bfc:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8007bfe:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8007c00:	60c3      	str	r3, [r0, #12]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007c02:	e7da      	b.n	8007bba <pbuf_alloc+0x9a>
 8007c04:	0800ec64 	.word	0x0800ec64
 8007c08:	0800ed53 	.word	0x0800ed53
 8007c0c:	0800d598 	.word	0x0800d598
 8007c10:	00010080 	.word	0x00010080
 8007c14:	00010082 	.word	0x00010082

08007c18 <pbuf_realloc>:
{
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007c1e:	4604      	mov	r4, r0
 8007c20:	b930      	cbnz	r0, 8007c30 <pbuf_realloc+0x18>
 8007c22:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <pbuf_realloc+0x9c>)
 8007c24:	4924      	ldr	r1, [pc, #144]	; (8007cb8 <pbuf_realloc+0xa0>)
 8007c26:	4825      	ldr	r0, [pc, #148]	; (8007cbc <pbuf_realloc+0xa4>)
 8007c28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007c2c:	f003 fdd0 	bl	800b7d0 <iprintf>
  if (new_len >= p->tot_len) {
 8007c30:	8927      	ldrh	r7, [r4, #8]
 8007c32:	42b7      	cmp	r7, r6
 8007c34:	d93c      	bls.n	8007cb0 <pbuf_realloc+0x98>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007c36:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007cb4 <pbuf_realloc+0x9c>
 8007c3a:	f8df a088 	ldr.w	sl, [pc, #136]	; 8007cc4 <pbuf_realloc+0xac>
 8007c3e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8007cbc <pbuf_realloc+0xa4>
 8007c42:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8007c44:	8962      	ldrh	r2, [r4, #10]
 8007c46:	42aa      	cmp	r2, r5
 8007c48:	d319      	bcc.n	8007c7e <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007c4a:	7b23      	ldrb	r3, [r4, #12]
 8007c4c:	0719      	lsls	r1, r3, #28
 8007c4e:	d127      	bne.n	8007ca0 <pbuf_realloc+0x88>
 8007c50:	42aa      	cmp	r2, r5
 8007c52:	d025      	beq.n	8007ca0 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007c54:	7b63      	ldrb	r3, [r4, #13]
 8007c56:	079b      	lsls	r3, r3, #30
 8007c58:	d422      	bmi.n	8007ca0 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007c5a:	6861      	ldr	r1, [r4, #4]
 8007c5c:	1b09      	subs	r1, r1, r4
 8007c5e:	4429      	add	r1, r5
 8007c60:	4620      	mov	r0, r4
 8007c62:	b289      	uxth	r1, r1
 8007c64:	f7ff faa6 	bl	80071b4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007c68:	4604      	mov	r4, r0
 8007c6a:	b9c8      	cbnz	r0, 8007ca0 <pbuf_realloc+0x88>
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <pbuf_realloc+0x9c>)
 8007c6e:	4914      	ldr	r1, [pc, #80]	; (8007cc0 <pbuf_realloc+0xa8>)
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <pbuf_realloc+0xa4>)
 8007c72:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007c76:	f003 fdab 	bl	800b7d0 <iprintf>
  q->len = rem_len;
 8007c7a:	8164      	strh	r4, [r4, #10]
 8007c7c:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8007c7e:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007c80:	8922      	ldrh	r2, [r4, #8]
 8007c82:	1bf3      	subs	r3, r6, r7
 8007c84:	4413      	add	r3, r2
 8007c86:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007c88:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
 8007c8a:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007c8c:	2c00      	cmp	r4, #0
 8007c8e:	d1d9      	bne.n	8007c44 <pbuf_realloc+0x2c>
 8007c90:	4643      	mov	r3, r8
 8007c92:	f240 12af 	movw	r2, #431	; 0x1af
 8007c96:	4651      	mov	r1, sl
 8007c98:	4648      	mov	r0, r9
 8007c9a:	f003 fd99 	bl	800b7d0 <iprintf>
 8007c9e:	e7d1      	b.n	8007c44 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8007ca0:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8007ca2:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007ca4:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007ca6:	b108      	cbz	r0, 8007cac <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8007ca8:	f7ff fed2 	bl	8007a50 <pbuf_free>
  q->next = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	6023      	str	r3, [r4, #0]
}
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	0800ec64 	.word	0x0800ec64
 8007cb8:	0800ed6e 	.word	0x0800ed6e
 8007cbc:	0800d598 	.word	0x0800d598
 8007cc0:	0800ed9e 	.word	0x0800ed9e
 8007cc4:	0800ed86 	.word	0x0800ed86

08007cc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007cc8:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8007cca:	2200      	movs	r2, #0
 8007ccc:	b290      	uxth	r0, r2
 8007cce:	3201      	adds	r2, #1
 8007cd0:	b903      	cbnz	r3, 8007cd4 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8007cd2:	4770      	bx	lr
    p = p->next;
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	e7f9      	b.n	8007ccc <pbuf_clen+0x4>

08007cd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007cd8:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8007cda:	4604      	mov	r4, r0
 8007cdc:	b188      	cbz	r0, 8007d02 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007cde:	f003 fd01 	bl	800b6e4 <sys_arch_protect>
 8007ce2:	7ba3      	ldrb	r3, [r4, #14]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	73a3      	strb	r3, [r4, #14]
 8007ce8:	f003 fd08 	bl	800b6fc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007cec:	7ba3      	ldrb	r3, [r4, #14]
 8007cee:	b943      	cbnz	r3, 8007d02 <pbuf_ref+0x2a>
  }
}
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007cf4:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <pbuf_ref+0x2c>)
 8007cf6:	4904      	ldr	r1, [pc, #16]	; (8007d08 <pbuf_ref+0x30>)
 8007cf8:	4804      	ldr	r0, [pc, #16]	; (8007d0c <pbuf_ref+0x34>)
 8007cfa:	f240 3242 	movw	r2, #834	; 0x342
 8007cfe:	f003 bd67 	b.w	800b7d0 <iprintf>
}
 8007d02:	bd10      	pop	{r4, pc}
 8007d04:	0800ec64 	.word	0x0800ec64
 8007d08:	0800edba 	.word	0x0800edba
 8007d0c:	0800d598 	.word	0x0800d598

08007d10 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d14:	4604      	mov	r4, r0
 8007d16:	b100      	cbz	r0, 8007d1a <pbuf_cat+0xa>
 8007d18:	b961      	cbnz	r1, 8007d34 <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <pbuf_cat+0x60>)
 8007d20:	4914      	ldr	r1, [pc, #80]	; (8007d74 <pbuf_cat+0x64>)
 8007d22:	4815      	ldr	r0, [pc, #84]	; (8007d78 <pbuf_cat+0x68>)
 8007d24:	f240 3259 	movw	r2, #857	; 0x359
 8007d28:	f003 bd52 	b.w	800b7d0 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d2c:	8929      	ldrh	r1, [r5, #8]
 8007d2e:	440b      	add	r3, r1
 8007d30:	8123      	strh	r3, [r4, #8]
 8007d32:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8007d34:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d36:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	d1f7      	bne.n	8007d2c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d3c:	8962      	ldrh	r2, [r4, #10]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d00f      	beq.n	8007d62 <pbuf_cat+0x52>
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <pbuf_cat+0x60>)
 8007d44:	490d      	ldr	r1, [pc, #52]	; (8007d7c <pbuf_cat+0x6c>)
 8007d46:	480c      	ldr	r0, [pc, #48]	; (8007d78 <pbuf_cat+0x68>)
 8007d48:	f240 3262 	movw	r2, #866	; 0x362
 8007d4c:	f003 fd40 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	b133      	cbz	r3, 8007d62 <pbuf_cat+0x52>
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <pbuf_cat+0x60>)
 8007d56:	490a      	ldr	r1, [pc, #40]	; (8007d80 <pbuf_cat+0x70>)
 8007d58:	4807      	ldr	r0, [pc, #28]	; (8007d78 <pbuf_cat+0x68>)
 8007d5a:	f240 3263 	movw	r2, #867	; 0x363
 8007d5e:	f003 fd37 	bl	800b7d0 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d62:	892a      	ldrh	r2, [r5, #8]
 8007d64:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8007d66:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d68:	4413      	add	r3, r2
 8007d6a:	8123      	strh	r3, [r4, #8]
}
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
 8007d6e:	bf00      	nop
 8007d70:	0800ec64 	.word	0x0800ec64
 8007d74:	0800edcc 	.word	0x0800edcc
 8007d78:	0800d598 	.word	0x0800d598
 8007d7c:	0800ee01 	.word	0x0800ee01
 8007d80:	0800ee2e 	.word	0x0800ee2e

08007d84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	b120      	cbz	r0, 8007d98 <pbuf_copy+0x14>
 8007d8e:	b119      	cbz	r1, 8007d98 <pbuf_copy+0x14>
 8007d90:	8902      	ldrh	r2, [r0, #8]
 8007d92:	890b      	ldrh	r3, [r1, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d20a      	bcs.n	8007dae <pbuf_copy+0x2a>
 8007d98:	4b34      	ldr	r3, [pc, #208]	; (8007e6c <pbuf_copy+0xe8>)
 8007d9a:	4935      	ldr	r1, [pc, #212]	; (8007e70 <pbuf_copy+0xec>)
 8007d9c:	f240 32c9 	movw	r2, #969	; 0x3c9
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007da0:	4834      	ldr	r0, [pc, #208]	; (8007e74 <pbuf_copy+0xf0>)
 8007da2:	f003 fd15 	bl	800b7d0 <iprintf>
 8007da6:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8007daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8007dae:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007db0:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8007e6c <pbuf_copy+0xe8>
 8007db4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8007e84 <pbuf_copy+0x100>
 8007db8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8007e74 <pbuf_copy+0xf0>
  size_t offset_to = 0, offset_from = 0, len;
 8007dbc:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dbe:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8007dc2:	8962      	ldrh	r2, [r4, #10]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007dc4:	6868      	ldr	r0, [r5, #4]
 8007dc6:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dc8:	eba8 0807 	sub.w	r8, r8, r7
 8007dcc:	1b92      	subs	r2, r2, r6
 8007dce:	4590      	cmp	r8, r2
 8007dd0:	bf28      	it	cs
 8007dd2:	4690      	movcs	r8, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007dd4:	4431      	add	r1, r6
 8007dd6:	4438      	add	r0, r7
 8007dd8:	4642      	mov	r2, r8
 8007dda:	f003 fcc9 	bl	800b770 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007dde:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8007de0:	4447      	add	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007de2:	429f      	cmp	r7, r3
    offset_from += len;
 8007de4:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007de6:	d906      	bls.n	8007df6 <pbuf_copy+0x72>
 8007de8:	465b      	mov	r3, fp
 8007dea:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007dee:	4651      	mov	r1, sl
 8007df0:	4648      	mov	r0, r9
 8007df2:	f003 fced 	bl	800b7d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007df6:	8963      	ldrh	r3, [r4, #10]
 8007df8:	429e      	cmp	r6, r3
 8007dfa:	d906      	bls.n	8007e0a <pbuf_copy+0x86>
 8007dfc:	491e      	ldr	r1, [pc, #120]	; (8007e78 <pbuf_copy+0xf4>)
 8007dfe:	465b      	mov	r3, fp
 8007e00:	f240 32da 	movw	r2, #986	; 0x3da
 8007e04:	4648      	mov	r0, r9
 8007e06:	f003 fce3 	bl	800b7d0 <iprintf>
    if (offset_from >= p_from->len) {
 8007e0a:	8963      	ldrh	r3, [r4, #10]
 8007e0c:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8007e0e:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007e10:	bf24      	itt	cs
 8007e12:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8007e14:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8007e16:	429f      	cmp	r7, r3
 8007e18:	d108      	bne.n	8007e2c <pbuf_copy+0xa8>
      p_to = p_to->next;
 8007e1a:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007e1c:	b92d      	cbnz	r5, 8007e2a <pbuf_copy+0xa6>
 8007e1e:	b314      	cbz	r4, 8007e66 <pbuf_copy+0xe2>
 8007e20:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <pbuf_copy+0xe8>)
 8007e22:	4916      	ldr	r1, [pc, #88]	; (8007e7c <pbuf_copy+0xf8>)
 8007e24:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007e28:	e7ba      	b.n	8007da0 <pbuf_copy+0x1c>
      offset_to = 0;
 8007e2a:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007e2c:	b17c      	cbz	r4, 8007e4e <pbuf_copy+0xca>
 8007e2e:	8962      	ldrh	r2, [r4, #10]
 8007e30:	8923      	ldrh	r3, [r4, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d10b      	bne.n	8007e4e <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	b14b      	cbz	r3, 8007e4e <pbuf_copy+0xca>
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <pbuf_copy+0xe8>)
 8007e3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e40:	490f      	ldr	r1, [pc, #60]	; (8007e80 <pbuf_copy+0xfc>)
 8007e42:	480c      	ldr	r0, [pc, #48]	; (8007e74 <pbuf_copy+0xf0>)
 8007e44:	f003 fcc4 	bl	800b7d0 <iprintf>
 8007e48:	f06f 0005 	mvn.w	r0, #5
 8007e4c:	e7ad      	b.n	8007daa <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007e4e:	896a      	ldrh	r2, [r5, #10]
 8007e50:	892b      	ldrh	r3, [r5, #8]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d105      	bne.n	8007e62 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	b11b      	cbz	r3, 8007e62 <pbuf_copy+0xde>
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <pbuf_copy+0xe8>)
 8007e5c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007e60:	e7ee      	b.n	8007e40 <pbuf_copy+0xbc>
  } while (p_from);
 8007e62:	2c00      	cmp	r4, #0
 8007e64:	d1ab      	bne.n	8007dbe <pbuf_copy+0x3a>
  return ERR_OK;
 8007e66:	4620      	mov	r0, r4
 8007e68:	e79f      	b.n	8007daa <pbuf_copy+0x26>
 8007e6a:	bf00      	nop
 8007e6c:	0800ec64 	.word	0x0800ec64
 8007e70:	0800ee75 	.word	0x0800ee75
 8007e74:	0800d598 	.word	0x0800d598
 8007e78:	0800eebc 	.word	0x0800eebc
 8007e7c:	0800eed7 	.word	0x0800eed7
 8007e80:	0800eee4 	.word	0x0800eee4
 8007e84:	0800eea5 	.word	0x0800eea5

08007e88 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007e90:	4605      	mov	r5, r0
 8007e92:	b950      	cbnz	r0, 8007eaa <pbuf_copy_partial+0x22>
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <pbuf_copy_partial+0x7c>)
 8007e96:	491c      	ldr	r1, [pc, #112]	; (8007f08 <pbuf_copy_partial+0x80>)
 8007e98:	481c      	ldr	r0, [pc, #112]	; (8007f0c <pbuf_copy_partial+0x84>)
 8007e9a:	f240 420a 	movw	r2, #1034	; 0x40a
 8007e9e:	f003 fc97 	bl	800b7d0 <iprintf>
 8007ea2:	462e      	mov	r6, r5
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007eaa:	bb41      	cbnz	r1, 8007efe <pbuf_copy_partial+0x76>
 8007eac:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <pbuf_copy_partial+0x7c>)
 8007eae:	4918      	ldr	r1, [pc, #96]	; (8007f10 <pbuf_copy_partial+0x88>)
 8007eb0:	4816      	ldr	r0, [pc, #88]	; (8007f0c <pbuf_copy_partial+0x84>)
 8007eb2:	f240 420b 	movw	r2, #1035	; 0x40b
 8007eb6:	f003 fc8b 	bl	800b7d0 <iprintf>
 8007eba:	463e      	mov	r6, r7
 8007ebc:	e7f2      	b.n	8007ea4 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8007ebe:	896c      	ldrh	r4, [r5, #10]
 8007ec0:	b153      	cbz	r3, 8007ed8 <pbuf_copy_partial+0x50>
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	d308      	bcc.n	8007ed8 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8007ec6:	1b1b      	subs	r3, r3, r4
 8007ec8:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007eca:	682d      	ldr	r5, [r5, #0]
 8007ecc:	f1b8 0f00 	cmp.w	r8, #0
 8007ed0:	d0e8      	beq.n	8007ea4 <pbuf_copy_partial+0x1c>
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	d1f3      	bne.n	8007ebe <pbuf_copy_partial+0x36>
 8007ed6:	e7e5      	b.n	8007ea4 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8007ed8:	1ae4      	subs	r4, r4, r3
 8007eda:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8007edc:	4544      	cmp	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ede:	6869      	ldr	r1, [r5, #4]
 8007ee0:	bf28      	it	cs
 8007ee2:	4644      	movcs	r4, r8
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4419      	add	r1, r3
 8007ee8:	19b8      	adds	r0, r7, r6
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007eea:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 8007eec:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ef0:	f003 fc3e 	bl	800b770 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ef4:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8007ef6:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e7e5      	b.n	8007eca <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8007efe:	2600      	movs	r6, #0
 8007f00:	e7e4      	b.n	8007ecc <pbuf_copy_partial+0x44>
 8007f02:	bf00      	nop
 8007f04:	0800ec64 	.word	0x0800ec64
 8007f08:	0800ef0e 	.word	0x0800ef0e
 8007f0c:	0800d598 	.word	0x0800d598
 8007f10:	0800ef2d 	.word	0x0800ef2d

08007f14 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007f18:	460a      	mov	r2, r1
 8007f1a:	8929      	ldrh	r1, [r5, #8]
 8007f1c:	f7ff fe00 	bl	8007b20 <pbuf_alloc>
  if (q == NULL) {
 8007f20:	4604      	mov	r4, r0
 8007f22:	b150      	cbz	r0, 8007f3a <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7ff ff2d 	bl	8007d84 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007f2a:	b130      	cbz	r0, 8007f3a <pbuf_clone+0x26>
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <pbuf_clone+0x2c>)
 8007f2e:	4905      	ldr	r1, [pc, #20]	; (8007f44 <pbuf_clone+0x30>)
 8007f30:	4805      	ldr	r0, [pc, #20]	; (8007f48 <pbuf_clone+0x34>)
 8007f32:	f240 5224 	movw	r2, #1316	; 0x524
 8007f36:	f003 fc4b 	bl	800b7d0 <iprintf>
  return q;
}
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	0800ec64 	.word	0x0800ec64
 8007f44:	0800f02d 	.word	0x0800f02d
 8007f48:	0800d598 	.word	0x0800d598

08007f4c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	4c12      	ldr	r4, [pc, #72]	; (8007f98 <tcp_new_port+0x4c>)
 8007f50:	8823      	ldrh	r3, [r4, #0]
 8007f52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007f56:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	b29b      	uxth	r3, r3
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007f5e:	4d0f      	ldr	r5, [pc, #60]	; (8007f9c <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007f60:	42b3      	cmp	r3, r6
 8007f62:	bf08      	it	eq
 8007f64:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 8007f68:	2204      	movs	r2, #4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f6a:	f855 1b04 	ldr.w	r1, [r5], #4
 8007f6e:	6809      	ldr	r1, [r1, #0]
 8007f70:	b931      	cbnz	r1, 8007f80 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007f72:	3a01      	subs	r2, #1
 8007f74:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007f78:	d1f7      	bne.n	8007f6a <tcp_new_port+0x1e>
 8007f7a:	8023      	strh	r3, [r4, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	e007      	b.n	8007f90 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 8007f80:	8acf      	ldrh	r7, [r1, #22]
 8007f82:	429f      	cmp	r7, r3
 8007f84:	d105      	bne.n	8007f92 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007f86:	3801      	subs	r0, #1
 8007f88:	b280      	uxth	r0, r0
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d1e5      	bne.n	8007f5a <tcp_new_port+0xe>
 8007f8e:	8023      	strh	r3, [r4, #0]
}
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f92:	68c9      	ldr	r1, [r1, #12]
 8007f94:	e7ec      	b.n	8007f70 <tcp_new_port+0x24>
 8007f96:	bf00      	nop
 8007f98:	20000024 	.word	0x20000024
 8007f9c:	0800d4a0 	.word	0x0800d4a0

08007fa0 <tcp_close_shutdown_fin>:
{
 8007fa0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b930      	cbnz	r0, 8007fb4 <tcp_close_shutdown_fin+0x14>
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <tcp_close_shutdown_fin+0x54>)
 8007fa8:	4913      	ldr	r1, [pc, #76]	; (8007ff8 <tcp_close_shutdown_fin+0x58>)
 8007faa:	4814      	ldr	r0, [pc, #80]	; (8007ffc <tcp_close_shutdown_fin+0x5c>)
 8007fac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007fb0:	f003 fc0e 	bl	800b7d0 <iprintf>
  switch (pcb->state) {
 8007fb4:	7d23      	ldrb	r3, [r4, #20]
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d003      	beq.n	8007fc2 <tcp_close_shutdown_fin+0x22>
 8007fba:	2b07      	cmp	r3, #7
 8007fbc:	d00c      	beq.n	8007fd8 <tcp_close_shutdown_fin+0x38>
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d108      	bne.n	8007fd4 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f002 fd82 	bl	800aacc <tcp_send_fin>
      if (err == ERR_OK) {
 8007fc8:	b960      	cbnz	r0, 8007fe4 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8007fca:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8007fcc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f002 fede 	bl	800ad90 <tcp_output>
  switch (pcb->state) {
 8007fd4:	2000      	movs	r0, #0
}
 8007fd6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f002 fd77 	bl	800aacc <tcp_send_fin>
      if (err == ERR_OK) {
 8007fde:	b908      	cbnz	r0, 8007fe4 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8007fe0:	2309      	movs	r3, #9
 8007fe2:	e7f3      	b.n	8007fcc <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d1f6      	bne.n	8007fd6 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007fe8:	8b63      	ldrh	r3, [r4, #26]
 8007fea:	f043 0308 	orr.w	r3, r3, #8
 8007fee:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8007ff0:	e7f0      	b.n	8007fd4 <tcp_close_shutdown_fin+0x34>
 8007ff2:	bf00      	nop
 8007ff4:	0800f03e 	.word	0x0800f03e
 8007ff8:	0800f0b3 	.word	0x0800f0b3
 8007ffc:	0800d598 	.word	0x0800d598

08008000 <tcp_init>:
{
 8008000:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008002:	f003 fbfd 	bl	800b800 <rand>
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <tcp_init+0x14>)
 8008008:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800800c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008010:	8018      	strh	r0, [r3, #0]
}
 8008012:	bd08      	pop	{r3, pc}
 8008014:	20000024 	.word	0x20000024

08008018 <tcp_free>:
{
 8008018:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800801a:	7d03      	ldrb	r3, [r0, #20]
 800801c:	2b01      	cmp	r3, #1
{
 800801e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008020:	d105      	bne.n	800802e <tcp_free+0x16>
 8008022:	4b06      	ldr	r3, [pc, #24]	; (800803c <tcp_free+0x24>)
 8008024:	4906      	ldr	r1, [pc, #24]	; (8008040 <tcp_free+0x28>)
 8008026:	4807      	ldr	r0, [pc, #28]	; (8008044 <tcp_free+0x2c>)
 8008028:	22d4      	movs	r2, #212	; 0xd4
 800802a:	f003 fbd1 	bl	800b7d0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800802e:	4621      	mov	r1, r4
 8008030:	2000      	movs	r0, #0
}
 8008032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008036:	f7ff bab3 	b.w	80075a0 <memp_free>
 800803a:	bf00      	nop
 800803c:	0800f03e 	.word	0x0800f03e
 8008040:	0800f0bf 	.word	0x0800f0bf
 8008044:	0800d598 	.word	0x0800d598

08008048 <tcp_bind>:
{
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800804a:	4d23      	ldr	r5, [pc, #140]	; (80080d8 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800804c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800804e:	2900      	cmp	r1, #0
 8008050:	bf18      	it	ne
 8008052:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008054:	b948      	cbnz	r0, 800806a <tcp_bind+0x22>
 8008056:	4b21      	ldr	r3, [pc, #132]	; (80080dc <tcp_bind+0x94>)
 8008058:	4921      	ldr	r1, [pc, #132]	; (80080e0 <tcp_bind+0x98>)
 800805a:	4822      	ldr	r0, [pc, #136]	; (80080e4 <tcp_bind+0x9c>)
 800805c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008060:	f003 fbb6 	bl	800b7d0 <iprintf>
 8008064:	f06f 000f 	mvn.w	r0, #15
}
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800806a:	7d03      	ldrb	r3, [r0, #20]
 800806c:	b14b      	cbz	r3, 8008082 <tcp_bind+0x3a>
 800806e:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <tcp_bind+0x94>)
 8008070:	491d      	ldr	r1, [pc, #116]	; (80080e8 <tcp_bind+0xa0>)
 8008072:	481c      	ldr	r0, [pc, #112]	; (80080e4 <tcp_bind+0x9c>)
 8008074:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008078:	f003 fbaa 	bl	800b7d0 <iprintf>
 800807c:	f06f 0005 	mvn.w	r0, #5
 8008080:	e7f2      	b.n	8008068 <tcp_bind+0x20>
  if (port == 0) {
 8008082:	b932      	cbnz	r2, 8008092 <tcp_bind+0x4a>
    port = tcp_new_port();
 8008084:	f7ff ff62 	bl	8007f4c <tcp_new_port>
    if (port == 0) {
 8008088:	4602      	mov	r2, r0
 800808a:	b950      	cbnz	r0, 80080a2 <tcp_bind+0x5a>
      return ERR_BUF;
 800808c:	f06f 0001 	mvn.w	r0, #1
 8008090:	e7ea      	b.n	8008068 <tcp_bind+0x20>
 8008092:	4816      	ldr	r0, [pc, #88]	; (80080ec <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008094:	f850 1b04 	ldr.w	r1, [r0], #4
 8008098:	6809      	ldr	r1, [r1, #0]
 800809a:	b971      	cbnz	r1, 80080ba <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800809c:	3301      	adds	r3, #1
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d1f8      	bne.n	8008094 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	b103      	cbz	r3, 80080a8 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80080a6:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <tcp_bind+0xa8>)
  pcb->local_port = port;
 80080aa:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	60e2      	str	r2, [r4, #12]
 80080b0:	601c      	str	r4, [r3, #0]
 80080b2:	f003 f943 	bl	800b33c <tcp_timer_needed>
  return ERR_OK;
 80080b6:	2000      	movs	r0, #0
 80080b8:	e7d6      	b.n	8008068 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 80080ba:	8ace      	ldrh	r6, [r1, #22]
 80080bc:	4296      	cmp	r6, r2
 80080be:	d105      	bne.n	80080cc <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 80080c0:	680f      	ldr	r7, [r1, #0]
 80080c2:	b12f      	cbz	r7, 80080d0 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 80080c4:	682e      	ldr	r6, [r5, #0]
 80080c6:	b11e      	cbz	r6, 80080d0 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80080c8:	42b7      	cmp	r7, r6
 80080ca:	d001      	beq.n	80080d0 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80080cc:	68c9      	ldr	r1, [r1, #12]
 80080ce:	e7e4      	b.n	800809a <tcp_bind+0x52>
              return ERR_USE;
 80080d0:	f06f 0007 	mvn.w	r0, #7
 80080d4:	e7c8      	b.n	8008068 <tcp_bind+0x20>
 80080d6:	bf00      	nop
 80080d8:	0800d3dc 	.word	0x0800d3dc
 80080dc:	0800f03e 	.word	0x0800f03e
 80080e0:	0800f0d0 	.word	0x0800f0d0
 80080e4:	0800d598 	.word	0x0800d598
 80080e8:	0800f0e6 	.word	0x0800f0e6
 80080ec:	0800d4a0 	.word	0x0800d4a0
 80080f0:	2000f818 	.word	0x2000f818

080080f4 <tcp_listen_with_backlog_and_err>:
{
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80080f8:	4605      	mov	r5, r0
 80080fa:	b968      	cbnz	r0, 8008118 <tcp_listen_with_backlog_and_err+0x24>
 80080fc:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <tcp_listen_with_backlog_and_err+0xb0>)
 80080fe:	492a      	ldr	r1, [pc, #168]	; (80081a8 <tcp_listen_with_backlog_and_err+0xb4>)
 8008100:	482a      	ldr	r0, [pc, #168]	; (80081ac <tcp_listen_with_backlog_and_err+0xb8>)
 8008102:	f240 3259 	movw	r2, #857	; 0x359
 8008106:	f003 fb63 	bl	800b7d0 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800810a:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800810c:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8008110:	b106      	cbz	r6, 8008114 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8008112:	7033      	strb	r3, [r6, #0]
}
 8008114:	4620      	mov	r0, r4
 8008116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008118:	7d07      	ldrb	r7, [r0, #20]
 800811a:	b157      	cbz	r7, 8008132 <tcp_listen_with_backlog_and_err+0x3e>
 800811c:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <tcp_listen_with_backlog_and_err+0xb0>)
 800811e:	4924      	ldr	r1, [pc, #144]	; (80081b0 <tcp_listen_with_backlog_and_err+0xbc>)
 8008120:	4822      	ldr	r0, [pc, #136]	; (80081ac <tcp_listen_with_backlog_and_err+0xb8>)
 8008122:	f240 325a 	movw	r2, #858	; 0x35a
 8008126:	f003 fb53 	bl	800b7d0 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800812a:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800812c:	f06f 030e 	mvn.w	r3, #14
 8008130:	e7ee      	b.n	8008110 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008132:	2001      	movs	r0, #1
 8008134:	f7ff fa04 	bl	8007540 <memp_malloc>
  if (lpcb == NULL) {
 8008138:	4604      	mov	r4, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	d02e      	beq.n	800819c <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800813e:	692b      	ldr	r3, [r5, #16]
 8008140:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 8008142:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 8008144:	8aeb      	ldrh	r3, [r5, #22]
 8008146:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008148:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 800814a:	7d6a      	ldrb	r2, [r5, #21]
 800814c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800814e:	7a6a      	ldrb	r2, [r5, #9]
 8008150:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008152:	7207      	strb	r7, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008154:	7aea      	ldrb	r2, [r5, #11]
 8008156:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8008158:	7aaa      	ldrb	r2, [r5, #10]
 800815a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800815c:	682a      	ldr	r2, [r5, #0]
 800815e:	4f15      	ldr	r7, [pc, #84]	; (80081b4 <tcp_listen_with_backlog_and_err+0xc0>)
 8008160:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008162:	b133      	cbz	r3, 8008172 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	42ab      	cmp	r3, r5
 8008168:	d110      	bne.n	800818c <tcp_listen_with_backlog_and_err+0x98>
 800816a:	68eb      	ldr	r3, [r5, #12]
 800816c:	603b      	str	r3, [r7, #0]
 800816e:	2300      	movs	r3, #0
 8008170:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff ff50 	bl	8008018 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008178:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <tcp_listen_with_backlog_and_err+0xc4>)
 800817a:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60e3      	str	r3, [r4, #12]
 8008180:	607c      	str	r4, [r7, #4]
 8008182:	f003 f8db 	bl	800b33c <tcp_timer_needed>
  res = ERR_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	e7c2      	b.n	8008110 <tcp_listen_with_backlog_and_err+0x1c>
 800818a:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ee      	beq.n	800816e <tcp_listen_with_backlog_and_err+0x7a>
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	42aa      	cmp	r2, r5
 8008194:	d1f9      	bne.n	800818a <tcp_listen_with_backlog_and_err+0x96>
 8008196:	68ea      	ldr	r2, [r5, #12]
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	e7e8      	b.n	800816e <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800819c:	f04f 33ff 	mov.w	r3, #4294967295
 80081a0:	e7b6      	b.n	8008110 <tcp_listen_with_backlog_and_err+0x1c>
 80081a2:	bf00      	nop
 80081a4:	0800f03e 	.word	0x0800f03e
 80081a8:	0800f10e 	.word	0x0800f10e
 80081ac:	0800d598 	.word	0x0800d598
 80081b0:	0800f13b 	.word	0x0800f13b
 80081b4:	2000f818 	.word	0x2000f818
 80081b8:	08008d21 	.word	0x08008d21

080081bc <tcp_update_rcv_ann_wnd>:
{
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80081be:	4604      	mov	r4, r0
 80081c0:	b930      	cbnz	r0, 80081d0 <tcp_update_rcv_ann_wnd+0x14>
 80081c2:	4b15      	ldr	r3, [pc, #84]	; (8008218 <tcp_update_rcv_ann_wnd+0x5c>)
 80081c4:	4915      	ldr	r1, [pc, #84]	; (800821c <tcp_update_rcv_ann_wnd+0x60>)
 80081c6:	4816      	ldr	r0, [pc, #88]	; (8008220 <tcp_update_rcv_ann_wnd+0x64>)
 80081c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80081cc:	f003 fb00 	bl	800b7d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80081d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80081d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80081d4:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80081d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80081d8:	f240 56b4 	movw	r6, #1460	; 0x5b4
 80081dc:	1ad0      	subs	r0, r2, r3
 80081de:	42b7      	cmp	r7, r6
 80081e0:	4428      	add	r0, r5
 80081e2:	bf94      	ite	ls
 80081e4:	1bc1      	subls	r1, r0, r7
 80081e6:	1b81      	subhi	r1, r0, r6
 80081e8:	2900      	cmp	r1, #0
 80081ea:	db01      	blt.n	80081f0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80081ec:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 80081ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80081f0:	1aea      	subs	r2, r5, r3
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	dd02      	ble.n	80081fc <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 80081f6:	2000      	movs	r0, #0
 80081f8:	8560      	strh	r0, [r4, #42]	; 0x2a
 80081fa:	e7f8      	b.n	80081ee <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80081fc:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80081fe:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008202:	d306      	bcc.n	8008212 <tcp_update_rcv_ann_wnd+0x56>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <tcp_update_rcv_ann_wnd+0x5c>)
 8008206:	4907      	ldr	r1, [pc, #28]	; (8008224 <tcp_update_rcv_ann_wnd+0x68>)
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <tcp_update_rcv_ann_wnd+0x64>)
 800820a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800820e:	f003 fadf 	bl	800b7d0 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008212:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008214:	2000      	movs	r0, #0
 8008216:	e7ea      	b.n	80081ee <tcp_update_rcv_ann_wnd+0x32>
 8008218:	0800f03e 	.word	0x0800f03e
 800821c:	0800f172 	.word	0x0800f172
 8008220:	0800d598 	.word	0x0800d598
 8008224:	0800f196 	.word	0x0800f196

08008228 <tcp_recved>:
{
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800822c:	4605      	mov	r5, r0
 800822e:	b940      	cbnz	r0, 8008242 <tcp_recved+0x1a>
}
 8008230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008234:	4b17      	ldr	r3, [pc, #92]	; (8008294 <tcp_recved+0x6c>)
 8008236:	4918      	ldr	r1, [pc, #96]	; (8008298 <tcp_recved+0x70>)
 8008238:	4818      	ldr	r0, [pc, #96]	; (800829c <tcp_recved+0x74>)
 800823a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800823e:	f003 bac7 	b.w	800b7d0 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008242:	7d03      	ldrb	r3, [r0, #20]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d106      	bne.n	8008256 <tcp_recved+0x2e>
 8008248:	4b12      	ldr	r3, [pc, #72]	; (8008294 <tcp_recved+0x6c>)
 800824a:	4915      	ldr	r1, [pc, #84]	; (80082a0 <tcp_recved+0x78>)
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <tcp_recved+0x74>)
 800824e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008252:	f003 fabd 	bl	800b7d0 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008256:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8008258:	1911      	adds	r1, r2, r4
 800825a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800825c:	f640 3368 	movw	r3, #2920	; 0xb68
 8008260:	4299      	cmp	r1, r3
 8008262:	d813      	bhi.n	800828c <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008264:	428a      	cmp	r2, r1
 8008266:	bf88      	it	hi
 8008268:	4619      	movhi	r1, r3
 800826a:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800826c:	4628      	mov	r0, r5
 800826e:	f7ff ffa5 	bl	80081bc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008272:	f240 23d9 	movw	r3, #729	; 0x2d9
 8008276:	4298      	cmp	r0, r3
 8008278:	d90a      	bls.n	8008290 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800827a:	8b6b      	ldrh	r3, [r5, #26]
 800827c:	f043 0302 	orr.w	r3, r3, #2
 8008280:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8008282:	4628      	mov	r0, r5
}
 8008284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8008288:	f002 bd82 	b.w	800ad90 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800828c:	4619      	mov	r1, r3
 800828e:	e7ec      	b.n	800826a <tcp_recved+0x42>
}
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	bf00      	nop
 8008294:	0800f03e 	.word	0x0800f03e
 8008298:	0800f1b0 	.word	0x0800f1b0
 800829c:	0800d598 	.word	0x0800d598
 80082a0:	0800f1c8 	.word	0x0800f1c8

080082a4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80082a4:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80082a6:	4604      	mov	r4, r0
 80082a8:	b148      	cbz	r0, 80082be <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80082aa:	6840      	ldr	r0, [r0, #4]
 80082ac:	b108      	cbz	r0, 80082b2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80082ae:	f7ff fbcf 	bl	8007a50 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80082b2:	4621      	mov	r1, r4
 80082b4:	2002      	movs	r0, #2
  }
}
 80082b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80082ba:	f7ff b971 	b.w	80075a0 <memp_free>
}
 80082be:	bd10      	pop	{r4, pc}

080082c0 <tcp_segs_free>:
{
 80082c0:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80082c2:	b900      	cbnz	r0, 80082c6 <tcp_segs_free+0x6>
}
 80082c4:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80082c6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80082c8:	f7ff ffec 	bl	80082a4 <tcp_seg_free>
    seg = next;
 80082cc:	4620      	mov	r0, r4
 80082ce:	e7f8      	b.n	80082c2 <tcp_segs_free+0x2>

080082d0 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80082d0:	b100      	cbz	r0, 80082d4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80082d2:	6101      	str	r1, [r0, #16]
  }
}
 80082d4:	4770      	bx	lr
	...

080082d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80082dc:	4604      	mov	r4, r0
 80082de:	b158      	cbz	r0, 80082f8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80082e0:	7d03      	ldrb	r3, [r0, #20]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d106      	bne.n	80082f4 <tcp_recv+0x1c>
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <tcp_recv+0x24>)
 80082e8:	4905      	ldr	r1, [pc, #20]	; (8008300 <tcp_recv+0x28>)
 80082ea:	4806      	ldr	r0, [pc, #24]	; (8008304 <tcp_recv+0x2c>)
 80082ec:	f240 72df 	movw	r2, #2015	; 0x7df
 80082f0:	f003 fa6e 	bl	800b7d0 <iprintf>
    pcb->recv = recv;
 80082f4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	0800f03e 	.word	0x0800f03e
 8008300:	0800f207 	.word	0x0800f207
 8008304:	0800d598 	.word	0x0800d598

08008308 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800830c:	4604      	mov	r4, r0
 800830e:	b150      	cbz	r0, 8008326 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008310:	7d03      	ldrb	r3, [r0, #20]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d106      	bne.n	8008324 <tcp_sent+0x1c>
 8008316:	4b04      	ldr	r3, [pc, #16]	; (8008328 <tcp_sent+0x20>)
 8008318:	4904      	ldr	r1, [pc, #16]	; (800832c <tcp_sent+0x24>)
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <tcp_sent+0x28>)
 800831c:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008320:	f003 fa56 	bl	800b7d0 <iprintf>
    pcb->sent = sent;
 8008324:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	0800f03e 	.word	0x0800f03e
 800832c:	0800f22e 	.word	0x0800f22e
 8008330:	0800d598 	.word	0x0800d598

08008334 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008338:	4604      	mov	r4, r0
 800833a:	b158      	cbz	r0, 8008354 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800833c:	7d03      	ldrb	r3, [r0, #20]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d106      	bne.n	8008350 <tcp_err+0x1c>
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <tcp_err+0x24>)
 8008344:	4905      	ldr	r1, [pc, #20]	; (800835c <tcp_err+0x28>)
 8008346:	4806      	ldr	r0, [pc, #24]	; (8008360 <tcp_err+0x2c>)
 8008348:	f640 020d 	movw	r2, #2061	; 0x80d
 800834c:	f003 fa40 	bl	800b7d0 <iprintf>
    pcb->errf = err;
 8008350:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	0800f03e 	.word	0x0800f03e
 800835c:	0800f255 	.word	0x0800f255
 8008360:	0800d598 	.word	0x0800d598

08008364 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008364:	b118      	cbz	r0, 800836e <tcp_accept+0xa>
 8008366:	7d03      	ldrb	r3, [r0, #20]
 8008368:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800836a:	bf08      	it	eq
 800836c:	6181      	streq	r1, [r0, #24]
  }
}
 800836e:	4770      	bx	lr

08008370 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	460e      	mov	r6, r1
 8008374:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008376:	4604      	mov	r4, r0
 8008378:	b940      	cbnz	r0, 800838c <tcp_poll+0x1c>
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800837a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <tcp_poll+0x38>)
 8008380:	490a      	ldr	r1, [pc, #40]	; (80083ac <tcp_poll+0x3c>)
 8008382:	480b      	ldr	r0, [pc, #44]	; (80083b0 <tcp_poll+0x40>)
 8008384:	f640 023d 	movw	r2, #2109	; 0x83d
 8008388:	f003 ba22 	b.w	800b7d0 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800838c:	7d03      	ldrb	r3, [r0, #20]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d106      	bne.n	80083a0 <tcp_poll+0x30>
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <tcp_poll+0x38>)
 8008394:	4907      	ldr	r1, [pc, #28]	; (80083b4 <tcp_poll+0x44>)
 8008396:	4806      	ldr	r0, [pc, #24]	; (80083b0 <tcp_poll+0x40>)
 8008398:	f640 023e 	movw	r2, #2110	; 0x83e
 800839c:	f003 fa18 	bl	800b7d0 <iprintf>
  pcb->pollinterval = interval;
 80083a0:	7765      	strb	r5, [r4, #29]
  pcb->poll = poll;
 80083a2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
}
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0800f03e 	.word	0x0800f03e
 80083ac:	0800f27b 	.word	0x0800f27b
 80083b0:	0800d598 	.word	0x0800d598
 80083b4:	0800f291 	.word	0x0800f291

080083b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80083b8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80083ba:	4604      	mov	r4, r0
 80083bc:	b940      	cbnz	r0, 80083d0 <tcp_pcb_purge+0x18>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 80083be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80083c2:	4b10      	ldr	r3, [pc, #64]	; (8008404 <tcp_pcb_purge+0x4c>)
 80083c4:	4910      	ldr	r1, [pc, #64]	; (8008408 <tcp_pcb_purge+0x50>)
 80083c6:	4811      	ldr	r0, [pc, #68]	; (800840c <tcp_pcb_purge+0x54>)
 80083c8:	f640 0251 	movw	r2, #2129	; 0x851
 80083cc:	f003 ba00 	b.w	800b7d0 <iprintf>
  if (pcb->state != CLOSED &&
 80083d0:	7d03      	ldrb	r3, [r0, #20]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d915      	bls.n	8008402 <tcp_pcb_purge+0x4a>
 80083d6:	2b0a      	cmp	r3, #10
 80083d8:	d013      	beq.n	8008402 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 80083da:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80083dc:	b118      	cbz	r0, 80083e6 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 80083de:	f7ff fb37 	bl	8007a50 <pbuf_free>
      pcb->refused_data = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 80083e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083ea:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 80083ec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80083ee:	f7ff ff67 	bl	80082c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80083f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80083f4:	f7ff ff64 	bl	80082c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 80083fe:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8008402:	bd10      	pop	{r4, pc}
 8008404:	0800f03e 	.word	0x0800f03e
 8008408:	0800f2af 	.word	0x0800f2af
 800840c:	0800d598 	.word	0x0800d598

08008410 <tcp_slowtmr>:
{
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008414:	4dab      	ldr	r5, [pc, #684]	; (80086c4 <tcp_slowtmr+0x2b4>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008416:	4fac      	ldr	r7, [pc, #688]	; (80086c8 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 8008418:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800841a:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 80086e4 <tcp_slowtmr+0x2d4>
 800841e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 80086e8 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 8008422:	3301      	adds	r3, #1
 8008424:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 8008426:	7c2b      	ldrb	r3, [r5, #16]
 8008428:	3301      	adds	r3, #1
{
 800842a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800842c:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800842e:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 8008430:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 8008434:	b95c      	cbnz	r4, 800844e <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 8008436:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008438:	4fa3      	ldr	r7, [pc, #652]	; (80086c8 <tcp_slowtmr+0x2b8>)
 800843a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 80086ec <tcp_slowtmr+0x2dc>
 800843e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 80086e8 <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 8008442:	2e00      	cmp	r6, #0
 8008444:	f040 819b 	bne.w	800877e <tcp_slowtmr+0x36e>
}
 8008448:	b007      	add	sp, #28
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800844e:	7d23      	ldrb	r3, [r4, #20]
 8008450:	b933      	cbnz	r3, 8008460 <tcp_slowtmr+0x50>
 8008452:	463b      	mov	r3, r7
 8008454:	f240 42be 	movw	r2, #1214	; 0x4be
 8008458:	4659      	mov	r1, fp
 800845a:	4640      	mov	r0, r8
 800845c:	f003 f9b8 	bl	800b7d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008460:	7d23      	ldrb	r3, [r4, #20]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d106      	bne.n	8008474 <tcp_slowtmr+0x64>
 8008466:	4999      	ldr	r1, [pc, #612]	; (80086cc <tcp_slowtmr+0x2bc>)
 8008468:	463b      	mov	r3, r7
 800846a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800846e:	4640      	mov	r0, r8
 8008470:	f003 f9ae 	bl	800b7d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008474:	7d23      	ldrb	r3, [r4, #20]
 8008476:	2b0a      	cmp	r3, #10
 8008478:	d106      	bne.n	8008488 <tcp_slowtmr+0x78>
 800847a:	4995      	ldr	r1, [pc, #596]	; (80086d0 <tcp_slowtmr+0x2c0>)
 800847c:	463b      	mov	r3, r7
 800847e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008482:	4640      	mov	r0, r8
 8008484:	f003 f9a4 	bl	800b7d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008488:	7c2b      	ldrb	r3, [r5, #16]
 800848a:	7fa2      	ldrb	r2, [r4, #30]
 800848c:	429a      	cmp	r2, r3
 800848e:	d103      	bne.n	8008498 <tcp_slowtmr+0x88>
      pcb = pcb->next;
 8008490:	68e6      	ldr	r6, [r4, #12]
      continue;
 8008492:	46a1      	mov	r9, r4
 8008494:	4634      	mov	r4, r6
 8008496:	e7cd      	b.n	8008434 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008498:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800849a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800849c:	2a02      	cmp	r2, #2
 800849e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80084a2:	d176      	bne.n	8008592 <tcp_slowtmr+0x182>
 80084a4:	2b05      	cmp	r3, #5
 80084a6:	d976      	bls.n	8008596 <tcp_slowtmr+0x186>
      ++pcb_remove;
 80084a8:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 80084ac:	7d23      	ldrb	r3, [r4, #20]
 80084ae:	2b06      	cmp	r3, #6
 80084b0:	d10b      	bne.n	80084ca <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 80084b2:	8b62      	ldrh	r2, [r4, #26]
 80084b4:	06d2      	lsls	r2, r2, #27
 80084b6:	d508      	bpl.n	80084ca <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084b8:	68ea      	ldr	r2, [r5, #12]
 80084ba:	6a21      	ldr	r1, [r4, #32]
 80084bc:	1a52      	subs	r2, r2, r1
 80084be:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 80084c0:	bf84      	itt	hi
 80084c2:	f10a 0a01 	addhi.w	sl, sl, #1
 80084c6:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80084ca:	7a66      	ldrb	r6, [r4, #9]
 80084cc:	f016 0608 	ands.w	r6, r6, #8
 80084d0:	d019      	beq.n	8008506 <tcp_slowtmr+0xf6>
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d002      	beq.n	80084dc <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 80084d6:	2b07      	cmp	r3, #7
 80084d8:	f040 811c 	bne.w	8008714 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084dc:	6a23      	ldr	r3, [r4, #32]
 80084de:	68e9      	ldr	r1, [r5, #12]
 80084e0:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80084e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80084e6:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 80084ea:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 80084ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084f2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f240 80fa 	bls.w	80086f0 <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 80084fc:	f10a 0a01 	add.w	sl, sl, #1
 8008500:	fa5f fa8a 	uxtb.w	sl, sl
        ++pcb_reset;
 8008504:	2601      	movs	r6, #1
    if (pcb->state == SYN_RCVD) {
 8008506:	7d23      	ldrb	r3, [r4, #20]
 8008508:	2b03      	cmp	r3, #3
 800850a:	f040 8105 	bne.w	8008718 <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800850e:	68eb      	ldr	r3, [r5, #12]
 8008510:	6a22      	ldr	r2, [r4, #32]
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008516:	d803      	bhi.n	8008520 <tcp_slowtmr+0x110>
    if (pcb_remove) {
 8008518:	f1ba 0f00 	cmp.w	sl, #0
 800851c:	f000 8110 	beq.w	8008740 <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 8008520:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8008522:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8008526:	f7ff ff47 	bl	80083b8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800852a:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 800852c:	f1b9 0f00 	cmp.w	r9, #0
 8008530:	f000 80fa 	beq.w	8008728 <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008534:	42a3      	cmp	r3, r4
 8008536:	d106      	bne.n	8008546 <tcp_slowtmr+0x136>
 8008538:	4966      	ldr	r1, [pc, #408]	; (80086d4 <tcp_slowtmr+0x2c4>)
 800853a:	463b      	mov	r3, r7
 800853c:	f240 526d 	movw	r2, #1389	; 0x56d
 8008540:	4640      	mov	r0, r8
 8008542:	f003 f945 	bl	800b7d0 <iprintf>
        prev->next = pcb->next;
 8008546:	68e3      	ldr	r3, [r4, #12]
 8008548:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800854c:	b15e      	cbz	r6, 8008566 <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800854e:	8b23      	ldrh	r3, [r4, #24]
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	8ae3      	ldrh	r3, [r4, #22]
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800855c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800855e:	4623      	mov	r3, r4
 8008560:	4620      	mov	r0, r4
 8008562:	f002 fb9d 	bl	800aca0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008566:	6923      	ldr	r3, [r4, #16]
      pcb = pcb->next;
 8008568:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 800856a:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800856c:	4620      	mov	r0, r4
 800856e:	f7ff fd53 	bl	8008018 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008572:	2200      	movs	r2, #0
 8008574:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008576:	f1ba 0f00 	cmp.w	sl, #0
 800857a:	d008      	beq.n	800858e <tcp_slowtmr+0x17e>
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	f06f 010c 	mvn.w	r1, #12
 8008582:	4618      	mov	r0, r3
 8008584:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 8008586:	7c6b      	ldrb	r3, [r5, #17]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f47f af50 	bne.w	800842e <tcp_slowtmr+0x1e>
 800858e:	464c      	mov	r4, r9
 8008590:	e77f      	b.n	8008492 <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008592:	2b0b      	cmp	r3, #11
 8008594:	e787      	b.n	80084a6 <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 8008596:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 800859a:	f1ba 0f00 	cmp.w	sl, #0
 800859e:	d045      	beq.n	800862c <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80085a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80085a2:	b133      	cbz	r3, 80085b2 <tcp_slowtmr+0x1a2>
 80085a4:	494c      	ldr	r1, [pc, #304]	; (80086d8 <tcp_slowtmr+0x2c8>)
 80085a6:	463b      	mov	r3, r7
 80085a8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80085ac:	4640      	mov	r0, r8
 80085ae:	f003 f90f 	bl	800b7d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80085b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80085b4:	b933      	cbnz	r3, 80085c4 <tcp_slowtmr+0x1b4>
 80085b6:	4949      	ldr	r1, [pc, #292]	; (80086dc <tcp_slowtmr+0x2cc>)
 80085b8:	463b      	mov	r3, r7
 80085ba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80085be:	4640      	mov	r0, r8
 80085c0:	f003 f906 	bl	800b7d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80085c4:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	f63f af6d 	bhi.w	80084a8 <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80085ce:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 80085d2:	4b43      	ldr	r3, [pc, #268]	; (80086e0 <tcp_slowtmr+0x2d0>)
 80085d4:	4413      	add	r3, r2
 80085d6:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 80085d8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80085dc:	4293      	cmp	r3, r2
 80085de:	d30b      	bcc.n	80085f8 <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 80085e0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80085e4:	b189      	cbz	r1, 800860a <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80085e6:	4620      	mov	r0, r4
 80085e8:	f002 f910 	bl	800a80c <tcp_split_unsent_seg>
 80085ec:	b990      	cbnz	r0, 8008614 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 80085ee:	4620      	mov	r0, r4
 80085f0:	f002 fbce 	bl	800ad90 <tcp_output>
 80085f4:	b130      	cbz	r0, 8008604 <tcp_slowtmr+0x1f4>
 80085f6:	e00d      	b.n	8008614 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 80085f8:	3301      	adds	r3, #1
 80085fa:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80085fc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80085fe:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 8008602:	d2ed      	bcs.n	80085e0 <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 8008604:	f04f 0a00 	mov.w	sl, #0
 8008608:	e750      	b.n	80084ac <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800860a:	4620      	mov	r0, r4
 800860c:	f002 fdc8 	bl	800b1a0 <tcp_zero_window_probe>
 8008610:	2800      	cmp	r0, #0
 8008612:	d1f7      	bne.n	8008604 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008614:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 8008618:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800861c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800861e:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008622:	d8ef      	bhi.n	8008604 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 8008624:	3301      	adds	r3, #1
 8008626:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800862a:	e73f      	b.n	80084ac <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800862c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800862e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008632:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8008634:	bf9c      	itt	ls
 8008636:	3301      	addls	r3, #1
 8008638:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800863a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800863e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8008642:	429a      	cmp	r2, r3
 8008644:	dbde      	blt.n	8008604 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008646:	4620      	mov	r0, r4
 8008648:	f002 fa70 	bl	800ab2c <tcp_rexmit_rto_prepare>
 800864c:	b128      	cbz	r0, 800865a <tcp_slowtmr+0x24a>
 800864e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1d7      	bne.n	8008604 <tcp_slowtmr+0x1f4>
 8008654:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0d4      	beq.n	8008604 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 800865a:	7d23      	ldrb	r3, [r4, #20]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d015      	beq.n	800868c <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008660:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8008664:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008668:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800866c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8008670:	4a1b      	ldr	r2, [pc, #108]	; (80086e0 <tcp_slowtmr+0x2d0>)
 8008672:	290c      	cmp	r1, #12
 8008674:	bf94      	ite	ls
 8008676:	1852      	addls	r2, r2, r1
 8008678:	320c      	addhi	r2, #12
 800867a:	7dd2      	ldrb	r2, [r2, #23]
 800867c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800867e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008682:	4293      	cmp	r3, r2
 8008684:	bfa8      	it	ge
 8008686:	4613      	movge	r3, r2
 8008688:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800868c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8008690:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008694:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->cwnd = pcb->mss;
 8008696:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800869a:	429a      	cmp	r2, r3
 800869c:	bf28      	it	cs
 800869e:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80086a0:	0073      	lsls	r3, r6, #1
 80086a2:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 80086a4:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80086a6:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
            pcb->rtime = 0;
 80086aa:	f04f 0000 	mov.w	r0, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80086ae:	bf98      	it	ls
 80086b0:	460b      	movls	r3, r1
            pcb->rtime = 0;
 80086b2:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 80086b4:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80086b8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 80086bc:	4620      	mov	r0, r4
 80086be:	f002 fd11 	bl	800b0e4 <tcp_rexmit_rto_commit>
 80086c2:	e6f3      	b.n	80084ac <tcp_slowtmr+0x9c>
 80086c4:	2000f818 	.word	0x2000f818
 80086c8:	0800f03e 	.word	0x0800f03e
 80086cc:	0800f2f4 	.word	0x0800f2f4
 80086d0:	0800f31e 	.word	0x0800f31e
 80086d4:	0800f3b2 	.word	0x0800f3b2
 80086d8:	0800f34b 	.word	0x0800f34b
 80086dc:	0800f37d 	.word	0x0800f37d
 80086e0:	0800d4a0 	.word	0x0800d4a0
 80086e4:	0800f2ca 	.word	0x0800f2ca
 80086e8:	0800d598 	.word	0x0800d598
 80086ec:	0800f407 	.word	0x0800f407
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80086f0:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 80086f4:	4e3d      	ldr	r6, [pc, #244]	; (80087ec <tcp_slowtmr+0x3dc>)
 80086f6:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 80086fa:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086fe:	4299      	cmp	r1, r3
 8008700:	d908      	bls.n	8008714 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 8008702:	4620      	mov	r0, r4
 8008704:	f002 fd24 	bl	800b150 <tcp_keepalive>
        if (err == ERR_OK) {
 8008708:	b920      	cbnz	r0, 8008714 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800870a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800870e:	3301      	adds	r3, #1
 8008710:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 8008714:	2600      	movs	r6, #0
 8008716:	e6f6      	b.n	8008506 <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 8008718:	2b09      	cmp	r3, #9
 800871a:	f47f aefd 	bne.w	8008518 <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800871e:	68eb      	ldr	r3, [r5, #12]
 8008720:	6a22      	ldr	r2, [r4, #32]
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	2bf0      	cmp	r3, #240	; 0xf0
 8008726:	e6f6      	b.n	8008516 <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008728:	42a3      	cmp	r3, r4
 800872a:	d006      	beq.n	800873a <tcp_slowtmr+0x32a>
 800872c:	4930      	ldr	r1, [pc, #192]	; (80087f0 <tcp_slowtmr+0x3e0>)
 800872e:	463b      	mov	r3, r7
 8008730:	f240 5271 	movw	r2, #1393	; 0x571
 8008734:	4640      	mov	r0, r8
 8008736:	f003 f84b 	bl	800b7d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	60ab      	str	r3, [r5, #8]
 800873e:	e705      	b.n	800854c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 8008740:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008742:	7f62      	ldrb	r2, [r4, #29]
      pcb = pcb->next;
 8008744:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8008746:	3301      	adds	r3, #1
 8008748:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800874a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800874c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800874e:	f63f aea0 	bhi.w	8008492 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8008752:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8008756:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800875a:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 800875e:	b91b      	cbnz	r3, 8008768 <tcp_slowtmr+0x358>
          tcp_output(prev);
 8008760:	4620      	mov	r0, r4
 8008762:	f002 fb15 	bl	800ad90 <tcp_output>
 8008766:	e694      	b.n	8008492 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 8008768:	6920      	ldr	r0, [r4, #16]
 800876a:	4621      	mov	r1, r4
 800876c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800876e:	7c6b      	ldrb	r3, [r5, #17]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f ae5c 	bne.w	800842e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8008776:	2800      	cmp	r0, #0
 8008778:	f47f ae8b 	bne.w	8008492 <tcp_slowtmr+0x82>
 800877c:	e7f0      	b.n	8008760 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800877e:	7d33      	ldrb	r3, [r6, #20]
 8008780:	2b0a      	cmp	r3, #10
 8008782:	d006      	beq.n	8008792 <tcp_slowtmr+0x382>
 8008784:	463b      	mov	r3, r7
 8008786:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	f003 f81f 	bl	800b7d0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008792:	68eb      	ldr	r3, [r5, #12]
 8008794:	6a32      	ldr	r2, [r6, #32]
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	2bf0      	cmp	r3, #240	; 0xf0
 800879a:	d910      	bls.n	80087be <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 800879c:	4630      	mov	r0, r6
 800879e:	f7ff fe0b 	bl	80083b8 <tcp_pcb_purge>
      if (prev != NULL) {
 80087a2:	b97c      	cbnz	r4, 80087c4 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80087a4:	696b      	ldr	r3, [r5, #20]
 80087a6:	42b3      	cmp	r3, r6
 80087a8:	d006      	beq.n	80087b8 <tcp_slowtmr+0x3a8>
 80087aa:	4912      	ldr	r1, [pc, #72]	; (80087f4 <tcp_slowtmr+0x3e4>)
 80087ac:	463b      	mov	r3, r7
 80087ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80087b2:	4640      	mov	r0, r8
 80087b4:	f003 f80c 	bl	800b7d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80087b8:	68f3      	ldr	r3, [r6, #12]
 80087ba:	616b      	str	r3, [r5, #20]
 80087bc:	e00e      	b.n	80087dc <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 80087be:	4634      	mov	r4, r6
 80087c0:	68f6      	ldr	r6, [r6, #12]
 80087c2:	e63e      	b.n	8008442 <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80087c4:	696b      	ldr	r3, [r5, #20]
 80087c6:	42b3      	cmp	r3, r6
 80087c8:	d106      	bne.n	80087d8 <tcp_slowtmr+0x3c8>
 80087ca:	490b      	ldr	r1, [pc, #44]	; (80087f8 <tcp_slowtmr+0x3e8>)
 80087cc:	463b      	mov	r3, r7
 80087ce:	f240 52af 	movw	r2, #1455	; 0x5af
 80087d2:	4640      	mov	r0, r8
 80087d4:	f002 fffc 	bl	800b7d0 <iprintf>
        prev->next = pcb->next;
 80087d8:	68f3      	ldr	r3, [r6, #12]
 80087da:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80087dc:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7ff fc19 	bl	8008018 <tcp_free>
      pcb = pcb->next;
 80087e6:	4656      	mov	r6, sl
 80087e8:	e62b      	b.n	8008442 <tcp_slowtmr+0x32>
 80087ea:	bf00      	nop
 80087ec:	000124f8 	.word	0x000124f8
 80087f0:	0800f3dd 	.word	0x0800f3dd
 80087f4:	0800f45d 	.word	0x0800f45d
 80087f8:	0800f436 	.word	0x0800f436

080087fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008800:	460c      	mov	r4, r1
 8008802:	b931      	cbnz	r1, 8008812 <tcp_pcb_remove+0x16>
 8008804:	4b25      	ldr	r3, [pc, #148]	; (800889c <tcp_pcb_remove+0xa0>)
 8008806:	4926      	ldr	r1, [pc, #152]	; (80088a0 <tcp_pcb_remove+0xa4>)
 8008808:	4826      	ldr	r0, [pc, #152]	; (80088a4 <tcp_pcb_remove+0xa8>)
 800880a:	f640 0283 	movw	r2, #2179	; 0x883
 800880e:	f002 ffdf 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008812:	b935      	cbnz	r5, 8008822 <tcp_pcb_remove+0x26>
 8008814:	4b21      	ldr	r3, [pc, #132]	; (800889c <tcp_pcb_remove+0xa0>)
 8008816:	4924      	ldr	r1, [pc, #144]	; (80088a8 <tcp_pcb_remove+0xac>)
 8008818:	4822      	ldr	r0, [pc, #136]	; (80088a4 <tcp_pcb_remove+0xa8>)
 800881a:	f640 0284 	movw	r2, #2180	; 0x884
 800881e:	f002 ffd7 	bl	800b7d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	42a3      	cmp	r3, r4
 8008826:	d116      	bne.n	8008856 <tcp_pcb_remove+0x5a>
 8008828:	68e3      	ldr	r3, [r4, #12]
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	2300      	movs	r3, #0
 800882e:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff fdc1 	bl	80083b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008836:	7d23      	ldrb	r3, [r4, #20]
 8008838:	2b0a      	cmp	r3, #10
 800883a:	d114      	bne.n	8008866 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800883c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800883e:	bb23      	cbnz	r3, 800888a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008840:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008842:	b1f3      	cbz	r3, 8008882 <tcp_pcb_remove+0x86>
 8008844:	4b15      	ldr	r3, [pc, #84]	; (800889c <tcp_pcb_remove+0xa0>)
 8008846:	4919      	ldr	r1, [pc, #100]	; (80088ac <tcp_pcb_remove+0xb0>)
 8008848:	4816      	ldr	r0, [pc, #88]	; (80088a4 <tcp_pcb_remove+0xa8>)
 800884a:	f640 0294 	movw	r2, #2196	; 0x894
 800884e:	f002 ffbf 	bl	800b7d0 <iprintf>
 8008852:	e016      	b.n	8008882 <tcp_pcb_remove+0x86>
 8008854:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0e8      	beq.n	800882c <tcp_pcb_remove+0x30>
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	42a2      	cmp	r2, r4
 800885e:	d1f9      	bne.n	8008854 <tcp_pcb_remove+0x58>
 8008860:	68e2      	ldr	r2, [r4, #12]
 8008862:	60da      	str	r2, [r3, #12]
 8008864:	e7e2      	b.n	800882c <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8008866:	2b01      	cmp	r3, #1
 8008868:	d00b      	beq.n	8008882 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800886a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	d5e5      	bpl.n	800883c <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008876:	4620      	mov	r0, r4
 8008878:	f002 fa8a 	bl	800ad90 <tcp_output>
  if (pcb->state != LISTEN) {
 800887c:	7d23      	ldrb	r3, [r4, #20]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d1dc      	bne.n	800883c <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008882:	2300      	movs	r3, #0
 8008884:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008886:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008888:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800888a:	4b04      	ldr	r3, [pc, #16]	; (800889c <tcp_pcb_remove+0xa0>)
 800888c:	4908      	ldr	r1, [pc, #32]	; (80088b0 <tcp_pcb_remove+0xb4>)
 800888e:	4805      	ldr	r0, [pc, #20]	; (80088a4 <tcp_pcb_remove+0xa8>)
 8008890:	f640 0293 	movw	r2, #2195	; 0x893
 8008894:	f002 ff9c 	bl	800b7d0 <iprintf>
 8008898:	e7d2      	b.n	8008840 <tcp_pcb_remove+0x44>
 800889a:	bf00      	nop
 800889c:	0800f03e 	.word	0x0800f03e
 80088a0:	0800f483 	.word	0x0800f483
 80088a4:	0800d598 	.word	0x0800d598
 80088a8:	0800f49f 	.word	0x0800f49f
 80088ac:	0800f4d7 	.word	0x0800f4d7
 80088b0:	0800f4bf 	.word	0x0800f4bf

080088b4 <tcp_close_shutdown>:
{
 80088b4:	b530      	push	{r4, r5, lr}
 80088b6:	460d      	mov	r5, r1
 80088b8:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80088ba:	4604      	mov	r4, r0
 80088bc:	b930      	cbnz	r0, 80088cc <tcp_close_shutdown+0x18>
 80088be:	4b4b      	ldr	r3, [pc, #300]	; (80089ec <tcp_close_shutdown+0x138>)
 80088c0:	494b      	ldr	r1, [pc, #300]	; (80089f0 <tcp_close_shutdown+0x13c>)
 80088c2:	484c      	ldr	r0, [pc, #304]	; (80089f4 <tcp_close_shutdown+0x140>)
 80088c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80088c8:	f002 ff82 	bl	800b7d0 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80088cc:	7d23      	ldrb	r3, [r4, #20]
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d03f      	beq.n	8008952 <tcp_close_shutdown+0x9e>
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d001      	beq.n	80088da <tcp_close_shutdown+0x26>
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	d13b      	bne.n	8008952 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80088da:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80088dc:	b922      	cbnz	r2, 80088e8 <tcp_close_shutdown+0x34>
 80088de:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80088e0:	f640 3268 	movw	r2, #2920	; 0xb68
 80088e4:	4291      	cmp	r1, r2
 80088e6:	d034      	beq.n	8008952 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80088e8:	8b63      	ldrh	r3, [r4, #26]
 80088ea:	06db      	lsls	r3, r3, #27
 80088ec:	d406      	bmi.n	80088fc <tcp_close_shutdown+0x48>
 80088ee:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <tcp_close_shutdown+0x138>)
 80088f0:	4941      	ldr	r1, [pc, #260]	; (80089f8 <tcp_close_shutdown+0x144>)
 80088f2:	4840      	ldr	r0, [pc, #256]	; (80089f4 <tcp_close_shutdown+0x140>)
 80088f4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80088f8:	f002 ff6a 	bl	800b7d0 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80088fc:	8b23      	ldrh	r3, [r4, #24]
 80088fe:	9302      	str	r3, [sp, #8]
 8008900:	8ae3      	ldrh	r3, [r4, #22]
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	1d23      	adds	r3, r4, #4
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800890a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800890c:	4623      	mov	r3, r4
 800890e:	4620      	mov	r0, r4
 8008910:	f002 f9c6 	bl	800aca0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008914:	4620      	mov	r0, r4
 8008916:	f7ff fd4f 	bl	80083b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800891a:	4a38      	ldr	r2, [pc, #224]	; (80089fc <tcp_close_shutdown+0x148>)
 800891c:	6893      	ldr	r3, [r2, #8]
 800891e:	42a3      	cmp	r3, r4
 8008920:	d10f      	bne.n	8008942 <tcp_close_shutdown+0x8e>
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6093      	str	r3, [r2, #8]
 8008926:	2300      	movs	r3, #0
 8008928:	60e3      	str	r3, [r4, #12]
 800892a:	2301      	movs	r3, #1
 800892c:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800892e:	4b34      	ldr	r3, [pc, #208]	; (8008a00 <tcp_close_shutdown+0x14c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	42a3      	cmp	r3, r4
 8008934:	d11d      	bne.n	8008972 <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 8008936:	f001 fb3f 	bl	8009fb8 <tcp_trigger_input_pcb_close>
}
 800893a:	2000      	movs	r0, #0
 800893c:	b005      	add	sp, #20
 800893e:	bd30      	pop	{r4, r5, pc}
 8008940:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ef      	beq.n	8008926 <tcp_close_shutdown+0x72>
 8008946:	68d9      	ldr	r1, [r3, #12]
 8008948:	42a1      	cmp	r1, r4
 800894a:	d1f9      	bne.n	8008940 <tcp_close_shutdown+0x8c>
 800894c:	68e1      	ldr	r1, [r4, #12]
 800894e:	60d9      	str	r1, [r3, #12]
 8008950:	e7e9      	b.n	8008926 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8008952:	2b01      	cmp	r3, #1
 8008954:	d01a      	beq.n	800898c <tcp_close_shutdown+0xd8>
 8008956:	2b02      	cmp	r3, #2
 8008958:	d039      	beq.n	80089ce <tcp_close_shutdown+0x11a>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d140      	bne.n	80089e0 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800895e:	8ae3      	ldrh	r3, [r4, #22]
 8008960:	b13b      	cbz	r3, 8008972 <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008962:	4a26      	ldr	r2, [pc, #152]	; (80089fc <tcp_close_shutdown+0x148>)
 8008964:	6813      	ldr	r3, [r2, #0]
 8008966:	42a3      	cmp	r3, r4
 8008968:	d108      	bne.n	800897c <tcp_close_shutdown+0xc8>
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	2300      	movs	r3, #0
 8008970:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff fb50 	bl	8008018 <tcp_free>
      break;
 8008978:	e7df      	b.n	800893a <tcp_close_shutdown+0x86>
 800897a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0f6      	beq.n	800896e <tcp_close_shutdown+0xba>
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	42a2      	cmp	r2, r4
 8008984:	d1f9      	bne.n	800897a <tcp_close_shutdown+0xc6>
 8008986:	68e2      	ldr	r2, [r4, #12]
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	e7f0      	b.n	800896e <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800898c:	491d      	ldr	r1, [pc, #116]	; (8008a04 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800898e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008990:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008994:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008996:	b9a2      	cbnz	r2, 80089c2 <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008998:	3301      	adds	r3, #1
 800899a:	2b04      	cmp	r3, #4
 800899c:	d1f8      	bne.n	8008990 <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800899e:	481a      	ldr	r0, [pc, #104]	; (8008a08 <tcp_close_shutdown+0x154>)
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7ff ff2b 	bl	80087fc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80089a6:	7d23      	ldrb	r3, [r4, #20]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d105      	bne.n	80089b8 <tcp_close_shutdown+0x104>
 80089ac:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <tcp_close_shutdown+0x138>)
 80089ae:	4917      	ldr	r1, [pc, #92]	; (8008a0c <tcp_close_shutdown+0x158>)
 80089b0:	4810      	ldr	r0, [pc, #64]	; (80089f4 <tcp_close_shutdown+0x140>)
 80089b2:	22df      	movs	r2, #223	; 0xdf
 80089b4:	f002 ff0c 	bl	800b7d0 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80089b8:	4621      	mov	r1, r4
 80089ba:	2001      	movs	r0, #1
 80089bc:	f7fe fdf0 	bl	80075a0 <memp_free>
}
 80089c0:	e7bb      	b.n	800893a <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 80089c2:	6f95      	ldr	r5, [r2, #120]	; 0x78
 80089c4:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 80089c6:	bf08      	it	eq
 80089c8:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80089ca:	68d2      	ldr	r2, [r2, #12]
 80089cc:	e7e3      	b.n	8008996 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80089ce:	4d0b      	ldr	r5, [pc, #44]	; (80089fc <tcp_close_shutdown+0x148>)
 80089d0:	4621      	mov	r1, r4
 80089d2:	f105 0008 	add.w	r0, r5, #8
 80089d6:	f7ff ff11 	bl	80087fc <tcp_pcb_remove>
 80089da:	2301      	movs	r3, #1
 80089dc:	746b      	strb	r3, [r5, #17]
 80089de:	e7c8      	b.n	8008972 <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 80089e0:	4620      	mov	r0, r4
}
 80089e2:	b005      	add	sp, #20
 80089e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80089e8:	f7ff bada 	b.w	8007fa0 <tcp_close_shutdown_fin>
 80089ec:	0800f03e 	.word	0x0800f03e
 80089f0:	0800f4f0 	.word	0x0800f4f0
 80089f4:	0800d598 	.word	0x0800d598
 80089f8:	0800f510 	.word	0x0800f510
 80089fc:	2000f818 	.word	0x2000f818
 8008a00:	2000f870 	.word	0x2000f870
 8008a04:	0800d4a0 	.word	0x0800d4a0
 8008a08:	2000f81c 	.word	0x2000f81c
 8008a0c:	0800f529 	.word	0x0800f529

08008a10 <tcp_close>:
{
 8008a10:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a12:	b158      	cbz	r0, 8008a2c <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8008a14:	7d03      	ldrb	r3, [r0, #20]
 8008a16:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008a18:	bf1e      	ittt	ne
 8008a1a:	8b43      	ldrhne	r3, [r0, #26]
 8008a1c:	f043 0310 	orrne.w	r3, r3, #16
 8008a20:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8008a22:	2101      	movs	r1, #1
}
 8008a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8008a28:	f7ff bf44 	b.w	80088b4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <tcp_close+0x30>)
 8008a2e:	4905      	ldr	r1, [pc, #20]	; (8008a44 <tcp_close+0x34>)
 8008a30:	4805      	ldr	r0, [pc, #20]	; (8008a48 <tcp_close+0x38>)
 8008a32:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008a36:	f002 fecb 	bl	800b7d0 <iprintf>
}
 8008a3a:	f06f 000f 	mvn.w	r0, #15
 8008a3e:	bd08      	pop	{r3, pc}
 8008a40:	0800f03e 	.word	0x0800f03e
 8008a44:	0800f542 	.word	0x0800f542
 8008a48:	0800d598 	.word	0x0800d598

08008a4c <tcp_recv_null>:
{
 8008a4c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a4e:	4608      	mov	r0, r1
{
 8008a50:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a52:	b949      	cbnz	r1, 8008a68 <tcp_recv_null+0x1c>
 8008a54:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <tcp_recv_null+0x3c>)
 8008a56:	490d      	ldr	r1, [pc, #52]	; (8008a8c <tcp_recv_null+0x40>)
 8008a58:	480d      	ldr	r0, [pc, #52]	; (8008a90 <tcp_recv_null+0x44>)
 8008a5a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008a5e:	f002 feb7 	bl	800b7d0 <iprintf>
 8008a62:	f06f 000f 	mvn.w	r0, #15
}
 8008a66:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8008a68:	b13a      	cbz	r2, 8008a7a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8008a6a:	8911      	ldrh	r1, [r2, #8]
 8008a6c:	f7ff fbdc 	bl	8008228 <tcp_recved>
    pbuf_free(p);
 8008a70:	4620      	mov	r0, r4
 8008a72:	f7fe ffed 	bl	8007a50 <pbuf_free>
  return ERR_OK;
 8008a76:	2000      	movs	r0, #0
 8008a78:	e7f5      	b.n	8008a66 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8008a7a:	b91b      	cbnz	r3, 8008a84 <tcp_recv_null+0x38>
}
 8008a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8008a80:	f7ff bfc6 	b.w	8008a10 <tcp_close>
  return ERR_OK;
 8008a84:	4610      	mov	r0, r2
 8008a86:	e7ee      	b.n	8008a66 <tcp_recv_null+0x1a>
 8008a88:	0800f03e 	.word	0x0800f03e
 8008a8c:	0800f559 	.word	0x0800f559
 8008a90:	0800d598 	.word	0x0800d598

08008a94 <tcp_process_refused_data>:
{
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a96:	4604      	mov	r4, r0
 8008a98:	b950      	cbnz	r0, 8008ab0 <tcp_process_refused_data+0x1c>
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <tcp_process_refused_data+0x80>)
 8008a9c:	491e      	ldr	r1, [pc, #120]	; (8008b18 <tcp_process_refused_data+0x84>)
 8008a9e:	481f      	ldr	r0, [pc, #124]	; (8008b1c <tcp_process_refused_data+0x88>)
 8008aa0:	f240 6209 	movw	r2, #1545	; 0x609
 8008aa4:	f002 fe94 	bl	800b7d0 <iprintf>
 8008aa8:	f06f 050f 	mvn.w	r5, #15
}
 8008aac:	4628      	mov	r0, r5
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8008ab0:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008ab2:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8008ab6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008abc:	b1e5      	cbz	r5, 8008af8 <tcp_process_refused_data+0x64>
 8008abe:	4601      	mov	r1, r0
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	6900      	ldr	r0, [r0, #16]
 8008ac4:	47a8      	blx	r5
 8008ac6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008ac8:	b9e8      	cbnz	r0, 8008b06 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008aca:	06bb      	lsls	r3, r7, #26
 8008acc:	d5ee      	bpl.n	8008aac <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008ad0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ad4:	f640 3268 	movw	r2, #2920	; 0xb68
 8008ad8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8008ada:	bf1c      	itt	ne
 8008adc:	3301      	addne	r3, #1
 8008ade:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	d0e3      	beq.n	8008aac <tcp_process_refused_data+0x18>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6920      	ldr	r0, [r4, #16]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4621      	mov	r1, r4
 8008aec:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008aee:	300d      	adds	r0, #13
 8008af0:	d1dc      	bne.n	8008aac <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 8008af2:	f06f 050c 	mvn.w	r5, #12
 8008af6:	e7d9      	b.n	8008aac <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008af8:	4601      	mov	r1, r0
 8008afa:	462b      	mov	r3, r5
 8008afc:	4632      	mov	r2, r6
 8008afe:	4628      	mov	r0, r5
 8008b00:	f7ff ffa4 	bl	8008a4c <tcp_recv_null>
 8008b04:	e7df      	b.n	8008ac6 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 8008b06:	350d      	adds	r5, #13
 8008b08:	d0f3      	beq.n	8008af2 <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 8008b0a:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8008b0c:	f06f 0504 	mvn.w	r5, #4
 8008b10:	e7cc      	b.n	8008aac <tcp_process_refused_data+0x18>
 8008b12:	bf00      	nop
 8008b14:	0800f03e 	.word	0x0800f03e
 8008b18:	0800f574 	.word	0x0800f574
 8008b1c:	0800d598 	.word	0x0800d598

08008b20 <tcp_fasttmr>:
{
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 8008b22:	4d18      	ldr	r5, [pc, #96]	; (8008b84 <tcp_fasttmr+0x64>)
 8008b24:	7c2b      	ldrb	r3, [r5, #16]
 8008b26:	3301      	adds	r3, #1
 8008b28:	742b      	strb	r3, [r5, #16]
        tcp_active_pcbs_changed = 0;
 8008b2a:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 8008b2c:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 8008b2e:	b904      	cbnz	r4, 8008b32 <tcp_fasttmr+0x12>
}
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008b32:	7c2b      	ldrb	r3, [r5, #16]
 8008b34:	7fa2      	ldrb	r2, [r4, #30]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d022      	beq.n	8008b80 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 8008b3a:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8008b3c:	8b63      	ldrh	r3, [r4, #26]
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	d509      	bpl.n	8008b56 <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 8008b42:	f043 0302 	orr.w	r3, r3, #2
 8008b46:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f002 f921 	bl	800ad90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008b4e:	8b63      	ldrh	r3, [r4, #26]
 8008b50:	f023 0303 	bic.w	r3, r3, #3
 8008b54:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8008b56:	8b63      	ldrh	r3, [r4, #26]
 8008b58:	071a      	lsls	r2, r3, #28
 8008b5a:	d505      	bpl.n	8008b68 <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008b5c:	f023 0308 	bic.w	r3, r3, #8
 8008b60:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7ff fa1c 	bl	8007fa0 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8008b68:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8008b6a:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008b6c:	b133      	cbz	r3, 8008b7c <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 8008b6e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008b70:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 8008b72:	f7ff ff8f 	bl	8008a94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008b76:	7c6b      	ldrb	r3, [r5, #17]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1d7      	bne.n	8008b2c <tcp_fasttmr+0xc>
{
 8008b7c:	463c      	mov	r4, r7
 8008b7e:	e7d6      	b.n	8008b2e <tcp_fasttmr+0xe>
      pcb = pcb->next;
 8008b80:	68e7      	ldr	r7, [r4, #12]
 8008b82:	e7fb      	b.n	8008b7c <tcp_fasttmr+0x5c>
 8008b84:	2000f818 	.word	0x2000f818

08008b88 <tcp_tmr>:
{
 8008b88:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008b8a:	f7ff ffc9 	bl	8008b20 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008b8e:	4a06      	ldr	r2, [pc, #24]	; (8008ba8 <tcp_tmr+0x20>)
 8008b90:	7e13      	ldrb	r3, [r2, #24]
 8008b92:	3301      	adds	r3, #1
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	7613      	strb	r3, [r2, #24]
 8008b98:	07db      	lsls	r3, r3, #31
 8008b9a:	d503      	bpl.n	8008ba4 <tcp_tmr+0x1c>
}
 8008b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8008ba0:	f7ff bc36 	b.w	8008410 <tcp_slowtmr>
}
 8008ba4:	bd08      	pop	{r3, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000f818 	.word	0x2000f818

08008bac <tcp_shutdown>:
{
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	b948      	cbnz	r0, 8008bc8 <tcp_shutdown+0x1c>
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <tcp_shutdown+0x64>)
 8008bb6:	4917      	ldr	r1, [pc, #92]	; (8008c14 <tcp_shutdown+0x68>)
 8008bb8:	4817      	ldr	r0, [pc, #92]	; (8008c18 <tcp_shutdown+0x6c>)
 8008bba:	f240 2207 	movw	r2, #519	; 0x207
 8008bbe:	f002 fe07 	bl	800b7d0 <iprintf>
 8008bc2:	f06f 000f 	mvn.w	r0, #15
}
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 8008bc8:	7d03      	ldrb	r3, [r0, #20]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d018      	beq.n	8008c00 <tcp_shutdown+0x54>
  if (shut_rx) {
 8008bce:	b189      	cbz	r1, 8008bf4 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008bd0:	8b43      	ldrh	r3, [r0, #26]
 8008bd2:	f043 0310 	orr.w	r3, r3, #16
 8008bd6:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 8008bd8:	b122      	cbz	r2, 8008be4 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 8008bda:	2101      	movs	r1, #1
}
 8008bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008be0:	f7ff be68 	b.w	80088b4 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 8008be4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008be6:	b908      	cbnz	r0, 8008bec <tcp_shutdown+0x40>
  return ERR_OK;
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7ec      	b.n	8008bc6 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 8008bec:	f7fe ff30 	bl	8007a50 <pbuf_free>
      pcb->refused_data = NULL;
 8008bf0:	676c      	str	r4, [r5, #116]	; 0x74
 8008bf2:	e7f9      	b.n	8008be8 <tcp_shutdown+0x3c>
  if (shut_tx) {
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	d0f7      	beq.n	8008be8 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d804      	bhi.n	8008c06 <tcp_shutdown+0x5a>
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d804      	bhi.n	8008c0a <tcp_shutdown+0x5e>
 8008c00:	f06f 000a 	mvn.w	r0, #10
 8008c04:	e7df      	b.n	8008bc6 <tcp_shutdown+0x1a>
 8008c06:	2b07      	cmp	r3, #7
 8008c08:	d1fa      	bne.n	8008c00 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e7e5      	b.n	8008bdc <tcp_shutdown+0x30>
 8008c10:	0800f03e 	.word	0x0800f03e
 8008c14:	0800f59a 	.word	0x0800f59a
 8008c18:	0800d598 	.word	0x0800d598

08008c1c <tcp_abandon>:
{
 8008c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c20:	460e      	mov	r6, r1
 8008c22:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c24:	4604      	mov	r4, r0
 8008c26:	b948      	cbnz	r0, 8008c3c <tcp_abandon+0x20>
 8008c28:	4b35      	ldr	r3, [pc, #212]	; (8008d00 <tcp_abandon+0xe4>)
 8008c2a:	4936      	ldr	r1, [pc, #216]	; (8008d04 <tcp_abandon+0xe8>)
 8008c2c:	4836      	ldr	r0, [pc, #216]	; (8008d08 <tcp_abandon+0xec>)
 8008c2e:	f240 223d 	movw	r2, #573	; 0x23d
}
 8008c32:	b005      	add	sp, #20
 8008c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c38:	f002 bdca 	b.w	800b7d0 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008c3c:	7d03      	ldrb	r3, [r0, #20]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d106      	bne.n	8008c50 <tcp_abandon+0x34>
 8008c42:	4b2f      	ldr	r3, [pc, #188]	; (8008d00 <tcp_abandon+0xe4>)
 8008c44:	4931      	ldr	r1, [pc, #196]	; (8008d0c <tcp_abandon+0xf0>)
 8008c46:	4830      	ldr	r0, [pc, #192]	; (8008d08 <tcp_abandon+0xec>)
 8008c48:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008c4c:	f002 fdc0 	bl	800b7d0 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008c50:	7d23      	ldrb	r3, [r4, #20]
 8008c52:	2b0a      	cmp	r3, #10
 8008c54:	d109      	bne.n	8008c6a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008c56:	482e      	ldr	r0, [pc, #184]	; (8008d10 <tcp_abandon+0xf4>)
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f7ff fdcf 	bl	80087fc <tcp_pcb_remove>
    tcp_free(pcb);
 8008c5e:	4620      	mov	r0, r4
}
 8008c60:	b005      	add	sp, #20
 8008c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 8008c66:	f7ff b9d7 	b.w	8008018 <tcp_free>
    seqno = pcb->snd_nxt;
 8008c6a:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008c6e:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8008c72:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8008c76:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 8008c7a:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8008c7c:	b99b      	cbnz	r3, 8008ca6 <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 8008c7e:	b13d      	cbz	r5, 8008c90 <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c80:	4a24      	ldr	r2, [pc, #144]	; (8008d14 <tcp_abandon+0xf8>)
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d106      	bne.n	8008c96 <tcp_abandon+0x7a>
 8008c88:	68e3      	ldr	r3, [r4, #12]
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8008c90:	462e      	mov	r6, r5
 8008c92:	e012      	b.n	8008cba <tcp_abandon+0x9e>
 8008c94:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0f8      	beq.n	8008c8c <tcp_abandon+0x70>
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	42a2      	cmp	r2, r4
 8008c9e:	d1f9      	bne.n	8008c94 <tcp_abandon+0x78>
 8008ca0:	68e2      	ldr	r2, [r4, #12]
 8008ca2:	60da      	str	r2, [r3, #12]
 8008ca4:	e7f2      	b.n	8008c8c <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008ca6:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8008d14 <tcp_abandon+0xf8>
 8008caa:	4621      	mov	r1, r4
 8008cac:	f10b 0008 	add.w	r0, fp, #8
 8008cb0:	f7ff fda4 	bl	80087fc <tcp_pcb_remove>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 8008cba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008cbc:	b108      	cbz	r0, 8008cc2 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 8008cbe:	f7ff faff 	bl	80082c0 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008cc2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008cc4:	b108      	cbz	r0, 8008cca <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 8008cc6:	f7ff fafb 	bl	80082c0 <tcp_segs_free>
    if (send_rst) {
 8008cca:	b156      	cbz	r6, 8008ce2 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008ccc:	8b23      	ldrh	r3, [r4, #24]
 8008cce:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8008cd2:	1d23      	adds	r3, r4, #4
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4652      	mov	r2, sl
 8008cd8:	4623      	mov	r3, r4
 8008cda:	4649      	mov	r1, r9
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f001 ffdf 	bl	800aca0 <tcp_rst>
    tcp_free(pcb);
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff f998 	bl	8008018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008ce8:	b13f      	cbz	r7, 8008cfa <tcp_abandon+0xde>
 8008cea:	f06f 010c 	mvn.w	r1, #12
 8008cee:	4640      	mov	r0, r8
 8008cf0:	463b      	mov	r3, r7
}
 8008cf2:	b005      	add	sp, #20
 8008cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008cf8:	4718      	bx	r3
}
 8008cfa:	b005      	add	sp, #20
 8008cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d00:	0800f03e 	.word	0x0800f03e
 8008d04:	0800f5b4 	.word	0x0800f5b4
 8008d08:	0800d598 	.word	0x0800d598
 8008d0c:	0800f5cd 	.word	0x0800f5cd
 8008d10:	2000f82c 	.word	0x2000f82c
 8008d14:	2000f818 	.word	0x2000f818

08008d18 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8008d18:	2101      	movs	r1, #1
 8008d1a:	f7ff bf7f 	b.w	8008c1c <tcp_abandon>
	...

08008d20 <tcp_accept_null>:
{
 8008d20:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008d22:	460c      	mov	r4, r1
 8008d24:	b931      	cbnz	r1, 8008d34 <tcp_accept_null+0x14>
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <tcp_accept_null+0x20>)
 8008d28:	4906      	ldr	r1, [pc, #24]	; (8008d44 <tcp_accept_null+0x24>)
 8008d2a:	4807      	ldr	r0, [pc, #28]	; (8008d48 <tcp_accept_null+0x28>)
 8008d2c:	f240 320f 	movw	r2, #783	; 0x30f
 8008d30:	f002 fd4e 	bl	800b7d0 <iprintf>
  tcp_abort(pcb);
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff ffef 	bl	8008d18 <tcp_abort>
}
 8008d3a:	f06f 000c 	mvn.w	r0, #12
 8008d3e:	bd10      	pop	{r4, pc}
 8008d40:	0800f03e 	.word	0x0800f03e
 8008d44:	0800f5fe 	.word	0x0800f5fe
 8008d48:	0800d598 	.word	0x0800d598

08008d4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008d50:	4605      	mov	r5, r0
 8008d52:	b930      	cbnz	r0, 8008d62 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8008d54:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8008d56:	490a      	ldr	r1, [pc, #40]	; (8008d80 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8008d58:	480a      	ldr	r0, [pc, #40]	; (8008d84 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008d5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008d5e:	f002 fd37 	bl	800b7d0 <iprintf>

  while (pcb != NULL) {
 8008d62:	b904      	cbnz	r4, 8008d66 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8008d64:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 8008d6a:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d102      	bne.n	8008d76 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7ff ffd1 	bl	8008d18 <tcp_abort>
{
 8008d76:	4634      	mov	r4, r6
 8008d78:	e7f3      	b.n	8008d62 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8008d7a:	bf00      	nop
 8008d7c:	0800f03e 	.word	0x0800f03e
 8008d80:	0800f61b 	.word	0x0800f61b
 8008d84:	0800d598 	.word	0x0800d598

08008d88 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <tcp_kill_state+0x34>)
{
 8008d8a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d8c:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  inactivity = 0;
 8008d90:	2200      	movs	r2, #0
{
 8008d92:	4604      	mov	r4, r0
  inactive = NULL;
 8008d94:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d96:	b919      	cbnz	r1, 8008da0 <tcp_kill_state+0x18>
  if (inactive != NULL) {
 8008d98:	b168      	cbz	r0, 8008db6 <tcp_kill_state+0x2e>
}
 8008d9a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8008d9c:	f7ff bf3e 	b.w	8008c1c <tcp_abandon>
    if (pcb->state == state) {
 8008da0:	7d0b      	ldrb	r3, [r1, #20]
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	d105      	bne.n	8008db2 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008da6:	6a0b      	ldr	r3, [r1, #32]
 8008da8:	1aeb      	subs	r3, r5, r3
 8008daa:	4293      	cmp	r3, r2
 8008dac:	bf24      	itt	cs
 8008dae:	461a      	movcs	r2, r3
 8008db0:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db2:	68c9      	ldr	r1, [r1, #12]
 8008db4:	e7ef      	b.n	8008d96 <tcp_kill_state+0xe>
}
 8008db6:	bc30      	pop	{r4, r5}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	2000f818 	.word	0x2000f818

08008dc0 <tcp_alloc>:
{
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f7fe fbbb 	bl	8007540 <memp_malloc>
  if (pcb == NULL) {
 8008dca:	4d3e      	ldr	r5, [pc, #248]	; (8008ec4 <tcp_alloc+0x104>)
 8008dcc:	4604      	mov	r4, r0
 8008dce:	bb98      	cbnz	r0, 8008e38 <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008dd0:	68a8      	ldr	r0, [r5, #8]
  while (pcb != NULL) {
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d152      	bne.n	8008e7c <tcp_alloc+0xbc>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dd6:	696b      	ldr	r3, [r5, #20]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008dd8:	68ec      	ldr	r4, [r5, #12]
  inactivity = 0;
 8008dda:	4601      	mov	r1, r0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d158      	bne.n	8008e92 <tcp_alloc+0xd2>
  if (inactive != NULL) {
 8008de0:	b108      	cbz	r0, 8008de6 <tcp_alloc+0x26>
    tcp_abort(inactive);
 8008de2:	f7ff ff99 	bl	8008d18 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008de6:	2000      	movs	r0, #0
 8008de8:	f7fe fbaa 	bl	8007540 <memp_malloc>
    if (pcb == NULL) {
 8008dec:	4604      	mov	r4, r0
 8008dee:	bb18      	cbnz	r0, 8008e38 <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 8008df0:	2009      	movs	r0, #9
 8008df2:	f7ff ffc9 	bl	8008d88 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7fe fba2 	bl	8007540 <memp_malloc>
      if (pcb == NULL) {
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	b9d8      	cbnz	r0, 8008e38 <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 8008e00:	2008      	movs	r0, #8
 8008e02:	f7ff ffc1 	bl	8008d88 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7fe fb9a 	bl	8007540 <memp_malloc>
        if (pcb == NULL) {
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	b998      	cbnz	r0, 8008e38 <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008e10:	0633      	lsls	r3, r6, #24
 8008e12:	d446      	bmi.n	8008ea2 <tcp_alloc+0xe2>
  if (mprio == 0) {
 8008e14:	b15e      	cbz	r6, 8008e2e <tcp_alloc+0x6e>
 8008e16:	4632      	mov	r2, r6
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008e18:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
  mprio--;
 8008e1c:	3a01      	subs	r2, #1
 8008e1e:	b2d2      	uxtb	r2, r2
  inactivity = 0;
 8008e20:	2100      	movs	r1, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d13f      	bne.n	8008ea6 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 8008e26:	b114      	cbz	r4, 8008e2e <tcp_alloc+0x6e>
    tcp_abort(inactive);
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7ff ff75 	bl	8008d18 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f7fe fb86 	bl	8007540 <memp_malloc>
  if (pcb != NULL) {
 8008e34:	4604      	mov	r4, r0
 8008e36:	b1f8      	cbz	r0, 8008e78 <tcp_alloc+0xb8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e38:	2298      	movs	r2, #152	; 0x98
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f002 fcbf 	bl	800b7c0 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8008e42:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8008e46:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e4a:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <tcp_alloc+0x108>)
 8008e4c:	62a3      	str	r3, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008e4e:	23ff      	movs	r3, #255	; 0xff
 8008e50:	72e3      	strb	r3, [r4, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e52:	2306      	movs	r3, #6
 8008e54:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008e58:	87e3      	strh	r3, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008e5a:	4b1c      	ldr	r3, [pc, #112]	; (8008ecc <tcp_alloc+0x10c>)
 8008e5c:	6323      	str	r3, [r4, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 8008e5e:	68eb      	ldr	r3, [r5, #12]
 8008e60:	6223      	str	r3, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008e62:	7c2b      	ldrb	r3, [r5, #16]
 8008e64:	77a3      	strb	r3, [r4, #30]
    pcb->cwnd = 1;
 8008e66:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <tcp_alloc+0x110>)
 8008e68:	64a3      	str	r3, [r4, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <tcp_alloc+0x114>)
 8008e6c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e70:	4b19      	ldr	r3, [pc, #100]	; (8008ed8 <tcp_alloc+0x118>)
    pcb->prio = prio;
 8008e72:	7566      	strb	r6, [r4, #21]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008e78:	4620      	mov	r0, r4
 8008e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8008e7c:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 8008e7e:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	d504      	bpl.n	8008e8e <tcp_alloc+0xce>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008e84:	f023 0308 	bic.w	r3, r3, #8
 8008e88:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008e8a:	f7ff f889 	bl	8007fa0 <tcp_close_shutdown_fin>
{
 8008e8e:	4620      	mov	r0, r4
 8008e90:	e79f      	b.n	8008dd2 <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e92:	6a1a      	ldr	r2, [r3, #32]
 8008e94:	1aa2      	subs	r2, r4, r2
 8008e96:	428a      	cmp	r2, r1
 8008e98:	bf24      	itt	cs
 8008e9a:	4618      	movcs	r0, r3
 8008e9c:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	e79c      	b.n	8008ddc <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008ea2:	227f      	movs	r2, #127	; 0x7f
 8008ea4:	e7b8      	b.n	8008e18 <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 8008ea6:	f893 c015 	ldrb.w	ip, [r3, #21]
 8008eaa:	4594      	cmp	ip, r2
 8008eac:	d304      	bcc.n	8008eb8 <tcp_alloc+0xf8>
 8008eae:	d107      	bne.n	8008ec0 <tcp_alloc+0x100>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008eb0:	6a18      	ldr	r0, [r3, #32]
 8008eb2:	1a38      	subs	r0, r7, r0
 8008eb4:	4288      	cmp	r0, r1
 8008eb6:	d303      	bcc.n	8008ec0 <tcp_alloc+0x100>
      inactivity = tcp_ticks - pcb->tmr;
 8008eb8:	6a19      	ldr	r1, [r3, #32]
    if ((pcb->prio < mprio) ||
 8008eba:	4662      	mov	r2, ip
      inactivity = tcp_ticks - pcb->tmr;
 8008ebc:	1a79      	subs	r1, r7, r1
 8008ebe:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	e7ae      	b.n	8008e22 <tcp_alloc+0x62>
 8008ec4:	2000f818 	.word	0x2000f818
 8008ec8:	0b680b68 	.word	0x0b680b68
 8008ecc:	0218ffff 	.word	0x0218ffff
 8008ed0:	16d00001 	.word	0x16d00001
 8008ed4:	08008a4d 	.word	0x08008a4d
 8008ed8:	006ddd00 	.word	0x006ddd00

08008edc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008edc:	2040      	movs	r0, #64	; 0x40
 8008ede:	f7ff bf6f 	b.w	8008dc0 <tcp_alloc>
	...

08008ee4 <tcp_next_iss>:
{
 8008ee4:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008ee6:	b930      	cbnz	r0, 8008ef6 <tcp_next_iss+0x12>
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <tcp_next_iss+0x20>)
 8008eea:	4907      	ldr	r1, [pc, #28]	; (8008f08 <tcp_next_iss+0x24>)
 8008eec:	4807      	ldr	r0, [pc, #28]	; (8008f0c <tcp_next_iss+0x28>)
 8008eee:	f640 02af 	movw	r2, #2223	; 0x8af
 8008ef2:	f002 fc6d 	bl	800b7d0 <iprintf>
  iss += tcp_ticks;       /* XXX */
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <tcp_next_iss+0x2c>)
 8008ef8:	4a06      	ldr	r2, [pc, #24]	; (8008f14 <tcp_next_iss+0x30>)
 8008efa:	6858      	ldr	r0, [r3, #4]
 8008efc:	68d2      	ldr	r2, [r2, #12]
 8008efe:	4410      	add	r0, r2
 8008f00:	6058      	str	r0, [r3, #4]
}
 8008f02:	bd08      	pop	{r3, pc}
 8008f04:	0800f03e 	.word	0x0800f03e
 8008f08:	0800f64f 	.word	0x0800f64f
 8008f0c:	0800d598 	.word	0x0800d598
 8008f10:	20000024 	.word	0x20000024
 8008f14:	2000f818 	.word	0x2000f818

08008f18 <tcp_eff_send_mss_netif>:
{
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008f1e:	b932      	cbnz	r2, 8008f2e <tcp_eff_send_mss_netif+0x16>
 8008f20:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <tcp_eff_send_mss_netif+0x30>)
 8008f22:	490a      	ldr	r1, [pc, #40]	; (8008f4c <tcp_eff_send_mss_netif+0x34>)
 8008f24:	480a      	ldr	r0, [pc, #40]	; (8008f50 <tcp_eff_send_mss_netif+0x38>)
 8008f26:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008f2a:	f002 fc51 	bl	800b7d0 <iprintf>
    if (outif == NULL) {
 8008f2e:	b14d      	cbz	r5, 8008f44 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 8008f30:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  if (mtu != 0) {
 8008f32:	b13b      	cbz	r3, 8008f44 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008f34:	2b28      	cmp	r3, #40	; 0x28
 8008f36:	bf86      	itte	hi
 8008f38:	3b28      	subhi	r3, #40	; 0x28
 8008f3a:	b29b      	uxthhi	r3, r3
 8008f3c:	2300      	movls	r3, #0
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008f3e:	429c      	cmp	r4, r3
 8008f40:	bf28      	it	cs
 8008f42:	461c      	movcs	r4, r3
}
 8008f44:	4620      	mov	r0, r4
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	0800f03e 	.word	0x0800f03e
 8008f4c:	0800f669 	.word	0x0800f669
 8008f50:	0800d598 	.word	0x0800d598

08008f54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008f58:	4604      	mov	r4, r0
 8008f5a:	b170      	cbz	r0, 8008f7a <tcp_netif_ip_addr_changed+0x26>
 8008f5c:	6803      	ldr	r3, [r0, #0]
 8008f5e:	b163      	cbz	r3, 8008f7a <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008f60:	4e0a      	ldr	r6, [pc, #40]	; (8008f8c <tcp_netif_ip_addr_changed+0x38>)
 8008f62:	68b1      	ldr	r1, [r6, #8]
 8008f64:	f7ff fef2 	bl	8008d4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008f68:	6831      	ldr	r1, [r6, #0]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff feee 	bl	8008d4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008f70:	b11d      	cbz	r5, 8008f7a <tcp_netif_ip_addr_changed+0x26>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b10b      	cbz	r3, 8008f7a <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f76:	6873      	ldr	r3, [r6, #4]
 8008f78:	b903      	cbnz	r3, 8008f7c <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008f7c:	6819      	ldr	r1, [r3, #0]
 8008f7e:	6822      	ldr	r2, [r4, #0]
 8008f80:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008f82:	bf04      	itt	eq
 8008f84:	682a      	ldreq	r2, [r5, #0]
 8008f86:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	e7f5      	b.n	8008f78 <tcp_netif_ip_addr_changed+0x24>
 8008f8c:	2000f818 	.word	0x2000f818

08008f90 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8008f90:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <tcp_get_next_optbyte+0x24>)
 8008f92:	8813      	ldrh	r3, [r2, #0]
 8008f94:	1c59      	adds	r1, r3, #1
 8008f96:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f98:	6851      	ldr	r1, [r2, #4]
 8008f9a:	b111      	cbz	r1, 8008fa2 <tcp_get_next_optbyte+0x12>
 8008f9c:	8910      	ldrh	r0, [r2, #8]
 8008f9e:	4283      	cmp	r3, r0
 8008fa0:	d203      	bcs.n	8008faa <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 8008fa2:	68d2      	ldr	r2, [r2, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	7d18      	ldrb	r0, [r3, #20]
 8008fa8:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008faa:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	2000f834 	.word	0x2000f834

08008fb8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	b930      	cbnz	r0, 8008fce <tcp_parseopt+0x16>
 8008fc0:	4b1e      	ldr	r3, [pc, #120]	; (800903c <tcp_parseopt+0x84>)
 8008fc2:	491f      	ldr	r1, [pc, #124]	; (8009040 <tcp_parseopt+0x88>)
 8008fc4:	481f      	ldr	r0, [pc, #124]	; (8009044 <tcp_parseopt+0x8c>)
 8008fc6:	f240 727d 	movw	r2, #1917	; 0x77d
 8008fca:	f002 fc01 	bl	800b7d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008fce:	4d1e      	ldr	r5, [pc, #120]	; (8009048 <tcp_parseopt+0x90>)
 8008fd0:	8a2f      	ldrh	r7, [r5, #16]
 8008fd2:	b17f      	cbz	r7, 8008ff4 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	802b      	strh	r3, [r5, #0]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008fd8:	f240 58b3 	movw	r8, #1459	; 0x5b3
 8008fdc:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fe0:	882b      	ldrh	r3, [r5, #0]
 8008fe2:	42bb      	cmp	r3, r7
 8008fe4:	d206      	bcs.n	8008ff4 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 8008fe6:	f7ff ffd3 	bl	8008f90 <tcp_get_next_optbyte>
      switch (opt) {
 8008fea:	2801      	cmp	r0, #1
 8008fec:	d0f8      	beq.n	8008fe0 <tcp_parseopt+0x28>
 8008fee:	2802      	cmp	r0, #2
 8008ff0:	d002      	beq.n	8008ff8 <tcp_parseopt+0x40>
 8008ff2:	b9c8      	cbnz	r0, 8009028 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 8008ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008ff8:	f7ff ffca 	bl	8008f90 <tcp_get_next_optbyte>
 8008ffc:	2804      	cmp	r0, #4
 8008ffe:	d1f9      	bne.n	8008ff4 <tcp_parseopt+0x3c>
 8009000:	882b      	ldrh	r3, [r5, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	42bb      	cmp	r3, r7
 8009006:	daf5      	bge.n	8008ff4 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009008:	f7ff ffc2 	bl	8008f90 <tcp_get_next_optbyte>
 800900c:	0200      	lsls	r0, r0, #8
 800900e:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8009010:	f7ff ffbe 	bl	8008f90 <tcp_get_next_optbyte>
 8009014:	ea44 0300 	orr.w	r3, r4, r0
 8009018:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800901a:	1e5a      	subs	r2, r3, #1
 800901c:	b292      	uxth	r2, r2
 800901e:	4542      	cmp	r2, r8
 8009020:	bf88      	it	hi
 8009022:	464b      	movhi	r3, r9
 8009024:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 8009026:	e7db      	b.n	8008fe0 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 8009028:	f7ff ffb2 	bl	8008f90 <tcp_get_next_optbyte>
          if (data < 2) {
 800902c:	2801      	cmp	r0, #1
 800902e:	d9e1      	bls.n	8008ff4 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 8009030:	882b      	ldrh	r3, [r5, #0]
 8009032:	3b02      	subs	r3, #2
 8009034:	4418      	add	r0, r3
 8009036:	8028      	strh	r0, [r5, #0]
 8009038:	e7d2      	b.n	8008fe0 <tcp_parseopt+0x28>
 800903a:	bf00      	nop
 800903c:	0800f74f 	.word	0x0800f74f
 8009040:	0800f7c7 	.word	0x0800f7c7
 8009044:	0800d598 	.word	0x0800d598
 8009048:	2000f834 	.word	0x2000f834

0800904c <tcp_input_delayed_close>:
{
 800904c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800904e:	4604      	mov	r4, r0
 8009050:	b930      	cbnz	r0, 8009060 <tcp_input_delayed_close+0x14>
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <tcp_input_delayed_close+0x44>)
 8009054:	490f      	ldr	r1, [pc, #60]	; (8009094 <tcp_input_delayed_close+0x48>)
 8009056:	4810      	ldr	r0, [pc, #64]	; (8009098 <tcp_input_delayed_close+0x4c>)
 8009058:	f240 225a 	movw	r2, #602	; 0x25a
 800905c:	f002 fbb8 	bl	800b7d0 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8009060:	4b0e      	ldr	r3, [pc, #56]	; (800909c <tcp_input_delayed_close+0x50>)
 8009062:	7c98      	ldrb	r0, [r3, #18]
 8009064:	f010 0010 	ands.w	r0, r0, #16
 8009068:	d011      	beq.n	800908e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800906a:	8b63      	ldrh	r3, [r4, #26]
 800906c:	06db      	lsls	r3, r3, #27
 800906e:	d406      	bmi.n	800907e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009070:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009074:	b11b      	cbz	r3, 800907e <tcp_input_delayed_close+0x32>
 8009076:	6920      	ldr	r0, [r4, #16]
 8009078:	f06f 010e 	mvn.w	r1, #14
 800907c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <tcp_input_delayed_close+0x54>)
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff fbbb 	bl	80087fc <tcp_pcb_remove>
    tcp_free(pcb);
 8009086:	4620      	mov	r0, r4
 8009088:	f7fe ffc6 	bl	8008018 <tcp_free>
 800908c:	2001      	movs	r0, #1
}
 800908e:	bd10      	pop	{r4, pc}
 8009090:	0800f74f 	.word	0x0800f74f
 8009094:	0800f7e1 	.word	0x0800f7e1
 8009098:	0800d598 	.word	0x0800d598
 800909c:	2000f834 	.word	0x2000f834
 80090a0:	2000f820 	.word	0x2000f820

080090a4 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80090a8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8009160 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009158 <tcp_free_acked_segments.constprop.0+0xb4>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 80090b0:	4606      	mov	r6, r0
 80090b2:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 80090b4:	460c      	mov	r4, r1
  while (seg_list != NULL &&
 80090b6:	2c00      	cmp	r4, #0
 80090b8:	d03b      	beq.n	8009132 <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80090ba:	68e3      	ldr	r3, [r4, #12]
 80090bc:	6858      	ldr	r0, [r3, #4]
 80090be:	f7fd ff12 	bl	8006ee6 <lwip_htonl>
 80090c2:	68e3      	ldr	r3, [r4, #12]
 80090c4:	8925      	ldrh	r5, [r4, #8]
 80090c6:	4682      	mov	sl, r0
 80090c8:	8998      	ldrh	r0, [r3, #12]
 80090ca:	f7fd ff09 	bl	8006ee0 <lwip_htons>
 80090ce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80090d2:	f010 0003 	ands.w	r0, r0, #3
 80090d6:	eba5 0303 	sub.w	r3, r5, r3
 80090da:	bf18      	it	ne
 80090dc:	2001      	movne	r0, #1
 80090de:	eb03 050a 	add.w	r5, r3, sl
 80090e2:	4405      	add	r5, r0
  while (seg_list != NULL &&
 80090e4:	2d00      	cmp	r5, #0
 80090e6:	dc25      	bgt.n	8009134 <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 80090e8:	e9d4 a000 	ldrd	sl, r0, [r4]
 80090ec:	f7fe fdec 	bl	8007cc8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090f0:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80090f4:	4283      	cmp	r3, r0
    clen = pbuf_clen(next->p);
 80090f6:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090f8:	d206      	bcs.n	8009108 <tcp_free_acked_segments.constprop.0+0x64>
 80090fa:	4915      	ldr	r1, [pc, #84]	; (8009150 <tcp_free_acked_segments.constprop.0+0xac>)
 80090fc:	4815      	ldr	r0, [pc, #84]	; (8009154 <tcp_free_acked_segments.constprop.0+0xb0>)
 80090fe:	464b      	mov	r3, r9
 8009100:	f240 4257 	movw	r2, #1111	; 0x457
 8009104:	f002 fb64 	bl	800b7d0 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009108:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800910c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8009110:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009112:	1b45      	subs	r5, r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009114:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009116:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    tcp_seg_free(next);
 800911a:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800911c:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 8009120:	f7ff f8c0 	bl	80082a4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8009124:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8009128:	b17b      	cbz	r3, 800914a <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800912a:	f1ba 0f00 	cmp.w	sl, #0
 800912e:	d10c      	bne.n	800914a <tcp_free_acked_segments.constprop.0+0xa6>
 8009130:	b11f      	cbz	r7, 800913a <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 8009132:	2400      	movs	r4, #0
}
 8009134:	4620      	mov	r0, r4
 8009136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <tcp_free_acked_segments.constprop.0+0xb4>)
 800913c:	4907      	ldr	r1, [pc, #28]	; (800915c <tcp_free_acked_segments.constprop.0+0xb8>)
 800913e:	4805      	ldr	r0, [pc, #20]	; (8009154 <tcp_free_acked_segments.constprop.0+0xb0>)
 8009140:	f240 4261 	movw	r2, #1121	; 0x461
 8009144:	f002 fb44 	bl	800b7d0 <iprintf>
  while (seg_list != NULL &&
 8009148:	e7f3      	b.n	8009132 <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800914a:	4654      	mov	r4, sl
 800914c:	e7b3      	b.n	80090b6 <tcp_free_acked_segments.constprop.0+0x12>
 800914e:	bf00      	nop
 8009150:	0800f806 	.word	0x0800f806
 8009154:	0800d598 	.word	0x0800d598
 8009158:	0800f74f 	.word	0x0800f74f
 800915c:	0800f82e 	.word	0x0800f82e
 8009160:	2000f834 	.word	0x2000f834

08009164 <tcp_receive>:
{
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009166:	4604      	mov	r4, r0
 8009168:	b930      	cbnz	r0, 8009178 <tcp_receive+0x14>
 800916a:	4b35      	ldr	r3, [pc, #212]	; (8009240 <tcp_receive+0xdc>)
 800916c:	4935      	ldr	r1, [pc, #212]	; (8009244 <tcp_receive+0xe0>)
 800916e:	4836      	ldr	r0, [pc, #216]	; (8009248 <tcp_receive+0xe4>)
 8009170:	f240 427b 	movw	r2, #1147	; 0x47b
 8009174:	f002 fb2c 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009178:	7d23      	ldrb	r3, [r4, #20]
 800917a:	2b03      	cmp	r3, #3
 800917c:	d806      	bhi.n	800918c <tcp_receive+0x28>
 800917e:	4b30      	ldr	r3, [pc, #192]	; (8009240 <tcp_receive+0xdc>)
 8009180:	4932      	ldr	r1, [pc, #200]	; (800924c <tcp_receive+0xe8>)
 8009182:	4831      	ldr	r0, [pc, #196]	; (8009248 <tcp_receive+0xe4>)
 8009184:	f240 427c 	movw	r2, #1148	; 0x47c
 8009188:	f002 fb22 	bl	800b7d0 <iprintf>
  if (flags & TCP_ACK) {
 800918c:	4d30      	ldr	r5, [pc, #192]	; (8009250 <tcp_receive+0xec>)
 800918e:	7f2b      	ldrb	r3, [r5, #28]
 8009190:	06de      	lsls	r6, r3, #27
 8009192:	f140 8088 	bpl.w	80092a6 <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009196:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800919a:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800919c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091a0:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091a2:	1af7      	subs	r7, r6, r3
 80091a4:	2f00      	cmp	r7, #0
 80091a6:	db0a      	blt.n	80091be <tcp_receive+0x5a>
 80091a8:	429e      	cmp	r6, r3
 80091aa:	d102      	bne.n	80091b2 <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80091ac:	1a86      	subs	r6, r0, r2
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	db05      	blt.n	80091be <tcp_receive+0x5a>
 80091b2:	4290      	cmp	r0, r2
 80091b4:	d110      	bne.n	80091d8 <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80091b6:	68ee      	ldr	r6, [r5, #12]
 80091b8:	89f6      	ldrh	r6, [r6, #14]
 80091ba:	428e      	cmp	r6, r1
 80091bc:	d90c      	bls.n	80091d8 <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80091be:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80091c0:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80091c4:	89f6      	ldrh	r6, [r6, #14]
 80091c6:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 80091ca:	b2b7      	uxth	r7, r6
      pcb->snd_wl2 = ackno;
 80091cc:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80091d0:	45bc      	cmp	ip, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
 80091d2:	bf38      	it	cc
 80091d4:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80091d8:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80091da:	1b93      	subs	r3, r2, r6
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f300 813b 	bgt.w	8009458 <tcp_receive+0x2f4>
      if (tcplen == 0) {
 80091e2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f040 8133 	bne.w	8009450 <tcp_receive+0x2ec>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80091ea:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80091ee:	6da7      	ldr	r7, [r4, #88]	; 0x58
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80091f0:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80091f2:	443b      	add	r3, r7
 80091f4:	428b      	cmp	r3, r1
 80091f6:	f040 812b 	bne.w	8009450 <tcp_receive+0x2ec>
          if (pcb->rtime >= 0) {
 80091fa:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f2c0 8126 	blt.w	8009450 <tcp_receive+0x2ec>
            if (pcb->lastack == ackno) {
 8009204:	4296      	cmp	r6, r2
 8009206:	f040 8123 	bne.w	8009450 <tcp_receive+0x2ec>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800920a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800920e:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 8009210:	bf1c      	itt	ne
 8009212:	3301      	addne	r3, #1
 8009214:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009218:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800921c:	2b03      	cmp	r3, #3
 800921e:	d919      	bls.n	8009254 <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009220:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009224:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009226:	4413      	add	r3, r2
 8009228:	b29b      	uxth	r3, r3
 800922a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800922e:	429a      	cmp	r2, r3
 8009230:	bf88      	it	hi
 8009232:	460b      	movhi	r3, r1
 8009234:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009238:	4620      	mov	r0, r4
 800923a:	f001 fcfd 	bl	800ac38 <tcp_rexmit_fast>
      if (!found_dupack) {
 800923e:	e00a      	b.n	8009256 <tcp_receive+0xf2>
 8009240:	0800f74f 	.word	0x0800f74f
 8009244:	0800f84e 	.word	0x0800f84e
 8009248:	0800d598 	.word	0x0800d598
 800924c:	0800f867 	.word	0x0800f867
 8009250:	2000f834 	.word	0x2000f834
              if (pcb->dupacks >= 3) {
 8009254:	d0f0      	beq.n	8009238 <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009258:	b329      	cbz	r1, 80092a6 <tcp_receive+0x142>
 800925a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800925c:	69aa      	ldr	r2, [r5, #24]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	2b00      	cmp	r3, #0
 8009262:	da20      	bge.n	80092a6 <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009264:	4b9b      	ldr	r3, [pc, #620]	; (80094d4 <tcp_receive+0x370>)
 8009266:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8009268:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800926c:	b289      	uxth	r1, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800926e:	f3c3 00cf 	ubfx	r0, r3, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009272:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 8009274:	1a12      	subs	r2, r2, r0
 8009276:	b216      	sxth	r6, r2
      if (m < 0) {
 8009278:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800927a:	fa13 f282 	uxtah	r2, r3, r2
        m = (s16_t) - m;
 800927e:	bfb8      	it	lt
 8009280:	1bc9      	sublt	r1, r1, r7
      m = (s16_t)(m - (pcb->sv >> 2));
 8009282:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
        m = (s16_t) - m;
 8009286:	bfbc      	itt	lt
 8009288:	1809      	addlt	r1, r1, r0
 800928a:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800928c:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 8009290:	4433      	add	r3, r6
      pcb->sa = (s16_t)(pcb->sa + m);
 8009292:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 8009294:	b29b      	uxth	r3, r3
 8009296:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009298:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800929c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80092a0:	2300      	movs	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 80092a2:	87a2      	strh	r2, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80092a4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80092a6:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80092a8:	6a2b      	ldr	r3, [r5, #32]
 80092aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f000 8184 	beq.w	80095ba <tcp_receive+0x456>
 80092b2:	7d21      	ldrb	r1, [r4, #20]
 80092b4:	2906      	cmp	r1, #6
 80092b6:	f200 8180 	bhi.w	80095ba <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80092ba:	1ad7      	subs	r7, r2, r3
 80092bc:	2f01      	cmp	r7, #1
 80092be:	f100 816b 	bmi.w	8009598 <tcp_receive+0x434>
 80092c2:	f1c3 0101 	rsb	r1, r3, #1
 80092c6:	1a09      	subs	r1, r1, r0
 80092c8:	4411      	add	r1, r2
 80092ca:	2900      	cmp	r1, #0
 80092cc:	f300 8164 	bgt.w	8009598 <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 80092d0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80092d2:	b936      	cbnz	r6, 80092e2 <tcp_receive+0x17e>
 80092d4:	4b80      	ldr	r3, [pc, #512]	; (80094d8 <tcp_receive+0x374>)
 80092d6:	4981      	ldr	r1, [pc, #516]	; (80094dc <tcp_receive+0x378>)
 80092d8:	4881      	ldr	r0, [pc, #516]	; (80094e0 <tcp_receive+0x37c>)
 80092da:	f240 5294 	movw	r2, #1428	; 0x594
 80092de:	f002 fa77 	bl	800b7d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80092e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80092e6:	429f      	cmp	r7, r3
 80092e8:	d906      	bls.n	80092f8 <tcp_receive+0x194>
 80092ea:	4b7b      	ldr	r3, [pc, #492]	; (80094d8 <tcp_receive+0x374>)
 80092ec:	497d      	ldr	r1, [pc, #500]	; (80094e4 <tcp_receive+0x380>)
 80092ee:	487c      	ldr	r0, [pc, #496]	; (80094e0 <tcp_receive+0x37c>)
 80092f0:	f240 5295 	movw	r2, #1429	; 0x595
 80092f4:	f002 fa6c 	bl	800b7d0 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80092f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092fa:	891b      	ldrh	r3, [r3, #8]
      off = (u16_t)off32;
 80092fc:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80092fe:	42bb      	cmp	r3, r7
 8009300:	d206      	bcs.n	8009310 <tcp_receive+0x1ac>
 8009302:	4b75      	ldr	r3, [pc, #468]	; (80094d8 <tcp_receive+0x374>)
 8009304:	4978      	ldr	r1, [pc, #480]	; (80094e8 <tcp_receive+0x384>)
 8009306:	4876      	ldr	r0, [pc, #472]	; (80094e0 <tcp_receive+0x37c>)
 8009308:	f240 5297 	movw	r2, #1431	; 0x597
 800930c:	f002 fa60 	bl	800b7d0 <iprintf>
      inseg.len -= off;
 8009310:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8009312:	1bdb      	subs	r3, r3, r7
 8009314:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009316:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009318:	891b      	ldrh	r3, [r3, #8]
 800931a:	1bdb      	subs	r3, r3, r7
 800931c:	b29b      	uxth	r3, r3
        p->len = 0;
 800931e:	2100      	movs	r1, #0
      while (p->len < off) {
 8009320:	8972      	ldrh	r2, [r6, #10]
 8009322:	42ba      	cmp	r2, r7
 8009324:	f0c0 8132 	bcc.w	800958c <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 8009328:	4639      	mov	r1, r7
 800932a:	4630      	mov	r0, r6
 800932c:	f7fe fb5c 	bl	80079e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009330:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009334:	622b      	str	r3, [r5, #32]
 8009336:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009338:	6a29      	ldr	r1, [r5, #32]
 800933a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800933c:	1a8b      	subs	r3, r1, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	f2c0 8136 	blt.w	80095b0 <tcp_receive+0x44c>
 8009344:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009346:	1c4b      	adds	r3, r1, #1
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	1a1b      	subs	r3, r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	f300 812f 	bgt.w	80095b0 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 8009352:	4291      	cmp	r1, r2
 8009354:	f040 812c 	bne.w	80095b0 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 8009358:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800935a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800935c:	8998      	ldrh	r0, [r3, #12]
 800935e:	f7fd fdbf 	bl	8006ee0 <lwip_htons>
 8009362:	f010 0003 	ands.w	r0, r0, #3
 8009366:	bf18      	it	ne
 8009368:	2001      	movne	r0, #1
        if (tcplen > pcb->rcv_wnd) {
 800936a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800936c:	4430      	add	r0, r6
 800936e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8009370:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8009372:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 8009374:	d23e      	bcs.n	80093f4 <tcp_receive+0x290>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009376:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009378:	8998      	ldrh	r0, [r3, #12]
 800937a:	f7fd fdb1 	bl	8006ee0 <lwip_htons>
 800937e:	07c6      	lsls	r6, r0, #31
 8009380:	d50d      	bpl.n	800939e <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009382:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009384:	899e      	ldrh	r6, [r3, #12]
 8009386:	4630      	mov	r0, r6
 8009388:	f7fd fdaa 	bl	8006ee0 <lwip_htons>
 800938c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009390:	f7fd fda6 	bl	8006ee0 <lwip_htons>
 8009394:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8009398:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800939a:	4306      	orrs	r6, r0
 800939c:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800939e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093a0:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80093a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80093a4:	8998      	ldrh	r0, [r3, #12]
 80093a6:	f7fd fd9b 	bl	8006ee0 <lwip_htons>
 80093aa:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 80093ac:	bf48      	it	mi
 80093ae:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 80093b0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 80093b2:	bf44      	itt	mi
 80093b4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80093b8:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 80093ba:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80093bc:	f7fe fc2c 	bl	8007c18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80093c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80093c2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 80093c4:	8998      	ldrh	r0, [r3, #12]
 80093c6:	f7fd fd8b 	bl	8006ee0 <lwip_htons>
 80093ca:	f010 0003 	ands.w	r0, r0, #3
 80093ce:	bf18      	it	ne
 80093d0:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093d2:	6a2b      	ldr	r3, [r5, #32]
 80093d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80093d6:	4430      	add	r0, r6
 80093d8:	b280      	uxth	r0, r0
 80093da:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093dc:	4418      	add	r0, r3
 80093de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093e0:	4413      	add	r3, r2
 80093e2:	4298      	cmp	r0, r3
 80093e4:	d006      	beq.n	80093f4 <tcp_receive+0x290>
 80093e6:	4b3c      	ldr	r3, [pc, #240]	; (80094d8 <tcp_receive+0x374>)
 80093e8:	4940      	ldr	r1, [pc, #256]	; (80094ec <tcp_receive+0x388>)
 80093ea:	483d      	ldr	r0, [pc, #244]	; (80094e0 <tcp_receive+0x37c>)
 80093ec:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80093f0:	f002 f9ee 	bl	800b7d0 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 80093f4:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 80093f6:	6a2b      	ldr	r3, [r5, #32]
 80093f8:	4413      	add	r3, r2
 80093fa:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80093fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80093fe:	4293      	cmp	r3, r2
 8009400:	d206      	bcs.n	8009410 <tcp_receive+0x2ac>
 8009402:	4b35      	ldr	r3, [pc, #212]	; (80094d8 <tcp_receive+0x374>)
 8009404:	493a      	ldr	r1, [pc, #232]	; (80094f0 <tcp_receive+0x38c>)
 8009406:	4836      	ldr	r0, [pc, #216]	; (80094e0 <tcp_receive+0x37c>)
 8009408:	f240 6207 	movw	r2, #1543	; 0x607
 800940c:	f002 f9e0 	bl	800b7d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009410:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009412:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009418:	4620      	mov	r0, r4
 800941a:	f7fe fecf 	bl	80081bc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800941e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009420:	891a      	ldrh	r2, [r3, #8]
 8009422:	b112      	cbz	r2, 800942a <tcp_receive+0x2c6>
          recv_data = inseg.p;
 8009424:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 8009426:	2300      	movs	r3, #0
 8009428:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800942a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800942c:	8998      	ldrh	r0, [r3, #12]
 800942e:	f7fd fd57 	bl	8006ee0 <lwip_htons>
 8009432:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 8009434:	bf42      	ittt	mi
 8009436:	7cab      	ldrbmi	r3, [r5, #18]
 8009438:	f043 0320 	orrmi.w	r3, r3, #32
 800943c:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800943e:	8b63      	ldrh	r3, [r4, #26]
 8009440:	07da      	lsls	r2, r3, #31
 8009442:	f140 80b1 	bpl.w	80095a8 <tcp_receive+0x444>
 8009446:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	e0ad      	b.n	80095ac <tcp_receive+0x448>
        pcb->dupacks = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009456:	e6fe      	b.n	8009256 <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009458:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800945a:	1a51      	subs	r1, r2, r1
 800945c:	2900      	cmp	r1, #0
 800945e:	f300 8091 	bgt.w	8009584 <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 8009462:	8b61      	ldrh	r1, [r4, #26]
 8009464:	0748      	lsls	r0, r1, #29
 8009466:	d509      	bpl.n	800947c <tcp_receive+0x318>
        tcp_clear_flags(pcb, TF_INFR);
 8009468:	f021 0104 	bic.w	r1, r1, #4
 800946c:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800946e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8009472:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009476:	2100      	movs	r1, #0
 8009478:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800947c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8009480:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8009482:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8009484:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009486:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 800948a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800948e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8009498:	d936      	bls.n	8009508 <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800949a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800949e:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80094a2:	4291      	cmp	r1, r2
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80094a4:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 80094a6:	d925      	bls.n	80094f4 <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80094a8:	8b61      	ldrh	r1, [r4, #26]
 80094aa:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80094ae:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80094b0:	bf14      	ite	ne
 80094b2:	2001      	movne	r0, #1
 80094b4:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80094b6:	fb11 f100 	smulbb	r1, r1, r0
 80094ba:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 80094bc:	4299      	cmp	r1, r3
 80094be:	bf94      	ite	ls
 80094c0:	1850      	addls	r0, r2, r1
 80094c2:	18d0      	addhi	r0, r2, r3
 80094c4:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d901      	bls.n	80094ce <tcp_receive+0x36a>
          TCP_WND_INC(pcb->cwnd, increase);
 80094ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80094d2:	e019      	b.n	8009508 <tcp_receive+0x3a4>
 80094d4:	2000f824 	.word	0x2000f824
 80094d8:	0800f74f 	.word	0x0800f74f
 80094dc:	0800f880 	.word	0x0800f880
 80094e0:	0800d598 	.word	0x0800d598
 80094e4:	0800f890 	.word	0x0800f890
 80094e8:	0800f89f 	.word	0x0800f89f
 80094ec:	0800f8af 	.word	0x0800f8af
 80094f0:	0800f8e6 	.word	0x0800f8e6
          TCP_WND_INC(pcb->bytes_acked, acked);
 80094f4:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 80094f8:	440b      	add	r3, r1
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	4299      	cmp	r1, r3
 80094fe:	d82b      	bhi.n	8009558 <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009500:	429a      	cmp	r2, r3
 8009502:	d92b      	bls.n	800955c <tcp_receive+0x3f8>
 8009504:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009508:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fdc9 	bl	80090a4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009512:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009514:	6720      	str	r0, [r4, #112]	; 0x70
 8009516:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009518:	4620      	mov	r0, r4
 800951a:	f7ff fdc3 	bl	80090a4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800951e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009520:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8009522:	fab2 f382 	clz	r3, r2
 8009526:	095b      	lsrs	r3, r3, #5
 8009528:	425b      	negs	r3, r3
 800952a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009530:	b908      	cbnz	r0, 8009536 <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 8009532:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009536:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800953a:	8aa9      	ldrh	r1, [r5, #20]
 800953c:	440b      	add	r3, r1
 800953e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8009542:	8b63      	ldrh	r3, [r4, #26]
 8009544:	051f      	lsls	r7, r3, #20
 8009546:	f57f ae86 	bpl.w	8009256 <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800954a:	b9c2      	cbnz	r2, 800957e <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800954c:	b968      	cbnz	r0, 800956a <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800954e:	8b63      	ldrh	r3, [r4, #26]
 8009550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009554:	8363      	strh	r3, [r4, #26]
 8009556:	e67e      	b.n	8009256 <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009558:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009562:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009564:	4413      	add	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	e7ad      	b.n	80094c6 <tcp_receive+0x362>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800956a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800956c:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800956e:	6858      	ldr	r0, [r3, #4]
 8009570:	f7fd fcb9 	bl	8006ee6 <lwip_htonl>
 8009574:	1a30      	subs	r0, r6, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	f73f ae6d 	bgt.w	8009256 <tcp_receive+0xf2>
 800957c:	e7e7      	b.n	800954e <tcp_receive+0x3ea>
 800957e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8009580:	68d3      	ldr	r3, [r2, #12]
 8009582:	e7f4      	b.n	800956e <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 8009584:	4620      	mov	r0, r4
 8009586:	f001 fbd1 	bl	800ad2c <tcp_send_empty_ack>
 800958a:	e664      	b.n	8009256 <tcp_receive+0xf2>
        off -= p->len;
 800958c:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800958e:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 8009590:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 8009592:	b2bf      	uxth	r7, r7
        p = p->next;
 8009594:	6836      	ldr	r6, [r6, #0]
 8009596:	e6c3      	b.n	8009320 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800959c:	bfbe      	ittt	lt
 800959e:	8b63      	ldrhlt	r3, [r4, #26]
 80095a0:	f043 0302 	orrlt.w	r3, r3, #2
 80095a4:	8363      	strhlt	r3, [r4, #26]
 80095a6:	e6c7      	b.n	8009338 <tcp_receive+0x1d4>
        tcp_ack(pcb);
 80095a8:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 80095ac:	8363      	strh	r3, [r4, #26]
}
 80095ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 80095b0:	4620      	mov	r0, r4
}
 80095b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 80095b6:	f001 bbb9 	b.w	800ad2c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80095ba:	1a99      	subs	r1, r3, r2
 80095bc:	2900      	cmp	r1, #0
 80095be:	db05      	blt.n	80095cc <tcp_receive+0x468>
 80095c0:	3301      	adds	r3, #1
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80095c6:	1a9b      	subs	r3, r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	ddf0      	ble.n	80095ae <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 80095cc:	8b63      	ldrh	r3, [r4, #26]
 80095ce:	e73c      	b.n	800944a <tcp_receive+0x2e6>

080095d0 <tcp_input>:
{
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80095d4:	4606      	mov	r6, r0
{
 80095d6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80095d8:	b928      	cbnz	r0, 80095e6 <tcp_input+0x16>
 80095da:	4ba1      	ldr	r3, [pc, #644]	; (8009860 <tcp_input+0x290>)
 80095dc:	49a1      	ldr	r1, [pc, #644]	; (8009864 <tcp_input+0x294>)
 80095de:	48a2      	ldr	r0, [pc, #648]	; (8009868 <tcp_input+0x298>)
 80095e0:	2283      	movs	r2, #131	; 0x83
 80095e2:	f002 f8f5 	bl	800b7d0 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 80095e6:	4da1      	ldr	r5, [pc, #644]	; (800986c <tcp_input+0x29c>)
 80095e8:	6873      	ldr	r3, [r6, #4]
 80095ea:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 80095ec:	8973      	ldrh	r3, [r6, #10]
 80095ee:	2b13      	cmp	r3, #19
 80095f0:	f240 80a6 	bls.w	8009740 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80095f4:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8009890 <tcp_input+0x2c0>
 80095f8:	f8d8 1000 	ldr.w	r1, [r8]
 80095fc:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8009600:	f7fd f879 	bl	80066f6 <ip4_addr_isbroadcast_u32>
 8009604:	4604      	mov	r4, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	f040 809a 	bne.w	8009740 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800960c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009614:	2be0      	cmp	r3, #224	; 0xe0
 8009616:	f000 8093 	beq.w	8009740 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800961a:	68eb      	ldr	r3, [r5, #12]
 800961c:	8998      	ldrh	r0, [r3, #12]
 800961e:	f7fd fc5f 	bl	8006ee0 <lwip_htons>
 8009622:	0a81      	lsrs	r1, r0, #10
 8009624:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009628:	2913      	cmp	r1, #19
 800962a:	f240 8089 	bls.w	8009740 <tcp_input+0x170>
 800962e:	8933      	ldrh	r3, [r6, #8]
 8009630:	428b      	cmp	r3, r1
 8009632:	b28a      	uxth	r2, r1
 8009634:	f0c0 8084 	bcc.w	8009740 <tcp_input+0x170>
  if (p->len >= hdrlen_bytes) {
 8009638:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800963a:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800963c:	f1a2 0314 	sub.w	r3, r2, #20
 8009640:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8009642:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009644:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 8009646:	d33d      	bcc.n	80096c4 <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009648:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800964a:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800964c:	f7fe f9cc 	bl	80079e8 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009650:	68ec      	ldr	r4, [r5, #12]
 8009652:	8820      	ldrh	r0, [r4, #0]
 8009654:	f7fd fc44 	bl	8006ee0 <lwip_htons>
 8009658:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800965a:	68ec      	ldr	r4, [r5, #12]
 800965c:	8860      	ldrh	r0, [r4, #2]
 800965e:	f7fd fc3f 	bl	8006ee0 <lwip_htons>
 8009662:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009664:	68ec      	ldr	r4, [r5, #12]
 8009666:	6860      	ldr	r0, [r4, #4]
 8009668:	f7fd fc3d 	bl	8006ee6 <lwip_htonl>
 800966c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800966e:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009670:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009672:	68a0      	ldr	r0, [r4, #8]
 8009674:	f7fd fc37 	bl	8006ee6 <lwip_htonl>
 8009678:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800967a:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800967c:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800967e:	89e0      	ldrh	r0, [r4, #14]
 8009680:	f7fd fc2e 	bl	8006ee0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8009684:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009686:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8009688:	8998      	ldrh	r0, [r3, #12]
 800968a:	f7fd fc29 	bl	8006ee0 <lwip_htons>
 800968e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8009692:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009694:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 8009696:	8932      	ldrh	r2, [r6, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009698:	d14d      	bne.n	8009736 <tcp_input+0x166>
  tcplen = p->tot_len;
 800969a:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800969c:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8009894 <tcp_input+0x2c4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80096a0:	4b6f      	ldr	r3, [pc, #444]	; (8009860 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096a2:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80096a6:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8009898 <tcp_input+0x2c8>
 80096aa:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8009868 <tcp_input+0x298>
  prev = NULL;
 80096ae:	2700      	movs	r7, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096b0:	2c00      	cmp	r4, #0
 80096b2:	d14b      	bne.n	800974c <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096b4:	4b6e      	ldr	r3, [pc, #440]	; (8009870 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096b6:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8009860 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096ba:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096bc:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800989c <tcp_input+0x2cc>
 80096c0:	4f69      	ldr	r7, [pc, #420]	; (8009868 <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096c2:	e141      	b.n	8009948 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	b92b      	cbnz	r3, 80096d4 <tcp_input+0x104>
 80096c8:	4b65      	ldr	r3, [pc, #404]	; (8009860 <tcp_input+0x290>)
 80096ca:	496a      	ldr	r1, [pc, #424]	; (8009874 <tcp_input+0x2a4>)
 80096cc:	4866      	ldr	r0, [pc, #408]	; (8009868 <tcp_input+0x298>)
 80096ce:	22c2      	movs	r2, #194	; 0xc2
 80096d0:	f002 f87e 	bl	800b7d0 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 80096d4:	2114      	movs	r1, #20
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7fe f986 	bl	80079e8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 80096dc:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80096de:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    tcphdr_opt1len = p->len;
 80096e2:	812c      	strh	r4, [r5, #8]
    pbuf_remove_header(p, tcphdr_opt1len);
 80096e4:	4621      	mov	r1, r4
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7fe f97e 	bl	80079e8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 80096ec:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80096ee:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 80096f2:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80096f4:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 80096f6:	42bb      	cmp	r3, r7
 80096f8:	d322      	bcc.n	8009740 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80096fa:	6843      	ldr	r3, [r0, #4]
 80096fc:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 80096fe:	4639      	mov	r1, r7
 8009700:	f7fe f972 	bl	80079e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009704:	8933      	ldrh	r3, [r6, #8]
 8009706:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009708:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800970a:	eba4 0409 	sub.w	r4, r4, r9
 800970e:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009710:	b12b      	cbz	r3, 800971e <tcp_input+0x14e>
 8009712:	4b53      	ldr	r3, [pc, #332]	; (8009860 <tcp_input+0x290>)
 8009714:	4958      	ldr	r1, [pc, #352]	; (8009878 <tcp_input+0x2a8>)
 8009716:	4854      	ldr	r0, [pc, #336]	; (8009868 <tcp_input+0x298>)
 8009718:	22df      	movs	r2, #223	; 0xdf
 800971a:	f002 f859 	bl	800b7d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800971e:	6833      	ldr	r3, [r6, #0]
 8009720:	8932      	ldrh	r2, [r6, #8]
 8009722:	891b      	ldrh	r3, [r3, #8]
 8009724:	429a      	cmp	r2, r3
 8009726:	d093      	beq.n	8009650 <tcp_input+0x80>
 8009728:	4b4d      	ldr	r3, [pc, #308]	; (8009860 <tcp_input+0x290>)
 800972a:	4954      	ldr	r1, [pc, #336]	; (800987c <tcp_input+0x2ac>)
 800972c:	484e      	ldr	r0, [pc, #312]	; (8009868 <tcp_input+0x298>)
 800972e:	22e0      	movs	r2, #224	; 0xe0
 8009730:	f002 f84e 	bl	800b7d0 <iprintf>
 8009734:	e78c      	b.n	8009650 <tcp_input+0x80>
    tcplen++;
 8009736:	1c53      	adds	r3, r2, #1
 8009738:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800973a:	429a      	cmp	r2, r3
    tcplen++;
 800973c:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800973e:	d9ad      	bls.n	800969c <tcp_input+0xcc>
  pbuf_free(p);
 8009740:	4630      	mov	r0, r6
}
 8009742:	b007      	add	sp, #28
 8009744:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009748:	f7fe b982 	b.w	8007a50 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800974c:	7d22      	ldrb	r2, [r4, #20]
 800974e:	b92a      	cbnz	r2, 800975c <tcp_input+0x18c>
 8009750:	22fb      	movs	r2, #251	; 0xfb
 8009752:	4659      	mov	r1, fp
 8009754:	4650      	mov	r0, sl
 8009756:	f002 f83b 	bl	800b7d0 <iprintf>
 800975a:	4b41      	ldr	r3, [pc, #260]	; (8009860 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800975c:	7d22      	ldrb	r2, [r4, #20]
 800975e:	2a0a      	cmp	r2, #10
 8009760:	d105      	bne.n	800976e <tcp_input+0x19e>
 8009762:	4947      	ldr	r1, [pc, #284]	; (8009880 <tcp_input+0x2b0>)
 8009764:	22fc      	movs	r2, #252	; 0xfc
 8009766:	4650      	mov	r0, sl
 8009768:	f002 f832 	bl	800b7d0 <iprintf>
 800976c:	4b3c      	ldr	r3, [pc, #240]	; (8009860 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800976e:	7d22      	ldrb	r2, [r4, #20]
 8009770:	2a01      	cmp	r2, #1
 8009772:	d105      	bne.n	8009780 <tcp_input+0x1b0>
 8009774:	4943      	ldr	r1, [pc, #268]	; (8009884 <tcp_input+0x2b4>)
 8009776:	22fd      	movs	r2, #253	; 0xfd
 8009778:	4650      	mov	r0, sl
 800977a:	f002 f829 	bl	800b7d0 <iprintf>
 800977e:	4b38      	ldr	r3, [pc, #224]	; (8009860 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009780:	7a20      	ldrb	r0, [r4, #8]
 8009782:	68e1      	ldr	r1, [r4, #12]
 8009784:	b138      	cbz	r0, 8009796 <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009786:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800978a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800978e:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	4290      	cmp	r0, r2
 8009794:	d161      	bne.n	800985a <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 8009796:	68ea      	ldr	r2, [r5, #12]
 8009798:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800979c:	8810      	ldrh	r0, [r2, #0]
 800979e:	4584      	cmp	ip, r0
 80097a0:	d15b      	bne.n	800985a <tcp_input+0x28a>
 80097a2:	8ae0      	ldrh	r0, [r4, #22]
 80097a4:	8852      	ldrh	r2, [r2, #2]
 80097a6:	4290      	cmp	r0, r2
 80097a8:	d157      	bne.n	800985a <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 80097aa:	6860      	ldr	r0, [r4, #4]
 80097ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097b0:	4290      	cmp	r0, r2
 80097b2:	d152      	bne.n	800985a <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80097ba:	4290      	cmp	r0, r2
 80097bc:	d14d      	bne.n	800985a <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80097be:	42a1      	cmp	r1, r4
 80097c0:	f040 83ed 	bne.w	8009f9e <tcp_input+0x9ce>
 80097c4:	4b26      	ldr	r3, [pc, #152]	; (8009860 <tcp_input+0x290>)
 80097c6:	4930      	ldr	r1, [pc, #192]	; (8009888 <tcp_input+0x2b8>)
 80097c8:	4827      	ldr	r0, [pc, #156]	; (8009868 <tcp_input+0x298>)
 80097ca:	f240 120d 	movw	r2, #269	; 0x10d
 80097ce:	f001 ffff 	bl	800b7d0 <iprintf>
      if (prev != NULL) {
 80097d2:	b137      	cbz	r7, 80097e2 <tcp_input+0x212>
        prev->next = pcb->next;
 80097d4:	68e3      	ldr	r3, [r4, #12]
 80097d6:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 80097d8:	f8d9 3000 	ldr.w	r3, [r9]
 80097dc:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 80097de:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80097e2:	68e3      	ldr	r3, [r4, #12]
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d106      	bne.n	80097f6 <tcp_input+0x226>
 80097e8:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <tcp_input+0x290>)
 80097ea:	4928      	ldr	r1, [pc, #160]	; (800988c <tcp_input+0x2bc>)
 80097ec:	481e      	ldr	r0, [pc, #120]	; (8009868 <tcp_input+0x298>)
 80097ee:	f240 1215 	movw	r2, #277	; 0x115
 80097f2:	f001 ffed 	bl	800b7d0 <iprintf>
    inseg.len = p->tot_len;
 80097f6:	8932      	ldrh	r2, [r6, #8]
 80097f8:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 80097fa:	68ea      	ldr	r2, [r5, #12]
    inseg.p = p;
 80097fc:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.next = NULL;
 80097fe:	2300      	movs	r3, #0
    recv_data = NULL;
 8009800:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    inseg.next = NULL;
 8009804:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 8009806:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 8009808:	82ab      	strh	r3, [r5, #20]
    if (flags & TCP_PSH) {
 800980a:	7f2b      	ldrb	r3, [r5, #28]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d503      	bpl.n	8009818 <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 8009810:	7b73      	ldrb	r3, [r6, #13]
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 8009818:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 812e 	beq.w	8009a7c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009820:	4620      	mov	r0, r4
 8009822:	f7ff f937 	bl	8008a94 <tcp_process_refused_data>
 8009826:	300d      	adds	r0, #13
 8009828:	d007      	beq.n	800983a <tcp_input+0x26a>
 800982a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 8125 	beq.w	8009a7c <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009832:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 8121 	beq.w	8009a7c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800983a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800983c:	b913      	cbnz	r3, 8009844 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800983e:	4620      	mov	r0, r4
 8009840:	f001 fa74 	bl	800ad2c <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8009844:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 8009846:	2400      	movs	r4, #0
    recv_data = NULL;
 8009848:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800984c:	b110      	cbz	r0, 8009854 <tcp_input+0x284>
      pbuf_free(inseg.p);
 800984e:	f7fe f8ff 	bl	8007a50 <pbuf_free>
      inseg.p = NULL;
 8009852:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8009854:	b007      	add	sp, #28
 8009856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800985a:	4627      	mov	r7, r4
 800985c:	460c      	mov	r4, r1
 800985e:	e727      	b.n	80096b0 <tcp_input+0xe0>
 8009860:	0800f74f 	.word	0x0800f74f
 8009864:	0800f905 	.word	0x0800f905
 8009868:	0800d598 	.word	0x0800d598
 800986c:	2000f834 	.word	0x2000f834
 8009870:	2000f82c 	.word	0x2000f82c
 8009874:	0800f91d 	.word	0x0800f91d
 8009878:	0800f92d 	.word	0x0800f92d
 800987c:	0800f939 	.word	0x0800f939
 8009880:	0800f97f 	.word	0x0800f97f
 8009884:	0800f9a9 	.word	0x0800f9a9
 8009888:	0800f9d0 	.word	0x0800f9d0
 800988c:	0800f9fb 	.word	0x0800f9fb
 8009890:	2000935c 	.word	0x2000935c
 8009894:	2000f820 	.word	0x2000f820
 8009898:	0800f958 	.word	0x0800f958
 800989c:	0800fa25 	.word	0x0800fa25
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80098a0:	7d23      	ldrb	r3, [r4, #20]
 80098a2:	2b0a      	cmp	r3, #10
 80098a4:	d006      	beq.n	80098b4 <tcp_input+0x2e4>
 80098a6:	465b      	mov	r3, fp
 80098a8:	f240 121f 	movw	r2, #287	; 0x11f
 80098ac:	4651      	mov	r1, sl
 80098ae:	4638      	mov	r0, r7
 80098b0:	f001 ff8e 	bl	800b7d0 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098b4:	7a22      	ldrb	r2, [r4, #8]
 80098b6:	b13a      	cbz	r2, 80098c8 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80098b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c0:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d13e      	bne.n	8009946 <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 80098c8:	68eb      	ldr	r3, [r5, #12]
 80098ca:	8b20      	ldrh	r0, [r4, #24]
 80098cc:	881a      	ldrh	r2, [r3, #0]
 80098ce:	4290      	cmp	r0, r2
 80098d0:	d139      	bne.n	8009946 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 80098d2:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 80098d4:	8ae1      	ldrh	r1, [r4, #22]
 80098d6:	4299      	cmp	r1, r3
 80098d8:	d135      	bne.n	8009946 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 80098da:	6862      	ldr	r2, [r4, #4]
 80098dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d130      	bne.n	8009946 <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d12b      	bne.n	8009946 <tcp_input+0x376>
  if (flags & TCP_RST) {
 80098ee:	7f2b      	ldrb	r3, [r5, #28]
 80098f0:	075f      	lsls	r7, r3, #29
 80098f2:	f53f af25 	bmi.w	8009740 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 80098f6:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098f8:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 80098fa:	d514      	bpl.n	8009926 <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80098fc:	6a2a      	ldr	r2, [r5, #32]
 80098fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	d415      	bmi.n	8009930 <tcp_input+0x360>
 8009904:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 8009908:	eba3 030c 	sub.w	r3, r3, ip
 800990c:	2b00      	cmp	r3, #0
 800990e:	dc0f      	bgt.n	8009930 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009910:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8009914:	4b89      	ldr	r3, [pc, #548]	; (8009b3c <tcp_input+0x56c>)
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	69a9      	ldr	r1, [r5, #24]
 800991a:	3304      	adds	r3, #4
 800991c:	443a      	add	r2, r7
 800991e:	4620      	mov	r0, r4
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009920:	f001 f9be 	bl	800aca0 <tcp_rst>
 8009924:	e70c      	b.n	8009740 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 8009926:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 8009928:	bf42      	ittt	mi
 800992a:	4b85      	ldrmi	r3, [pc, #532]	; (8009b40 <tcp_input+0x570>)
 800992c:	681b      	ldrmi	r3, [r3, #0]
 800992e:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8009930:	2f00      	cmp	r7, #0
 8009932:	f43f af05 	beq.w	8009740 <tcp_input+0x170>
    tcp_ack_now(pcb);
 8009936:	8b63      	ldrh	r3, [r4, #26]
 8009938:	f043 0302 	orr.w	r3, r3, #2
 800993c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800993e:	4620      	mov	r0, r4
 8009940:	f001 fa26 	bl	800ad90 <tcp_output>
        pbuf_free(p);
 8009944:	e6fc      	b.n	8009740 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009946:	68e4      	ldr	r4, [r4, #12]
 8009948:	2c00      	cmp	r4, #0
 800994a:	d1a9      	bne.n	80098a0 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800994c:	487d      	ldr	r0, [pc, #500]	; (8009b44 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800994e:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009952:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 8009954:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009956:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800995a:	4617      	mov	r7, r2
 800995c:	b98f      	cbnz	r7, 8009982 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800995e:	8988      	ldrh	r0, [r1, #12]
 8009960:	f7fd fabe 	bl	8006ee0 <lwip_htons>
 8009964:	0742      	lsls	r2, r0, #29
 8009966:	f53f aeeb 	bmi.w	8009740 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800996a:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800996c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800996e:	8818      	ldrh	r0, [r3, #0]
 8009970:	6a2a      	ldr	r2, [r5, #32]
 8009972:	9002      	str	r0, [sp, #8]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	4b70      	ldr	r3, [pc, #448]	; (8009b3c <tcp_input+0x56c>)
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	440a      	add	r2, r1
 800997e:	3304      	adds	r3, #4
 8009980:	e30a      	b.n	8009f98 <tcp_input+0x9c8>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009982:	f897 c008 	ldrb.w	ip, [r7, #8]
 8009986:	f1bc 0f00 	cmp.w	ip, #0
 800998a:	d005      	beq.n	8009998 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800998c:	f89e 3030 	ldrb.w	r3, [lr, #48]	; 0x30
 8009990:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009992:	b2db      	uxtb	r3, r3
 8009994:	459c      	cmp	ip, r3
 8009996:	d10b      	bne.n	80099b0 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 8009998:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800999c:	8afb      	ldrh	r3, [r7, #22]
 800999e:	4563      	cmp	r3, ip
 80099a0:	d106      	bne.n	80099b0 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	4553      	cmp	r3, sl
 80099a6:	f000 82e1 	beq.w	8009f6c <tcp_input+0x99c>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 82de 	beq.w	8009f6c <tcp_input+0x99c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80099b0:	463c      	mov	r4, r7
 80099b2:	68ff      	ldr	r7, [r7, #12]
 80099b4:	e7d2      	b.n	800995c <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 80099b6:	0798      	lsls	r0, r3, #30
 80099b8:	f57f aec2 	bpl.w	8009740 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 80099bc:	7d78      	ldrb	r0, [r7, #21]
 80099be:	f7ff f9ff 	bl	8008dc0 <tcp_alloc>
    if (npcb == NULL) {
 80099c2:	4604      	mov	r4, r0
 80099c4:	b948      	cbnz	r0, 80099da <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f43f aeb9 	beq.w	8009740 <tcp_input+0x170>
 80099ce:	4601      	mov	r1, r0
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	6938      	ldr	r0, [r7, #16]
 80099d6:	4798      	blx	r3
 80099d8:	e6b2      	b.n	8009740 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80099da:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80099de:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80099e0:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80099e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80099e6:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80099e8:	8afb      	ldrh	r3, [r7, #22]
 80099ea:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80099ec:	7813      	ldrb	r3, [r2, #0]
 80099ee:	7852      	ldrb	r2, [r2, #1]
 80099f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80099f4:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80099f6:	2303      	movs	r3, #3
 80099f8:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80099fa:	6a2b      	ldr	r3, [r5, #32]
 80099fc:	3301      	adds	r3, #1
 80099fe:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009a00:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009a02:	f7ff fa6f 	bl	8008ee4 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009a06:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 8009a08:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009a0e:	693b      	ldr	r3, [r7, #16]
    npcb->snd_nxt = iss;
 8009a10:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 8009a12:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009a14:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 8009a16:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009a18:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009a1a:	7a7b      	ldrb	r3, [r7, #9]
 8009a1c:	f003 030c 	and.w	r3, r3, #12
 8009a20:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009a22:	7a3b      	ldrb	r3, [r7, #8]
 8009a24:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8009a26:	f8d9 3000 	ldr.w	r3, [r9]
 8009a2a:	60e3      	str	r3, [r4, #12]
 8009a2c:	f8c9 4000 	str.w	r4, [r9]
 8009a30:	f001 fc84 	bl	800b33c <tcp_timer_needed>
 8009a34:	4b44      	ldr	r3, [pc, #272]	; (8009b48 <tcp_input+0x578>)
 8009a36:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8009a38:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 8009a3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009a3c:	f7ff fabc 	bl	8008fb8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009a40:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a42:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8009a44:	89db      	ldrh	r3, [r3, #14]
 8009a46:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a4a:	1d22      	adds	r2, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009a4c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a50:	4610      	mov	r0, r2
 8009a52:	9205      	str	r2, [sp, #20]
 8009a54:	f7fc fce6 	bl	8006424 <ip4_route>
 8009a58:	9a05      	ldr	r2, [sp, #20]
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f7ff fa5b 	bl	8008f18 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009a62:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a64:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 ff9c 	bl	800a9a4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f43f af66 	beq.w	800993e <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 8009a72:	4651      	mov	r1, sl
 8009a74:	4620      	mov	r0, r4
 8009a76:	f7ff f8d1 	bl	8008c1c <tcp_abandon>
      return;
 8009a7a:	e661      	b.n	8009740 <tcp_input+0x170>
  if (flags & TCP_RST) {
 8009a7c:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 8009a7e:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 8009a80:	0751      	lsls	r1, r2, #29
 8009a82:	d537      	bpl.n	8009af4 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 8009a84:	7d21      	ldrb	r1, [r4, #20]
 8009a86:	2902      	cmp	r1, #2
 8009a88:	d11e      	bne.n	8009ac8 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 8009a8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009a8c:	69ab      	ldr	r3, [r5, #24]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d107      	bne.n	8009aa2 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 8009a92:	7cab      	ldrb	r3, [r5, #18]
 8009a94:	f043 0308 	orr.w	r3, r3, #8
 8009a98:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009a9a:	8b63      	ldrh	r3, [r4, #26]
 8009a9c:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 8009aa0:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8009aa2:	7cab      	ldrb	r3, [r5, #18]
 8009aa4:	0718      	lsls	r0, r3, #28
 8009aa6:	f140 8200 	bpl.w	8009eaa <tcp_input+0x8da>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009aaa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009aae:	b11b      	cbz	r3, 8009ab8 <tcp_input+0x4e8>
 8009ab0:	6920      	ldr	r0, [r4, #16]
 8009ab2:	f06f 010d 	mvn.w	r1, #13
 8009ab6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009ab8:	4824      	ldr	r0, [pc, #144]	; (8009b4c <tcp_input+0x57c>)
 8009aba:	4621      	mov	r1, r4
 8009abc:	f7fe fe9e 	bl	80087fc <tcp_pcb_remove>
        tcp_free(pcb);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7fe faa9 	bl	8008018 <tcp_free>
 8009ac6:	e6bd      	b.n	8009844 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 8009ac8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009aca:	6a2b      	ldr	r3, [r5, #32]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d007      	beq.n	8009ae0 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	d4e6      	bmi.n	8009aa2 <tcp_input+0x4d2>
 8009ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dce2      	bgt.n	8009aa2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8009adc:	8b63      	ldrh	r3, [r4, #26]
 8009ade:	e010      	b.n	8009b02 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	d1d6      	bne.n	8009a92 <tcp_input+0x4c2>
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	; (8009b50 <tcp_input+0x580>)
 8009ae6:	491b      	ldr	r1, [pc, #108]	; (8009b54 <tcp_input+0x584>)
 8009ae8:	481b      	ldr	r0, [pc, #108]	; (8009b58 <tcp_input+0x588>)
 8009aea:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009aee:	f001 fe6f 	bl	800b7d0 <iprintf>
 8009af2:	e7ce      	b.n	8009a92 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009af4:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 8009af6:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009af8:	d506      	bpl.n	8009b08 <tcp_input+0x538>
 8009afa:	7d22      	ldrb	r2, [r4, #20]
 8009afc:	3a02      	subs	r2, #2
 8009afe:	2a01      	cmp	r2, #1
 8009b00:	d902      	bls.n	8009b08 <tcp_input+0x538>
        tcp_ack_now(pcb);
 8009b02:	f043 0302 	orr.w	r3, r3, #2
 8009b06:	e7cb      	b.n	8009aa0 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009b08:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 8009b0a:	bf5e      	ittt	pl
 8009b0c:	4b0c      	ldrpl	r3, [pc, #48]	; (8009b40 <tcp_input+0x570>)
 8009b0e:	681b      	ldrpl	r3, [r3, #0]
 8009b10:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f7ff fa4d 	bl	8008fb8 <tcp_parseopt>
  switch (pcb->state) {
 8009b1e:	7d23      	ldrb	r3, [r4, #20]
 8009b20:	3b02      	subs	r3, #2
 8009b22:	2b07      	cmp	r3, #7
 8009b24:	d8bd      	bhi.n	8009aa2 <tcp_input+0x4d2>
 8009b26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b2a:	0019      	.short	0x0019
 8009b2c:	011400a7 	.word	0x011400a7
 8009b30:	01610119 	.word	0x01610119
 8009b34:	018d0114 	.word	0x018d0114
 8009b38:	01ab      	.short	0x01ab
 8009b3a:	bf00      	nop
 8009b3c:	2000936c 	.word	0x2000936c
 8009b40:	2000f824 	.word	0x2000f824
 8009b44:	2000f81c 	.word	0x2000f81c
 8009b48:	2000f829 	.word	0x2000f829
 8009b4c:	2000f820 	.word	0x2000f820
 8009b50:	0800f74f 	.word	0x0800f74f
 8009b54:	0800fa52 	.word	0x0800fa52
 8009b58:	0800d598 	.word	0x0800d598
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009b5c:	7f2b      	ldrb	r3, [r5, #28]
 8009b5e:	f003 0212 	and.w	r2, r3, #18
 8009b62:	2a12      	cmp	r2, #18
 8009b64:	d16b      	bne.n	8009c3e <tcp_input+0x66e>
          && (ackno == pcb->lastack + 1)) {
 8009b66:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009b68:	69a9      	ldr	r1, [r5, #24]
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d166      	bne.n	8009c3e <tcp_input+0x66e>
        pcb->rcv_nxt = seqno + 1;
 8009b70:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 8009b72:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 8009b74:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 8009b76:	68ea      	ldr	r2, [r5, #12]
        pcb->rcv_nxt = seqno + 1;
 8009b78:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009b7a:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b7c:	3b01      	subs	r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 8009b7e:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009b80:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009b82:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 8009b84:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b88:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b8c:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 8009b8e:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009b90:	4610      	mov	r0, r2
 8009b92:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 8009b94:	9205      	str	r2, [sp, #20]
 8009b96:	f7fc fc45 	bl	8006424 <ip4_route>
 8009b9a:	9a05      	ldr	r2, [sp, #20]
 8009b9c:	4601      	mov	r1, r0
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7ff f9ba 	bl	8008f18 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ba4:	f241 131c 	movw	r3, #4380	; 0x111c
 8009ba8:	0042      	lsls	r2, r0, #1
 8009baa:	429a      	cmp	r2, r3
 8009bac:	4616      	mov	r6, r2
 8009bae:	bf38      	it	cc
 8009bb0:	461e      	movcc	r6, r3
 8009bb2:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009bb6:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009bb8:	ea4f 0180 	mov.w	r1, r0, lsl #2
 8009bbc:	d933      	bls.n	8009c26 <tcp_input+0x656>
 8009bbe:	b28b      	uxth	r3, r1
 8009bc0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009bc4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8009bc8:	b933      	cbnz	r3, 8009bd8 <tcp_input+0x608>
 8009bca:	4b95      	ldr	r3, [pc, #596]	; (8009e20 <tcp_input+0x850>)
 8009bcc:	4995      	ldr	r1, [pc, #596]	; (8009e24 <tcp_input+0x854>)
 8009bce:	4896      	ldr	r0, [pc, #600]	; (8009e28 <tcp_input+0x858>)
 8009bd0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009bd4:	f001 fdfc 	bl	800b7d0 <iprintf>
        --pcb->snd_queuelen;
 8009bd8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8009bdc:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 8009bde:	3b01      	subs	r3, #1
 8009be0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 8009be4:	bb1e      	cbnz	r6, 8009c2e <tcp_input+0x65e>
          rseg = pcb->unsent;
 8009be6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009be8:	b936      	cbnz	r6, 8009bf8 <tcp_input+0x628>
 8009bea:	4b8d      	ldr	r3, [pc, #564]	; (8009e20 <tcp_input+0x850>)
 8009bec:	498f      	ldr	r1, [pc, #572]	; (8009e2c <tcp_input+0x85c>)
 8009bee:	488e      	ldr	r0, [pc, #568]	; (8009e28 <tcp_input+0x858>)
 8009bf0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009bf4:	f001 fdec 	bl	800b7d0 <iprintf>
          pcb->unsent = rseg->next;
 8009bf8:	6833      	ldr	r3, [r6, #0]
 8009bfa:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7fe fb51 	bl	80082a4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8009c02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c04:	b9b3      	cbnz	r3, 8009c34 <tcp_input+0x664>
          pcb->rtime = -1;
 8009c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c0a:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009c0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f43f af63 	beq.w	8009adc <tcp_input+0x50c>
 8009c16:	6920      	ldr	r0, [r4, #16]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8009c1e:	300d      	adds	r0, #13
 8009c20:	f47f af5c 	bne.w	8009adc <tcp_input+0x50c>
 8009c24:	e60e      	b.n	8009844 <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009c26:	429a      	cmp	r2, r3
 8009c28:	bf88      	it	hi
 8009c2a:	b293      	uxthhi	r3, r2
 8009c2c:	e7c8      	b.n	8009bc0 <tcp_input+0x5f0>
          pcb->unacked = rseg->next;
 8009c2e:	6833      	ldr	r3, [r6, #0]
 8009c30:	6723      	str	r3, [r4, #112]	; 0x70
 8009c32:	e7e3      	b.n	8009bfc <tcp_input+0x62c>
          pcb->rtime = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8009c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c3c:	e7e6      	b.n	8009c0c <tcp_input+0x63c>
      else if (flags & TCP_ACK) {
 8009c3e:	06df      	lsls	r7, r3, #27
 8009c40:	f57f af2f 	bpl.w	8009aa2 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c44:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c46:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 8009c48:	8818      	ldrh	r0, [r3, #0]
 8009c4a:	6a2a      	ldr	r2, [r5, #32]
 8009c4c:	9002      	str	r0, [sp, #8]
 8009c4e:	885b      	ldrh	r3, [r3, #2]
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	4b77      	ldr	r3, [pc, #476]	; (8009e30 <tcp_input+0x860>)
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	440a      	add	r2, r1
 8009c58:	3304      	adds	r3, #4
 8009c5a:	69a9      	ldr	r1, [r5, #24]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f001 f81f 	bl	800aca0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009c62:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	f63f af1b 	bhi.w	8009aa2 <tcp_input+0x4d2>
          pcb->rtime = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009c70:	4620      	mov	r0, r4
 8009c72:	f001 fa53 	bl	800b11c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 8009c76:	e714      	b.n	8009aa2 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 8009c78:	7f2b      	ldrb	r3, [r5, #28]
 8009c7a:	06de      	lsls	r6, r3, #27
 8009c7c:	d55c      	bpl.n	8009d38 <tcp_input+0x768>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c80:	69a9      	ldr	r1, [r5, #24]
 8009c82:	43db      	mvns	r3, r3
 8009c84:	42cb      	cmn	r3, r1
 8009c86:	d448      	bmi.n	8009d1a <tcp_input+0x74a>
 8009c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009c8a:	1acb      	subs	r3, r1, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dc44      	bgt.n	8009d1a <tcp_input+0x74a>
          pcb->state = ESTABLISHED;
 8009c90:	2304      	movs	r3, #4
 8009c92:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8009c94:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009c96:	b91b      	cbnz	r3, 8009ca0 <tcp_input+0x6d0>
            tcp_abort(pcb);
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff f83d 	bl	8008d18 <tcp_abort>
            goto aborted;
 8009c9e:	e5d1      	b.n	8009844 <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	b933      	cbnz	r3, 8009cb2 <tcp_input+0x6e2>
 8009ca4:	4b5e      	ldr	r3, [pc, #376]	; (8009e20 <tcp_input+0x850>)
 8009ca6:	4963      	ldr	r1, [pc, #396]	; (8009e34 <tcp_input+0x864>)
 8009ca8:	485f      	ldr	r0, [pc, #380]	; (8009e28 <tcp_input+0x858>)
 8009caa:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009cae:	f001 fd8f 	bl	800b7d0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009cb2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0ee      	beq.n	8009c98 <tcp_input+0x6c8>
 8009cba:	6920      	ldr	r0, [r4, #16]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4798      	blx	r3
          if (err != ERR_OK) {
 8009cc2:	b118      	cbz	r0, 8009ccc <tcp_input+0x6fc>
            if (err != ERR_ABRT) {
 8009cc4:	300d      	adds	r0, #13
 8009cc6:	f43f adbd 	beq.w	8009844 <tcp_input+0x274>
 8009cca:	e7e5      	b.n	8009c98 <tcp_input+0x6c8>
          tcp_receive(pcb);
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff fa49 	bl	8009164 <tcp_receive>
          if (recv_acked != 0) {
 8009cd2:	4a59      	ldr	r2, [pc, #356]	; (8009e38 <tcp_input+0x868>)
 8009cd4:	8a93      	ldrh	r3, [r2, #20]
 8009cd6:	b10b      	cbz	r3, 8009cdc <tcp_input+0x70c>
            recv_acked--;
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009cdc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009cde:	f241 131c 	movw	r3, #4380	; 0x111c
 8009ce2:	0041      	lsls	r1, r0, #1
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	bf38      	it	cc
 8009cea:	461f      	movcc	r7, r3
 8009cec:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 8009cf0:	ea4f 0680 	mov.w	r6, r0, lsl #2
 8009cf4:	d90d      	bls.n	8009d12 <tcp_input+0x742>
 8009cf6:	b2b3      	uxth	r3, r6
 8009cf8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8009cfc:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009cfe:	0699      	lsls	r1, r3, #26
 8009d00:	f57f aecf 	bpl.w	8009aa2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8009d04:	8b63      	ldrh	r3, [r4, #26]
 8009d06:	f043 0302 	orr.w	r3, r3, #2
 8009d0a:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8009d0c:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 8009d0e:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 8009d10:	e6c7      	b.n	8009aa2 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009d12:	4299      	cmp	r1, r3
 8009d14:	bf88      	it	hi
 8009d16:	b28b      	uxthhi	r3, r1
 8009d18:	e7ee      	b.n	8009cf8 <tcp_input+0x728>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d1a:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d1c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8009d1e:	881e      	ldrh	r6, [r3, #0]
 8009d20:	6a2a      	ldr	r2, [r5, #32]
 8009d22:	9602      	str	r6, [sp, #8]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	4b41      	ldr	r3, [pc, #260]	; (8009e30 <tcp_input+0x860>)
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	4402      	add	r2, r0
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 ffb5 	bl	800aca0 <tcp_rst>
    if (err != ERR_ABRT) {
 8009d36:	e6b4      	b.n	8009aa2 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009d38:	0798      	lsls	r0, r3, #30
 8009d3a:	f57f aeb2 	bpl.w	8009aa2 <tcp_input+0x4d2>
 8009d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d40:	6a2a      	ldr	r2, [r5, #32]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	4293      	cmp	r3, r2
 8009d46:	f47f aeac 	bne.w	8009aa2 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 ff32 	bl	800abb4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 8009d50:	e6a7      	b.n	8009aa2 <tcp_input+0x4d2>
      tcp_receive(pcb);
 8009d52:	4620      	mov	r0, r4
 8009d54:	f7ff fa06 	bl	8009164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009d58:	7cab      	ldrb	r3, [r5, #18]
 8009d5a:	e7d0      	b.n	8009cfe <tcp_input+0x72e>
      tcp_receive(pcb);
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff fa01 	bl	8009164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d62:	7cab      	ldrb	r3, [r5, #18]
 8009d64:	f013 0f20 	tst.w	r3, #32
 8009d68:	7f2b      	ldrb	r3, [r5, #28]
 8009d6a:	d031      	beq.n	8009dd0 <tcp_input+0x800>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d6c:	f013 0f10 	tst.w	r3, #16
 8009d70:	8b63      	ldrh	r3, [r4, #26]
 8009d72:	d028      	beq.n	8009dc6 <tcp_input+0x7f6>
 8009d74:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009d76:	69aa      	ldr	r2, [r5, #24]
 8009d78:	4291      	cmp	r1, r2
 8009d7a:	d124      	bne.n	8009dc6 <tcp_input+0x7f6>
 8009d7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009d7e:	bb12      	cbnz	r2, 8009dc6 <tcp_input+0x7f6>
          tcp_ack_now(pcb);
 8009d80:	f043 0302 	orr.w	r3, r3, #2
 8009d84:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8009d86:	4620      	mov	r0, r4
 8009d88:	f7fe fb16 	bl	80083b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009d8c:	f8d9 3000 	ldr.w	r3, [r9]
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d10a      	bne.n	8009daa <tcp_input+0x7da>
        TCP_RMV_ACTIVE(pcb);
 8009d94:	68e3      	ldr	r3, [r4, #12]
 8009d96:	f8c9 3000 	str.w	r3, [r9]
 8009d9a:	e008      	b.n	8009dae <tcp_input+0x7de>
          TCP_RMV_ACTIVE(pcb);
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	4294      	cmp	r4, r2
 8009da0:	d102      	bne.n	8009da8 <tcp_input+0x7d8>
        TCP_RMV_ACTIVE(pcb);
 8009da2:	68e2      	ldr	r2, [r4, #12]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e002      	b.n	8009dae <tcp_input+0x7de>
 8009da8:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f6      	bne.n	8009d9c <tcp_input+0x7cc>
        TCP_RMV_ACTIVE(pcb);
 8009dae:	4b23      	ldr	r3, [pc, #140]	; (8009e3c <tcp_input+0x86c>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009db4:	230a      	movs	r3, #10
 8009db6:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009db8:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <tcp_input+0x870>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	60e2      	str	r2, [r4, #12]
 8009dbe:	601c      	str	r4, [r3, #0]
 8009dc0:	f001 fabc 	bl	800b33c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 8009dc4:	e66d      	b.n	8009aa2 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 8009dc6:	f043 0302 	orr.w	r3, r3, #2
 8009dca:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8009dcc:	2308      	movs	r3, #8
 8009dce:	e79e      	b.n	8009d0e <tcp_input+0x73e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009dd0:	06da      	lsls	r2, r3, #27
 8009dd2:	f57f ae66 	bpl.w	8009aa2 <tcp_input+0x4d2>
 8009dd6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009dd8:	69ab      	ldr	r3, [r5, #24]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	f47f ae61 	bne.w	8009aa2 <tcp_input+0x4d2>
 8009de0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f47f ae5d 	bne.w	8009aa2 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 8009de8:	2306      	movs	r3, #6
 8009dea:	e790      	b.n	8009d0e <tcp_input+0x73e>
      tcp_receive(pcb);
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff f9b9 	bl	8009164 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009df2:	7cab      	ldrb	r3, [r5, #18]
 8009df4:	069b      	lsls	r3, r3, #26
 8009df6:	f57f ae54 	bpl.w	8009aa2 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8009dfa:	8b63      	ldrh	r3, [r4, #26]
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7fe fad8 	bl	80083b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e08:	f8d9 3000 	ldr.w	r3, [r9]
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d0c1      	beq.n	8009d94 <tcp_input+0x7c4>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0cc      	beq.n	8009dae <tcp_input+0x7de>
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	4294      	cmp	r4, r2
 8009e18:	d0c3      	beq.n	8009da2 <tcp_input+0x7d2>
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	e7f8      	b.n	8009e10 <tcp_input+0x840>
 8009e1e:	bf00      	nop
 8009e20:	0800f74f 	.word	0x0800f74f
 8009e24:	0800fa72 	.word	0x0800fa72
 8009e28:	0800d598 	.word	0x0800d598
 8009e2c:	0800fa88 	.word	0x0800fa88
 8009e30:	2000936c 	.word	0x2000936c
 8009e34:	0800fa9b 	.word	0x0800fa9b
 8009e38:	2000f834 	.word	0x2000f834
 8009e3c:	2000f829 	.word	0x2000f829
 8009e40:	2000f82c 	.word	0x2000f82c
      tcp_receive(pcb);
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff f98d 	bl	8009164 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e4a:	7f2b      	ldrb	r3, [r5, #28]
 8009e4c:	06df      	lsls	r7, r3, #27
 8009e4e:	f57f ae28 	bpl.w	8009aa2 <tcp_input+0x4d2>
 8009e52:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009e54:	69ab      	ldr	r3, [r5, #24]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	f47f ae23 	bne.w	8009aa2 <tcp_input+0x4d2>
 8009e5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f47f ae1f 	bne.w	8009aa2 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7fe faa7 	bl	80083b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e6a:	f8d9 3000 	ldr.w	r3, [r9]
 8009e6e:	429c      	cmp	r4, r3
 8009e70:	d090      	beq.n	8009d94 <tcp_input+0x7c4>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d09b      	beq.n	8009dae <tcp_input+0x7de>
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	4294      	cmp	r4, r2
 8009e7a:	d092      	beq.n	8009da2 <tcp_input+0x7d2>
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	e7f8      	b.n	8009e72 <tcp_input+0x8a2>
      tcp_receive(pcb);
 8009e80:	4620      	mov	r0, r4
 8009e82:	f7ff f96f 	bl	8009164 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e86:	7f2b      	ldrb	r3, [r5, #28]
 8009e88:	06de      	lsls	r6, r3, #27
 8009e8a:	f57f ae0a 	bpl.w	8009aa2 <tcp_input+0x4d2>
 8009e8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009e90:	69ab      	ldr	r3, [r5, #24]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	f47f ae05 	bne.w	8009aa2 <tcp_input+0x4d2>
 8009e98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f ae01 	bne.w	8009aa2 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 8009ea0:	7cab      	ldrb	r3, [r5, #18]
 8009ea2:	f043 0310 	orr.w	r3, r3, #16
 8009ea6:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 8009ea8:	e5fb      	b.n	8009aa2 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 8009eaa:	8aaa      	ldrh	r2, [r5, #20]
 8009eac:	b11a      	cbz	r2, 8009eb6 <tcp_input+0x8e6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009eae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009eb0:	b9db      	cbnz	r3, 8009eea <tcp_input+0x91a>
          recv_acked = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7ff f8c8 	bl	800904c <tcp_input_delayed_close>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f47f acc1 	bne.w	8009844 <tcp_input+0x274>
        if (recv_data != NULL) {
 8009ec2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009ec4:	b323      	cbz	r3, 8009f10 <tcp_input+0x940>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009ec6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009ec8:	b133      	cbz	r3, 8009ed8 <tcp_input+0x908>
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <tcp_input+0x9d8>)
 8009ecc:	4937      	ldr	r1, [pc, #220]	; (8009fac <tcp_input+0x9dc>)
 8009ece:	4838      	ldr	r0, [pc, #224]	; (8009fb0 <tcp_input+0x9e0>)
 8009ed0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009ed4:	f001 fc7c 	bl	800b7d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009ed8:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 8009eda:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 8009edc:	f013 0310 	ands.w	r3, r3, #16
 8009ee0:	d009      	beq.n	8009ef6 <tcp_input+0x926>
            pbuf_free(recv_data);
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7fd fdb4 	bl	8007a50 <pbuf_free>
 8009ee8:	e6d6      	b.n	8009c98 <tcp_input+0x6c8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009eea:	6920      	ldr	r0, [r4, #16]
 8009eec:	4621      	mov	r1, r4
 8009eee:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009ef0:	300d      	adds	r0, #13
 8009ef2:	d1de      	bne.n	8009eb2 <tcp_input+0x8e2>
 8009ef4:	e4a6      	b.n	8009844 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009ef6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8009efa:	b1f6      	cbz	r6, 8009f3a <tcp_input+0x96a>
 8009efc:	6920      	ldr	r0, [r4, #16]
 8009efe:	4621      	mov	r1, r4
 8009f00:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8009f02:	f110 0f0d 	cmn.w	r0, #13
 8009f06:	f43f ac9d 	beq.w	8009844 <tcp_input+0x274>
          if (err != ERR_OK) {
 8009f0a:	b108      	cbz	r0, 8009f10 <tcp_input+0x940>
            pcb->refused_data = recv_data;
 8009f0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009f0e:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8009f10:	7cab      	ldrb	r3, [r5, #18]
 8009f12:	0699      	lsls	r1, r3, #26
 8009f14:	d505      	bpl.n	8009f22 <tcp_input+0x952>
          if (pcb->refused_data != NULL) {
 8009f16:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009f18:	b1ab      	cbz	r3, 8009f46 <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f1a:	7b5a      	ldrb	r2, [r3, #13]
 8009f1c:	f042 0220 	orr.w	r2, r2, #32
 8009f20:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8009f22:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 8009f24:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009f26:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 8009f28:	f7ff f890 	bl	800904c <tcp_input_delayed_close>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f47f ac89 	bne.w	8009844 <tcp_input+0x274>
        tcp_output(pcb);
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 ff2c 	bl	800ad90 <tcp_output>
 8009f38:	e484      	b.n	8009844 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009f3a:	4633      	mov	r3, r6
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f7fe fd84 	bl	8008a4c <tcp_recv_null>
 8009f44:	e7dd      	b.n	8009f02 <tcp_input+0x932>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009f48:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f4c:	f640 3268 	movw	r2, #2920	; 0xb68
 8009f50:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8009f52:	bf1c      	itt	ne
 8009f54:	3301      	addne	r3, #1
 8009f56:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	d0e2      	beq.n	8009f22 <tcp_input+0x952>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6920      	ldr	r0, [r4, #16]
 8009f60:	461a      	mov	r2, r3
 8009f62:	4621      	mov	r1, r4
 8009f64:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009f66:	300d      	adds	r0, #13
 8009f68:	d1db      	bne.n	8009f22 <tcp_input+0x952>
 8009f6a:	e46b      	b.n	8009844 <tcp_input+0x274>
      if (prev != NULL) {
 8009f6c:	b11c      	cbz	r4, 8009f76 <tcp_input+0x9a6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009f72:	6007      	str	r7, [r0, #0]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009f74:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 8009f76:	7f2b      	ldrb	r3, [r5, #28]
 8009f78:	075c      	lsls	r4, r3, #29
 8009f7a:	f53f abe1 	bmi.w	8009740 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 8009f7e:	f013 0a10 	ands.w	sl, r3, #16
 8009f82:	f43f ad18 	beq.w	80099b6 <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f86:	880b      	ldrh	r3, [r1, #0]
 8009f88:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8009f8a:	6a2a      	ldr	r2, [r5, #32]
 8009f8c:	e9cd c301 	strd	ip, r3, [sp, #4]
 8009f90:	4b08      	ldr	r3, [pc, #32]	; (8009fb4 <tcp_input+0x9e4>)
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	4402      	add	r2, r0
 8009f96:	3304      	adds	r3, #4
 8009f98:	69a9      	ldr	r1, [r5, #24]
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	e4c0      	b.n	8009920 <tcp_input+0x350>
      if (prev != NULL) {
 8009f9e:	2f00      	cmp	r7, #0
 8009fa0:	f47f ac18 	bne.w	80097d4 <tcp_input+0x204>
 8009fa4:	e427      	b.n	80097f6 <tcp_input+0x226>
 8009fa6:	bf00      	nop
 8009fa8:	0800f74f 	.word	0x0800f74f
 8009fac:	0800fab9 	.word	0x0800fab9
 8009fb0:	0800d598 	.word	0x0800d598
 8009fb4:	2000936c 	.word	0x2000936c

08009fb8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009fb8:	4a02      	ldr	r2, [pc, #8]	; (8009fc4 <tcp_trigger_input_pcb_close+0xc>)
 8009fba:	7c93      	ldrb	r3, [r2, #18]
 8009fbc:	f043 0310 	orr.w	r3, r3, #16
 8009fc0:	7493      	strb	r3, [r2, #18]
}
 8009fc2:	4770      	bx	lr
 8009fc4:	2000f834 	.word	0x2000f834

08009fc8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009fc8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009fca:	4604      	mov	r4, r0
 8009fcc:	b930      	cbnz	r0, 8009fdc <tcp_output_segment_busy+0x14>
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <tcp_output_segment_busy+0x20>)
 8009fd0:	4906      	ldr	r1, [pc, #24]	; (8009fec <tcp_output_segment_busy+0x24>)
 8009fd2:	4807      	ldr	r0, [pc, #28]	; (8009ff0 <tcp_output_segment_busy+0x28>)
 8009fd4:	f240 529a 	movw	r2, #1434	; 0x59a
 8009fd8:	f001 fbfa 	bl	800b7d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009fdc:	6863      	ldr	r3, [r4, #4]
 8009fde:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8009fe0:	3801      	subs	r0, #1
 8009fe2:	bf18      	it	ne
 8009fe4:	2001      	movne	r0, #1
 8009fe6:	bd10      	pop	{r4, pc}
 8009fe8:	0800fad3 	.word	0x0800fad3
 8009fec:	0800fb4c 	.word	0x0800fb4c
 8009ff0:	0800d598 	.word	0x0800d598

08009ff4 <tcp_pbuf_prealloc>:
{
 8009ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff8:	9d08      	ldr	r5, [sp, #32]
 8009ffa:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 8009ffe:	4680      	mov	r8, r0
 800a000:	460c      	mov	r4, r1
 800a002:	4617      	mov	r7, r2
 800a004:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a006:	b92d      	cbnz	r5, 800a014 <tcp_pbuf_prealloc+0x20>
 800a008:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <tcp_pbuf_prealloc+0x88>)
 800a00a:	491d      	ldr	r1, [pc, #116]	; (800a080 <tcp_pbuf_prealloc+0x8c>)
 800a00c:	481d      	ldr	r0, [pc, #116]	; (800a084 <tcp_pbuf_prealloc+0x90>)
 800a00e:	22e9      	movs	r2, #233	; 0xe9
 800a010:	f001 fbde 	bl	800b7d0 <iprintf>
  if (length < max_length) {
 800a014:	42bc      	cmp	r4, r7
 800a016:	d22e      	bcs.n	800a076 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a018:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a01c:	079a      	lsls	r2, r3, #30
 800a01e:	d409      	bmi.n	800a034 <tcp_pbuf_prealloc+0x40>
 800a020:	8b6b      	ldrh	r3, [r5, #26]
 800a022:	065b      	lsls	r3, r3, #25
 800a024:	d427      	bmi.n	800a076 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800a026:	f1b9 0f00 	cmp.w	r9, #0
 800a02a:	d003      	beq.n	800a034 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800a02c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a02e:	b90b      	cbnz	r3, 800a034 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800a030:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a032:	b303      	cbz	r3, 800a076 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a034:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800a038:	f025 0103 	bic.w	r1, r5, #3
 800a03c:	42b9      	cmp	r1, r7
 800a03e:	460a      	mov	r2, r1
 800a040:	bf28      	it	cs
 800a042:	463a      	movcs	r2, r7
 800a044:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a046:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7fd fd68 	bl	8007b20 <pbuf_alloc>
  if (p == NULL) {
 800a050:	4605      	mov	r5, r0
 800a052:	b168      	cbz	r0, 800a070 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a054:	6803      	ldr	r3, [r0, #0]
 800a056:	b133      	cbz	r3, 800a066 <tcp_pbuf_prealloc+0x72>
 800a058:	4b08      	ldr	r3, [pc, #32]	; (800a07c <tcp_pbuf_prealloc+0x88>)
 800a05a:	490b      	ldr	r1, [pc, #44]	; (800a088 <tcp_pbuf_prealloc+0x94>)
 800a05c:	4809      	ldr	r0, [pc, #36]	; (800a084 <tcp_pbuf_prealloc+0x90>)
 800a05e:	f240 120b 	movw	r2, #267	; 0x10b
 800a062:	f001 fbb5 	bl	800b7d0 <iprintf>
  *oversize = p->len - length;
 800a066:	896b      	ldrh	r3, [r5, #10]
 800a068:	1b1b      	subs	r3, r3, r4
 800a06a:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800a06c:	812c      	strh	r4, [r5, #8]
 800a06e:	816c      	strh	r4, [r5, #10]
}
 800a070:	4628      	mov	r0, r5
 800a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a076:	4621      	mov	r1, r4
 800a078:	e7e5      	b.n	800a046 <tcp_pbuf_prealloc+0x52>
 800a07a:	bf00      	nop
 800a07c:	0800fad3 	.word	0x0800fad3
 800a080:	0800fb71 	.word	0x0800fb71
 800a084:	0800d598 	.word	0x0800d598
 800a088:	0800fb90 	.word	0x0800fb90

0800a08c <tcp_create_segment>:
{
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	460e      	mov	r6, r1
 800a092:	f89d a020 	ldrb.w	sl, [sp, #32]
 800a096:	4690      	mov	r8, r2
 800a098:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a09a:	4607      	mov	r7, r0
 800a09c:	b928      	cbnz	r0, 800a0aa <tcp_create_segment+0x1e>
 800a09e:	4b2f      	ldr	r3, [pc, #188]	; (800a15c <tcp_create_segment+0xd0>)
 800a0a0:	492f      	ldr	r1, [pc, #188]	; (800a160 <tcp_create_segment+0xd4>)
 800a0a2:	4830      	ldr	r0, [pc, #192]	; (800a164 <tcp_create_segment+0xd8>)
 800a0a4:	22a3      	movs	r2, #163	; 0xa3
 800a0a6:	f001 fb93 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a0aa:	b92e      	cbnz	r6, 800a0b8 <tcp_create_segment+0x2c>
 800a0ac:	4b2b      	ldr	r3, [pc, #172]	; (800a15c <tcp_create_segment+0xd0>)
 800a0ae:	492e      	ldr	r1, [pc, #184]	; (800a168 <tcp_create_segment+0xdc>)
 800a0b0:	482c      	ldr	r0, [pc, #176]	; (800a164 <tcp_create_segment+0xd8>)
 800a0b2:	22a4      	movs	r2, #164	; 0xa4
 800a0b4:	f001 fb8c 	bl	800b7d0 <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a0b8:	2002      	movs	r0, #2
 800a0ba:	f7fd fa41 	bl	8007540 <memp_malloc>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a0be:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800a0c2:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	b928      	cbnz	r0, 800a0d6 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7fd fcc0 	bl	8007a50 <pbuf_free>
}
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800a0d6:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800a0da:	2300      	movs	r3, #0
  seg->p = p;
 800a0dc:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a0e0:	8933      	ldrh	r3, [r6, #8]
 800a0e2:	42ab      	cmp	r3, r5
 800a0e4:	fa1f fa85 	uxth.w	sl, r5
 800a0e8:	d205      	bcs.n	800a0f6 <tcp_create_segment+0x6a>
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <tcp_create_segment+0xd0>)
 800a0ec:	491f      	ldr	r1, [pc, #124]	; (800a16c <tcp_create_segment+0xe0>)
 800a0ee:	481d      	ldr	r0, [pc, #116]	; (800a164 <tcp_create_segment+0xd8>)
 800a0f0:	22b0      	movs	r2, #176	; 0xb0
 800a0f2:	f001 fb6d 	bl	800b7d0 <iprintf>
  seg->len = p->tot_len - optlen;
 800a0f6:	8933      	ldrh	r3, [r6, #8]
 800a0f8:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a0fc:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 800a0fe:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a100:	2114      	movs	r1, #20
 800a102:	f7fd fc6d 	bl	80079e0 <pbuf_add_header>
 800a106:	4606      	mov	r6, r0
 800a108:	b120      	cbz	r0, 800a114 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7fe f8ca 	bl	80082a4 <tcp_seg_free>
    return NULL;
 800a110:	2400      	movs	r4, #0
 800a112:	e7dd      	b.n	800a0d0 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a114:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a116:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a118:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a11c:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a120:	f7fc fede 	bl	8006ee0 <lwip_htons>
 800a124:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a128:	8b38      	ldrh	r0, [r7, #24]
 800a12a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800a12e:	f7fc fed7 	bl	8006ee0 <lwip_htons>
 800a132:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a136:	4648      	mov	r0, r9
 800a138:	68e7      	ldr	r7, [r4, #12]
 800a13a:	f7fc fed4 	bl	8006ee6 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a13e:	02ad      	lsls	r5, r5, #10
 800a140:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a144:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a146:	ea45 0008 	orr.w	r0, r5, r8
 800a14a:	68e7      	ldr	r7, [r4, #12]
 800a14c:	f7fc fec8 	bl	8006ee0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800a150:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a152:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800a154:	749e      	strb	r6, [r3, #18]
 800a156:	74de      	strb	r6, [r3, #19]
  return seg;
 800a158:	e7ba      	b.n	800a0d0 <tcp_create_segment+0x44>
 800a15a:	bf00      	nop
 800a15c:	0800fad3 	.word	0x0800fad3
 800a160:	0800fba4 	.word	0x0800fba4
 800a164:	0800d598 	.word	0x0800d598
 800a168:	0800fbc4 	.word	0x0800fbc4
 800a16c:	0800fbe5 	.word	0x0800fbe5

0800a170 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a170:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a176:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a178:	4606      	mov	r6, r0
 800a17a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a17c:	2022      	movs	r0, #34	; 0x22
 800a17e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800a182:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a184:	f7fd fccc 	bl	8007b20 <pbuf_alloc>
  if (p != NULL) {
 800a188:	4605      	mov	r5, r0
 800a18a:	b348      	cbz	r0, 800a1e0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a18c:	8943      	ldrh	r3, [r0, #10]
 800a18e:	2b13      	cmp	r3, #19
 800a190:	d806      	bhi.n	800a1a0 <tcp_output_alloc_header_common.constprop.0+0x30>
 800a192:	4b15      	ldr	r3, [pc, #84]	; (800a1e8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800a194:	4915      	ldr	r1, [pc, #84]	; (800a1ec <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800a196:	4816      	ldr	r0, [pc, #88]	; (800a1f0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800a198:	f240 7223 	movw	r2, #1827	; 0x723
 800a19c:	f001 fb18 	bl	800b7d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800a1a0:	4640      	mov	r0, r8
    tcphdr = (struct tcp_hdr *)p->payload;
 800a1a2:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800a1a4:	f7fc fe9c 	bl	8006ee0 <lwip_htons>
 800a1a8:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a1aa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800a1ae:	f7fc fe97 	bl	8006ee0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800a1b2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800a1b4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7fc fe95 	bl	8006ee6 <lwip_htonl>
 800a1bc:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a1be:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a1c2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800a1c6:	f7fc fe8b 	bl	8006ee0 <lwip_htons>
 800a1ca:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a1cc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800a1d0:	f7fc fe86 	bl	8006ee0 <lwip_htons>
    tcphdr->chksum = 0;
 800a1d4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800a1d6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800a1d8:	7423      	strb	r3, [r4, #16]
 800a1da:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800a1dc:	74a3      	strb	r3, [r4, #18]
 800a1de:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800fad3 	.word	0x0800fad3
 800a1ec:	0800fbfa 	.word	0x0800fbfa
 800a1f0:	0800d598 	.word	0x0800d598

0800a1f4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800a1f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b930      	cbnz	r0, 800a20c <tcp_output_alloc_header.constprop.0+0x18>
 800a1fe:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <tcp_output_alloc_header.constprop.0+0x40>)
 800a200:	490d      	ldr	r1, [pc, #52]	; (800a238 <tcp_output_alloc_header.constprop.0+0x44>)
 800a202:	480e      	ldr	r0, [pc, #56]	; (800a23c <tcp_output_alloc_header.constprop.0+0x48>)
 800a204:	f240 7242 	movw	r2, #1858	; 0x742
 800a208:	f001 fae2 	bl	800b7d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a20c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a20e:	9302      	str	r3, [sp, #8]
 800a210:	2310      	movs	r3, #16
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	8b23      	ldrh	r3, [r4, #24]
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	8ae3      	ldrh	r3, [r4, #22]
 800a21a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a21c:	4632      	mov	r2, r6
 800a21e:	4629      	mov	r1, r5
 800a220:	f7ff ffa6 	bl	800a170 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a224:	b118      	cbz	r0, 800a22e <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a226:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a22a:	4413      	add	r3, r2
 800a22c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800a22e:	b004      	add	sp, #16
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	bf00      	nop
 800a234:	0800fad3 	.word	0x0800fad3
 800a238:	0800fc28 	.word	0x0800fc28
 800a23c:	0800d598 	.word	0x0800d598

0800a240 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a240:	b930      	cbnz	r0, 800a250 <tcp_output_fill_options.constprop.0+0x10>
 800a242:	4b04      	ldr	r3, [pc, #16]	; (800a254 <tcp_output_fill_options.constprop.0+0x14>)
 800a244:	4904      	ldr	r1, [pc, #16]	; (800a258 <tcp_output_fill_options.constprop.0+0x18>)
 800a246:	4805      	ldr	r0, [pc, #20]	; (800a25c <tcp_output_fill_options.constprop.0+0x1c>)
 800a248:	f240 7256 	movw	r2, #1878	; 0x756
 800a24c:	f001 bac0 	b.w	800b7d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	0800fad3 	.word	0x0800fad3
 800a258:	0800fc4d 	.word	0x0800fc4d
 800a25c:	0800d598 	.word	0x0800d598

0800a260 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a262:	4604      	mov	r4, r0
 800a264:	b085      	sub	sp, #20
 800a266:	4617      	mov	r7, r2
 800a268:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a26a:	460d      	mov	r5, r1
 800a26c:	b931      	cbnz	r1, 800a27c <tcp_output_control_segment+0x1c>
 800a26e:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <tcp_output_control_segment+0x64>)
 800a270:	4915      	ldr	r1, [pc, #84]	; (800a2c8 <tcp_output_control_segment+0x68>)
 800a272:	4816      	ldr	r0, [pc, #88]	; (800a2cc <tcp_output_control_segment+0x6c>)
 800a274:	f240 7287 	movw	r2, #1927	; 0x787
 800a278:	f001 faaa 	bl	800b7d0 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a27c:	b164      	cbz	r4, 800a298 <tcp_output_control_segment+0x38>
 800a27e:	7a20      	ldrb	r0, [r4, #8]
 800a280:	b150      	cbz	r0, 800a298 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800a282:	f7fd fb2b 	bl	80078dc <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800a286:	b968      	cbnz	r0, 800a2a4 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800a288:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a28c:	4628      	mov	r0, r5
 800a28e:	f7fd fbdf 	bl	8007a50 <pbuf_free>
  return err;
}
 800a292:	4620      	mov	r0, r4
 800a294:	b005      	add	sp, #20
 800a296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800a298:	4630      	mov	r0, r6
 800a29a:	f7fc f8c3 	bl	8006424 <ip4_route>
  if (netif == NULL) {
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0f2      	beq.n	800a288 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800a2a2:	b164      	cbz	r4, 800a2be <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800a2a4:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800a2a6:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a2a8:	9002      	str	r0, [sp, #8]
 800a2aa:	2206      	movs	r2, #6
 800a2ac:	e9cd 4200 	strd	r4, r2, [sp]
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f7fc fa0d 	bl	80066d4 <ip4_output_if>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	e7e6      	b.n	800a28c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800a2be:	23ff      	movs	r3, #255	; 0xff
 800a2c0:	e7f2      	b.n	800a2a8 <tcp_output_control_segment+0x48>
 800a2c2:	bf00      	nop
 800a2c4:	0800fad3 	.word	0x0800fad3
 800a2c8:	0800fc73 	.word	0x0800fc73
 800a2cc:	0800d598 	.word	0x0800d598

0800a2d0 <tcp_write>:
{
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	ed2d 8b02 	vpush	{d8}
 800a2d8:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2da:	4604      	mov	r4, r0
{
 800a2dc:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800a2de:	2300      	movs	r3, #0
{
 800a2e0:	9107      	str	r1, [sp, #28]
 800a2e2:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800a2e4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2e8:	b968      	cbnz	r0, 800a306 <tcp_write+0x36>
 800a2ea:	4baa      	ldr	r3, [pc, #680]	; (800a594 <tcp_write+0x2c4>)
 800a2ec:	49aa      	ldr	r1, [pc, #680]	; (800a598 <tcp_write+0x2c8>)
 800a2ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a2f2:	48aa      	ldr	r0, [pc, #680]	; (800a59c <tcp_write+0x2cc>)
 800a2f4:	f001 fa6c 	bl	800b7d0 <iprintf>
 800a2f8:	f06f 000f 	mvn.w	r0, #15
}
 800a2fc:	b00f      	add	sp, #60	; 0x3c
 800a2fe:	ecbd 8b02 	vpop	{d8}
 800a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a306:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a30a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800a30c:	085b      	lsrs	r3, r3, #1
 800a30e:	4293      	cmp	r3, r2
 800a310:	bf28      	it	cs
 800a312:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800a314:	2b00      	cmp	r3, #0
 800a316:	bf08      	it	eq
 800a318:	4613      	moveq	r3, r2
 800a31a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a31c:	9b07      	ldr	r3, [sp, #28]
 800a31e:	b923      	cbnz	r3, 800a32a <tcp_write+0x5a>
 800a320:	4b9c      	ldr	r3, [pc, #624]	; (800a594 <tcp_write+0x2c4>)
 800a322:	499f      	ldr	r1, [pc, #636]	; (800a5a0 <tcp_write+0x2d0>)
 800a324:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a328:	e7e3      	b.n	800a2f2 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800a32a:	7d03      	ldrb	r3, [r0, #20]
 800a32c:	2b07      	cmp	r3, #7
 800a32e:	d003      	beq.n	800a338 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800a330:	3b02      	subs	r3, #2
 800a332:	2b02      	cmp	r3, #2
 800a334:	f200 8259 	bhi.w	800a7ea <tcp_write+0x51a>
  } else if (len == 0) {
 800a338:	9b04      	ldr	r3, [sp, #16]
 800a33a:	b1db      	cbz	r3, 800a374 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800a33c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	4293      	cmp	r3, r2
 800a344:	d206      	bcs.n	800a354 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a346:	8b63      	ldrh	r3, [r4, #26]
 800a348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a34c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800a34e:	f04f 30ff 	mov.w	r0, #4294967295
 800a352:	e7d3      	b.n	800a2fc <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a354:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800a358:	2a07      	cmp	r2, #7
 800a35a:	d8f4      	bhi.n	800a346 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a35c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800a35e:	b302      	cbz	r2, 800a3a2 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a360:	b943      	cbnz	r3, 800a374 <tcp_write+0xa4>
 800a362:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a364:	b933      	cbnz	r3, 800a374 <tcp_write+0xa4>
 800a366:	4b8b      	ldr	r3, [pc, #556]	; (800a594 <tcp_write+0x2c4>)
 800a368:	498e      	ldr	r1, [pc, #568]	; (800a5a4 <tcp_write+0x2d4>)
 800a36a:	f240 1255 	movw	r2, #341	; 0x155
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a36e:	488b      	ldr	r0, [pc, #556]	; (800a59c <tcp_write+0x2cc>)
 800a370:	f001 fa2e 	bl	800b7d0 <iprintf>
  if (pcb->unsent != NULL) {
 800a374:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800a376:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a37a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800a37c:	b9de      	cbnz	r6, 800a3b6 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a37e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800a382:	2f00      	cmp	r7, #0
 800a384:	f000 81ba 	beq.w	800a6fc <tcp_write+0x42c>
 800a388:	4b82      	ldr	r3, [pc, #520]	; (800a594 <tcp_write+0x2c4>)
 800a38a:	4987      	ldr	r1, [pc, #540]	; (800a5a8 <tcp_write+0x2d8>)
 800a38c:	4883      	ldr	r0, [pc, #524]	; (800a59c <tcp_write+0x2cc>)
 800a38e:	f240 224a 	movw	r2, #586	; 0x24a
 800a392:	f001 fa1d 	bl	800b7d0 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a396:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800a398:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800a39a:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800a39c:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800a39e:	4637      	mov	r7, r6
 800a3a0:	e088      	b.n	800a4b4 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a3a2:	b913      	cbnz	r3, 800a3aa <tcp_write+0xda>
 800a3a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0e4      	beq.n	800a374 <tcp_write+0xa4>
 800a3aa:	4b7a      	ldr	r3, [pc, #488]	; (800a594 <tcp_write+0x2c4>)
 800a3ac:	497f      	ldr	r1, [pc, #508]	; (800a5ac <tcp_write+0x2dc>)
 800a3ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a3b2:	e7dc      	b.n	800a36e <tcp_write+0x9e>
 800a3b4:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a3b6:	f8d6 a000 	ldr.w	sl, [r6]
 800a3ba:	46b0      	mov	r8, r6
 800a3bc:	f1ba 0f00 	cmp.w	sl, #0
 800a3c0:	d1f8      	bne.n	800a3b4 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a3c2:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a3c4:	8933      	ldrh	r3, [r6, #8]
 800a3c6:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a3c8:	00ad      	lsls	r5, r5, #2
 800a3ca:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a3ce:	442b      	add	r3, r5
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	da06      	bge.n	800a3e2 <tcp_write+0x112>
 800a3d4:	4b6f      	ldr	r3, [pc, #444]	; (800a594 <tcp_write+0x2c4>)
 800a3d6:	4976      	ldr	r1, [pc, #472]	; (800a5b0 <tcp_write+0x2e0>)
 800a3d8:	4870      	ldr	r0, [pc, #448]	; (800a59c <tcp_write+0x2cc>)
 800a3da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a3de:	f001 f9f7 	bl	800b7d0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a3e2:	8937      	ldrh	r7, [r6, #8]
 800a3e4:	9b06      	ldr	r3, [sp, #24]
 800a3e6:	1bdf      	subs	r7, r3, r7
 800a3e8:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800a3ea:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 800a3ee:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a3f2:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	d066      	beq.n	800a4c6 <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a3f8:	42bd      	cmp	r5, r7
 800a3fa:	d906      	bls.n	800a40a <tcp_write+0x13a>
 800a3fc:	4b65      	ldr	r3, [pc, #404]	; (800a594 <tcp_write+0x2c4>)
 800a3fe:	496d      	ldr	r1, [pc, #436]	; (800a5b4 <tcp_write+0x2e4>)
 800a400:	4866      	ldr	r0, [pc, #408]	; (800a59c <tcp_write+0x2cc>)
 800a402:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a406:	f001 f9e3 	bl	800b7d0 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a40a:	9d04      	ldr	r5, [sp, #16]
 800a40c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800a410:	429d      	cmp	r5, r3
 800a412:	bf28      	it	cs
 800a414:	461d      	movcs	r5, r3
 800a416:	42bd      	cmp	r5, r7
 800a418:	bf28      	it	cs
 800a41a:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800a41c:	1b5b      	subs	r3, r3, r5
 800a41e:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800a420:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800a422:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 800a426:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a428:	b153      	cbz	r3, 800a440 <tcp_write+0x170>
 800a42a:	9b04      	ldr	r3, [sp, #16]
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	f000 816a 	beq.w	800a706 <tcp_write+0x436>
 800a432:	4b58      	ldr	r3, [pc, #352]	; (800a594 <tcp_write+0x2c4>)
 800a434:	4960      	ldr	r1, [pc, #384]	; (800a5b8 <tcp_write+0x2e8>)
 800a436:	4859      	ldr	r0, [pc, #356]	; (800a59c <tcp_write+0x2cc>)
 800a438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a43c:	f001 f9c8 	bl	800b7d0 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a440:	9b04      	ldr	r3, [sp, #16]
 800a442:	429d      	cmp	r5, r3
 800a444:	f080 815f 	bcs.w	800a706 <tcp_write+0x436>
 800a448:	2f00      	cmp	r7, #0
 800a44a:	f000 8154 	beq.w	800a6f6 <tcp_write+0x426>
 800a44e:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800a452:	f1b9 0f00 	cmp.w	r9, #0
 800a456:	f000 814f 	beq.w	800a6f8 <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a45a:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a45e:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a460:	45b9      	cmp	r9, r7
 800a462:	bfa8      	it	ge
 800a464:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a466:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a468:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a46c:	d52d      	bpl.n	800a4ca <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a46e:	2301      	movs	r3, #1
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	463a      	mov	r2, r7
 800a476:	e9cd 4300 	strd	r4, r3, [sp]
 800a47a:	4631      	mov	r1, r6
 800a47c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800a480:	2000      	movs	r0, #0
 800a482:	f7ff fdb7 	bl	8009ff4 <tcp_pbuf_prealloc>
 800a486:	4683      	mov	fp, r0
 800a488:	2800      	cmp	r0, #0
 800a48a:	f000 81ab 	beq.w	800a7e4 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a48e:	9b07      	ldr	r3, [sp, #28]
 800a490:	6840      	ldr	r0, [r0, #4]
 800a492:	4632      	mov	r2, r6
 800a494:	1959      	adds	r1, r3, r5
 800a496:	f001 f96b 	bl	800b770 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800a49a:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800a49c:	f7fd fc14 	bl	8007cc8 <pbuf_clen>
 800a4a0:	9b05      	ldr	r3, [sp, #20]
 800a4a2:	4403      	add	r3, r0
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	9305      	str	r3, [sp, #20]
  u16_t extendlen = 0;
 800a4a8:	f04f 0900 	mov.w	r9, #0
      pos += seglen;
 800a4ac:	19af      	adds	r7, r5, r6
 800a4ae:	b2bf      	uxth	r7, r7
 800a4b0:	4646      	mov	r6, r8
 800a4b2:	46da      	mov	sl, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a4b4:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800a4b6:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a4ba:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800a4be:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c4:	e0e6      	b.n	800a694 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a4c6:	462e      	mov	r6, r5
 800a4c8:	e7ba      	b.n	800a440 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a4ca:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800a4ce:	465a      	mov	r2, fp
 800a4d0:	f8db b000 	ldr.w	fp, [fp]
 800a4d4:	f1bb 0f00 	cmp.w	fp, #0
 800a4d8:	d1f9      	bne.n	800a4ce <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a4da:	7b13      	ldrb	r3, [r2, #12]
 800a4dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800a4e0:	d10f      	bne.n	800a502 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a4e2:	8951      	ldrh	r1, [r2, #10]
 800a4e4:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a4e6:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a4e8:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d109      	bne.n	800a502 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a4ee:	b135      	cbz	r5, 800a4fe <tcp_write+0x22e>
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <tcp_write+0x2c4>)
 800a4f2:	4932      	ldr	r1, [pc, #200]	; (800a5bc <tcp_write+0x2ec>)
 800a4f4:	4829      	ldr	r0, [pc, #164]	; (800a59c <tcp_write+0x2cc>)
 800a4f6:	f240 2231 	movw	r2, #561	; 0x231
 800a4fa:	f001 f969 	bl	800b7d0 <iprintf>
          extendlen = seglen;
 800a4fe:	46b1      	mov	r9, r6
 800a500:	e7d4      	b.n	800a4ac <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a502:	2201      	movs	r2, #1
 800a504:	4631      	mov	r1, r6
 800a506:	2000      	movs	r0, #0
 800a508:	f7fd fb0a 	bl	8007b20 <pbuf_alloc>
 800a50c:	4683      	mov	fp, r0
 800a50e:	2800      	cmp	r0, #0
 800a510:	f000 8168 	beq.w	800a7e4 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	442b      	add	r3, r5
 800a518:	6043      	str	r3, [r0, #4]
 800a51a:	e7bf      	b.n	800a49c <tcp_write+0x1cc>
    u16_t left = len - pos;
 800a51c:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a51e:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800a520:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800a522:	b29b      	uxth	r3, r3
 800a524:	4293      	cmp	r3, r2
 800a526:	bf28      	it	cs
 800a528:	4613      	movcs	r3, r2
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a532:	2b00      	cmp	r3, #0
 800a534:	d046      	beq.n	800a5c4 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a536:	fabb f38b 	clz	r3, fp
 800a53a:	095b      	lsrs	r3, r3, #5
 800a53c:	9302      	str	r3, [sp, #8]
 800a53e:	9b08      	ldr	r3, [sp, #32]
 800a540:	ee18 1a10 	vmov	r1, s16
 800a544:	e9cd 4300 	strd	r4, r3, [sp]
 800a548:	2036      	movs	r0, #54	; 0x36
 800a54a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800a54e:	f7ff fd51 	bl	8009ff4 <tcp_pbuf_prealloc>
 800a552:	4606      	mov	r6, r0
 800a554:	2800      	cmp	r0, #0
 800a556:	d056      	beq.n	800a606 <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a558:	8943      	ldrh	r3, [r0, #10]
 800a55a:	ee18 2a10 	vmov	r2, s16
 800a55e:	4293      	cmp	r3, r2
 800a560:	d206      	bcs.n	800a570 <tcp_write+0x2a0>
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <tcp_write+0x2c4>)
 800a564:	4916      	ldr	r1, [pc, #88]	; (800a5c0 <tcp_write+0x2f0>)
 800a566:	480d      	ldr	r0, [pc, #52]	; (800a59c <tcp_write+0x2cc>)
 800a568:	f240 2266 	movw	r2, #614	; 0x266
 800a56c:	f001 f930 	bl	800b7d0 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a570:	9b07      	ldr	r3, [sp, #28]
 800a572:	6870      	ldr	r0, [r6, #4]
 800a574:	ee18 2a10 	vmov	r2, s16
 800a578:	19d9      	adds	r1, r3, r7
 800a57a:	f001 f8f9 	bl	800b770 <memcpy>
    queuelen += pbuf_clen(p);
 800a57e:	4630      	mov	r0, r6
 800a580:	f7fd fba2 	bl	8007cc8 <pbuf_clen>
 800a584:	9b05      	ldr	r3, [sp, #20]
 800a586:	4403      	add	r3, r0
 800a588:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a58a:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800a58c:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a58e:	d963      	bls.n	800a658 <tcp_write+0x388>
      pbuf_free(p);
 800a590:	4630      	mov	r0, r6
 800a592:	e036      	b.n	800a602 <tcp_write+0x332>
 800a594:	0800fad3 	.word	0x0800fad3
 800a598:	0800fc9c 	.word	0x0800fc9c
 800a59c:	0800d598 	.word	0x0800d598
 800a5a0:	0800fcb3 	.word	0x0800fcb3
 800a5a4:	0800fce4 	.word	0x0800fce4
 800a5a8:	0800fdce 	.word	0x0800fdce
 800a5ac:	0800fd1e 	.word	0x0800fd1e
 800a5b0:	0800fd50 	.word	0x0800fd50
 800a5b4:	0800fd67 	.word	0x0800fd67
 800a5b8:	0800fd87 	.word	0x0800fd87
 800a5bc:	0800fda5 	.word	0x0800fda5
 800a5c0:	0800fdfd 	.word	0x0800fdfd
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a5c4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800a5c8:	b133      	cbz	r3, 800a5d8 <tcp_write+0x308>
 800a5ca:	4b89      	ldr	r3, [pc, #548]	; (800a7f0 <tcp_write+0x520>)
 800a5cc:	4989      	ldr	r1, [pc, #548]	; (800a7f4 <tcp_write+0x524>)
 800a5ce:	488a      	ldr	r0, [pc, #552]	; (800a7f8 <tcp_write+0x528>)
 800a5d0:	f240 2271 	movw	r2, #625	; 0x271
 800a5d4:	f001 f8fc 	bl	800b7d0 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a5d8:	ee18 1a10 	vmov	r1, s16
 800a5dc:	2201      	movs	r2, #1
 800a5de:	2036      	movs	r0, #54	; 0x36
 800a5e0:	f7fd fa9e 	bl	8007b20 <pbuf_alloc>
 800a5e4:	b178      	cbz	r0, 800a606 <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a5e6:	9a07      	ldr	r2, [sp, #28]
 800a5e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5ea:	443a      	add	r2, r7
 800a5ec:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a5f4:	2036      	movs	r0, #54	; 0x36
 800a5f6:	f7fd fa93 	bl	8007b20 <pbuf_alloc>
 800a5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	bb38      	cbnz	r0, 800a650 <tcp_write+0x380>
        pbuf_free(p2);
 800a600:	4618      	mov	r0, r3
      pbuf_free(p);
 800a602:	f7fd fa25 	bl	8007a50 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a606:	8b63      	ldrh	r3, [r4, #26]
 800a608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60c:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800a60e:	f1ba 0f00 	cmp.w	sl, #0
 800a612:	d002      	beq.n	800a61a <tcp_write+0x34a>
    pbuf_free(concat_p);
 800a614:	4650      	mov	r0, sl
 800a616:	f7fd fa1b 	bl	8007a50 <pbuf_free>
  if (queue != NULL) {
 800a61a:	f1bb 0f00 	cmp.w	fp, #0
 800a61e:	d002      	beq.n	800a626 <tcp_write+0x356>
    tcp_segs_free(queue);
 800a620:	4658      	mov	r0, fp
 800a622:	f7fd fe4d 	bl	80082c0 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800a626:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f43f ae8f 	beq.w	800a34e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a630:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a632:	2b00      	cmp	r3, #0
 800a634:	f47f ae8b 	bne.w	800a34e <tcp_write+0x7e>
 800a638:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f47f ae87 	bne.w	800a34e <tcp_write+0x7e>
 800a640:	4b6b      	ldr	r3, [pc, #428]	; (800a7f0 <tcp_write+0x520>)
 800a642:	496e      	ldr	r1, [pc, #440]	; (800a7fc <tcp_write+0x52c>)
 800a644:	486c      	ldr	r0, [pc, #432]	; (800a7f8 <tcp_write+0x528>)
 800a646:	f240 3227 	movw	r2, #807	; 0x327
 800a64a:	f001 f8c1 	bl	800b7d0 <iprintf>
 800a64e:	e67e      	b.n	800a34e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800a650:	4619      	mov	r1, r3
 800a652:	f7fd fb5d 	bl	8007d10 <pbuf_cat>
 800a656:	e792      	b.n	800a57e <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a65a:	2200      	movs	r2, #0
 800a65c:	4631      	mov	r1, r6
 800a65e:	9200      	str	r2, [sp, #0]
 800a660:	443b      	add	r3, r7
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff fd12 	bl	800a08c <tcp_create_segment>
 800a668:	4606      	mov	r6, r0
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0cb      	beq.n	800a606 <tcp_write+0x336>
    if (queue == NULL) {
 800a66e:	f1bb 0f00 	cmp.w	fp, #0
 800a672:	d03e      	beq.n	800a6f2 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a676:	b933      	cbnz	r3, 800a686 <tcp_write+0x3b6>
 800a678:	4b5d      	ldr	r3, [pc, #372]	; (800a7f0 <tcp_write+0x520>)
 800a67a:	4961      	ldr	r1, [pc, #388]	; (800a800 <tcp_write+0x530>)
 800a67c:	485e      	ldr	r0, [pc, #376]	; (800a7f8 <tcp_write+0x528>)
 800a67e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a682:	f001 f8a5 	bl	800b7d0 <iprintf>
      prev_seg->next = seg;
 800a686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a688:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800a68a:	ee18 3a10 	vmov	r3, s16
 800a68e:	441f      	add	r7, r3
 800a690:	b2bf      	uxth	r7, r7
 800a692:	9609      	str	r6, [sp, #36]	; 0x24
  while (pos < len) {
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	429f      	cmp	r7, r3
 800a698:	f4ff af40 	bcc.w	800a51c <tcp_write+0x24c>
 800a69c:	4657      	mov	r7, sl
 800a69e:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800a6a0:	b14d      	cbz	r5, 800a6b6 <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800a6a2:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800a6a6:	f1bb 0f00 	cmp.w	fp, #0
 800a6aa:	d12f      	bne.n	800a70c <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800a6ac:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a6b0:	441d      	add	r5, r3
 800a6b2:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800a6b6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800a6ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800a6be:	2f00      	cmp	r7, #0
 800a6c0:	d03d      	beq.n	800a73e <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	d106      	bne.n	800a6d6 <tcp_write+0x406>
 800a6c8:	4b49      	ldr	r3, [pc, #292]	; (800a7f0 <tcp_write+0x520>)
 800a6ca:	494e      	ldr	r1, [pc, #312]	; (800a804 <tcp_write+0x534>)
 800a6cc:	484a      	ldr	r0, [pc, #296]	; (800a7f8 <tcp_write+0x528>)
 800a6ce:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a6d2:	f001 f87d 	bl	800b7d0 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800a6d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7fd fb18 	bl	8007d10 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a6e0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a6e4:	893a      	ldrh	r2, [r7, #8]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800a6ec:	f8c8 a000 	str.w	sl, [r8]
 800a6f0:	e04d      	b.n	800a78e <tcp_write+0x4be>
 800a6f2:	4683      	mov	fp, r0
 800a6f4:	e7c9      	b.n	800a68a <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800a6f6:	46b9      	mov	r9, r7
 800a6f8:	462f      	mov	r7, r5
 800a6fa:	e6db      	b.n	800a4b4 <tcp_write+0x1e4>
 800a6fc:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800a6fe:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a700:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800a702:	46ba      	mov	sl, r7
 800a704:	e6d6      	b.n	800a4b4 <tcp_write+0x1e4>
 800a706:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800a708:	46b9      	mov	r9, r7
 800a70a:	e7c9      	b.n	800a6a0 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800a70c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800a710:	442b      	add	r3, r5
 800a712:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800a716:	f8db 3000 	ldr.w	r3, [fp]
 800a71a:	b96b      	cbnz	r3, 800a738 <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a71c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a720:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800a724:	9907      	ldr	r1, [sp, #28]
 800a726:	4418      	add	r0, r3
 800a728:	462a      	mov	r2, r5
 800a72a:	f001 f821 	bl	800b770 <memcpy>
        p->len += oversize_used;
 800a72e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800a732:	442b      	add	r3, r5
 800a734:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a738:	f8db b000 	ldr.w	fp, [fp]
 800a73c:	e7b3      	b.n	800a6a6 <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800a73e:	f1b9 0f00 	cmp.w	r9, #0
 800a742:	d01f      	beq.n	800a784 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a744:	f1b8 0f00 	cmp.w	r8, #0
 800a748:	d002      	beq.n	800a750 <tcp_write+0x480>
 800a74a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a74e:	b933      	cbnz	r3, 800a75e <tcp_write+0x48e>
 800a750:	4b27      	ldr	r3, [pc, #156]	; (800a7f0 <tcp_write+0x520>)
 800a752:	492d      	ldr	r1, [pc, #180]	; (800a808 <tcp_write+0x538>)
 800a754:	4828      	ldr	r0, [pc, #160]	; (800a7f8 <tcp_write+0x528>)
 800a756:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a75a:	f001 f839 	bl	800b7d0 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a75e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800a762:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a764:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800a766:	444a      	add	r2, r9
 800a768:	b292      	uxth	r2, r2
 800a76a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a76c:	b941      	cbnz	r1, 800a780 <tcp_write+0x4b0>
    p->len += extendlen;
 800a76e:	895a      	ldrh	r2, [r3, #10]
 800a770:	444a      	add	r2, r9
 800a772:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a774:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800a778:	4499      	add	r9, r3
 800a77a:	f8a8 9008 	strh.w	r9, [r8, #8]
 800a77e:	e7b5      	b.n	800a6ec <tcp_write+0x41c>
      p->tot_len += extendlen;
 800a780:	460b      	mov	r3, r1
 800a782:	e7ee      	b.n	800a762 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800a784:	f1b8 0f00 	cmp.w	r8, #0
 800a788:	d1b0      	bne.n	800a6ec <tcp_write+0x41c>
    pcb->unsent = queue;
 800a78a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800a78e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a790:	9a04      	ldr	r2, [sp, #16]
 800a792:	4413      	add	r3, r2
 800a794:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a796:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800a79e:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800a7a0:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a7a4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800a7a8:	b153      	cbz	r3, 800a7c0 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a7aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7ac:	b943      	cbnz	r3, 800a7c0 <tcp_write+0x4f0>
 800a7ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a7b0:	b933      	cbnz	r3, 800a7c0 <tcp_write+0x4f0>
 800a7b2:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <tcp_write+0x520>)
 800a7b4:	4911      	ldr	r1, [pc, #68]	; (800a7fc <tcp_write+0x52c>)
 800a7b6:	4810      	ldr	r0, [pc, #64]	; (800a7f8 <tcp_write+0x528>)
 800a7b8:	f240 3212 	movw	r2, #786	; 0x312
 800a7bc:	f001 f808 	bl	800b7d0 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a7c0:	b176      	cbz	r6, 800a7e0 <tcp_write+0x510>
 800a7c2:	68f0      	ldr	r0, [r6, #12]
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f43f ad99 	beq.w	800a2fc <tcp_write+0x2c>
 800a7ca:	9b08      	ldr	r3, [sp, #32]
 800a7cc:	f013 0402 	ands.w	r4, r3, #2
 800a7d0:	d106      	bne.n	800a7e0 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a7d2:	8985      	ldrh	r5, [r0, #12]
 800a7d4:	2008      	movs	r0, #8
 800a7d6:	f7fc fb83 	bl	8006ee0 <lwip_htons>
 800a7da:	68f3      	ldr	r3, [r6, #12]
 800a7dc:	4328      	orrs	r0, r5
 800a7de:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e58b      	b.n	800a2fc <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a7e4:	f04f 0b00 	mov.w	fp, #0
 800a7e8:	e70d      	b.n	800a606 <tcp_write+0x336>
    return ERR_CONN;
 800a7ea:	f06f 000a 	mvn.w	r0, #10
 800a7ee:	e585      	b.n	800a2fc <tcp_write+0x2c>
 800a7f0:	0800fad3 	.word	0x0800fad3
 800a7f4:	0800fe3b 	.word	0x0800fe3b
 800a7f8:	0800d598 	.word	0x0800d598
 800a7fc:	0800fec7 	.word	0x0800fec7
 800a800:	0800fe49 	.word	0x0800fe49
 800a804:	0800fe5a 	.word	0x0800fe5a
 800a808:	0800fe92 	.word	0x0800fe92

0800a80c <tcp_split_unsent_seg>:
{
 800a80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a812:	4606      	mov	r6, r0
 800a814:	b930      	cbnz	r0, 800a824 <tcp_split_unsent_seg+0x18>
 800a816:	4b5d      	ldr	r3, [pc, #372]	; (800a98c <tcp_split_unsent_seg+0x180>)
 800a818:	495d      	ldr	r1, [pc, #372]	; (800a990 <tcp_split_unsent_seg+0x184>)
 800a81a:	485e      	ldr	r0, [pc, #376]	; (800a994 <tcp_split_unsent_seg+0x188>)
 800a81c:	f240 324b 	movw	r2, #843	; 0x34b
 800a820:	f000 ffd6 	bl	800b7d0 <iprintf>
  useg = pcb->unsent;
 800a824:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800a826:	b914      	cbnz	r4, 800a82e <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e009      	b.n	800a842 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800a82e:	b95d      	cbnz	r5, 800a848 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a830:	4b56      	ldr	r3, [pc, #344]	; (800a98c <tcp_split_unsent_seg+0x180>)
 800a832:	4959      	ldr	r1, [pc, #356]	; (800a998 <tcp_split_unsent_seg+0x18c>)
 800a834:	4857      	ldr	r0, [pc, #348]	; (800a994 <tcp_split_unsent_seg+0x188>)
 800a836:	f240 3253 	movw	r2, #851	; 0x353
 800a83a:	f000 ffc9 	bl	800b7d0 <iprintf>
    return ERR_VAL;
 800a83e:	f06f 0005 	mvn.w	r0, #5
}
 800a842:	b003      	add	sp, #12
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800a848:	8923      	ldrh	r3, [r4, #8]
 800a84a:	42ab      	cmp	r3, r5
 800a84c:	d801      	bhi.n	800a852 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800a84e:	2000      	movs	r0, #0
 800a850:	e7f7      	b.n	800a842 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a852:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800a854:	42ab      	cmp	r3, r5
 800a856:	d20f      	bcs.n	800a878 <tcp_split_unsent_seg+0x6c>
 800a858:	4b4c      	ldr	r3, [pc, #304]	; (800a98c <tcp_split_unsent_seg+0x180>)
 800a85a:	4950      	ldr	r1, [pc, #320]	; (800a99c <tcp_split_unsent_seg+0x190>)
 800a85c:	484d      	ldr	r0, [pc, #308]	; (800a994 <tcp_split_unsent_seg+0x188>)
 800a85e:	f240 325b 	movw	r2, #859	; 0x35b
 800a862:	f000 ffb5 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a866:	8923      	ldrh	r3, [r4, #8]
 800a868:	b933      	cbnz	r3, 800a878 <tcp_split_unsent_seg+0x6c>
 800a86a:	4b48      	ldr	r3, [pc, #288]	; (800a98c <tcp_split_unsent_seg+0x180>)
 800a86c:	494c      	ldr	r1, [pc, #304]	; (800a9a0 <tcp_split_unsent_seg+0x194>)
 800a86e:	4849      	ldr	r0, [pc, #292]	; (800a994 <tcp_split_unsent_seg+0x188>)
 800a870:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a874:	f000 ffac 	bl	800b7d0 <iprintf>
  optflags = useg->flags;
 800a878:	f894 b00a 	ldrb.w	fp, [r4, #10]
  remainder = useg->len - split;
 800a87c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a880:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800a884:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a888:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800a88c:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a890:	fa17 f181 	uxtah	r1, r7, r1
 800a894:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a898:	b289      	uxth	r1, r1
 800a89a:	2036      	movs	r0, #54	; 0x36
 800a89c:	f7fd f940 	bl	8007b20 <pbuf_alloc>
  if (p == NULL) {
 800a8a0:	4681      	mov	r9, r0
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d0c0      	beq.n	800a828 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800a8a6:	6860      	ldr	r0, [r4, #4]
 800a8a8:	8922      	ldrh	r2, [r4, #8]
 800a8aa:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a8ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	4642      	mov	r2, r8
 800a8b8:	4439      	add	r1, r7
 800a8ba:	f7fd fae5 	bl	8007e88 <pbuf_copy_partial>
 800a8be:	4540      	cmp	r0, r8
 800a8c0:	d15f      	bne.n	800a982 <tcp_split_unsent_seg+0x176>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a8c2:	68e3      	ldr	r3, [r4, #12]
 800a8c4:	8998      	ldrh	r0, [r3, #12]
 800a8c6:	f7fc fb0b 	bl	8006ee0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800a8ca:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a8ce:	b2c7      	uxtb	r7, r0
 800a8d0:	bf0e      	itee	eq
 800a8d2:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800a8d6:	f007 0737 	andne.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800a8da:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800a8de:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a8e0:	68e3      	ldr	r3, [r4, #12]
 800a8e2:	6858      	ldr	r0, [r3, #4]
    remainder_flags |= TCP_FIN;
 800a8e4:	bf44      	itt	mi
 800a8e6:	f048 0801 	orrmi.w	r8, r8, #1
    split_flags &= ~TCP_FIN;
 800a8ea:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a8ee:	f7fc fafa 	bl	8006ee6 <lwip_htonl>
 800a8f2:	4642      	mov	r2, r8
 800a8f4:	182b      	adds	r3, r5, r0
 800a8f6:	f8cd b000 	str.w	fp, [sp]
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fbc5 	bl	800a08c <tcp_create_segment>
  if (seg == NULL) {
 800a902:	4680      	mov	r8, r0
 800a904:	2800      	cmp	r0, #0
 800a906:	d03c      	beq.n	800a982 <tcp_split_unsent_seg+0x176>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a908:	6860      	ldr	r0, [r4, #4]
 800a90a:	f7fd f9dd 	bl	8007cc8 <pbuf_clen>
 800a90e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a912:	1a18      	subs	r0, r3, r0
 800a914:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a918:	6860      	ldr	r0, [r4, #4]
 800a91a:	8901      	ldrh	r1, [r0, #8]
 800a91c:	eba5 050a 	sub.w	r5, r5, sl
 800a920:	fa11 f185 	uxtah	r1, r1, r5
 800a924:	b289      	uxth	r1, r1
 800a926:	f7fd f977 	bl	8007c18 <pbuf_realloc>
  useg->len -= remainder;
 800a92a:	8923      	ldrh	r3, [r4, #8]
 800a92c:	fa1f f985 	uxth.w	r9, r5
 800a930:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a932:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800a934:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a938:	4638      	mov	r0, r7
 800a93a:	899d      	ldrh	r5, [r3, #12]
 800a93c:	f7fc fad0 	bl	8006ee0 <lwip_htons>
 800a940:	68e3      	ldr	r3, [r4, #12]
 800a942:	4328      	orrs	r0, r5
 800a944:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a946:	6860      	ldr	r0, [r4, #4]
 800a948:	f7fd f9be 	bl	8007cc8 <pbuf_clen>
 800a94c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a950:	4418      	add	r0, r3
 800a952:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a956:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a95a:	f7fd f9b5 	bl	8007cc8 <pbuf_clen>
 800a95e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a962:	4418      	add	r0, r3
  seg->next = useg->next;
 800a964:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a966:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800a96a:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800a96e:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800a972:	f8d8 0000 	ldr.w	r0, [r8]
 800a976:	2800      	cmp	r0, #0
 800a978:	f47f af69 	bne.w	800a84e <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800a97c:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800a980:	e75f      	b.n	800a842 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800a982:	4648      	mov	r0, r9
 800a984:	f7fd f864 	bl	8007a50 <pbuf_free>
 800a988:	e74e      	b.n	800a828 <tcp_split_unsent_seg+0x1c>
 800a98a:	bf00      	nop
 800a98c:	0800fad3 	.word	0x0800fad3
 800a990:	0800fee5 	.word	0x0800fee5
 800a994:	0800d598 	.word	0x0800d598
 800a998:	0800ff07 	.word	0x0800ff07
 800a99c:	0800ff29 	.word	0x0800ff29
 800a9a0:	0800ff36 	.word	0x0800ff36

0800a9a4 <tcp_enqueue_flags>:
{
 800a9a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a9a8:	f011 0803 	ands.w	r8, r1, #3
{
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a9b0:	d106      	bne.n	800a9c0 <tcp_enqueue_flags+0x1c>
 800a9b2:	4b3e      	ldr	r3, [pc, #248]	; (800aaac <tcp_enqueue_flags+0x108>)
 800a9b4:	493e      	ldr	r1, [pc, #248]	; (800aab0 <tcp_enqueue_flags+0x10c>)
 800a9b6:	483f      	ldr	r0, [pc, #252]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800a9b8:	f240 4211 	movw	r2, #1041	; 0x411
 800a9bc:	f000 ff08 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a9c0:	b934      	cbnz	r4, 800a9d0 <tcp_enqueue_flags+0x2c>
 800a9c2:	4b3a      	ldr	r3, [pc, #232]	; (800aaac <tcp_enqueue_flags+0x108>)
 800a9c4:	493c      	ldr	r1, [pc, #240]	; (800aab8 <tcp_enqueue_flags+0x114>)
 800a9c6:	483b      	ldr	r0, [pc, #236]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800a9c8:	f240 4213 	movw	r2, #1043	; 0x413
 800a9cc:	f000 ff00 	bl	800b7d0 <iprintf>
  if (flags & TCP_SYN) {
 800a9d0:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a9d4:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800a9d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9dc:	4649      	mov	r1, r9
 800a9de:	2036      	movs	r0, #54	; 0x36
 800a9e0:	f7fd f89e 	bl	8007b20 <pbuf_alloc>
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	b940      	cbnz	r0, 800a9fa <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9e8:	8b63      	ldrh	r3, [r4, #26]
 800a9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ee:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a9f4:	b003      	add	sp, #12
 800a9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a9fa:	8943      	ldrh	r3, [r0, #10]
 800a9fc:	454b      	cmp	r3, r9
 800a9fe:	d206      	bcs.n	800aa0e <tcp_enqueue_flags+0x6a>
 800aa00:	4b2a      	ldr	r3, [pc, #168]	; (800aaac <tcp_enqueue_flags+0x108>)
 800aa02:	492e      	ldr	r1, [pc, #184]	; (800aabc <tcp_enqueue_flags+0x118>)
 800aa04:	482b      	ldr	r0, [pc, #172]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800aa06:	f240 4239 	movw	r2, #1081	; 0x439
 800aa0a:	f000 fee1 	bl	800b7d0 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aa0e:	9700      	str	r7, [sp, #0]
 800aa10:	4629      	mov	r1, r5
 800aa12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa14:	4632      	mov	r2, r6
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7ff fb38 	bl	800a08c <tcp_create_segment>
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d0e2      	beq.n	800a9e8 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aa22:	68c3      	ldr	r3, [r0, #12]
 800aa24:	079a      	lsls	r2, r3, #30
 800aa26:	d006      	beq.n	800aa36 <tcp_enqueue_flags+0x92>
 800aa28:	4b20      	ldr	r3, [pc, #128]	; (800aaac <tcp_enqueue_flags+0x108>)
 800aa2a:	4925      	ldr	r1, [pc, #148]	; (800aac0 <tcp_enqueue_flags+0x11c>)
 800aa2c:	4821      	ldr	r0, [pc, #132]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800aa2e:	f240 4242 	movw	r2, #1090	; 0x442
 800aa32:	f000 fecd 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aa36:	892b      	ldrh	r3, [r5, #8]
 800aa38:	b133      	cbz	r3, 800aa48 <tcp_enqueue_flags+0xa4>
 800aa3a:	4b1c      	ldr	r3, [pc, #112]	; (800aaac <tcp_enqueue_flags+0x108>)
 800aa3c:	4921      	ldr	r1, [pc, #132]	; (800aac4 <tcp_enqueue_flags+0x120>)
 800aa3e:	481d      	ldr	r0, [pc, #116]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800aa40:	f240 4243 	movw	r2, #1091	; 0x443
 800aa44:	f000 fec4 	bl	800b7d0 <iprintf>
  if (pcb->unsent == NULL) {
 800aa48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aa4a:	bb4b      	cbnz	r3, 800aaa0 <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 800aa4c:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aa54:	f1b8 0f00 	cmp.w	r8, #0
 800aa58:	d002      	beq.n	800aa60 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800aa5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800aa60:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 800aa62:	bf48      	it	mi
 800aa64:	8b63      	ldrhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa66:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800aa68:	bf44      	itt	mi
 800aa6a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6e:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa70:	f7fd f92a 	bl	8007cc8 <pbuf_clen>
 800aa74:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800aa78:	4418      	add	r0, r3
 800aa7a:	b280      	uxth	r0, r0
 800aa7c:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0b7      	beq.n	800a9f4 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aa84:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800aa86:	b948      	cbnz	r0, 800aa9c <tcp_enqueue_flags+0xf8>
 800aa88:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800aa8a:	2c00      	cmp	r4, #0
 800aa8c:	d1b2      	bne.n	800a9f4 <tcp_enqueue_flags+0x50>
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <tcp_enqueue_flags+0x108>)
 800aa90:	490d      	ldr	r1, [pc, #52]	; (800aac8 <tcp_enqueue_flags+0x124>)
 800aa92:	4808      	ldr	r0, [pc, #32]	; (800aab4 <tcp_enqueue_flags+0x110>)
 800aa94:	f240 4265 	movw	r2, #1125	; 0x465
 800aa98:	f000 fe9a 	bl	800b7d0 <iprintf>
  return ERR_OK;
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e7a9      	b.n	800a9f4 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1fb      	bne.n	800aaa0 <tcp_enqueue_flags+0xfc>
    useg->next = seg;
 800aaa8:	6015      	str	r5, [r2, #0]
 800aaaa:	e7d0      	b.n	800aa4e <tcp_enqueue_flags+0xaa>
 800aaac:	0800fad3 	.word	0x0800fad3
 800aab0:	0800ff44 	.word	0x0800ff44
 800aab4:	0800d598 	.word	0x0800d598
 800aab8:	0800ff99 	.word	0x0800ff99
 800aabc:	0800ffb8 	.word	0x0800ffb8
 800aac0:	0800fff1 	.word	0x0800fff1
 800aac4:	08010009 	.word	0x08010009
 800aac8:	08010033 	.word	0x08010033

0800aacc <tcp_send_fin>:
{
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aace:	4604      	mov	r4, r0
 800aad0:	b930      	cbnz	r0, 800aae0 <tcp_send_fin+0x14>
 800aad2:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <tcp_send_fin+0x54>)
 800aad4:	4913      	ldr	r1, [pc, #76]	; (800ab24 <tcp_send_fin+0x58>)
 800aad6:	4814      	ldr	r0, [pc, #80]	; (800ab28 <tcp_send_fin+0x5c>)
 800aad8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aadc:	f000 fe78 	bl	800b7d0 <iprintf>
  if (pcb->unsent != NULL) {
 800aae0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800aae2:	b14d      	cbz	r5, 800aaf8 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aae4:	462f      	mov	r7, r5
 800aae6:	682d      	ldr	r5, [r5, #0]
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	d1fb      	bne.n	800aae4 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8998      	ldrh	r0, [r3, #12]
 800aaf0:	f7fc f9f6 	bl	8006ee0 <lwip_htons>
 800aaf4:	0743      	lsls	r3, r0, #29
 800aaf6:	d005      	beq.n	800ab04 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aaf8:	4620      	mov	r0, r4
 800aafa:	2101      	movs	r1, #1
}
 800aafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ab00:	f7ff bf50 	b.w	800a9a4 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2001      	movs	r0, #1
 800ab08:	899e      	ldrh	r6, [r3, #12]
 800ab0a:	f7fc f9e9 	bl	8006ee0 <lwip_htons>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4330      	orrs	r0, r6
 800ab12:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ab14:	8b63      	ldrh	r3, [r4, #26]
 800ab16:	f043 0320 	orr.w	r3, r3, #32
 800ab1a:	8363      	strh	r3, [r4, #26]
}
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab20:	0800fad3 	.word	0x0800fad3
 800ab24:	0801005b 	.word	0x0801005b
 800ab28:	0800d598 	.word	0x0800d598

0800ab2c <tcp_rexmit_rto_prepare>:
{
 800ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ab30:	4604      	mov	r4, r0
 800ab32:	b930      	cbnz	r0, 800ab42 <tcp_rexmit_rto_prepare+0x16>
 800ab34:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <tcp_rexmit_rto_prepare+0x7c>)
 800ab36:	491d      	ldr	r1, [pc, #116]	; (800abac <tcp_rexmit_rto_prepare+0x80>)
 800ab38:	481d      	ldr	r0, [pc, #116]	; (800abb0 <tcp_rexmit_rto_prepare+0x84>)
 800ab3a:	f240 6263 	movw	r2, #1635	; 0x663
 800ab3e:	f000 fe47 	bl	800b7d0 <iprintf>
  if (pcb->unacked == NULL) {
 800ab42:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800ab44:	b945      	cbnz	r5, 800ab58 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800ab46:	f06f 0005 	mvn.w	r0, #5
}
 800ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800ab4e:	f7ff fa3b 	bl	8009fc8 <tcp_output_segment_busy>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d1f7      	bne.n	800ab46 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab56:	682d      	ldr	r5, [r5, #0]
 800ab58:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800ab5a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1f6      	bne.n	800ab4e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800ab60:	f7ff fa32 	bl	8009fc8 <tcp_output_segment_busy>
 800ab64:	4606      	mov	r6, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d1ed      	bne.n	800ab46 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800ab6a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab6c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800ab6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800ab70:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800ab74:	8b63      	ldrh	r3, [r4, #26]
 800ab76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab7a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab7c:	68eb      	ldr	r3, [r5, #12]
 800ab7e:	6858      	ldr	r0, [r3, #4]
 800ab80:	f7fc f9b1 	bl	8006ee6 <lwip_htonl>
 800ab84:	68eb      	ldr	r3, [r5, #12]
 800ab86:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	8998      	ldrh	r0, [r3, #12]
 800ab8e:	f7fc f9a7 	bl	8006ee0 <lwip_htons>
 800ab92:	f010 0303 	ands.w	r3, r0, #3
 800ab96:	bf18      	it	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	4447      	add	r7, r8
 800ab9c:	443b      	add	r3, r7
 800ab9e:	64e3      	str	r3, [r4, #76]	; 0x4c
  pcb->rttest = 0;
 800aba0:	6366      	str	r6, [r4, #52]	; 0x34
  return ERR_OK;
 800aba2:	4630      	mov	r0, r6
 800aba4:	e7d1      	b.n	800ab4a <tcp_rexmit_rto_prepare+0x1e>
 800aba6:	bf00      	nop
 800aba8:	0800fad3 	.word	0x0800fad3
 800abac:	08010075 	.word	0x08010075
 800abb0:	0800d598 	.word	0x0800d598

0800abb4 <tcp_rexmit>:
{
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800abb6:	4604      	mov	r4, r0
 800abb8:	b930      	cbnz	r0, 800abc8 <tcp_rexmit+0x14>
 800abba:	4b1c      	ldr	r3, [pc, #112]	; (800ac2c <tcp_rexmit+0x78>)
 800abbc:	491c      	ldr	r1, [pc, #112]	; (800ac30 <tcp_rexmit+0x7c>)
 800abbe:	481d      	ldr	r0, [pc, #116]	; (800ac34 <tcp_rexmit+0x80>)
 800abc0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800abc4:	f000 fe04 	bl	800b7d0 <iprintf>
  if (pcb->unacked == NULL) {
 800abc8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800abca:	b915      	cbnz	r5, 800abd2 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800abcc:	f06f 0005 	mvn.w	r0, #5
}
 800abd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7ff f9f8 	bl	8009fc8 <tcp_output_segment_busy>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d1f7      	bne.n	800abcc <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	6723      	str	r3, [r4, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800abe0:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  while (*cur_seg &&
 800abe4:	6833      	ldr	r3, [r6, #0]
 800abe6:	b993      	cbnz	r3, 800ac0e <tcp_rexmit+0x5a>
  seg->next = *cur_seg;
 800abe8:	6833      	ldr	r3, [r6, #0]
 800abea:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800abec:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800abee:	682b      	ldr	r3, [r5, #0]
 800abf0:	b90b      	cbnz	r3, 800abf6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800abf2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800abf6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800abfa:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800abfc:	bf18      	it	ne
 800abfe:	3301      	addne	r3, #1
  pcb->rttest = 0;
 800ac00:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
 800ac04:	bf18      	it	ne
 800ac06:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800ac0a:	6360      	str	r0, [r4, #52]	; 0x34
  return ERR_OK;
 800ac0c:	e7e0      	b.n	800abd0 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	6858      	ldr	r0, [r3, #4]
 800ac12:	f7fc f968 	bl	8006ee6 <lwip_htonl>
 800ac16:	68eb      	ldr	r3, [r5, #12]
 800ac18:	4607      	mov	r7, r0
 800ac1a:	6858      	ldr	r0, [r3, #4]
 800ac1c:	f7fc f963 	bl	8006ee6 <lwip_htonl>
 800ac20:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800ac22:	2800      	cmp	r0, #0
 800ac24:	dae0      	bge.n	800abe8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800ac26:	6836      	ldr	r6, [r6, #0]
 800ac28:	e7dc      	b.n	800abe4 <tcp_rexmit+0x30>
 800ac2a:	bf00      	nop
 800ac2c:	0800fad3 	.word	0x0800fad3
 800ac30:	08010099 	.word	0x08010099
 800ac34:	0800d598 	.word	0x0800d598

0800ac38 <tcp_rexmit_fast>:
{
 800ac38:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	b930      	cbnz	r0, 800ac4c <tcp_rexmit_fast+0x14>
 800ac3e:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <tcp_rexmit_fast+0x5c>)
 800ac40:	4915      	ldr	r1, [pc, #84]	; (800ac98 <tcp_rexmit_fast+0x60>)
 800ac42:	4816      	ldr	r0, [pc, #88]	; (800ac9c <tcp_rexmit_fast+0x64>)
 800ac44:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ac48:	f000 fdc2 	bl	800b7d0 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ac4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac4e:	b303      	cbz	r3, 800ac92 <tcp_rexmit_fast+0x5a>
 800ac50:	8b63      	ldrh	r3, [r4, #26]
 800ac52:	075b      	lsls	r3, r3, #29
 800ac54:	d41d      	bmi.n	800ac92 <tcp_rexmit_fast+0x5a>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ac56:	4620      	mov	r0, r4
 800ac58:	f7ff ffac 	bl	800abb4 <tcp_rexmit>
 800ac5c:	b9c8      	cbnz	r0, 800ac92 <tcp_rexmit_fast+0x5a>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac5e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800ac62:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800ac66:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac68:	4299      	cmp	r1, r3
 800ac6a:	bf28      	it	cs
 800ac6c:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ac6e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ac70:	005d      	lsls	r5, r3, #1
        pcb->ssthresh = 2 * pcb->mss;
 800ac72:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ac76:	ea4f 0261 	mov.w	r2, r1, asr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ac7a:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800ac7c:	bf88      	it	hi
 800ac7e:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ac80:	4413      	add	r3, r2
 800ac82:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ac86:	8b63      	ldrh	r3, [r4, #26]
        pcb->ssthresh = 2 * pcb->mss;
 800ac88:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800ac8c:	f043 0304 	orr.w	r3, r3, #4
 800ac90:	8363      	strh	r3, [r4, #26]
}
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	0800fad3 	.word	0x0800fad3
 800ac98:	080100b1 	.word	0x080100b1
 800ac9c:	0800d598 	.word	0x0800d598

0800aca0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800aca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800aca8:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800acac:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800acb0:	4606      	mov	r6, r0
 800acb2:	460f      	mov	r7, r1
 800acb4:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800acb6:	461d      	mov	r5, r3
 800acb8:	b933      	cbnz	r3, 800acc8 <tcp_rst+0x28>
 800acba:	4b18      	ldr	r3, [pc, #96]	; (800ad1c <tcp_rst+0x7c>)
 800acbc:	4918      	ldr	r1, [pc, #96]	; (800ad20 <tcp_rst+0x80>)
 800acbe:	4819      	ldr	r0, [pc, #100]	; (800ad24 <tcp_rst+0x84>)
 800acc0:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800acc4:	f000 fd84 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800acc8:	f1b8 0f00 	cmp.w	r8, #0
 800accc:	d106      	bne.n	800acdc <tcp_rst+0x3c>
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <tcp_rst+0x7c>)
 800acd0:	4915      	ldr	r1, [pc, #84]	; (800ad28 <tcp_rst+0x88>)
 800acd2:	4814      	ldr	r0, [pc, #80]	; (800ad24 <tcp_rst+0x84>)
 800acd4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800acd8:	f000 fd7a 	bl	800b7d0 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800acdc:	4638      	mov	r0, r7
 800acde:	f7fc f902 	bl	8006ee6 <lwip_htonl>
 800ace2:	2314      	movs	r3, #20
 800ace4:	f646 010b 	movw	r1, #26635	; 0x680b
 800ace8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800acec:	4602      	mov	r2, r0
 800acee:	f8cd a000 	str.w	sl, [sp]
 800acf2:	4620      	mov	r0, r4
 800acf4:	464b      	mov	r3, r9
 800acf6:	2100      	movs	r1, #0
 800acf8:	f7ff fa3a 	bl	800a170 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800acfc:	4604      	mov	r4, r0
 800acfe:	b150      	cbz	r0, 800ad16 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad00:	f7ff fa9e 	bl	800a240 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ad04:	4643      	mov	r3, r8
 800ad06:	462a      	mov	r2, r5
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ad0c:	b004      	add	sp, #16
 800ad0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ad12:	f7ff baa5 	b.w	800a260 <tcp_output_control_segment>
}
 800ad16:	b004      	add	sp, #16
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	0800fad3 	.word	0x0800fad3
 800ad20:	080100ce 	.word	0x080100ce
 800ad24:	0800d598 	.word	0x0800d598
 800ad28:	080100e8 	.word	0x080100e8

0800ad2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ad2c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ad2e:	4604      	mov	r4, r0
 800ad30:	b930      	cbnz	r0, 800ad40 <tcp_send_empty_ack+0x14>
 800ad32:	4b14      	ldr	r3, [pc, #80]	; (800ad84 <tcp_send_empty_ack+0x58>)
 800ad34:	4914      	ldr	r1, [pc, #80]	; (800ad88 <tcp_send_empty_ack+0x5c>)
 800ad36:	4815      	ldr	r0, [pc, #84]	; (800ad8c <tcp_send_empty_ack+0x60>)
 800ad38:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ad3c:	f000 fd48 	bl	800b7d0 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ad40:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ad42:	f7fc f8d0 	bl	8006ee6 <lwip_htonl>
 800ad46:	2100      	movs	r1, #0
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f7ff fa52 	bl	800a1f4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ad50:	4605      	mov	r5, r0
 800ad52:	b930      	cbnz	r0, 800ad62 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad54:	8b63      	ldrh	r3, [r4, #26]
 800ad56:	f043 0303 	orr.w	r3, r3, #3
 800ad5a:	8363      	strh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ad5c:	f06f 0001 	mvn.w	r0, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800ad60:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ad62:	f7ff fa6d 	bl	800a240 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad66:	1d23      	adds	r3, r4, #4
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4629      	mov	r1, r5
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff fa77 	bl	800a260 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800ad72:	8b63      	ldrh	r3, [r4, #26]
 800ad74:	b118      	cbz	r0, 800ad7e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad76:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad7a:	8363      	strh	r3, [r4, #26]
 800ad7c:	e7f0      	b.n	800ad60 <tcp_send_empty_ack+0x34>
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	e7fa      	b.n	800ad7a <tcp_send_empty_ack+0x4e>
 800ad84:	0800fad3 	.word	0x0800fad3
 800ad88:	08010103 	.word	0x08010103
 800ad8c:	0800d598 	.word	0x0800d598

0800ad90 <tcp_output>:
{
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ad94:	4604      	mov	r4, r0
{
 800ad96:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ad98:	b930      	cbnz	r0, 800ada8 <tcp_output+0x18>
 800ad9a:	4b8f      	ldr	r3, [pc, #572]	; (800afd8 <tcp_output+0x248>)
 800ad9c:	498f      	ldr	r1, [pc, #572]	; (800afdc <tcp_output+0x24c>)
 800ad9e:	4890      	ldr	r0, [pc, #576]	; (800afe0 <tcp_output+0x250>)
 800ada0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ada4:	f000 fd14 	bl	800b7d0 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ada8:	7d23      	ldrb	r3, [r4, #20]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d106      	bne.n	800adbc <tcp_output+0x2c>
 800adae:	4b8a      	ldr	r3, [pc, #552]	; (800afd8 <tcp_output+0x248>)
 800adb0:	498c      	ldr	r1, [pc, #560]	; (800afe4 <tcp_output+0x254>)
 800adb2:	488b      	ldr	r0, [pc, #556]	; (800afe0 <tcp_output+0x250>)
 800adb4:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800adb8:	f000 fd0a 	bl	800b7d0 <iprintf>
  if (tcp_input_pcb == pcb) {
 800adbc:	4b8a      	ldr	r3, [pc, #552]	; (800afe8 <tcp_output+0x258>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	f000 8171 	beq.w	800b0a8 <tcp_output+0x318>
  seg = pcb->unsent;
 800adc6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800adc8:	b94d      	cbnz	r5, 800adde <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800adca:	8b63      	ldrh	r3, [r4, #26]
 800adcc:	0798      	lsls	r0, r3, #30
 800adce:	f140 8167 	bpl.w	800b0a0 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800add2:	4620      	mov	r0, r4
}
 800add4:	b007      	add	sp, #28
 800add6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800adda:	f7ff bfa7 	b.w	800ad2c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800adde:	7a20      	ldrb	r0, [r4, #8]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ade0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800ade4:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ade8:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800adec:	b340      	cbz	r0, 800ae40 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800adee:	f7fc fd75 	bl	80078dc <netif_get_by_index>
    return ip_route(src, dst);
 800adf2:	4607      	mov	r7, r0
  if (netif == NULL) {
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f000 8170 	beq.w	800b0da <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	b90b      	cbnz	r3, 800ae02 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800adfe:	6843      	ldr	r3, [r0, #4]
 800ae00:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae02:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae04:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae06:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae08:	bf28      	it	cs
 800ae0a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ae0c:	f7fc f86b 	bl	8006ee6 <lwip_htonl>
 800ae10:	892b      	ldrh	r3, [r5, #8]
 800ae12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	4418      	add	r0, r3
 800ae18:	4540      	cmp	r0, r8
 800ae1a:	d915      	bls.n	800ae48 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ae1c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800ae20:	4543      	cmp	r3, r8
 800ae22:	d1d2      	bne.n	800adca <tcp_output+0x3a>
 800ae24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1cf      	bne.n	800adca <tcp_output+0x3a>
 800ae2a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1cb      	bne.n	800adca <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800ae32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae36:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
      pcb->persist_probe = 0;
 800ae3a:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800ae3e:	e7c4      	b.n	800adca <tcp_output+0x3a>
    return ip_route(src, dst);
 800ae40:	4648      	mov	r0, r9
 800ae42:	f7fb faef 	bl	8006424 <ip4_route>
 800ae46:	e7d4      	b.n	800adf2 <tcp_output+0x62>
  useg = pcb->unacked;
 800ae48:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800ae50:	b126      	cbz	r6, 800ae5c <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800ae52:	4633      	mov	r3, r6
 800ae54:	6836      	ldr	r6, [r6, #0]
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	d1fb      	bne.n	800ae52 <tcp_output+0xc2>
 800ae5a:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800ae5c:	f8df a178 	ldr.w	sl, [pc, #376]	; 800afd8 <tcp_output+0x248>
 800ae60:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800afe0 <tcp_output+0x250>
 800ae64:	e0de      	b.n	800b024 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800ae66:	7d23      	ldrb	r3, [r4, #20]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d009      	beq.n	800ae80 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae6c:	68eb      	ldr	r3, [r5, #12]
 800ae6e:	2010      	movs	r0, #16
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	f7fc f834 	bl	8006ee0 <lwip_htons>
 800ae78:	9b04      	ldr	r3, [sp, #16]
 800ae7a:	68ea      	ldr	r2, [r5, #12]
 800ae7c:	4318      	orrs	r0, r3
 800ae7e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7ff f8a1 	bl	8009fc8 <tcp_output_segment_busy>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d16f      	bne.n	800af6a <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ae8a:	68eb      	ldr	r3, [r5, #12]
 800ae8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae8e:	9304      	str	r3, [sp, #16]
 800ae90:	f7fc f829 	bl	8006ee6 <lwip_htonl>
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ae98:	68eb      	ldr	r3, [r5, #12]
 800ae9a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	f7fc f81f 	bl	8006ee0 <lwip_htons>
 800aea2:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aea4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aea6:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeaa:	4413      	add	r3, r2
 800aeac:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aeae:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aeb0:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aeb2:	07d2      	lsls	r2, r2, #31
 800aeb4:	d449      	bmi.n	800af4a <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aeb6:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800aeba:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800aebe:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800aec0:	bfbc      	itt	lt
 800aec2:	2300      	movlt	r3, #0
 800aec4:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800aec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aec8:	b94b      	cbnz	r3, 800aede <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800aeca:	4948      	ldr	r1, [pc, #288]	; (800afec <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aecc:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800aece:	6809      	ldr	r1, [r1, #0]
 800aed0:	9204      	str	r2, [sp, #16]
 800aed2:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aed4:	6858      	ldr	r0, [r3, #4]
 800aed6:	f7fc f806 	bl	8006ee6 <lwip_htonl>
 800aeda:	9a04      	ldr	r2, [sp, #16]
 800aedc:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aede:	6869      	ldr	r1, [r5, #4]
 800aee0:	68eb      	ldr	r3, [r5, #12]
 800aee2:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800aee4:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  seg->p->payload = seg->tcphdr;
 800aee8:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aeea:	1a18      	subs	r0, r3, r0
 800aeec:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800aeee:	ebac 0c00 	sub.w	ip, ip, r0
 800aef2:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800aef6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800aefa:	ebac 0000 	sub.w	r0, ip, r0
 800aefe:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800af00:	2100      	movs	r1, #0
 800af02:	7419      	strb	r1, [r3, #16]
 800af04:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800af06:	7aa9      	ldrb	r1, [r5, #10]
 800af08:	0089      	lsls	r1, r1, #2
 800af0a:	f001 0104 	and.w	r1, r1, #4
 800af0e:	3114      	adds	r1, #20
 800af10:	440b      	add	r3, r1
 800af12:	429a      	cmp	r2, r3
 800af14:	d006      	beq.n	800af24 <tcp_output+0x194>
 800af16:	4936      	ldr	r1, [pc, #216]	; (800aff0 <tcp_output+0x260>)
 800af18:	4653      	mov	r3, sl
 800af1a:	f240 621c 	movw	r2, #1564	; 0x61c
 800af1e:	4658      	mov	r0, fp
 800af20:	f000 fc56 	bl	800b7d0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800af24:	2306      	movs	r3, #6
 800af26:	9702      	str	r7, [sp, #8]
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	7aa3      	ldrb	r3, [r4, #10]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	7ae3      	ldrb	r3, [r4, #11]
 800af30:	6868      	ldr	r0, [r5, #4]
 800af32:	464a      	mov	r2, r9
 800af34:	4621      	mov	r1, r4
 800af36:	f7fb fbcd 	bl	80066d4 <ip4_output_if>
    if (err != ERR_OK) {
 800af3a:	b1b0      	cbz	r0, 800af6a <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800af3c:	8b63      	ldrh	r3, [r4, #26]
 800af3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af42:	8363      	strh	r3, [r4, #26]
}
 800af44:	b007      	add	sp, #28
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800af4a:	464a      	mov	r2, r9
 800af4c:	4639      	mov	r1, r7
 800af4e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	f7fd ffe0 	bl	8008f18 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800af58:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800af5c:	f7fb ffc3 	bl	8006ee6 <lwip_htonl>
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	6158      	str	r0, [r3, #20]
    opts += 1;
 800af64:	f103 0218 	add.w	r2, r3, #24
 800af68:	e7a7      	b.n	800aeba <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800af6e:	7d23      	ldrb	r3, [r4, #20]
 800af70:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af72:	bf1e      	ittt	ne
 800af74:	8b63      	ldrhne	r3, [r4, #26]
 800af76:	f023 0303 	bicne.w	r3, r3, #3
 800af7a:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af7c:	68eb      	ldr	r3, [r5, #12]
 800af7e:	6858      	ldr	r0, [r3, #4]
 800af80:	f7fb ffb1 	bl	8006ee6 <lwip_htonl>
 800af84:	8929      	ldrh	r1, [r5, #8]
 800af86:	68eb      	ldr	r3, [r5, #12]
 800af88:	9104      	str	r1, [sp, #16]
 800af8a:	9005      	str	r0, [sp, #20]
 800af8c:	8998      	ldrh	r0, [r3, #12]
 800af8e:	f7fb ffa7 	bl	8006ee0 <lwip_htons>
 800af92:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800af96:	f010 0303 	ands.w	r3, r0, #3
 800af9a:	440a      	add	r2, r1
 800af9c:	bf18      	it	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800afa2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800afa4:	1ad2      	subs	r2, r2, r3
 800afa6:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800afa8:	bfb8      	it	lt
 800afaa:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800afac:	68ea      	ldr	r2, [r5, #12]
 800afae:	892b      	ldrh	r3, [r5, #8]
 800afb0:	9304      	str	r3, [sp, #16]
 800afb2:	8990      	ldrh	r0, [r2, #12]
 800afb4:	f7fb ff94 	bl	8006ee0 <lwip_htons>
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	f010 0003 	ands.w	r0, r0, #3
 800afbe:	bf18      	it	ne
 800afc0:	2001      	movne	r0, #1
 800afc2:	42d8      	cmn	r0, r3
 800afc4:	f000 8085 	beq.w	800b0d2 <tcp_output+0x342>
      seg->next = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800afcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800afce:	b98b      	cbnz	r3, 800aff4 <tcp_output+0x264>
        pcb->unacked = seg;
 800afd0:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800afd2:	462e      	mov	r6, r5
 800afd4:	e023      	b.n	800b01e <tcp_output+0x28e>
 800afd6:	bf00      	nop
 800afd8:	0800fad3 	.word	0x0800fad3
 800afdc:	08010123 	.word	0x08010123
 800afe0:	0800d598 	.word	0x0800d598
 800afe4:	0801013b 	.word	0x0801013b
 800afe8:	2000f870 	.word	0x2000f870
 800afec:	2000f824 	.word	0x2000f824
 800aff0:	08010178 	.word	0x08010178
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aff4:	68eb      	ldr	r3, [r5, #12]
 800aff6:	6858      	ldr	r0, [r3, #4]
 800aff8:	f7fb ff75 	bl	8006ee6 <lwip_htonl>
 800affc:	68f2      	ldr	r2, [r6, #12]
 800affe:	9004      	str	r0, [sp, #16]
 800b000:	6850      	ldr	r0, [r2, #4]
 800b002:	f7fb ff70 	bl	8006ee6 <lwip_htonl>
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	1a18      	subs	r0, r3, r0
 800b00a:	2800      	cmp	r0, #0
 800b00c:	da5f      	bge.n	800b0ce <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b00e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	2a00      	cmp	r2, #0
 800b016:	d149      	bne.n	800b0ac <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800b01c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800b01e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800b020:	2d00      	cmp	r5, #0
 800b022:	d03a      	beq.n	800b09a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b024:	68eb      	ldr	r3, [r5, #12]
 800b026:	6858      	ldr	r0, [r3, #4]
 800b028:	f7fb ff5d 	bl	8006ee6 <lwip_htonl>
 800b02c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b02e:	1ac0      	subs	r0, r0, r3
 800b030:	892b      	ldrh	r3, [r5, #8]
 800b032:	4418      	add	r0, r3
  while (seg != NULL &&
 800b034:	4540      	cmp	r0, r8
 800b036:	d82e      	bhi.n	800b096 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800b038:	68eb      	ldr	r3, [r5, #12]
 800b03a:	8998      	ldrh	r0, [r3, #12]
 800b03c:	f7fb ff50 	bl	8006ee0 <lwip_htons>
 800b040:	0741      	lsls	r1, r0, #29
 800b042:	d506      	bpl.n	800b052 <tcp_output+0x2c2>
 800b044:	4926      	ldr	r1, [pc, #152]	; (800b0e0 <tcp_output+0x350>)
 800b046:	4653      	mov	r3, sl
 800b048:	f240 5236 	movw	r2, #1334	; 0x536
 800b04c:	4658      	mov	r0, fp
 800b04e:	f000 fbbf 	bl	800b7d0 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b052:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b054:	2b00      	cmp	r3, #0
 800b056:	f43f af06 	beq.w	800ae66 <tcp_output+0xd6>
 800b05a:	8b62      	ldrh	r2, [r4, #26]
 800b05c:	f012 0f44 	tst.w	r2, #68	; 0x44
 800b060:	f47f af01 	bne.w	800ae66 <tcp_output+0xd6>
 800b064:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b066:	b143      	cbz	r3, 800b07a <tcp_output+0x2ea>
 800b068:	6819      	ldr	r1, [r3, #0]
 800b06a:	2900      	cmp	r1, #0
 800b06c:	f47f aefb 	bne.w	800ae66 <tcp_output+0xd6>
 800b070:	8919      	ldrh	r1, [r3, #8]
 800b072:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b074:	4299      	cmp	r1, r3
 800b076:	f4bf aef6 	bcs.w	800ae66 <tcp_output+0xd6>
 800b07a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f43f aef1 	beq.w	800ae66 <tcp_output+0xd6>
 800b084:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b088:	2b07      	cmp	r3, #7
 800b08a:	f63f aeec 	bhi.w	800ae66 <tcp_output+0xd6>
 800b08e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800b092:	f47f aee8 	bne.w	800ae66 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800b096:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b098:	b913      	cbnz	r3, 800b0a0 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b0a0:	8b63      	ldrh	r3, [r4, #26]
 800b0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e74b      	b.n	800af44 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0ac:	68d2      	ldr	r2, [r2, #12]
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	6850      	ldr	r0, [r2, #4]
 800b0b2:	f7fb ff18 	bl	8006ee6 <lwip_htonl>
 800b0b6:	68e9      	ldr	r1, [r5, #12]
 800b0b8:	9004      	str	r0, [sp, #16]
 800b0ba:	6848      	ldr	r0, [r1, #4]
 800b0bc:	f7fb ff13 	bl	8006ee6 <lwip_htonl>
 800b0c0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800b0c2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0c4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	daa6      	bge.n	800b018 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	e7a1      	b.n	800b012 <tcp_output+0x282>
          useg->next = seg;
 800b0ce:	6035      	str	r5, [r6, #0]
 800b0d0:	e77f      	b.n	800afd2 <tcp_output+0x242>
      tcp_seg_free(seg);
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f7fd f8e6 	bl	80082a4 <tcp_seg_free>
 800b0d8:	e7a1      	b.n	800b01e <tcp_output+0x28e>
    return ERR_RTE;
 800b0da:	f06f 0003 	mvn.w	r0, #3
 800b0de:	e731      	b.n	800af44 <tcp_output+0x1b4>
 800b0e0:	08010161 	.word	0x08010161

0800b0e4 <tcp_rexmit_rto_commit>:
{
 800b0e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	b930      	cbnz	r0, 800b0f8 <tcp_rexmit_rto_commit+0x14>
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <tcp_rexmit_rto_commit+0x2c>)
 800b0ec:	4909      	ldr	r1, [pc, #36]	; (800b114 <tcp_rexmit_rto_commit+0x30>)
 800b0ee:	480a      	ldr	r0, [pc, #40]	; (800b118 <tcp_rexmit_rto_commit+0x34>)
 800b0f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b0f4:	f000 fb6c 	bl	800b7d0 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800b0f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b0fc:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800b0fe:	bf1c      	itt	ne
 800b100:	3301      	addne	r3, #1
 800b102:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800b106:	4620      	mov	r0, r4
}
 800b108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800b10c:	f7ff be40 	b.w	800ad90 <tcp_output>
 800b110:	0800fad3 	.word	0x0800fad3
 800b114:	0801018b 	.word	0x0801018b
 800b118:	0800d598 	.word	0x0800d598

0800b11c <tcp_rexmit_rto>:
{
 800b11c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b11e:	4604      	mov	r4, r0
 800b120:	b930      	cbnz	r0, 800b130 <tcp_rexmit_rto+0x14>
 800b122:	4b08      	ldr	r3, [pc, #32]	; (800b144 <tcp_rexmit_rto+0x28>)
 800b124:	4908      	ldr	r1, [pc, #32]	; (800b148 <tcp_rexmit_rto+0x2c>)
 800b126:	4809      	ldr	r0, [pc, #36]	; (800b14c <tcp_rexmit_rto+0x30>)
 800b128:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b12c:	f000 fb50 	bl	800b7d0 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff fcfb 	bl	800ab2c <tcp_rexmit_rto_prepare>
 800b136:	b920      	cbnz	r0, 800b142 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800b138:	4620      	mov	r0, r4
}
 800b13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800b13e:	f7ff bfd1 	b.w	800b0e4 <tcp_rexmit_rto_commit>
}
 800b142:	bd10      	pop	{r4, pc}
 800b144:	0800fad3 	.word	0x0800fad3
 800b148:	080101ae 	.word	0x080101ae
 800b14c:	0800d598 	.word	0x0800d598

0800b150 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b150:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b152:	4604      	mov	r4, r0
 800b154:	b930      	cbnz	r0, 800b164 <tcp_keepalive+0x14>
 800b156:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <tcp_keepalive+0x44>)
 800b158:	490f      	ldr	r1, [pc, #60]	; (800b198 <tcp_keepalive+0x48>)
 800b15a:	4810      	ldr	r0, [pc, #64]	; (800b19c <tcp_keepalive+0x4c>)
 800b15c:	f640 0224 	movw	r2, #2084	; 0x824
 800b160:	f000 fb36 	bl	800b7d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b164:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b166:	3801      	subs	r0, #1
 800b168:	f7fb febd 	bl	8006ee6 <lwip_htonl>
 800b16c:	2100      	movs	r1, #0
 800b16e:	4602      	mov	r2, r0
 800b170:	4620      	mov	r0, r4
 800b172:	f7ff f83f 	bl	800a1f4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b176:	4605      	mov	r5, r0
 800b178:	b148      	cbz	r0, 800b18e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b17a:	f7ff f861 	bl	800a240 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b17e:	1d23      	adds	r3, r4, #4
 800b180:	4622      	mov	r2, r4
 800b182:	4629      	mov	r1, r5
 800b184:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b18a:	f7ff b869 	b.w	800a260 <tcp_output_control_segment>
}
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0800fad3 	.word	0x0800fad3
 800b198:	080101ca 	.word	0x080101ca
 800b19c:	0800d598 	.word	0x0800d598

0800b1a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b930      	cbnz	r0, 800b1b6 <tcp_zero_window_probe+0x16>
 800b1a8:	4b2c      	ldr	r3, [pc, #176]	; (800b25c <tcp_zero_window_probe+0xbc>)
 800b1aa:	492d      	ldr	r1, [pc, #180]	; (800b260 <tcp_zero_window_probe+0xc0>)
 800b1ac:	482d      	ldr	r0, [pc, #180]	; (800b264 <tcp_zero_window_probe+0xc4>)
 800b1ae:	f640 024f 	movw	r2, #2127	; 0x84f
 800b1b2:	f000 fb0d 	bl	800b7d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b1b6:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800b1b8:	2d00      	cmp	r5, #0
 800b1ba:	d048      	beq.n	800b24e <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b1bc:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800b1c0:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800b1c2:	bf1c      	itt	ne
 800b1c4:	3301      	addne	r3, #1
 800b1c6:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b1ca:	68eb      	ldr	r3, [r5, #12]
 800b1cc:	8998      	ldrh	r0, [r3, #12]
 800b1ce:	f7fb fe87 	bl	8006ee0 <lwip_htons>
 800b1d2:	f010 0401 	ands.w	r4, r0, #1
 800b1d6:	bf18      	it	ne
 800b1d8:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b1da:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b1dc:	bf1c      	itt	ne
 800b1de:	fab4 f484 	clzne	r4, r4
 800b1e2:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	f084 0101 	eor.w	r1, r4, #1
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff f802 	bl	800a1f4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	b378      	cbz	r0, 800b254 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b1f4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800b1f8:	b1f4      	cbz	r4, 800b238 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b1fa:	2011      	movs	r0, #17
 800b1fc:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800b200:	f7fb fe6e 	bl	8006ee0 <lwip_htons>
 800b204:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800b208:	4320      	orrs	r0, r4
 800b20a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b20e:	68eb      	ldr	r3, [r5, #12]
 800b210:	6858      	ldr	r0, [r3, #4]
 800b212:	f7fb fe68 	bl	8006ee6 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b216:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b218:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b21a:	1a1b      	subs	r3, r3, r0
 800b21c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800b21e:	bfb8      	it	lt
 800b220:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b222:	4638      	mov	r0, r7
 800b224:	f7ff f80c 	bl	800a240 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b228:	1d33      	adds	r3, r6, #4
 800b22a:	4632      	mov	r2, r6
 800b22c:	4639      	mov	r1, r7
 800b22e:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b234:	f7ff b814 	b.w	800a260 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b238:	6868      	ldr	r0, [r5, #4]
 800b23a:	892a      	ldrh	r2, [r5, #8]
 800b23c:	8903      	ldrh	r3, [r0, #8]
 800b23e:	1a9b      	subs	r3, r3, r2
 800b240:	b29b      	uxth	r3, r3
 800b242:	2201      	movs	r2, #1
 800b244:	f108 0114 	add.w	r1, r8, #20
 800b248:	f7fc fe1e 	bl	8007e88 <pbuf_copy_partial>
 800b24c:	e7df      	b.n	800b20e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800b24e:	4628      	mov	r0, r5
}
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800b254:	f04f 30ff 	mov.w	r0, #4294967295
 800b258:	e7fa      	b.n	800b250 <tcp_zero_window_probe+0xb0>
 800b25a:	bf00      	nop
 800b25c:	0800fad3 	.word	0x0800fad3
 800b260:	080101e5 	.word	0x080101e5
 800b264:	0800d598 	.word	0x0800d598

0800b268 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b26c:	2009      	movs	r0, #9
{
 800b26e:	460e      	mov	r6, r1
 800b270:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b272:	f7fc f965 	bl	8007540 <memp_malloc>
  if (timeout == NULL) {
 800b276:	b938      	cbnz	r0, 800b288 <sys_timeout_abs+0x20>
        t->next = timeout;
        break;
      }
    }
  }
}
 800b278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b27c:	4b0f      	ldr	r3, [pc, #60]	; (800b2bc <sys_timeout_abs+0x54>)
 800b27e:	4910      	ldr	r1, [pc, #64]	; (800b2c0 <sys_timeout_abs+0x58>)
 800b280:	4810      	ldr	r0, [pc, #64]	; (800b2c4 <sys_timeout_abs+0x5c>)
 800b282:	22be      	movs	r2, #190	; 0xbe
 800b284:	f000 baa4 	b.w	800b7d0 <iprintf>
  if (next_timeout == NULL) {
 800b288:	4a0f      	ldr	r2, [pc, #60]	; (800b2c8 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800b28a:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800b290:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800b292:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800b296:	b90b      	cbnz	r3, 800b29c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800b298:	6010      	str	r0, [r2, #0]
}
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b29c:	6859      	ldr	r1, [r3, #4]
 800b29e:	1a61      	subs	r1, r4, r1
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	da01      	bge.n	800b2a8 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800b2a4:	6003      	str	r3, [r0, #0]
 800b2a6:	e7f7      	b.n	800b298 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	b11b      	cbz	r3, 800b2b6 <sys_timeout_abs+0x4e>
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	1aa2      	subs	r2, r4, r2
 800b2b2:	2a00      	cmp	r2, #0
 800b2b4:	daf8      	bge.n	800b2a8 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800b2b6:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800b2b8:	6008      	str	r0, [r1, #0]
        break;
 800b2ba:	e7ee      	b.n	800b29a <sys_timeout_abs+0x32>
 800b2bc:	08010208 	.word	0x08010208
 800b2c0:	08010282 	.word	0x08010282
 800b2c4:	0800d598 	.word	0x0800d598
 800b2c8:	2000f874 	.word	0x2000f874

0800b2cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b2cc:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b2ce:	6843      	ldr	r3, [r0, #4]
{
 800b2d0:	4604      	mov	r4, r0
  cyclic->handler();
 800b2d2:	4798      	blx	r3

  now = sys_now();
 800b2d4:	f7f5 fb26 	bl	8000924 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b2d8:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <lwip_cyclic_timer+0x2c>)
 800b2da:	6825      	ldr	r5, [r4, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b2de:	4907      	ldr	r1, [pc, #28]	; (800b2fc <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b2e0:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b2e2:	1a1a      	subs	r2, r3, r0
 800b2e4:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b2e6:	bfb8      	it	lt
 800b2e8:	1940      	addlt	r0, r0, r5
 800b2ea:	4622      	mov	r2, r4
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b2ec:	bfa8      	it	ge
 800b2ee:	4618      	movge	r0, r3
#endif
  }
}
 800b2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b2f4:	f7ff bfb8 	b.w	800b268 <sys_timeout_abs>
 800b2f8:	2000f874 	.word	0x2000f874
 800b2fc:	0800b2cd 	.word	0x0800b2cd

0800b300 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b300:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	4604      	mov	r4, r0
 800b308:	460d      	mov	r5, r1
 800b30a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b30c:	d306      	bcc.n	800b31c <sys_timeout+0x1c>
 800b30e:	4b08      	ldr	r3, [pc, #32]	; (800b330 <sys_timeout+0x30>)
 800b310:	4908      	ldr	r1, [pc, #32]	; (800b334 <sys_timeout+0x34>)
 800b312:	4809      	ldr	r0, [pc, #36]	; (800b338 <sys_timeout+0x38>)
 800b314:	f240 1229 	movw	r2, #297	; 0x129
 800b318:	f000 fa5a 	bl	800b7d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b31c:	f7f5 fb02 	bl	8000924 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b320:	4632      	mov	r2, r6
 800b322:	4629      	mov	r1, r5
 800b324:	4420      	add	r0, r4
#endif
}
 800b326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b32a:	f7ff bf9d 	b.w	800b268 <sys_timeout_abs>
 800b32e:	bf00      	nop
 800b330:	08010208 	.word	0x08010208
 800b334:	080102bf 	.word	0x080102bf
 800b338:	0800d598 	.word	0x0800d598

0800b33c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <tcp_timer_needed+0x24>)
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	b962      	cbnz	r2, 800b35c <tcp_timer_needed+0x20>
 800b342:	4a08      	ldr	r2, [pc, #32]	; (800b364 <tcp_timer_needed+0x28>)
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	b912      	cbnz	r2, 800b34e <tcp_timer_needed+0x12>
 800b348:	4a07      	ldr	r2, [pc, #28]	; (800b368 <tcp_timer_needed+0x2c>)
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	b132      	cbz	r2, 800b35c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800b34e:	2201      	movs	r2, #1
 800b350:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b352:	4906      	ldr	r1, [pc, #24]	; (800b36c <tcp_timer_needed+0x30>)
 800b354:	2200      	movs	r2, #0
 800b356:	20fa      	movs	r0, #250	; 0xfa
 800b358:	f7ff bfd2 	b.w	800b300 <sys_timeout>
}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	2000f874 	.word	0x2000f874
 800b364:	2000f820 	.word	0x2000f820
 800b368:	2000f82c 	.word	0x2000f82c
 800b36c:	0800b371 	.word	0x0800b371

0800b370 <tcpip_tcp_timer>:
{
 800b370:	b508      	push	{r3, lr}
  tcp_tmr();
 800b372:	f7fd fc09 	bl	8008b88 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b376:	4b08      	ldr	r3, [pc, #32]	; (800b398 <tcpip_tcp_timer+0x28>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	b913      	cbnz	r3, 800b382 <tcpip_tcp_timer+0x12>
 800b37c:	4b07      	ldr	r3, [pc, #28]	; (800b39c <tcpip_tcp_timer+0x2c>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	b133      	cbz	r3, 800b390 <tcpip_tcp_timer+0x20>
}
 800b382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b386:	4906      	ldr	r1, [pc, #24]	; (800b3a0 <tcpip_tcp_timer+0x30>)
 800b388:	2200      	movs	r2, #0
 800b38a:	20fa      	movs	r0, #250	; 0xfa
 800b38c:	f7ff bfb8 	b.w	800b300 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800b390:	4a04      	ldr	r2, [pc, #16]	; (800b3a4 <tcpip_tcp_timer+0x34>)
 800b392:	6093      	str	r3, [r2, #8]
}
 800b394:	bd08      	pop	{r3, pc}
 800b396:	bf00      	nop
 800b398:	2000f820 	.word	0x2000f820
 800b39c:	2000f82c 	.word	0x2000f82c
 800b3a0:	0800b371 	.word	0x0800b371
 800b3a4:	2000f874 	.word	0x2000f874

0800b3a8 <sys_timeouts_init>:
{
 800b3a8:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b3aa:	4c08      	ldr	r4, [pc, #32]	; (800b3cc <sys_timeouts_init+0x24>)
 800b3ac:	4908      	ldr	r1, [pc, #32]	; (800b3d0 <sys_timeouts_init+0x28>)
 800b3ae:	f104 0208 	add.w	r2, r4, #8
 800b3b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3b6:	f7ff ffa3 	bl	800b300 <sys_timeout>
 800b3ba:	f104 0210 	add.w	r2, r4, #16
 800b3be:	4904      	ldr	r1, [pc, #16]	; (800b3d0 <sys_timeouts_init+0x28>)
}
 800b3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b3c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3c8:	f7ff bf9a 	b.w	800b300 <sys_timeout>
 800b3cc:	0800d4f0 	.word	0x0800d4f0
 800b3d0:	0800b2cd 	.word	0x0800b2cd

0800b3d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b3d6:	f7f5 faa5 	bl	8000924 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800b3da:	4d0b      	ldr	r5, [pc, #44]	; (800b408 <sys_check_timeouts+0x34>)
  now = sys_now();
 800b3dc:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800b3de:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800b3e0:	b181      	cbz	r1, 800b404 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b3e2:	684b      	ldr	r3, [r1, #4]
 800b3e4:	1ae2      	subs	r2, r4, r3
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	db0c      	blt.n	800b404 <sys_check_timeouts+0x30>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
 800b3ea:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    next_timeout = tmptimeout->next;
 800b3ee:	680a      	ldr	r2, [r1, #0]
 800b3f0:	602a      	str	r2, [r5, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b3f2:	2009      	movs	r0, #9
    current_timeout_due_time = tmptimeout->time;
 800b3f4:	606b      	str	r3, [r5, #4]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b3f6:	f7fc f8d3 	bl	80075a0 <memp_free>
    if (handler != NULL) {
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	d0ef      	beq.n	800b3de <sys_check_timeouts+0xa>
      handler(arg);
 800b3fe:	4638      	mov	r0, r7
 800b400:	47b0      	blx	r6
 800b402:	e7ec      	b.n	800b3de <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b406:	bf00      	nop
 800b408:	2000f874 	.word	0x2000f874

0800b40c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800b40c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800b40e:	4c07      	ldr	r4, [pc, #28]	; (800b42c <sys_timeouts_sleeptime+0x20>)
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	b13b      	cbz	r3, 800b424 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800b414:	f7f5 fa86 	bl	8000924 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
    return 0;
 800b41c:	1a18      	subs	r0, r3, r0
 800b41e:	bf48      	it	mi
 800b420:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800b422:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800b424:	f04f 30ff 	mov.w	r0, #4294967295
 800b428:	e7fb      	b.n	800b422 <sys_timeouts_sleeptime+0x16>
 800b42a:	bf00      	nop
 800b42c:	2000f874 	.word	0x2000f874

0800b430 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b430:	8943      	ldrh	r3, [r0, #10]
 800b432:	2b0e      	cmp	r3, #14
{
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800b43a:	d91a      	bls.n	800b472 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b43c:	7bc3      	ldrb	r3, [r0, #15]
 800b43e:	b91b      	cbnz	r3, 800b448 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800b440:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800b444:	3301      	adds	r3, #1
 800b446:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b448:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b44a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800b44c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800b44e:	07d9      	lsls	r1, r3, #31
 800b450:	d50a      	bpl.n	800b468 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b452:	2b01      	cmp	r3, #1
 800b454:	d111      	bne.n	800b47a <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b456:	7843      	ldrb	r3, [r0, #1]
 800b458:	b933      	cbnz	r3, 800b468 <ethernet_input+0x38>
 800b45a:	7883      	ldrb	r3, [r0, #2]
 800b45c:	2b5e      	cmp	r3, #94	; 0x5e
 800b45e:	d103      	bne.n	800b468 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b460:	7b63      	ldrb	r3, [r4, #13]
 800b462:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b466:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800b468:	2e08      	cmp	r6, #8
 800b46a:	d010      	beq.n	800b48e <ethernet_input+0x5e>
 800b46c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800b470:	d01d      	beq.n	800b4ae <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800b472:	4620      	mov	r0, r4
 800b474:	f7fc faec 	bl	8007a50 <pbuf_free>
  return ERR_OK;
 800b478:	e017      	b.n	800b4aa <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b47a:	4914      	ldr	r1, [pc, #80]	; (800b4cc <ethernet_input+0x9c>)
 800b47c:	2206      	movs	r2, #6
 800b47e:	f000 f967 	bl	800b750 <memcmp>
 800b482:	2800      	cmp	r0, #0
 800b484:	d1f0      	bne.n	800b468 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800b486:	7b63      	ldrb	r3, [r4, #13]
 800b488:	f043 0308 	orr.w	r3, r3, #8
 800b48c:	e7eb      	b.n	800b466 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b48e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b492:	071a      	lsls	r2, r3, #28
 800b494:	d5ed      	bpl.n	800b472 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b496:	210e      	movs	r1, #14
 800b498:	4620      	mov	r0, r4
 800b49a:	f7fc faa5 	bl	80079e8 <pbuf_remove_header>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d1e7      	bne.n	800b472 <ethernet_input+0x42>
        ip4_input(p, netif);
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f7fa ffeb 	bl	8006480 <ip4_input>
}
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b4ae:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800b4b2:	071b      	lsls	r3, r3, #28
 800b4b4:	d5dd      	bpl.n	800b472 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b4b6:	210e      	movs	r1, #14
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7fc fa95 	bl	80079e8 <pbuf_remove_header>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d1d7      	bne.n	800b472 <ethernet_input+0x42>
        etharp_input(p, netif);
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7fa fc35 	bl	8005d34 <etharp_input>
      break;
 800b4ca:	e7ee      	b.n	800b4aa <ethernet_input+0x7a>
 800b4cc:	0800d50c 	.word	0x0800d50c

0800b4d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d4:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b4d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800b4da:	460d      	mov	r5, r1
 800b4dc:	4616      	mov	r6, r2
 800b4de:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800b4e0:	f7fb fcfe 	bl	8006ee0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b4e4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800b4e6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f7fc fa79 	bl	80079e0 <pbuf_add_header>
 800b4ee:	b9e0      	cbnz	r0, 800b52a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b4f0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800b4f2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	600b      	str	r3, [r1, #0]
 800b4fa:	88bb      	ldrh	r3, [r7, #4]
 800b4fc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b4fe:	6833      	ldr	r3, [r6, #0]
 800b500:	f8c1 3006 	str.w	r3, [r1, #6]
 800b504:	88b3      	ldrh	r3, [r6, #4]
 800b506:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b508:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b50c:	2b06      	cmp	r3, #6
 800b50e:	d006      	beq.n	800b51e <ethernet_output+0x4e>
 800b510:	4b08      	ldr	r3, [pc, #32]	; (800b534 <ethernet_output+0x64>)
 800b512:	4909      	ldr	r1, [pc, #36]	; (800b538 <ethernet_output+0x68>)
 800b514:	4809      	ldr	r0, [pc, #36]	; (800b53c <ethernet_output+0x6c>)
 800b516:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b51a:	f000 f959 	bl	800b7d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b51e:	69a3      	ldr	r3, [r4, #24]
 800b520:	4629      	mov	r1, r5
 800b522:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800b524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800b528:	4718      	bx	r3
}
 800b52a:	f06f 0001 	mvn.w	r0, #1
 800b52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b532:	bf00      	nop
 800b534:	080102f5 	.word	0x080102f5
 800b538:	08010370 	.word	0x08010370
 800b53c:	0800d598 	.word	0x0800d598

0800b540 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800b540:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800b542:	2304      	movs	r3, #4
{
 800b544:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800b546:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b548:	4668      	mov	r0, sp
 800b54a:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800b54c:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800b54e:	f7f8 fcad 	bl	8003eac <osMessageCreate>
 800b552:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800b554:	fab0 f080 	clz	r0, r0
 800b558:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800b55a:	4240      	negs	r0, r0
 800b55c:	b002      	add	sp, #8
 800b55e:	bd10      	pop	{r4, pc}

0800b560 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800b560:	b510      	push	{r4, lr}
 800b562:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800b564:	6800      	ldr	r0, [r0, #0]
 800b566:	f7f8 fd15 	bl	8003f94 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800b56a:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800b570:	f7f8 bd17 	b.w	8003fa2 <osMessageDelete>

0800b574 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800b574:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800b576:	2200      	movs	r2, #0
 800b578:	6800      	ldr	r0, [r0, #0]
 800b57a:	f7f8 fc9c 	bl	8003eb6 <osMessagePut>
 800b57e:	3800      	subs	r0, #0
 800b580:	bf18      	it	ne
 800b582:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800b584:	4240      	negs	r0, r0
 800b586:	bd08      	pop	{r3, pc}

0800b588 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58a:	b085      	sub	sp, #20
 800b58c:	4606      	mov	r6, r0
 800b58e:	460d      	mov	r5, r1
 800b590:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800b592:	f7f8 fbcc 	bl	8003d2e <osKernelSysTick>
 800b596:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800b598:	b177      	cbz	r7, 800b5b8 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800b59a:	6831      	ldr	r1, [r6, #0]
 800b59c:	463a      	mov	r2, r7
 800b59e:	a801      	add	r0, sp, #4
 800b5a0:	f7f8 fcb1 	bl	8003f06 <osMessageGet>

    if(event.status == osEventMessage)
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	2b10      	cmp	r3, #16
 800b5a8:	d10d      	bne.n	800b5c6 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800b5ae:	f7f8 fbbe 	bl	8003d2e <osKernelSysTick>
 800b5b2:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800b5b4:	b005      	add	sp, #20
 800b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800b5b8:	6831      	ldr	r1, [r6, #0]
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b5be:	a801      	add	r0, sp, #4
 800b5c0:	f7f8 fca1 	bl	8003f06 <osMessageGet>
 800b5c4:	e7f1      	b.n	800b5aa <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800b5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ca:	e7f3      	b.n	800b5b4 <sys_arch_mbox_fetch+0x2c>

0800b5cc <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800b5cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ce:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	6801      	ldr	r1, [r0, #0]
 800b5d4:	a801      	add	r0, sp, #4
 800b5d6:	f7f8 fc96 	bl	8003f06 <osMessageGet>

  if(event.status == osEventMessage)
 800b5da:	9b01      	ldr	r3, [sp, #4]
 800b5dc:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800b5de:	bf03      	ittte	eq
 800b5e0:	9b02      	ldreq	r3, [sp, #8]
 800b5e2:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800b5e4:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800b5e6:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 800b5ea:	b004      	add	sp, #16
 800b5ec:	bd10      	pop	{r4, pc}

0800b5ee <sys_mbox_valid>:
 800b5ee:	6800      	ldr	r0, [r0, #0]
 800b5f0:	3800      	subs	r0, #0
 800b5f2:	bf18      	it	ne
 800b5f4:	2001      	movne	r0, #1
 800b5f6:	4770      	bx	lr

0800b5f8 <sys_mbox_set_invalid>:
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	6003      	str	r3, [r0, #0]
 800b5fc:	4770      	bx	lr

0800b5fe <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800b5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b600:	4606      	mov	r6, r0
 800b602:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800b604:	2400      	movs	r4, #0
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800b606:	2101      	movs	r1, #1
 800b608:	a801      	add	r0, sp, #4
  osSemaphoreDef(SEM);
 800b60a:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800b60c:	f7f8 fc10 	bl	8003e30 <osSemaphoreCreate>
 800b610:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800b612:	b130      	cbz	r0, 800b622 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800b614:	b945      	cbnz	r5, 800b628 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800b616:	4629      	mov	r1, r5
 800b618:	f7f8 fc1f 	bl	8003e5a <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800b61c:	4628      	mov	r0, r5
}
 800b61e:	b002      	add	sp, #8
 800b620:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800b622:	f04f 30ff 	mov.w	r0, #4294967295
 800b626:	e7fa      	b.n	800b61e <sys_sem_new+0x20>
  return ERR_OK;
 800b628:	4620      	mov	r0, r4
 800b62a:	e7f8      	b.n	800b61e <sys_sem_new+0x20>

0800b62c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	4605      	mov	r5, r0
 800b630:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800b632:	f7f8 fb7c 	bl	8003d2e <osKernelSysTick>
 800b636:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800b638:	b146      	cbz	r6, 800b64c <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800b63a:	6828      	ldr	r0, [r5, #0]
 800b63c:	4631      	mov	r1, r6
 800b63e:	f7f8 fc0c 	bl	8003e5a <osSemaphoreWait>
 800b642:	b958      	cbnz	r0, 800b65c <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800b644:	f7f8 fb73 	bl	8003d2e <osKernelSysTick>
 800b648:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800b64c:	6828      	ldr	r0, [r5, #0]
 800b64e:	f04f 31ff 	mov.w	r1, #4294967295
 800b652:	f7f8 fc02 	bl	8003e5a <osSemaphoreWait>
 800b656:	2800      	cmp	r0, #0
 800b658:	d1f8      	bne.n	800b64c <sys_arch_sem_wait+0x20>
 800b65a:	e7f3      	b.n	800b644 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800b65c:	f04f 30ff 	mov.w	r0, #4294967295
 800b660:	e7f3      	b.n	800b64a <sys_arch_sem_wait+0x1e>

0800b662 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800b662:	6800      	ldr	r0, [r0, #0]
 800b664:	f7f8 bc1e 	b.w	8003ea4 <osSemaphoreRelease>

0800b668 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800b668:	6800      	ldr	r0, [r0, #0]
 800b66a:	f7f8 bc1d 	b.w	8003ea8 <osSemaphoreDelete>

0800b66e <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800b66e:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800b670:	3800      	subs	r0, #0
 800b672:	bf18      	it	ne
 800b674:	2001      	movne	r0, #1
 800b676:	4770      	bx	lr

0800b678 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800b678:	2300      	movs	r3, #0
 800b67a:	6003      	str	r3, [r0, #0]
}
 800b67c:	4770      	bx	lr
	...

0800b680 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800b680:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800b682:	4803      	ldr	r0, [pc, #12]	; (800b690 <sys_init+0x10>)
 800b684:	f7f8 fb7f 	bl	8003d86 <osMutexCreate>
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <sys_init+0x14>)
 800b68a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800b68c:	bd08      	pop	{r3, pc}
 800b68e:	bf00      	nop
 800b690:	0800d518 	.word	0x0800d518
 800b694:	2000f880 	.word	0x2000f880

0800b698 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b698:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800b69a:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800b69c:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b69e:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800b6a0:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800b6a2:	f7f8 fb70 	bl	8003d86 <osMutexCreate>
 800b6a6:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800b6a8:	fab0 f080 	clz	r0, r0
 800b6ac:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800b6ae:	4240      	negs	r0, r0
 800b6b0:	b002      	add	sp, #8
 800b6b2:	bd10      	pop	{r4, pc}

0800b6b4 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800b6b4:	6800      	ldr	r0, [r0, #0]
 800b6b6:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ba:	f7f8 bb67 	b.w	8003d8c <osMutexWait>

0800b6be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800b6be:	6800      	ldr	r0, [r0, #0]
 800b6c0:	f7f8 bb89 	b.w	8003dd6 <osMutexRelease>

0800b6c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800b6c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800b6c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b6ca:	9908      	ldr	r1, [sp, #32]
 800b6cc:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800b6d6:	a801      	add	r0, sp, #4
 800b6d8:	4611      	mov	r1, r2
 800b6da:	f7f8 fb2f 	bl	8003d3c <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800b6de:	b007      	add	sp, #28
 800b6e0:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6e4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800b6e4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800b6e6:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <sys_arch_protect+0x14>)
 800b6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f7f8 fb4d 	bl	8003d8c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	bd08      	pop	{r3, pc}
 800b6f6:	bf00      	nop
 800b6f8:	2000f880 	.word	0x2000f880

0800b6fc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800b6fc:	4b01      	ldr	r3, [pc, #4]	; (800b704 <sys_arch_unprotect+0x8>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	f7f8 bb69 	b.w	8003dd6 <osMutexRelease>
 800b704:	2000f880 	.word	0x2000f880

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	; (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	; (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	; (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	; (800b74c <__libc_init_array+0x44>)
 800b71c:	f001 fad8 	bl	800ccd0 <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	080104f4 	.word	0x080104f4
 800b744:	080104f4 	.word	0x080104f4
 800b748:	080104f4 	.word	0x080104f4
 800b74c:	080104f8 	.word	0x080104f8

0800b750 <memcmp>:
 800b750:	b510      	push	{r4, lr}
 800b752:	3901      	subs	r1, #1
 800b754:	4402      	add	r2, r0
 800b756:	4290      	cmp	r0, r2
 800b758:	d101      	bne.n	800b75e <memcmp+0xe>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e005      	b.n	800b76a <memcmp+0x1a>
 800b75e:	7803      	ldrb	r3, [r0, #0]
 800b760:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b764:	42a3      	cmp	r3, r4
 800b766:	d001      	beq.n	800b76c <memcmp+0x1c>
 800b768:	1b18      	subs	r0, r3, r4
 800b76a:	bd10      	pop	{r4, pc}
 800b76c:	3001      	adds	r0, #1
 800b76e:	e7f2      	b.n	800b756 <memcmp+0x6>

0800b770 <memcpy>:
 800b770:	440a      	add	r2, r1
 800b772:	4291      	cmp	r1, r2
 800b774:	f100 33ff 	add.w	r3, r0, #4294967295
 800b778:	d100      	bne.n	800b77c <memcpy+0xc>
 800b77a:	4770      	bx	lr
 800b77c:	b510      	push	{r4, lr}
 800b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b782:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b786:	4291      	cmp	r1, r2
 800b788:	d1f9      	bne.n	800b77e <memcpy+0xe>
 800b78a:	bd10      	pop	{r4, pc}

0800b78c <memmove>:
 800b78c:	4288      	cmp	r0, r1
 800b78e:	b510      	push	{r4, lr}
 800b790:	eb01 0402 	add.w	r4, r1, r2
 800b794:	d902      	bls.n	800b79c <memmove+0x10>
 800b796:	4284      	cmp	r4, r0
 800b798:	4623      	mov	r3, r4
 800b79a:	d807      	bhi.n	800b7ac <memmove+0x20>
 800b79c:	1e43      	subs	r3, r0, #1
 800b79e:	42a1      	cmp	r1, r4
 800b7a0:	d008      	beq.n	800b7b4 <memmove+0x28>
 800b7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7aa:	e7f8      	b.n	800b79e <memmove+0x12>
 800b7ac:	4402      	add	r2, r0
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	428a      	cmp	r2, r1
 800b7b2:	d100      	bne.n	800b7b6 <memmove+0x2a>
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7be:	e7f7      	b.n	800b7b0 <memmove+0x24>

0800b7c0 <memset>:
 800b7c0:	4402      	add	r2, r0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d100      	bne.n	800b7ca <memset+0xa>
 800b7c8:	4770      	bx	lr
 800b7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ce:	e7f9      	b.n	800b7c4 <memset+0x4>

0800b7d0 <iprintf>:
 800b7d0:	b40f      	push	{r0, r1, r2, r3}
 800b7d2:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <iprintf+0x2c>)
 800b7d4:	b513      	push	{r0, r1, r4, lr}
 800b7d6:	681c      	ldr	r4, [r3, #0]
 800b7d8:	b124      	cbz	r4, 800b7e4 <iprintf+0x14>
 800b7da:	69a3      	ldr	r3, [r4, #24]
 800b7dc:	b913      	cbnz	r3, 800b7e4 <iprintf+0x14>
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 f90e 	bl	800ba00 <__sinit>
 800b7e4:	ab05      	add	r3, sp, #20
 800b7e6:	9a04      	ldr	r2, [sp, #16]
 800b7e8:	68a1      	ldr	r1, [r4, #8]
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fc27 	bl	800c040 <_vfiprintf_r>
 800b7f2:	b002      	add	sp, #8
 800b7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f8:	b004      	add	sp, #16
 800b7fa:	4770      	bx	lr
 800b7fc:	2000002c 	.word	0x2000002c

0800b800 <rand>:
 800b800:	4b16      	ldr	r3, [pc, #88]	; (800b85c <rand+0x5c>)
 800b802:	b510      	push	{r4, lr}
 800b804:	681c      	ldr	r4, [r3, #0]
 800b806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b808:	b9b3      	cbnz	r3, 800b838 <rand+0x38>
 800b80a:	2018      	movs	r0, #24
 800b80c:	f000 f9aa 	bl	800bb64 <malloc>
 800b810:	63a0      	str	r0, [r4, #56]	; 0x38
 800b812:	b928      	cbnz	r0, 800b820 <rand+0x20>
 800b814:	4602      	mov	r2, r0
 800b816:	4b12      	ldr	r3, [pc, #72]	; (800b860 <rand+0x60>)
 800b818:	4812      	ldr	r0, [pc, #72]	; (800b864 <rand+0x64>)
 800b81a:	214e      	movs	r1, #78	; 0x4e
 800b81c:	f000 f87a 	bl	800b914 <__assert_func>
 800b820:	4a11      	ldr	r2, [pc, #68]	; (800b868 <rand+0x68>)
 800b822:	4b12      	ldr	r3, [pc, #72]	; (800b86c <rand+0x6c>)
 800b824:	e9c0 2300 	strd	r2, r3, [r0]
 800b828:	4b11      	ldr	r3, [pc, #68]	; (800b870 <rand+0x70>)
 800b82a:	6083      	str	r3, [r0, #8]
 800b82c:	230b      	movs	r3, #11
 800b82e:	8183      	strh	r3, [r0, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	2300      	movs	r3, #0
 800b834:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b838:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b83a:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <rand+0x74>)
 800b83c:	6920      	ldr	r0, [r4, #16]
 800b83e:	6963      	ldr	r3, [r4, #20]
 800b840:	490d      	ldr	r1, [pc, #52]	; (800b878 <rand+0x78>)
 800b842:	4342      	muls	r2, r0
 800b844:	fb01 2203 	mla	r2, r1, r3, r2
 800b848:	fba0 0101 	umull	r0, r1, r0, r1
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	eb42 0001 	adc.w	r0, r2, r1
 800b852:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b856:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b85a:	bd10      	pop	{r4, pc}
 800b85c:	2000002c 	.word	0x2000002c
 800b860:	080103a8 	.word	0x080103a8
 800b864:	080103bf 	.word	0x080103bf
 800b868:	abcd330e 	.word	0xabcd330e
 800b86c:	e66d1234 	.word	0xe66d1234
 800b870:	0005deec 	.word	0x0005deec
 800b874:	5851f42d 	.word	0x5851f42d
 800b878:	4c957f2d 	.word	0x4c957f2d

0800b87c <siprintf>:
 800b87c:	b40e      	push	{r1, r2, r3}
 800b87e:	b500      	push	{lr}
 800b880:	b09c      	sub	sp, #112	; 0x70
 800b882:	ab1d      	add	r3, sp, #116	; 0x74
 800b884:	9002      	str	r0, [sp, #8]
 800b886:	9006      	str	r0, [sp, #24]
 800b888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b88c:	4809      	ldr	r0, [pc, #36]	; (800b8b4 <siprintf+0x38>)
 800b88e:	9107      	str	r1, [sp, #28]
 800b890:	9104      	str	r1, [sp, #16]
 800b892:	4909      	ldr	r1, [pc, #36]	; (800b8b8 <siprintf+0x3c>)
 800b894:	f853 2b04 	ldr.w	r2, [r3], #4
 800b898:	9105      	str	r1, [sp, #20]
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	a902      	add	r1, sp, #8
 800b8a0:	f000 faa4 	bl	800bdec <_svfiprintf_r>
 800b8a4:	9b02      	ldr	r3, [sp, #8]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	b01c      	add	sp, #112	; 0x70
 800b8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b0:	b003      	add	sp, #12
 800b8b2:	4770      	bx	lr
 800b8b4:	2000002c 	.word	0x2000002c
 800b8b8:	ffff0208 	.word	0xffff0208

0800b8bc <strcat>:
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	4602      	mov	r2, r0
 800b8c0:	7814      	ldrb	r4, [r2, #0]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	2c00      	cmp	r4, #0
 800b8c8:	d1fa      	bne.n	800b8c0 <strcat+0x4>
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	d1f9      	bne.n	800b8cc <strcat+0x10>
 800b8d8:	bd10      	pop	{r4, pc}

0800b8da <strcpy>:
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8e0:	f803 2b01 	strb.w	r2, [r3], #1
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	d1f9      	bne.n	800b8dc <strcpy+0x2>
 800b8e8:	4770      	bx	lr

0800b8ea <strncmp>:
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	b17a      	cbz	r2, 800b90e <strncmp+0x24>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	3901      	subs	r1, #1
 800b8f2:	1884      	adds	r4, r0, r2
 800b8f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8fc:	4290      	cmp	r0, r2
 800b8fe:	d101      	bne.n	800b904 <strncmp+0x1a>
 800b900:	42a3      	cmp	r3, r4
 800b902:	d101      	bne.n	800b908 <strncmp+0x1e>
 800b904:	1a80      	subs	r0, r0, r2
 800b906:	bd10      	pop	{r4, pc}
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1f3      	bne.n	800b8f4 <strncmp+0xa>
 800b90c:	e7fa      	b.n	800b904 <strncmp+0x1a>
 800b90e:	4610      	mov	r0, r2
 800b910:	e7f9      	b.n	800b906 <strncmp+0x1c>
	...

0800b914 <__assert_func>:
 800b914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b916:	4614      	mov	r4, r2
 800b918:	461a      	mov	r2, r3
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <__assert_func+0x2c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4605      	mov	r5, r0
 800b920:	68d8      	ldr	r0, [r3, #12]
 800b922:	b14c      	cbz	r4, 800b938 <__assert_func+0x24>
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <__assert_func+0x30>)
 800b926:	9100      	str	r1, [sp, #0]
 800b928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b92c:	4906      	ldr	r1, [pc, #24]	; (800b948 <__assert_func+0x34>)
 800b92e:	462b      	mov	r3, r5
 800b930:	f000 f8e4 	bl	800bafc <fiprintf>
 800b934:	f000 ff6e 	bl	800c814 <abort>
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <__assert_func+0x38>)
 800b93a:	461c      	mov	r4, r3
 800b93c:	e7f3      	b.n	800b926 <__assert_func+0x12>
 800b93e:	bf00      	nop
 800b940:	2000002c 	.word	0x2000002c
 800b944:	0801041a 	.word	0x0801041a
 800b948:	08010427 	.word	0x08010427
 800b94c:	0800d6ca 	.word	0x0800d6ca

0800b950 <std>:
 800b950:	2300      	movs	r3, #0
 800b952:	b510      	push	{r4, lr}
 800b954:	4604      	mov	r4, r0
 800b956:	e9c0 3300 	strd	r3, r3, [r0]
 800b95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b95e:	6083      	str	r3, [r0, #8]
 800b960:	8181      	strh	r1, [r0, #12]
 800b962:	6643      	str	r3, [r0, #100]	; 0x64
 800b964:	81c2      	strh	r2, [r0, #14]
 800b966:	6183      	str	r3, [r0, #24]
 800b968:	4619      	mov	r1, r3
 800b96a:	2208      	movs	r2, #8
 800b96c:	305c      	adds	r0, #92	; 0x5c
 800b96e:	f7ff ff27 	bl	800b7c0 <memset>
 800b972:	4b05      	ldr	r3, [pc, #20]	; (800b988 <std+0x38>)
 800b974:	6263      	str	r3, [r4, #36]	; 0x24
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <std+0x3c>)
 800b978:	62a3      	str	r3, [r4, #40]	; 0x28
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <std+0x40>)
 800b97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b97e:	4b05      	ldr	r3, [pc, #20]	; (800b994 <std+0x44>)
 800b980:	6224      	str	r4, [r4, #32]
 800b982:	6323      	str	r3, [r4, #48]	; 0x30
 800b984:	bd10      	pop	{r4, pc}
 800b986:	bf00      	nop
 800b988:	0800c5e9 	.word	0x0800c5e9
 800b98c:	0800c60b 	.word	0x0800c60b
 800b990:	0800c643 	.word	0x0800c643
 800b994:	0800c667 	.word	0x0800c667

0800b998 <_cleanup_r>:
 800b998:	4901      	ldr	r1, [pc, #4]	; (800b9a0 <_cleanup_r+0x8>)
 800b99a:	f000 b8c1 	b.w	800bb20 <_fwalk_reent>
 800b99e:	bf00      	nop
 800b9a0:	0800c951 	.word	0x0800c951

0800b9a4 <__sfmoreglue>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	2268      	movs	r2, #104	; 0x68
 800b9a8:	1e4d      	subs	r5, r1, #1
 800b9aa:	4355      	muls	r5, r2
 800b9ac:	460e      	mov	r6, r1
 800b9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9b2:	f000 f94b 	bl	800bc4c <_malloc_r>
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	b140      	cbz	r0, 800b9cc <__sfmoreglue+0x28>
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	60a0      	str	r0, [r4, #8]
 800b9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9c8:	f7ff fefa 	bl	800b7c0 <memset>
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}

0800b9d0 <__sfp_lock_acquire>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__sfp_lock_acquire+0x8>)
 800b9d2:	f000 b8c5 	b.w	800bb60 <__retarget_lock_acquire_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	2000f889 	.word	0x2000f889

0800b9dc <__sfp_lock_release>:
 800b9dc:	4801      	ldr	r0, [pc, #4]	; (800b9e4 <__sfp_lock_release+0x8>)
 800b9de:	f000 b8c0 	b.w	800bb62 <__retarget_lock_release_recursive>
 800b9e2:	bf00      	nop
 800b9e4:	2000f889 	.word	0x2000f889

0800b9e8 <__sinit_lock_acquire>:
 800b9e8:	4801      	ldr	r0, [pc, #4]	; (800b9f0 <__sinit_lock_acquire+0x8>)
 800b9ea:	f000 b8b9 	b.w	800bb60 <__retarget_lock_acquire_recursive>
 800b9ee:	bf00      	nop
 800b9f0:	2000f88a 	.word	0x2000f88a

0800b9f4 <__sinit_lock_release>:
 800b9f4:	4801      	ldr	r0, [pc, #4]	; (800b9fc <__sinit_lock_release+0x8>)
 800b9f6:	f000 b8b4 	b.w	800bb62 <__retarget_lock_release_recursive>
 800b9fa:	bf00      	nop
 800b9fc:	2000f88a 	.word	0x2000f88a

0800ba00 <__sinit>:
 800ba00:	b510      	push	{r4, lr}
 800ba02:	4604      	mov	r4, r0
 800ba04:	f7ff fff0 	bl	800b9e8 <__sinit_lock_acquire>
 800ba08:	69a3      	ldr	r3, [r4, #24]
 800ba0a:	b11b      	cbz	r3, 800ba14 <__sinit+0x14>
 800ba0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba10:	f7ff bff0 	b.w	800b9f4 <__sinit_lock_release>
 800ba14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba18:	6523      	str	r3, [r4, #80]	; 0x50
 800ba1a:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <__sinit+0x68>)
 800ba1c:	4a13      	ldr	r2, [pc, #76]	; (800ba6c <__sinit+0x6c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba22:	42a3      	cmp	r3, r4
 800ba24:	bf04      	itt	eq
 800ba26:	2301      	moveq	r3, #1
 800ba28:	61a3      	streq	r3, [r4, #24]
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 f820 	bl	800ba70 <__sfp>
 800ba30:	6060      	str	r0, [r4, #4]
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f81c 	bl	800ba70 <__sfp>
 800ba38:	60a0      	str	r0, [r4, #8]
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 f818 	bl	800ba70 <__sfp>
 800ba40:	2200      	movs	r2, #0
 800ba42:	60e0      	str	r0, [r4, #12]
 800ba44:	2104      	movs	r1, #4
 800ba46:	6860      	ldr	r0, [r4, #4]
 800ba48:	f7ff ff82 	bl	800b950 <std>
 800ba4c:	68a0      	ldr	r0, [r4, #8]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	2109      	movs	r1, #9
 800ba52:	f7ff ff7d 	bl	800b950 <std>
 800ba56:	68e0      	ldr	r0, [r4, #12]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	2112      	movs	r1, #18
 800ba5c:	f7ff ff78 	bl	800b950 <std>
 800ba60:	2301      	movs	r3, #1
 800ba62:	61a3      	str	r3, [r4, #24]
 800ba64:	e7d2      	b.n	800ba0c <__sinit+0xc>
 800ba66:	bf00      	nop
 800ba68:	080103a4 	.word	0x080103a4
 800ba6c:	0800b999 	.word	0x0800b999

0800ba70 <__sfp>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	4607      	mov	r7, r0
 800ba74:	f7ff ffac 	bl	800b9d0 <__sfp_lock_acquire>
 800ba78:	4b1e      	ldr	r3, [pc, #120]	; (800baf4 <__sfp+0x84>)
 800ba7a:	681e      	ldr	r6, [r3, #0]
 800ba7c:	69b3      	ldr	r3, [r6, #24]
 800ba7e:	b913      	cbnz	r3, 800ba86 <__sfp+0x16>
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ffbd 	bl	800ba00 <__sinit>
 800ba86:	3648      	adds	r6, #72	; 0x48
 800ba88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	d503      	bpl.n	800ba98 <__sfp+0x28>
 800ba90:	6833      	ldr	r3, [r6, #0]
 800ba92:	b30b      	cbz	r3, 800bad8 <__sfp+0x68>
 800ba94:	6836      	ldr	r6, [r6, #0]
 800ba96:	e7f7      	b.n	800ba88 <__sfp+0x18>
 800ba98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba9c:	b9d5      	cbnz	r5, 800bad4 <__sfp+0x64>
 800ba9e:	4b16      	ldr	r3, [pc, #88]	; (800baf8 <__sfp+0x88>)
 800baa0:	60e3      	str	r3, [r4, #12]
 800baa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800baa6:	6665      	str	r5, [r4, #100]	; 0x64
 800baa8:	f000 f859 	bl	800bb5e <__retarget_lock_init_recursive>
 800baac:	f7ff ff96 	bl	800b9dc <__sfp_lock_release>
 800bab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bab8:	6025      	str	r5, [r4, #0]
 800baba:	61a5      	str	r5, [r4, #24]
 800babc:	2208      	movs	r2, #8
 800babe:	4629      	mov	r1, r5
 800bac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bac4:	f7ff fe7c 	bl	800b7c0 <memset>
 800bac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bad0:	4620      	mov	r0, r4
 800bad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad4:	3468      	adds	r4, #104	; 0x68
 800bad6:	e7d9      	b.n	800ba8c <__sfp+0x1c>
 800bad8:	2104      	movs	r1, #4
 800bada:	4638      	mov	r0, r7
 800badc:	f7ff ff62 	bl	800b9a4 <__sfmoreglue>
 800bae0:	4604      	mov	r4, r0
 800bae2:	6030      	str	r0, [r6, #0]
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d1d5      	bne.n	800ba94 <__sfp+0x24>
 800bae8:	f7ff ff78 	bl	800b9dc <__sfp_lock_release>
 800baec:	230c      	movs	r3, #12
 800baee:	603b      	str	r3, [r7, #0]
 800baf0:	e7ee      	b.n	800bad0 <__sfp+0x60>
 800baf2:	bf00      	nop
 800baf4:	080103a4 	.word	0x080103a4
 800baf8:	ffff0001 	.word	0xffff0001

0800bafc <fiprintf>:
 800bafc:	b40e      	push	{r1, r2, r3}
 800bafe:	b503      	push	{r0, r1, lr}
 800bb00:	4601      	mov	r1, r0
 800bb02:	ab03      	add	r3, sp, #12
 800bb04:	4805      	ldr	r0, [pc, #20]	; (800bb1c <fiprintf+0x20>)
 800bb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	f000 fa97 	bl	800c040 <_vfiprintf_r>
 800bb12:	b002      	add	sp, #8
 800bb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb18:	b003      	add	sp, #12
 800bb1a:	4770      	bx	lr
 800bb1c:	2000002c 	.word	0x2000002c

0800bb20 <_fwalk_reent>:
 800bb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb24:	4606      	mov	r6, r0
 800bb26:	4688      	mov	r8, r1
 800bb28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb2c:	2700      	movs	r7, #0
 800bb2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb32:	f1b9 0901 	subs.w	r9, r9, #1
 800bb36:	d505      	bpl.n	800bb44 <_fwalk_reent+0x24>
 800bb38:	6824      	ldr	r4, [r4, #0]
 800bb3a:	2c00      	cmp	r4, #0
 800bb3c:	d1f7      	bne.n	800bb2e <_fwalk_reent+0xe>
 800bb3e:	4638      	mov	r0, r7
 800bb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb44:	89ab      	ldrh	r3, [r5, #12]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d907      	bls.n	800bb5a <_fwalk_reent+0x3a>
 800bb4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	d003      	beq.n	800bb5a <_fwalk_reent+0x3a>
 800bb52:	4629      	mov	r1, r5
 800bb54:	4630      	mov	r0, r6
 800bb56:	47c0      	blx	r8
 800bb58:	4307      	orrs	r7, r0
 800bb5a:	3568      	adds	r5, #104	; 0x68
 800bb5c:	e7e9      	b.n	800bb32 <_fwalk_reent+0x12>

0800bb5e <__retarget_lock_init_recursive>:
 800bb5e:	4770      	bx	lr

0800bb60 <__retarget_lock_acquire_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <__retarget_lock_release_recursive>:
 800bb62:	4770      	bx	lr

0800bb64 <malloc>:
 800bb64:	4b02      	ldr	r3, [pc, #8]	; (800bb70 <malloc+0xc>)
 800bb66:	4601      	mov	r1, r0
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	f000 b86f 	b.w	800bc4c <_malloc_r>
 800bb6e:	bf00      	nop
 800bb70:	2000002c 	.word	0x2000002c

0800bb74 <_free_r>:
 800bb74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb76:	2900      	cmp	r1, #0
 800bb78:	d044      	beq.n	800bc04 <_free_r+0x90>
 800bb7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb7e:	9001      	str	r0, [sp, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f1a1 0404 	sub.w	r4, r1, #4
 800bb86:	bfb8      	it	lt
 800bb88:	18e4      	addlt	r4, r4, r3
 800bb8a:	f000 ff95 	bl	800cab8 <__malloc_lock>
 800bb8e:	4a1e      	ldr	r2, [pc, #120]	; (800bc08 <_free_r+0x94>)
 800bb90:	9801      	ldr	r0, [sp, #4]
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	b933      	cbnz	r3, 800bba4 <_free_r+0x30>
 800bb96:	6063      	str	r3, [r4, #4]
 800bb98:	6014      	str	r4, [r2, #0]
 800bb9a:	b003      	add	sp, #12
 800bb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bba0:	f000 bf90 	b.w	800cac4 <__malloc_unlock>
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	d908      	bls.n	800bbba <_free_r+0x46>
 800bba8:	6825      	ldr	r5, [r4, #0]
 800bbaa:	1961      	adds	r1, r4, r5
 800bbac:	428b      	cmp	r3, r1
 800bbae:	bf01      	itttt	eq
 800bbb0:	6819      	ldreq	r1, [r3, #0]
 800bbb2:	685b      	ldreq	r3, [r3, #4]
 800bbb4:	1949      	addeq	r1, r1, r5
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	e7ed      	b.n	800bb96 <_free_r+0x22>
 800bbba:	461a      	mov	r2, r3
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	b10b      	cbz	r3, 800bbc4 <_free_r+0x50>
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d9fa      	bls.n	800bbba <_free_r+0x46>
 800bbc4:	6811      	ldr	r1, [r2, #0]
 800bbc6:	1855      	adds	r5, r2, r1
 800bbc8:	42a5      	cmp	r5, r4
 800bbca:	d10b      	bne.n	800bbe4 <_free_r+0x70>
 800bbcc:	6824      	ldr	r4, [r4, #0]
 800bbce:	4421      	add	r1, r4
 800bbd0:	1854      	adds	r4, r2, r1
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	6011      	str	r1, [r2, #0]
 800bbd6:	d1e0      	bne.n	800bb9a <_free_r+0x26>
 800bbd8:	681c      	ldr	r4, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	6053      	str	r3, [r2, #4]
 800bbde:	4421      	add	r1, r4
 800bbe0:	6011      	str	r1, [r2, #0]
 800bbe2:	e7da      	b.n	800bb9a <_free_r+0x26>
 800bbe4:	d902      	bls.n	800bbec <_free_r+0x78>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	e7d6      	b.n	800bb9a <_free_r+0x26>
 800bbec:	6825      	ldr	r5, [r4, #0]
 800bbee:	1961      	adds	r1, r4, r5
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf04      	itt	eq
 800bbf4:	6819      	ldreq	r1, [r3, #0]
 800bbf6:	685b      	ldreq	r3, [r3, #4]
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	bf04      	itt	eq
 800bbfc:	1949      	addeq	r1, r1, r5
 800bbfe:	6021      	streq	r1, [r4, #0]
 800bc00:	6054      	str	r4, [r2, #4]
 800bc02:	e7ca      	b.n	800bb9a <_free_r+0x26>
 800bc04:	b003      	add	sp, #12
 800bc06:	bd30      	pop	{r4, r5, pc}
 800bc08:	2000f88c 	.word	0x2000f88c

0800bc0c <sbrk_aligned>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4e0e      	ldr	r6, [pc, #56]	; (800bc48 <sbrk_aligned+0x3c>)
 800bc10:	460c      	mov	r4, r1
 800bc12:	6831      	ldr	r1, [r6, #0]
 800bc14:	4605      	mov	r5, r0
 800bc16:	b911      	cbnz	r1, 800bc1e <sbrk_aligned+0x12>
 800bc18:	f000 fcd6 	bl	800c5c8 <_sbrk_r>
 800bc1c:	6030      	str	r0, [r6, #0]
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 fcd1 	bl	800c5c8 <_sbrk_r>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d00a      	beq.n	800bc40 <sbrk_aligned+0x34>
 800bc2a:	1cc4      	adds	r4, r0, #3
 800bc2c:	f024 0403 	bic.w	r4, r4, #3
 800bc30:	42a0      	cmp	r0, r4
 800bc32:	d007      	beq.n	800bc44 <sbrk_aligned+0x38>
 800bc34:	1a21      	subs	r1, r4, r0
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 fcc6 	bl	800c5c8 <_sbrk_r>
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d101      	bne.n	800bc44 <sbrk_aligned+0x38>
 800bc40:	f04f 34ff 	mov.w	r4, #4294967295
 800bc44:	4620      	mov	r0, r4
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	2000f890 	.word	0x2000f890

0800bc4c <_malloc_r>:
 800bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc50:	1ccd      	adds	r5, r1, #3
 800bc52:	f025 0503 	bic.w	r5, r5, #3
 800bc56:	3508      	adds	r5, #8
 800bc58:	2d0c      	cmp	r5, #12
 800bc5a:	bf38      	it	cc
 800bc5c:	250c      	movcc	r5, #12
 800bc5e:	2d00      	cmp	r5, #0
 800bc60:	4607      	mov	r7, r0
 800bc62:	db01      	blt.n	800bc68 <_malloc_r+0x1c>
 800bc64:	42a9      	cmp	r1, r5
 800bc66:	d905      	bls.n	800bc74 <_malloc_r+0x28>
 800bc68:	230c      	movs	r3, #12
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	2600      	movs	r6, #0
 800bc6e:	4630      	mov	r0, r6
 800bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc74:	4e2e      	ldr	r6, [pc, #184]	; (800bd30 <_malloc_r+0xe4>)
 800bc76:	f000 ff1f 	bl	800cab8 <__malloc_lock>
 800bc7a:	6833      	ldr	r3, [r6, #0]
 800bc7c:	461c      	mov	r4, r3
 800bc7e:	bb34      	cbnz	r4, 800bcce <_malloc_r+0x82>
 800bc80:	4629      	mov	r1, r5
 800bc82:	4638      	mov	r0, r7
 800bc84:	f7ff ffc2 	bl	800bc0c <sbrk_aligned>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	d14d      	bne.n	800bd2a <_malloc_r+0xde>
 800bc8e:	6834      	ldr	r4, [r6, #0]
 800bc90:	4626      	mov	r6, r4
 800bc92:	2e00      	cmp	r6, #0
 800bc94:	d140      	bne.n	800bd18 <_malloc_r+0xcc>
 800bc96:	6823      	ldr	r3, [r4, #0]
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	eb04 0803 	add.w	r8, r4, r3
 800bca0:	f000 fc92 	bl	800c5c8 <_sbrk_r>
 800bca4:	4580      	cmp	r8, r0
 800bca6:	d13a      	bne.n	800bd1e <_malloc_r+0xd2>
 800bca8:	6821      	ldr	r1, [r4, #0]
 800bcaa:	3503      	adds	r5, #3
 800bcac:	1a6d      	subs	r5, r5, r1
 800bcae:	f025 0503 	bic.w	r5, r5, #3
 800bcb2:	3508      	adds	r5, #8
 800bcb4:	2d0c      	cmp	r5, #12
 800bcb6:	bf38      	it	cc
 800bcb8:	250c      	movcc	r5, #12
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ffa5 	bl	800bc0c <sbrk_aligned>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	d02b      	beq.n	800bd1e <_malloc_r+0xd2>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	442b      	add	r3, r5
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	e00e      	b.n	800bcec <_malloc_r+0xa0>
 800bcce:	6822      	ldr	r2, [r4, #0]
 800bcd0:	1b52      	subs	r2, r2, r5
 800bcd2:	d41e      	bmi.n	800bd12 <_malloc_r+0xc6>
 800bcd4:	2a0b      	cmp	r2, #11
 800bcd6:	d916      	bls.n	800bd06 <_malloc_r+0xba>
 800bcd8:	1961      	adds	r1, r4, r5
 800bcda:	42a3      	cmp	r3, r4
 800bcdc:	6025      	str	r5, [r4, #0]
 800bcde:	bf18      	it	ne
 800bce0:	6059      	strne	r1, [r3, #4]
 800bce2:	6863      	ldr	r3, [r4, #4]
 800bce4:	bf08      	it	eq
 800bce6:	6031      	streq	r1, [r6, #0]
 800bce8:	5162      	str	r2, [r4, r5]
 800bcea:	604b      	str	r3, [r1, #4]
 800bcec:	4638      	mov	r0, r7
 800bcee:	f104 060b 	add.w	r6, r4, #11
 800bcf2:	f000 fee7 	bl	800cac4 <__malloc_unlock>
 800bcf6:	f026 0607 	bic.w	r6, r6, #7
 800bcfa:	1d23      	adds	r3, r4, #4
 800bcfc:	1af2      	subs	r2, r6, r3
 800bcfe:	d0b6      	beq.n	800bc6e <_malloc_r+0x22>
 800bd00:	1b9b      	subs	r3, r3, r6
 800bd02:	50a3      	str	r3, [r4, r2]
 800bd04:	e7b3      	b.n	800bc6e <_malloc_r+0x22>
 800bd06:	6862      	ldr	r2, [r4, #4]
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	bf0c      	ite	eq
 800bd0c:	6032      	streq	r2, [r6, #0]
 800bd0e:	605a      	strne	r2, [r3, #4]
 800bd10:	e7ec      	b.n	800bcec <_malloc_r+0xa0>
 800bd12:	4623      	mov	r3, r4
 800bd14:	6864      	ldr	r4, [r4, #4]
 800bd16:	e7b2      	b.n	800bc7e <_malloc_r+0x32>
 800bd18:	4634      	mov	r4, r6
 800bd1a:	6876      	ldr	r6, [r6, #4]
 800bd1c:	e7b9      	b.n	800bc92 <_malloc_r+0x46>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	603b      	str	r3, [r7, #0]
 800bd22:	4638      	mov	r0, r7
 800bd24:	f000 fece 	bl	800cac4 <__malloc_unlock>
 800bd28:	e7a1      	b.n	800bc6e <_malloc_r+0x22>
 800bd2a:	6025      	str	r5, [r4, #0]
 800bd2c:	e7de      	b.n	800bcec <_malloc_r+0xa0>
 800bd2e:	bf00      	nop
 800bd30:	2000f88c 	.word	0x2000f88c

0800bd34 <__ssputs_r>:
 800bd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd38:	688e      	ldr	r6, [r1, #8]
 800bd3a:	429e      	cmp	r6, r3
 800bd3c:	4682      	mov	sl, r0
 800bd3e:	460c      	mov	r4, r1
 800bd40:	4690      	mov	r8, r2
 800bd42:	461f      	mov	r7, r3
 800bd44:	d838      	bhi.n	800bdb8 <__ssputs_r+0x84>
 800bd46:	898a      	ldrh	r2, [r1, #12]
 800bd48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd4c:	d032      	beq.n	800bdb4 <__ssputs_r+0x80>
 800bd4e:	6825      	ldr	r5, [r4, #0]
 800bd50:	6909      	ldr	r1, [r1, #16]
 800bd52:	eba5 0901 	sub.w	r9, r5, r1
 800bd56:	6965      	ldr	r5, [r4, #20]
 800bd58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd60:	3301      	adds	r3, #1
 800bd62:	444b      	add	r3, r9
 800bd64:	106d      	asrs	r5, r5, #1
 800bd66:	429d      	cmp	r5, r3
 800bd68:	bf38      	it	cc
 800bd6a:	461d      	movcc	r5, r3
 800bd6c:	0553      	lsls	r3, r2, #21
 800bd6e:	d531      	bpl.n	800bdd4 <__ssputs_r+0xa0>
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7ff ff6b 	bl	800bc4c <_malloc_r>
 800bd76:	4606      	mov	r6, r0
 800bd78:	b950      	cbnz	r0, 800bd90 <__ssputs_r+0x5c>
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	f8ca 3000 	str.w	r3, [sl]
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd90:	6921      	ldr	r1, [r4, #16]
 800bd92:	464a      	mov	r2, r9
 800bd94:	f7ff fcec 	bl	800b770 <memcpy>
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	6126      	str	r6, [r4, #16]
 800bda6:	6165      	str	r5, [r4, #20]
 800bda8:	444e      	add	r6, r9
 800bdaa:	eba5 0509 	sub.w	r5, r5, r9
 800bdae:	6026      	str	r6, [r4, #0]
 800bdb0:	60a5      	str	r5, [r4, #8]
 800bdb2:	463e      	mov	r6, r7
 800bdb4:	42be      	cmp	r6, r7
 800bdb6:	d900      	bls.n	800bdba <__ssputs_r+0x86>
 800bdb8:	463e      	mov	r6, r7
 800bdba:	6820      	ldr	r0, [r4, #0]
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	4641      	mov	r1, r8
 800bdc0:	f7ff fce4 	bl	800b78c <memmove>
 800bdc4:	68a3      	ldr	r3, [r4, #8]
 800bdc6:	1b9b      	subs	r3, r3, r6
 800bdc8:	60a3      	str	r3, [r4, #8]
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	4433      	add	r3, r6
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	e7db      	b.n	800bd8c <__ssputs_r+0x58>
 800bdd4:	462a      	mov	r2, r5
 800bdd6:	f000 fe7b 	bl	800cad0 <_realloc_r>
 800bdda:	4606      	mov	r6, r0
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d1e1      	bne.n	800bda4 <__ssputs_r+0x70>
 800bde0:	6921      	ldr	r1, [r4, #16]
 800bde2:	4650      	mov	r0, sl
 800bde4:	f7ff fec6 	bl	800bb74 <_free_r>
 800bde8:	e7c7      	b.n	800bd7a <__ssputs_r+0x46>
	...

0800bdec <_svfiprintf_r>:
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	4698      	mov	r8, r3
 800bdf2:	898b      	ldrh	r3, [r1, #12]
 800bdf4:	061b      	lsls	r3, r3, #24
 800bdf6:	b09d      	sub	sp, #116	; 0x74
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	460d      	mov	r5, r1
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	d50e      	bpl.n	800be1e <_svfiprintf_r+0x32>
 800be00:	690b      	ldr	r3, [r1, #16]
 800be02:	b963      	cbnz	r3, 800be1e <_svfiprintf_r+0x32>
 800be04:	2140      	movs	r1, #64	; 0x40
 800be06:	f7ff ff21 	bl	800bc4c <_malloc_r>
 800be0a:	6028      	str	r0, [r5, #0]
 800be0c:	6128      	str	r0, [r5, #16]
 800be0e:	b920      	cbnz	r0, 800be1a <_svfiprintf_r+0x2e>
 800be10:	230c      	movs	r3, #12
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	e0d1      	b.n	800bfbe <_svfiprintf_r+0x1d2>
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	616b      	str	r3, [r5, #20]
 800be1e:	2300      	movs	r3, #0
 800be20:	9309      	str	r3, [sp, #36]	; 0x24
 800be22:	2320      	movs	r3, #32
 800be24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be28:	f8cd 800c 	str.w	r8, [sp, #12]
 800be2c:	2330      	movs	r3, #48	; 0x30
 800be2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfd8 <_svfiprintf_r+0x1ec>
 800be32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be36:	f04f 0901 	mov.w	r9, #1
 800be3a:	4623      	mov	r3, r4
 800be3c:	469a      	mov	sl, r3
 800be3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be42:	b10a      	cbz	r2, 800be48 <_svfiprintf_r+0x5c>
 800be44:	2a25      	cmp	r2, #37	; 0x25
 800be46:	d1f9      	bne.n	800be3c <_svfiprintf_r+0x50>
 800be48:	ebba 0b04 	subs.w	fp, sl, r4
 800be4c:	d00b      	beq.n	800be66 <_svfiprintf_r+0x7a>
 800be4e:	465b      	mov	r3, fp
 800be50:	4622      	mov	r2, r4
 800be52:	4629      	mov	r1, r5
 800be54:	4638      	mov	r0, r7
 800be56:	f7ff ff6d 	bl	800bd34 <__ssputs_r>
 800be5a:	3001      	adds	r0, #1
 800be5c:	f000 80aa 	beq.w	800bfb4 <_svfiprintf_r+0x1c8>
 800be60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be62:	445a      	add	r2, fp
 800be64:	9209      	str	r2, [sp, #36]	; 0x24
 800be66:	f89a 3000 	ldrb.w	r3, [sl]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 80a2 	beq.w	800bfb4 <_svfiprintf_r+0x1c8>
 800be70:	2300      	movs	r3, #0
 800be72:	f04f 32ff 	mov.w	r2, #4294967295
 800be76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be7a:	f10a 0a01 	add.w	sl, sl, #1
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	9307      	str	r3, [sp, #28]
 800be82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be86:	931a      	str	r3, [sp, #104]	; 0x68
 800be88:	4654      	mov	r4, sl
 800be8a:	2205      	movs	r2, #5
 800be8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be90:	4851      	ldr	r0, [pc, #324]	; (800bfd8 <_svfiprintf_r+0x1ec>)
 800be92:	f7f4 f9b5 	bl	8000200 <memchr>
 800be96:	9a04      	ldr	r2, [sp, #16]
 800be98:	b9d8      	cbnz	r0, 800bed2 <_svfiprintf_r+0xe6>
 800be9a:	06d0      	lsls	r0, r2, #27
 800be9c:	bf44      	itt	mi
 800be9e:	2320      	movmi	r3, #32
 800bea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea4:	0711      	lsls	r1, r2, #28
 800bea6:	bf44      	itt	mi
 800bea8:	232b      	movmi	r3, #43	; 0x2b
 800beaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beae:	f89a 3000 	ldrb.w	r3, [sl]
 800beb2:	2b2a      	cmp	r3, #42	; 0x2a
 800beb4:	d015      	beq.n	800bee2 <_svfiprintf_r+0xf6>
 800beb6:	9a07      	ldr	r2, [sp, #28]
 800beb8:	4654      	mov	r4, sl
 800beba:	2000      	movs	r0, #0
 800bebc:	f04f 0c0a 	mov.w	ip, #10
 800bec0:	4621      	mov	r1, r4
 800bec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec6:	3b30      	subs	r3, #48	; 0x30
 800bec8:	2b09      	cmp	r3, #9
 800beca:	d94e      	bls.n	800bf6a <_svfiprintf_r+0x17e>
 800becc:	b1b0      	cbz	r0, 800befc <_svfiprintf_r+0x110>
 800bece:	9207      	str	r2, [sp, #28]
 800bed0:	e014      	b.n	800befc <_svfiprintf_r+0x110>
 800bed2:	eba0 0308 	sub.w	r3, r0, r8
 800bed6:	fa09 f303 	lsl.w	r3, r9, r3
 800beda:	4313      	orrs	r3, r2
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	46a2      	mov	sl, r4
 800bee0:	e7d2      	b.n	800be88 <_svfiprintf_r+0x9c>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	1d19      	adds	r1, r3, #4
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	9103      	str	r1, [sp, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	bfbb      	ittet	lt
 800beee:	425b      	neglt	r3, r3
 800bef0:	f042 0202 	orrlt.w	r2, r2, #2
 800bef4:	9307      	strge	r3, [sp, #28]
 800bef6:	9307      	strlt	r3, [sp, #28]
 800bef8:	bfb8      	it	lt
 800befa:	9204      	strlt	r2, [sp, #16]
 800befc:	7823      	ldrb	r3, [r4, #0]
 800befe:	2b2e      	cmp	r3, #46	; 0x2e
 800bf00:	d10c      	bne.n	800bf1c <_svfiprintf_r+0x130>
 800bf02:	7863      	ldrb	r3, [r4, #1]
 800bf04:	2b2a      	cmp	r3, #42	; 0x2a
 800bf06:	d135      	bne.n	800bf74 <_svfiprintf_r+0x188>
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	1d1a      	adds	r2, r3, #4
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	9203      	str	r2, [sp, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfb8      	it	lt
 800bf14:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf18:	3402      	adds	r4, #2
 800bf1a:	9305      	str	r3, [sp, #20]
 800bf1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfe8 <_svfiprintf_r+0x1fc>
 800bf20:	7821      	ldrb	r1, [r4, #0]
 800bf22:	2203      	movs	r2, #3
 800bf24:	4650      	mov	r0, sl
 800bf26:	f7f4 f96b 	bl	8000200 <memchr>
 800bf2a:	b140      	cbz	r0, 800bf3e <_svfiprintf_r+0x152>
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	eba0 000a 	sub.w	r0, r0, sl
 800bf32:	fa03 f000 	lsl.w	r0, r3, r0
 800bf36:	9b04      	ldr	r3, [sp, #16]
 800bf38:	4303      	orrs	r3, r0
 800bf3a:	3401      	adds	r4, #1
 800bf3c:	9304      	str	r3, [sp, #16]
 800bf3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf42:	4826      	ldr	r0, [pc, #152]	; (800bfdc <_svfiprintf_r+0x1f0>)
 800bf44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf48:	2206      	movs	r2, #6
 800bf4a:	f7f4 f959 	bl	8000200 <memchr>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d038      	beq.n	800bfc4 <_svfiprintf_r+0x1d8>
 800bf52:	4b23      	ldr	r3, [pc, #140]	; (800bfe0 <_svfiprintf_r+0x1f4>)
 800bf54:	bb1b      	cbnz	r3, 800bf9e <_svfiprintf_r+0x1b2>
 800bf56:	9b03      	ldr	r3, [sp, #12]
 800bf58:	3307      	adds	r3, #7
 800bf5a:	f023 0307 	bic.w	r3, r3, #7
 800bf5e:	3308      	adds	r3, #8
 800bf60:	9303      	str	r3, [sp, #12]
 800bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf64:	4433      	add	r3, r6
 800bf66:	9309      	str	r3, [sp, #36]	; 0x24
 800bf68:	e767      	b.n	800be3a <_svfiprintf_r+0x4e>
 800bf6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf6e:	460c      	mov	r4, r1
 800bf70:	2001      	movs	r0, #1
 800bf72:	e7a5      	b.n	800bec0 <_svfiprintf_r+0xd4>
 800bf74:	2300      	movs	r3, #0
 800bf76:	3401      	adds	r4, #1
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f04f 0c0a 	mov.w	ip, #10
 800bf80:	4620      	mov	r0, r4
 800bf82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf86:	3a30      	subs	r2, #48	; 0x30
 800bf88:	2a09      	cmp	r2, #9
 800bf8a:	d903      	bls.n	800bf94 <_svfiprintf_r+0x1a8>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d0c5      	beq.n	800bf1c <_svfiprintf_r+0x130>
 800bf90:	9105      	str	r1, [sp, #20]
 800bf92:	e7c3      	b.n	800bf1c <_svfiprintf_r+0x130>
 800bf94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf98:	4604      	mov	r4, r0
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e7f0      	b.n	800bf80 <_svfiprintf_r+0x194>
 800bf9e:	ab03      	add	r3, sp, #12
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <_svfiprintf_r+0x1f8>)
 800bfa6:	a904      	add	r1, sp, #16
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f3af 8000 	nop.w
 800bfae:	1c42      	adds	r2, r0, #1
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	d1d6      	bne.n	800bf62 <_svfiprintf_r+0x176>
 800bfb4:	89ab      	ldrh	r3, [r5, #12]
 800bfb6:	065b      	lsls	r3, r3, #25
 800bfb8:	f53f af2c 	bmi.w	800be14 <_svfiprintf_r+0x28>
 800bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfbe:	b01d      	add	sp, #116	; 0x74
 800bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc4:	ab03      	add	r3, sp, #12
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	462a      	mov	r2, r5
 800bfca:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <_svfiprintf_r+0x1f8>)
 800bfcc:	a904      	add	r1, sp, #16
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f000 f9d4 	bl	800c37c <_printf_i>
 800bfd4:	e7eb      	b.n	800bfae <_svfiprintf_r+0x1c2>
 800bfd6:	bf00      	nop
 800bfd8:	080104b8 	.word	0x080104b8
 800bfdc:	080104c2 	.word	0x080104c2
 800bfe0:	00000000 	.word	0x00000000
 800bfe4:	0800bd35 	.word	0x0800bd35
 800bfe8:	080104be 	.word	0x080104be

0800bfec <__sfputc_r>:
 800bfec:	6893      	ldr	r3, [r2, #8]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	b410      	push	{r4}
 800bff4:	6093      	str	r3, [r2, #8]
 800bff6:	da08      	bge.n	800c00a <__sfputc_r+0x1e>
 800bff8:	6994      	ldr	r4, [r2, #24]
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	db01      	blt.n	800c002 <__sfputc_r+0x16>
 800bffe:	290a      	cmp	r1, #10
 800c000:	d103      	bne.n	800c00a <__sfputc_r+0x1e>
 800c002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c006:	f000 bb33 	b.w	800c670 <__swbuf_r>
 800c00a:	6813      	ldr	r3, [r2, #0]
 800c00c:	1c58      	adds	r0, r3, #1
 800c00e:	6010      	str	r0, [r2, #0]
 800c010:	7019      	strb	r1, [r3, #0]
 800c012:	4608      	mov	r0, r1
 800c014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <__sfputs_r>:
 800c01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01c:	4606      	mov	r6, r0
 800c01e:	460f      	mov	r7, r1
 800c020:	4614      	mov	r4, r2
 800c022:	18d5      	adds	r5, r2, r3
 800c024:	42ac      	cmp	r4, r5
 800c026:	d101      	bne.n	800c02c <__sfputs_r+0x12>
 800c028:	2000      	movs	r0, #0
 800c02a:	e007      	b.n	800c03c <__sfputs_r+0x22>
 800c02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c030:	463a      	mov	r2, r7
 800c032:	4630      	mov	r0, r6
 800c034:	f7ff ffda 	bl	800bfec <__sfputc_r>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d1f3      	bne.n	800c024 <__sfputs_r+0xa>
 800c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c040 <_vfiprintf_r>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	460d      	mov	r5, r1
 800c046:	b09d      	sub	sp, #116	; 0x74
 800c048:	4614      	mov	r4, r2
 800c04a:	4698      	mov	r8, r3
 800c04c:	4606      	mov	r6, r0
 800c04e:	b118      	cbz	r0, 800c058 <_vfiprintf_r+0x18>
 800c050:	6983      	ldr	r3, [r0, #24]
 800c052:	b90b      	cbnz	r3, 800c058 <_vfiprintf_r+0x18>
 800c054:	f7ff fcd4 	bl	800ba00 <__sinit>
 800c058:	4b89      	ldr	r3, [pc, #548]	; (800c280 <_vfiprintf_r+0x240>)
 800c05a:	429d      	cmp	r5, r3
 800c05c:	d11b      	bne.n	800c096 <_vfiprintf_r+0x56>
 800c05e:	6875      	ldr	r5, [r6, #4]
 800c060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c062:	07d9      	lsls	r1, r3, #31
 800c064:	d405      	bmi.n	800c072 <_vfiprintf_r+0x32>
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	059a      	lsls	r2, r3, #22
 800c06a:	d402      	bmi.n	800c072 <_vfiprintf_r+0x32>
 800c06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c06e:	f7ff fd77 	bl	800bb60 <__retarget_lock_acquire_recursive>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	071b      	lsls	r3, r3, #28
 800c076:	d501      	bpl.n	800c07c <_vfiprintf_r+0x3c>
 800c078:	692b      	ldr	r3, [r5, #16]
 800c07a:	b9eb      	cbnz	r3, 800c0b8 <_vfiprintf_r+0x78>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4630      	mov	r0, r6
 800c080:	f000 fb5a 	bl	800c738 <__swsetup_r>
 800c084:	b1c0      	cbz	r0, 800c0b8 <_vfiprintf_r+0x78>
 800c086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c088:	07dc      	lsls	r4, r3, #31
 800c08a:	d50e      	bpl.n	800c0aa <_vfiprintf_r+0x6a>
 800c08c:	f04f 30ff 	mov.w	r0, #4294967295
 800c090:	b01d      	add	sp, #116	; 0x74
 800c092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c096:	4b7b      	ldr	r3, [pc, #492]	; (800c284 <_vfiprintf_r+0x244>)
 800c098:	429d      	cmp	r5, r3
 800c09a:	d101      	bne.n	800c0a0 <_vfiprintf_r+0x60>
 800c09c:	68b5      	ldr	r5, [r6, #8]
 800c09e:	e7df      	b.n	800c060 <_vfiprintf_r+0x20>
 800c0a0:	4b79      	ldr	r3, [pc, #484]	; (800c288 <_vfiprintf_r+0x248>)
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	bf08      	it	eq
 800c0a6:	68f5      	ldreq	r5, [r6, #12]
 800c0a8:	e7da      	b.n	800c060 <_vfiprintf_r+0x20>
 800c0aa:	89ab      	ldrh	r3, [r5, #12]
 800c0ac:	0598      	lsls	r0, r3, #22
 800c0ae:	d4ed      	bmi.n	800c08c <_vfiprintf_r+0x4c>
 800c0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0b2:	f7ff fd56 	bl	800bb62 <__retarget_lock_release_recursive>
 800c0b6:	e7e9      	b.n	800c08c <_vfiprintf_r+0x4c>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c0bc:	2320      	movs	r3, #32
 800c0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0c6:	2330      	movs	r3, #48	; 0x30
 800c0c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c28c <_vfiprintf_r+0x24c>
 800c0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0d0:	f04f 0901 	mov.w	r9, #1
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	469a      	mov	sl, r3
 800c0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0dc:	b10a      	cbz	r2, 800c0e2 <_vfiprintf_r+0xa2>
 800c0de:	2a25      	cmp	r2, #37	; 0x25
 800c0e0:	d1f9      	bne.n	800c0d6 <_vfiprintf_r+0x96>
 800c0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e6:	d00b      	beq.n	800c100 <_vfiprintf_r+0xc0>
 800c0e8:	465b      	mov	r3, fp
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f7ff ff93 	bl	800c01a <__sfputs_r>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f000 80aa 	beq.w	800c24e <_vfiprintf_r+0x20e>
 800c0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fc:	445a      	add	r2, fp
 800c0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c100:	f89a 3000 	ldrb.w	r3, [sl]
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80a2 	beq.w	800c24e <_vfiprintf_r+0x20e>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f04f 32ff 	mov.w	r2, #4294967295
 800c110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c114:	f10a 0a01 	add.w	sl, sl, #1
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	9307      	str	r3, [sp, #28]
 800c11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c120:	931a      	str	r3, [sp, #104]	; 0x68
 800c122:	4654      	mov	r4, sl
 800c124:	2205      	movs	r2, #5
 800c126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c12a:	4858      	ldr	r0, [pc, #352]	; (800c28c <_vfiprintf_r+0x24c>)
 800c12c:	f7f4 f868 	bl	8000200 <memchr>
 800c130:	9a04      	ldr	r2, [sp, #16]
 800c132:	b9d8      	cbnz	r0, 800c16c <_vfiprintf_r+0x12c>
 800c134:	06d1      	lsls	r1, r2, #27
 800c136:	bf44      	itt	mi
 800c138:	2320      	movmi	r3, #32
 800c13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c13e:	0713      	lsls	r3, r2, #28
 800c140:	bf44      	itt	mi
 800c142:	232b      	movmi	r3, #43	; 0x2b
 800c144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c148:	f89a 3000 	ldrb.w	r3, [sl]
 800c14c:	2b2a      	cmp	r3, #42	; 0x2a
 800c14e:	d015      	beq.n	800c17c <_vfiprintf_r+0x13c>
 800c150:	9a07      	ldr	r2, [sp, #28]
 800c152:	4654      	mov	r4, sl
 800c154:	2000      	movs	r0, #0
 800c156:	f04f 0c0a 	mov.w	ip, #10
 800c15a:	4621      	mov	r1, r4
 800c15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c160:	3b30      	subs	r3, #48	; 0x30
 800c162:	2b09      	cmp	r3, #9
 800c164:	d94e      	bls.n	800c204 <_vfiprintf_r+0x1c4>
 800c166:	b1b0      	cbz	r0, 800c196 <_vfiprintf_r+0x156>
 800c168:	9207      	str	r2, [sp, #28]
 800c16a:	e014      	b.n	800c196 <_vfiprintf_r+0x156>
 800c16c:	eba0 0308 	sub.w	r3, r0, r8
 800c170:	fa09 f303 	lsl.w	r3, r9, r3
 800c174:	4313      	orrs	r3, r2
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	46a2      	mov	sl, r4
 800c17a:	e7d2      	b.n	800c122 <_vfiprintf_r+0xe2>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	1d19      	adds	r1, r3, #4
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	9103      	str	r1, [sp, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfbb      	ittet	lt
 800c188:	425b      	neglt	r3, r3
 800c18a:	f042 0202 	orrlt.w	r2, r2, #2
 800c18e:	9307      	strge	r3, [sp, #28]
 800c190:	9307      	strlt	r3, [sp, #28]
 800c192:	bfb8      	it	lt
 800c194:	9204      	strlt	r2, [sp, #16]
 800c196:	7823      	ldrb	r3, [r4, #0]
 800c198:	2b2e      	cmp	r3, #46	; 0x2e
 800c19a:	d10c      	bne.n	800c1b6 <_vfiprintf_r+0x176>
 800c19c:	7863      	ldrb	r3, [r4, #1]
 800c19e:	2b2a      	cmp	r3, #42	; 0x2a
 800c1a0:	d135      	bne.n	800c20e <_vfiprintf_r+0x1ce>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	1d1a      	adds	r2, r3, #4
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	9203      	str	r2, [sp, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	bfb8      	it	lt
 800c1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b2:	3402      	adds	r4, #2
 800c1b4:	9305      	str	r3, [sp, #20]
 800c1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c29c <_vfiprintf_r+0x25c>
 800c1ba:	7821      	ldrb	r1, [r4, #0]
 800c1bc:	2203      	movs	r2, #3
 800c1be:	4650      	mov	r0, sl
 800c1c0:	f7f4 f81e 	bl	8000200 <memchr>
 800c1c4:	b140      	cbz	r0, 800c1d8 <_vfiprintf_r+0x198>
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	eba0 000a 	sub.w	r0, r0, sl
 800c1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	4303      	orrs	r3, r0
 800c1d4:	3401      	adds	r4, #1
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1dc:	482c      	ldr	r0, [pc, #176]	; (800c290 <_vfiprintf_r+0x250>)
 800c1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e2:	2206      	movs	r2, #6
 800c1e4:	f7f4 f80c 	bl	8000200 <memchr>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d03f      	beq.n	800c26c <_vfiprintf_r+0x22c>
 800c1ec:	4b29      	ldr	r3, [pc, #164]	; (800c294 <_vfiprintf_r+0x254>)
 800c1ee:	bb1b      	cbnz	r3, 800c238 <_vfiprintf_r+0x1f8>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	3307      	adds	r3, #7
 800c1f4:	f023 0307 	bic.w	r3, r3, #7
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	9303      	str	r3, [sp, #12]
 800c1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fe:	443b      	add	r3, r7
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	e767      	b.n	800c0d4 <_vfiprintf_r+0x94>
 800c204:	fb0c 3202 	mla	r2, ip, r2, r3
 800c208:	460c      	mov	r4, r1
 800c20a:	2001      	movs	r0, #1
 800c20c:	e7a5      	b.n	800c15a <_vfiprintf_r+0x11a>
 800c20e:	2300      	movs	r3, #0
 800c210:	3401      	adds	r4, #1
 800c212:	9305      	str	r3, [sp, #20]
 800c214:	4619      	mov	r1, r3
 800c216:	f04f 0c0a 	mov.w	ip, #10
 800c21a:	4620      	mov	r0, r4
 800c21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c220:	3a30      	subs	r2, #48	; 0x30
 800c222:	2a09      	cmp	r2, #9
 800c224:	d903      	bls.n	800c22e <_vfiprintf_r+0x1ee>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0c5      	beq.n	800c1b6 <_vfiprintf_r+0x176>
 800c22a:	9105      	str	r1, [sp, #20]
 800c22c:	e7c3      	b.n	800c1b6 <_vfiprintf_r+0x176>
 800c22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c232:	4604      	mov	r4, r0
 800c234:	2301      	movs	r3, #1
 800c236:	e7f0      	b.n	800c21a <_vfiprintf_r+0x1da>
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4b16      	ldr	r3, [pc, #88]	; (800c298 <_vfiprintf_r+0x258>)
 800c240:	a904      	add	r1, sp, #16
 800c242:	4630      	mov	r0, r6
 800c244:	f3af 8000 	nop.w
 800c248:	4607      	mov	r7, r0
 800c24a:	1c78      	adds	r0, r7, #1
 800c24c:	d1d6      	bne.n	800c1fc <_vfiprintf_r+0x1bc>
 800c24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c250:	07d9      	lsls	r1, r3, #31
 800c252:	d405      	bmi.n	800c260 <_vfiprintf_r+0x220>
 800c254:	89ab      	ldrh	r3, [r5, #12]
 800c256:	059a      	lsls	r2, r3, #22
 800c258:	d402      	bmi.n	800c260 <_vfiprintf_r+0x220>
 800c25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c25c:	f7ff fc81 	bl	800bb62 <__retarget_lock_release_recursive>
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	065b      	lsls	r3, r3, #25
 800c264:	f53f af12 	bmi.w	800c08c <_vfiprintf_r+0x4c>
 800c268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c26a:	e711      	b.n	800c090 <_vfiprintf_r+0x50>
 800c26c:	ab03      	add	r3, sp, #12
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	462a      	mov	r2, r5
 800c272:	4b09      	ldr	r3, [pc, #36]	; (800c298 <_vfiprintf_r+0x258>)
 800c274:	a904      	add	r1, sp, #16
 800c276:	4630      	mov	r0, r6
 800c278:	f000 f880 	bl	800c37c <_printf_i>
 800c27c:	e7e4      	b.n	800c248 <_vfiprintf_r+0x208>
 800c27e:	bf00      	nop
 800c280:	08010478 	.word	0x08010478
 800c284:	08010498 	.word	0x08010498
 800c288:	08010458 	.word	0x08010458
 800c28c:	080104b8 	.word	0x080104b8
 800c290:	080104c2 	.word	0x080104c2
 800c294:	00000000 	.word	0x00000000
 800c298:	0800c01b 	.word	0x0800c01b
 800c29c:	080104be 	.word	0x080104be

0800c2a0 <_printf_common>:
 800c2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	4699      	mov	r9, r3
 800c2a8:	688a      	ldr	r2, [r1, #8]
 800c2aa:	690b      	ldr	r3, [r1, #16]
 800c2ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	bfb8      	it	lt
 800c2b4:	4613      	movlt	r3, r2
 800c2b6:	6033      	str	r3, [r6, #0]
 800c2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2bc:	4607      	mov	r7, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	b10a      	cbz	r2, 800c2c6 <_printf_common+0x26>
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	6033      	str	r3, [r6, #0]
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	0699      	lsls	r1, r3, #26
 800c2ca:	bf42      	ittt	mi
 800c2cc:	6833      	ldrmi	r3, [r6, #0]
 800c2ce:	3302      	addmi	r3, #2
 800c2d0:	6033      	strmi	r3, [r6, #0]
 800c2d2:	6825      	ldr	r5, [r4, #0]
 800c2d4:	f015 0506 	ands.w	r5, r5, #6
 800c2d8:	d106      	bne.n	800c2e8 <_printf_common+0x48>
 800c2da:	f104 0a19 	add.w	sl, r4, #25
 800c2de:	68e3      	ldr	r3, [r4, #12]
 800c2e0:	6832      	ldr	r2, [r6, #0]
 800c2e2:	1a9b      	subs	r3, r3, r2
 800c2e4:	42ab      	cmp	r3, r5
 800c2e6:	dc26      	bgt.n	800c336 <_printf_common+0x96>
 800c2e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2ec:	1e13      	subs	r3, r2, #0
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	bf18      	it	ne
 800c2f2:	2301      	movne	r3, #1
 800c2f4:	0692      	lsls	r2, r2, #26
 800c2f6:	d42b      	bmi.n	800c350 <_printf_common+0xb0>
 800c2f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	4638      	mov	r0, r7
 800c300:	47c0      	blx	r8
 800c302:	3001      	adds	r0, #1
 800c304:	d01e      	beq.n	800c344 <_printf_common+0xa4>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	68e5      	ldr	r5, [r4, #12]
 800c30a:	6832      	ldr	r2, [r6, #0]
 800c30c:	f003 0306 	and.w	r3, r3, #6
 800c310:	2b04      	cmp	r3, #4
 800c312:	bf08      	it	eq
 800c314:	1aad      	subeq	r5, r5, r2
 800c316:	68a3      	ldr	r3, [r4, #8]
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	bf0c      	ite	eq
 800c31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c320:	2500      	movne	r5, #0
 800c322:	4293      	cmp	r3, r2
 800c324:	bfc4      	itt	gt
 800c326:	1a9b      	subgt	r3, r3, r2
 800c328:	18ed      	addgt	r5, r5, r3
 800c32a:	2600      	movs	r6, #0
 800c32c:	341a      	adds	r4, #26
 800c32e:	42b5      	cmp	r5, r6
 800c330:	d11a      	bne.n	800c368 <_printf_common+0xc8>
 800c332:	2000      	movs	r0, #0
 800c334:	e008      	b.n	800c348 <_printf_common+0xa8>
 800c336:	2301      	movs	r3, #1
 800c338:	4652      	mov	r2, sl
 800c33a:	4649      	mov	r1, r9
 800c33c:	4638      	mov	r0, r7
 800c33e:	47c0      	blx	r8
 800c340:	3001      	adds	r0, #1
 800c342:	d103      	bne.n	800c34c <_printf_common+0xac>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34c:	3501      	adds	r5, #1
 800c34e:	e7c6      	b.n	800c2de <_printf_common+0x3e>
 800c350:	18e1      	adds	r1, r4, r3
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	2030      	movs	r0, #48	; 0x30
 800c356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c35a:	4422      	add	r2, r4
 800c35c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c360:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c364:	3302      	adds	r3, #2
 800c366:	e7c7      	b.n	800c2f8 <_printf_common+0x58>
 800c368:	2301      	movs	r3, #1
 800c36a:	4622      	mov	r2, r4
 800c36c:	4649      	mov	r1, r9
 800c36e:	4638      	mov	r0, r7
 800c370:	47c0      	blx	r8
 800c372:	3001      	adds	r0, #1
 800c374:	d0e6      	beq.n	800c344 <_printf_common+0xa4>
 800c376:	3601      	adds	r6, #1
 800c378:	e7d9      	b.n	800c32e <_printf_common+0x8e>
	...

0800c37c <_printf_i>:
 800c37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	7e0f      	ldrb	r7, [r1, #24]
 800c382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c384:	2f78      	cmp	r7, #120	; 0x78
 800c386:	4691      	mov	r9, r2
 800c388:	4680      	mov	r8, r0
 800c38a:	460c      	mov	r4, r1
 800c38c:	469a      	mov	sl, r3
 800c38e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c392:	d807      	bhi.n	800c3a4 <_printf_i+0x28>
 800c394:	2f62      	cmp	r7, #98	; 0x62
 800c396:	d80a      	bhi.n	800c3ae <_printf_i+0x32>
 800c398:	2f00      	cmp	r7, #0
 800c39a:	f000 80d8 	beq.w	800c54e <_printf_i+0x1d2>
 800c39e:	2f58      	cmp	r7, #88	; 0x58
 800c3a0:	f000 80a3 	beq.w	800c4ea <_printf_i+0x16e>
 800c3a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3ac:	e03a      	b.n	800c424 <_printf_i+0xa8>
 800c3ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3b2:	2b15      	cmp	r3, #21
 800c3b4:	d8f6      	bhi.n	800c3a4 <_printf_i+0x28>
 800c3b6:	a101      	add	r1, pc, #4	; (adr r1, 800c3bc <_printf_i+0x40>)
 800c3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3bc:	0800c415 	.word	0x0800c415
 800c3c0:	0800c429 	.word	0x0800c429
 800c3c4:	0800c3a5 	.word	0x0800c3a5
 800c3c8:	0800c3a5 	.word	0x0800c3a5
 800c3cc:	0800c3a5 	.word	0x0800c3a5
 800c3d0:	0800c3a5 	.word	0x0800c3a5
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c3a5 	.word	0x0800c3a5
 800c3dc:	0800c3a5 	.word	0x0800c3a5
 800c3e0:	0800c3a5 	.word	0x0800c3a5
 800c3e4:	0800c3a5 	.word	0x0800c3a5
 800c3e8:	0800c535 	.word	0x0800c535
 800c3ec:	0800c459 	.word	0x0800c459
 800c3f0:	0800c517 	.word	0x0800c517
 800c3f4:	0800c3a5 	.word	0x0800c3a5
 800c3f8:	0800c3a5 	.word	0x0800c3a5
 800c3fc:	0800c557 	.word	0x0800c557
 800c400:	0800c3a5 	.word	0x0800c3a5
 800c404:	0800c459 	.word	0x0800c459
 800c408:	0800c3a5 	.word	0x0800c3a5
 800c40c:	0800c3a5 	.word	0x0800c3a5
 800c410:	0800c51f 	.word	0x0800c51f
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	1d1a      	adds	r2, r3, #4
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	602a      	str	r2, [r5, #0]
 800c41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c420:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c424:	2301      	movs	r3, #1
 800c426:	e0a3      	b.n	800c570 <_printf_i+0x1f4>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	6829      	ldr	r1, [r5, #0]
 800c42c:	0606      	lsls	r6, r0, #24
 800c42e:	f101 0304 	add.w	r3, r1, #4
 800c432:	d50a      	bpl.n	800c44a <_printf_i+0xce>
 800c434:	680e      	ldr	r6, [r1, #0]
 800c436:	602b      	str	r3, [r5, #0]
 800c438:	2e00      	cmp	r6, #0
 800c43a:	da03      	bge.n	800c444 <_printf_i+0xc8>
 800c43c:	232d      	movs	r3, #45	; 0x2d
 800c43e:	4276      	negs	r6, r6
 800c440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c444:	485e      	ldr	r0, [pc, #376]	; (800c5c0 <_printf_i+0x244>)
 800c446:	230a      	movs	r3, #10
 800c448:	e019      	b.n	800c47e <_printf_i+0x102>
 800c44a:	680e      	ldr	r6, [r1, #0]
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c452:	bf18      	it	ne
 800c454:	b236      	sxthne	r6, r6
 800c456:	e7ef      	b.n	800c438 <_printf_i+0xbc>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	1d19      	adds	r1, r3, #4
 800c45e:	6029      	str	r1, [r5, #0]
 800c460:	0601      	lsls	r1, r0, #24
 800c462:	d501      	bpl.n	800c468 <_printf_i+0xec>
 800c464:	681e      	ldr	r6, [r3, #0]
 800c466:	e002      	b.n	800c46e <_printf_i+0xf2>
 800c468:	0646      	lsls	r6, r0, #25
 800c46a:	d5fb      	bpl.n	800c464 <_printf_i+0xe8>
 800c46c:	881e      	ldrh	r6, [r3, #0]
 800c46e:	4854      	ldr	r0, [pc, #336]	; (800c5c0 <_printf_i+0x244>)
 800c470:	2f6f      	cmp	r7, #111	; 0x6f
 800c472:	bf0c      	ite	eq
 800c474:	2308      	moveq	r3, #8
 800c476:	230a      	movne	r3, #10
 800c478:	2100      	movs	r1, #0
 800c47a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c47e:	6865      	ldr	r5, [r4, #4]
 800c480:	60a5      	str	r5, [r4, #8]
 800c482:	2d00      	cmp	r5, #0
 800c484:	bfa2      	ittt	ge
 800c486:	6821      	ldrge	r1, [r4, #0]
 800c488:	f021 0104 	bicge.w	r1, r1, #4
 800c48c:	6021      	strge	r1, [r4, #0]
 800c48e:	b90e      	cbnz	r6, 800c494 <_printf_i+0x118>
 800c490:	2d00      	cmp	r5, #0
 800c492:	d04d      	beq.n	800c530 <_printf_i+0x1b4>
 800c494:	4615      	mov	r5, r2
 800c496:	fbb6 f1f3 	udiv	r1, r6, r3
 800c49a:	fb03 6711 	mls	r7, r3, r1, r6
 800c49e:	5dc7      	ldrb	r7, [r0, r7]
 800c4a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4a4:	4637      	mov	r7, r6
 800c4a6:	42bb      	cmp	r3, r7
 800c4a8:	460e      	mov	r6, r1
 800c4aa:	d9f4      	bls.n	800c496 <_printf_i+0x11a>
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	d10b      	bne.n	800c4c8 <_printf_i+0x14c>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	07de      	lsls	r6, r3, #31
 800c4b4:	d508      	bpl.n	800c4c8 <_printf_i+0x14c>
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	6861      	ldr	r1, [r4, #4]
 800c4ba:	4299      	cmp	r1, r3
 800c4bc:	bfde      	ittt	le
 800c4be:	2330      	movle	r3, #48	; 0x30
 800c4c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4c8:	1b52      	subs	r2, r2, r5
 800c4ca:	6122      	str	r2, [r4, #16]
 800c4cc:	f8cd a000 	str.w	sl, [sp]
 800c4d0:	464b      	mov	r3, r9
 800c4d2:	aa03      	add	r2, sp, #12
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	f7ff fee2 	bl	800c2a0 <_printf_common>
 800c4dc:	3001      	adds	r0, #1
 800c4de:	d14c      	bne.n	800c57a <_printf_i+0x1fe>
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	b004      	add	sp, #16
 800c4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ea:	4835      	ldr	r0, [pc, #212]	; (800c5c0 <_printf_i+0x244>)
 800c4ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4f0:	6829      	ldr	r1, [r5, #0]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4f8:	6029      	str	r1, [r5, #0]
 800c4fa:	061d      	lsls	r5, r3, #24
 800c4fc:	d514      	bpl.n	800c528 <_printf_i+0x1ac>
 800c4fe:	07df      	lsls	r7, r3, #31
 800c500:	bf44      	itt	mi
 800c502:	f043 0320 	orrmi.w	r3, r3, #32
 800c506:	6023      	strmi	r3, [r4, #0]
 800c508:	b91e      	cbnz	r6, 800c512 <_printf_i+0x196>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	f023 0320 	bic.w	r3, r3, #32
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	2310      	movs	r3, #16
 800c514:	e7b0      	b.n	800c478 <_printf_i+0xfc>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	f043 0320 	orr.w	r3, r3, #32
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	2378      	movs	r3, #120	; 0x78
 800c520:	4828      	ldr	r0, [pc, #160]	; (800c5c4 <_printf_i+0x248>)
 800c522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c526:	e7e3      	b.n	800c4f0 <_printf_i+0x174>
 800c528:	0659      	lsls	r1, r3, #25
 800c52a:	bf48      	it	mi
 800c52c:	b2b6      	uxthmi	r6, r6
 800c52e:	e7e6      	b.n	800c4fe <_printf_i+0x182>
 800c530:	4615      	mov	r5, r2
 800c532:	e7bb      	b.n	800c4ac <_printf_i+0x130>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	6826      	ldr	r6, [r4, #0]
 800c538:	6961      	ldr	r1, [r4, #20]
 800c53a:	1d18      	adds	r0, r3, #4
 800c53c:	6028      	str	r0, [r5, #0]
 800c53e:	0635      	lsls	r5, r6, #24
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	d501      	bpl.n	800c548 <_printf_i+0x1cc>
 800c544:	6019      	str	r1, [r3, #0]
 800c546:	e002      	b.n	800c54e <_printf_i+0x1d2>
 800c548:	0670      	lsls	r0, r6, #25
 800c54a:	d5fb      	bpl.n	800c544 <_printf_i+0x1c8>
 800c54c:	8019      	strh	r1, [r3, #0]
 800c54e:	2300      	movs	r3, #0
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	4615      	mov	r5, r2
 800c554:	e7ba      	b.n	800c4cc <_printf_i+0x150>
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	1d1a      	adds	r2, r3, #4
 800c55a:	602a      	str	r2, [r5, #0]
 800c55c:	681d      	ldr	r5, [r3, #0]
 800c55e:	6862      	ldr	r2, [r4, #4]
 800c560:	2100      	movs	r1, #0
 800c562:	4628      	mov	r0, r5
 800c564:	f7f3 fe4c 	bl	8000200 <memchr>
 800c568:	b108      	cbz	r0, 800c56e <_printf_i+0x1f2>
 800c56a:	1b40      	subs	r0, r0, r5
 800c56c:	6060      	str	r0, [r4, #4]
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	6123      	str	r3, [r4, #16]
 800c572:	2300      	movs	r3, #0
 800c574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c578:	e7a8      	b.n	800c4cc <_printf_i+0x150>
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	462a      	mov	r2, r5
 800c57e:	4649      	mov	r1, r9
 800c580:	4640      	mov	r0, r8
 800c582:	47d0      	blx	sl
 800c584:	3001      	adds	r0, #1
 800c586:	d0ab      	beq.n	800c4e0 <_printf_i+0x164>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	079b      	lsls	r3, r3, #30
 800c58c:	d413      	bmi.n	800c5b6 <_printf_i+0x23a>
 800c58e:	68e0      	ldr	r0, [r4, #12]
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	4298      	cmp	r0, r3
 800c594:	bfb8      	it	lt
 800c596:	4618      	movlt	r0, r3
 800c598:	e7a4      	b.n	800c4e4 <_printf_i+0x168>
 800c59a:	2301      	movs	r3, #1
 800c59c:	4632      	mov	r2, r6
 800c59e:	4649      	mov	r1, r9
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	47d0      	blx	sl
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d09b      	beq.n	800c4e0 <_printf_i+0x164>
 800c5a8:	3501      	adds	r5, #1
 800c5aa:	68e3      	ldr	r3, [r4, #12]
 800c5ac:	9903      	ldr	r1, [sp, #12]
 800c5ae:	1a5b      	subs	r3, r3, r1
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dcf2      	bgt.n	800c59a <_printf_i+0x21e>
 800c5b4:	e7eb      	b.n	800c58e <_printf_i+0x212>
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	f104 0619 	add.w	r6, r4, #25
 800c5bc:	e7f5      	b.n	800c5aa <_printf_i+0x22e>
 800c5be:	bf00      	nop
 800c5c0:	080104c9 	.word	0x080104c9
 800c5c4:	080104da 	.word	0x080104da

0800c5c8 <_sbrk_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d06      	ldr	r5, [pc, #24]	; (800c5e4 <_sbrk_r+0x1c>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f000 fb64 	bl	800cca0 <_sbrk>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_sbrk_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_sbrk_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	2000f884 	.word	0x2000f884

0800c5e8 <__sread>:
 800c5e8:	b510      	push	{r4, lr}
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f0:	f000 fa9e 	bl	800cb30 <_read_r>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	bfab      	itete	ge
 800c5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c5fc:	181b      	addge	r3, r3, r0
 800c5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c602:	bfac      	ite	ge
 800c604:	6563      	strge	r3, [r4, #84]	; 0x54
 800c606:	81a3      	strhlt	r3, [r4, #12]
 800c608:	bd10      	pop	{r4, pc}

0800c60a <__swrite>:
 800c60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60e:	461f      	mov	r7, r3
 800c610:	898b      	ldrh	r3, [r1, #12]
 800c612:	05db      	lsls	r3, r3, #23
 800c614:	4605      	mov	r5, r0
 800c616:	460c      	mov	r4, r1
 800c618:	4616      	mov	r6, r2
 800c61a:	d505      	bpl.n	800c628 <__swrite+0x1e>
 800c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c620:	2302      	movs	r3, #2
 800c622:	2200      	movs	r2, #0
 800c624:	f000 f9d0 	bl	800c9c8 <_lseek_r>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c632:	81a3      	strh	r3, [r4, #12]
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	4628      	mov	r0, r5
 800c63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c63e:	f000 b869 	b.w	800c714 <_write_r>

0800c642 <__sseek>:
 800c642:	b510      	push	{r4, lr}
 800c644:	460c      	mov	r4, r1
 800c646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c64a:	f000 f9bd 	bl	800c9c8 <_lseek_r>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	bf15      	itete	ne
 800c654:	6560      	strne	r0, [r4, #84]	; 0x54
 800c656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c65e:	81a3      	strheq	r3, [r4, #12]
 800c660:	bf18      	it	ne
 800c662:	81a3      	strhne	r3, [r4, #12]
 800c664:	bd10      	pop	{r4, pc}

0800c666 <__sclose>:
 800c666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c66a:	f000 b8db 	b.w	800c824 <_close_r>
	...

0800c670 <__swbuf_r>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	460e      	mov	r6, r1
 800c674:	4614      	mov	r4, r2
 800c676:	4605      	mov	r5, r0
 800c678:	b118      	cbz	r0, 800c682 <__swbuf_r+0x12>
 800c67a:	6983      	ldr	r3, [r0, #24]
 800c67c:	b90b      	cbnz	r3, 800c682 <__swbuf_r+0x12>
 800c67e:	f7ff f9bf 	bl	800ba00 <__sinit>
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <__swbuf_r+0x98>)
 800c684:	429c      	cmp	r4, r3
 800c686:	d12b      	bne.n	800c6e0 <__swbuf_r+0x70>
 800c688:	686c      	ldr	r4, [r5, #4]
 800c68a:	69a3      	ldr	r3, [r4, #24]
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	071a      	lsls	r2, r3, #28
 800c692:	d52f      	bpl.n	800c6f4 <__swbuf_r+0x84>
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	b36b      	cbz	r3, 800c6f4 <__swbuf_r+0x84>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	6820      	ldr	r0, [r4, #0]
 800c69c:	1ac0      	subs	r0, r0, r3
 800c69e:	6963      	ldr	r3, [r4, #20]
 800c6a0:	b2f6      	uxtb	r6, r6
 800c6a2:	4283      	cmp	r3, r0
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	dc04      	bgt.n	800c6b2 <__swbuf_r+0x42>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f000 f950 	bl	800c950 <_fflush_r>
 800c6b0:	bb30      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	701e      	strb	r6, [r3, #0]
 800c6c0:	6963      	ldr	r3, [r4, #20]
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	4283      	cmp	r3, r0
 800c6c6:	d004      	beq.n	800c6d2 <__swbuf_r+0x62>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	07db      	lsls	r3, r3, #31
 800c6cc:	d506      	bpl.n	800c6dc <__swbuf_r+0x6c>
 800c6ce:	2e0a      	cmp	r6, #10
 800c6d0:	d104      	bne.n	800c6dc <__swbuf_r+0x6c>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f000 f93b 	bl	800c950 <_fflush_r>
 800c6da:	b988      	cbnz	r0, 800c700 <__swbuf_r+0x90>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e0:	4b0a      	ldr	r3, [pc, #40]	; (800c70c <__swbuf_r+0x9c>)
 800c6e2:	429c      	cmp	r4, r3
 800c6e4:	d101      	bne.n	800c6ea <__swbuf_r+0x7a>
 800c6e6:	68ac      	ldr	r4, [r5, #8]
 800c6e8:	e7cf      	b.n	800c68a <__swbuf_r+0x1a>
 800c6ea:	4b09      	ldr	r3, [pc, #36]	; (800c710 <__swbuf_r+0xa0>)
 800c6ec:	429c      	cmp	r4, r3
 800c6ee:	bf08      	it	eq
 800c6f0:	68ec      	ldreq	r4, [r5, #12]
 800c6f2:	e7ca      	b.n	800c68a <__swbuf_r+0x1a>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 f81e 	bl	800c738 <__swsetup_r>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d0cb      	beq.n	800c698 <__swbuf_r+0x28>
 800c700:	f04f 37ff 	mov.w	r7, #4294967295
 800c704:	e7ea      	b.n	800c6dc <__swbuf_r+0x6c>
 800c706:	bf00      	nop
 800c708:	08010478 	.word	0x08010478
 800c70c:	08010498 	.word	0x08010498
 800c710:	08010458 	.word	0x08010458

0800c714 <_write_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d07      	ldr	r5, [pc, #28]	; (800c734 <_write_r+0x20>)
 800c718:	4604      	mov	r4, r0
 800c71a:	4608      	mov	r0, r1
 800c71c:	4611      	mov	r1, r2
 800c71e:	2200      	movs	r2, #0
 800c720:	602a      	str	r2, [r5, #0]
 800c722:	461a      	mov	r2, r3
 800c724:	f000 faca 	bl	800ccbc <_write>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_write_r+0x1e>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_write_r+0x1e>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	2000f884 	.word	0x2000f884

0800c738 <__swsetup_r>:
 800c738:	4b32      	ldr	r3, [pc, #200]	; (800c804 <__swsetup_r+0xcc>)
 800c73a:	b570      	push	{r4, r5, r6, lr}
 800c73c:	681d      	ldr	r5, [r3, #0]
 800c73e:	4606      	mov	r6, r0
 800c740:	460c      	mov	r4, r1
 800c742:	b125      	cbz	r5, 800c74e <__swsetup_r+0x16>
 800c744:	69ab      	ldr	r3, [r5, #24]
 800c746:	b913      	cbnz	r3, 800c74e <__swsetup_r+0x16>
 800c748:	4628      	mov	r0, r5
 800c74a:	f7ff f959 	bl	800ba00 <__sinit>
 800c74e:	4b2e      	ldr	r3, [pc, #184]	; (800c808 <__swsetup_r+0xd0>)
 800c750:	429c      	cmp	r4, r3
 800c752:	d10f      	bne.n	800c774 <__swsetup_r+0x3c>
 800c754:	686c      	ldr	r4, [r5, #4]
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c75c:	0719      	lsls	r1, r3, #28
 800c75e:	d42c      	bmi.n	800c7ba <__swsetup_r+0x82>
 800c760:	06dd      	lsls	r5, r3, #27
 800c762:	d411      	bmi.n	800c788 <__swsetup_r+0x50>
 800c764:	2309      	movs	r3, #9
 800c766:	6033      	str	r3, [r6, #0]
 800c768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c76c:	81a3      	strh	r3, [r4, #12]
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	e03e      	b.n	800c7f2 <__swsetup_r+0xba>
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <__swsetup_r+0xd4>)
 800c776:	429c      	cmp	r4, r3
 800c778:	d101      	bne.n	800c77e <__swsetup_r+0x46>
 800c77a:	68ac      	ldr	r4, [r5, #8]
 800c77c:	e7eb      	b.n	800c756 <__swsetup_r+0x1e>
 800c77e:	4b24      	ldr	r3, [pc, #144]	; (800c810 <__swsetup_r+0xd8>)
 800c780:	429c      	cmp	r4, r3
 800c782:	bf08      	it	eq
 800c784:	68ec      	ldreq	r4, [r5, #12]
 800c786:	e7e6      	b.n	800c756 <__swsetup_r+0x1e>
 800c788:	0758      	lsls	r0, r3, #29
 800c78a:	d512      	bpl.n	800c7b2 <__swsetup_r+0x7a>
 800c78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c78e:	b141      	cbz	r1, 800c7a2 <__swsetup_r+0x6a>
 800c790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c794:	4299      	cmp	r1, r3
 800c796:	d002      	beq.n	800c79e <__swsetup_r+0x66>
 800c798:	4630      	mov	r0, r6
 800c79a:	f7ff f9eb 	bl	800bb74 <_free_r>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	6363      	str	r3, [r4, #52]	; 0x34
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6063      	str	r3, [r4, #4]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f043 0308 	orr.w	r3, r3, #8
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	b94b      	cbnz	r3, 800c7d2 <__swsetup_r+0x9a>
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c8:	d003      	beq.n	800c7d2 <__swsetup_r+0x9a>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f000 f933 	bl	800ca38 <__smakebuf_r>
 800c7d2:	89a0      	ldrh	r0, [r4, #12]
 800c7d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d8:	f010 0301 	ands.w	r3, r0, #1
 800c7dc:	d00a      	beq.n	800c7f4 <__swsetup_r+0xbc>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60a3      	str	r3, [r4, #8]
 800c7e2:	6963      	ldr	r3, [r4, #20]
 800c7e4:	425b      	negs	r3, r3
 800c7e6:	61a3      	str	r3, [r4, #24]
 800c7e8:	6923      	ldr	r3, [r4, #16]
 800c7ea:	b943      	cbnz	r3, 800c7fe <__swsetup_r+0xc6>
 800c7ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7f0:	d1ba      	bne.n	800c768 <__swsetup_r+0x30>
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	0781      	lsls	r1, r0, #30
 800c7f6:	bf58      	it	pl
 800c7f8:	6963      	ldrpl	r3, [r4, #20]
 800c7fa:	60a3      	str	r3, [r4, #8]
 800c7fc:	e7f4      	b.n	800c7e8 <__swsetup_r+0xb0>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e7f7      	b.n	800c7f2 <__swsetup_r+0xba>
 800c802:	bf00      	nop
 800c804:	2000002c 	.word	0x2000002c
 800c808:	08010478 	.word	0x08010478
 800c80c:	08010498 	.word	0x08010498
 800c810:	08010458 	.word	0x08010458

0800c814 <abort>:
 800c814:	b508      	push	{r3, lr}
 800c816:	2006      	movs	r0, #6
 800c818:	f000 f9c4 	bl	800cba4 <raise>
 800c81c:	2001      	movs	r0, #1
 800c81e:	f000 fa55 	bl	800cccc <_exit>
	...

0800c824 <_close_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_close_r+0x1c>)
 800c828:	2300      	movs	r3, #0
 800c82a:	4604      	mov	r4, r0
 800c82c:	4608      	mov	r0, r1
 800c82e:	602b      	str	r3, [r5, #0]
 800c830:	f000 f9fe 	bl	800cc30 <_close>
 800c834:	1c43      	adds	r3, r0, #1
 800c836:	d102      	bne.n	800c83e <_close_r+0x1a>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	b103      	cbz	r3, 800c83e <_close_r+0x1a>
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	2000f884 	.word	0x2000f884

0800c844 <__sflush_r>:
 800c844:	898a      	ldrh	r2, [r1, #12]
 800c846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84a:	4605      	mov	r5, r0
 800c84c:	0710      	lsls	r0, r2, #28
 800c84e:	460c      	mov	r4, r1
 800c850:	d458      	bmi.n	800c904 <__sflush_r+0xc0>
 800c852:	684b      	ldr	r3, [r1, #4]
 800c854:	2b00      	cmp	r3, #0
 800c856:	dc05      	bgt.n	800c864 <__sflush_r+0x20>
 800c858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dc02      	bgt.n	800c864 <__sflush_r+0x20>
 800c85e:	2000      	movs	r0, #0
 800c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c866:	2e00      	cmp	r6, #0
 800c868:	d0f9      	beq.n	800c85e <__sflush_r+0x1a>
 800c86a:	2300      	movs	r3, #0
 800c86c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c870:	682f      	ldr	r7, [r5, #0]
 800c872:	602b      	str	r3, [r5, #0]
 800c874:	d032      	beq.n	800c8dc <__sflush_r+0x98>
 800c876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	075a      	lsls	r2, r3, #29
 800c87c:	d505      	bpl.n	800c88a <__sflush_r+0x46>
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	1ac0      	subs	r0, r0, r3
 800c882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c884:	b10b      	cbz	r3, 800c88a <__sflush_r+0x46>
 800c886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c888:	1ac0      	subs	r0, r0, r3
 800c88a:	2300      	movs	r3, #0
 800c88c:	4602      	mov	r2, r0
 800c88e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c890:	6a21      	ldr	r1, [r4, #32]
 800c892:	4628      	mov	r0, r5
 800c894:	47b0      	blx	r6
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	d106      	bne.n	800c8aa <__sflush_r+0x66>
 800c89c:	6829      	ldr	r1, [r5, #0]
 800c89e:	291d      	cmp	r1, #29
 800c8a0:	d82c      	bhi.n	800c8fc <__sflush_r+0xb8>
 800c8a2:	4a2a      	ldr	r2, [pc, #168]	; (800c94c <__sflush_r+0x108>)
 800c8a4:	40ca      	lsrs	r2, r1
 800c8a6:	07d6      	lsls	r6, r2, #31
 800c8a8:	d528      	bpl.n	800c8fc <__sflush_r+0xb8>
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	6062      	str	r2, [r4, #4]
 800c8ae:	04d9      	lsls	r1, r3, #19
 800c8b0:	6922      	ldr	r2, [r4, #16]
 800c8b2:	6022      	str	r2, [r4, #0]
 800c8b4:	d504      	bpl.n	800c8c0 <__sflush_r+0x7c>
 800c8b6:	1c42      	adds	r2, r0, #1
 800c8b8:	d101      	bne.n	800c8be <__sflush_r+0x7a>
 800c8ba:	682b      	ldr	r3, [r5, #0]
 800c8bc:	b903      	cbnz	r3, 800c8c0 <__sflush_r+0x7c>
 800c8be:	6560      	str	r0, [r4, #84]	; 0x54
 800c8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c2:	602f      	str	r7, [r5, #0]
 800c8c4:	2900      	cmp	r1, #0
 800c8c6:	d0ca      	beq.n	800c85e <__sflush_r+0x1a>
 800c8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8cc:	4299      	cmp	r1, r3
 800c8ce:	d002      	beq.n	800c8d6 <__sflush_r+0x92>
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f7ff f94f 	bl	800bb74 <_free_r>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c8da:	e7c1      	b.n	800c860 <__sflush_r+0x1c>
 800c8dc:	6a21      	ldr	r1, [r4, #32]
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	47b0      	blx	r6
 800c8e4:	1c41      	adds	r1, r0, #1
 800c8e6:	d1c7      	bne.n	800c878 <__sflush_r+0x34>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0c4      	beq.n	800c878 <__sflush_r+0x34>
 800c8ee:	2b1d      	cmp	r3, #29
 800c8f0:	d001      	beq.n	800c8f6 <__sflush_r+0xb2>
 800c8f2:	2b16      	cmp	r3, #22
 800c8f4:	d101      	bne.n	800c8fa <__sflush_r+0xb6>
 800c8f6:	602f      	str	r7, [r5, #0]
 800c8f8:	e7b1      	b.n	800c85e <__sflush_r+0x1a>
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	e7ad      	b.n	800c860 <__sflush_r+0x1c>
 800c904:	690f      	ldr	r7, [r1, #16]
 800c906:	2f00      	cmp	r7, #0
 800c908:	d0a9      	beq.n	800c85e <__sflush_r+0x1a>
 800c90a:	0793      	lsls	r3, r2, #30
 800c90c:	680e      	ldr	r6, [r1, #0]
 800c90e:	bf08      	it	eq
 800c910:	694b      	ldreq	r3, [r1, #20]
 800c912:	600f      	str	r7, [r1, #0]
 800c914:	bf18      	it	ne
 800c916:	2300      	movne	r3, #0
 800c918:	eba6 0807 	sub.w	r8, r6, r7
 800c91c:	608b      	str	r3, [r1, #8]
 800c91e:	f1b8 0f00 	cmp.w	r8, #0
 800c922:	dd9c      	ble.n	800c85e <__sflush_r+0x1a>
 800c924:	6a21      	ldr	r1, [r4, #32]
 800c926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c928:	4643      	mov	r3, r8
 800c92a:	463a      	mov	r2, r7
 800c92c:	4628      	mov	r0, r5
 800c92e:	47b0      	blx	r6
 800c930:	2800      	cmp	r0, #0
 800c932:	dc06      	bgt.n	800c942 <__sflush_r+0xfe>
 800c934:	89a3      	ldrh	r3, [r4, #12]
 800c936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93a:	81a3      	strh	r3, [r4, #12]
 800c93c:	f04f 30ff 	mov.w	r0, #4294967295
 800c940:	e78e      	b.n	800c860 <__sflush_r+0x1c>
 800c942:	4407      	add	r7, r0
 800c944:	eba8 0800 	sub.w	r8, r8, r0
 800c948:	e7e9      	b.n	800c91e <__sflush_r+0xda>
 800c94a:	bf00      	nop
 800c94c:	20400001 	.word	0x20400001

0800c950 <_fflush_r>:
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	690b      	ldr	r3, [r1, #16]
 800c954:	4605      	mov	r5, r0
 800c956:	460c      	mov	r4, r1
 800c958:	b913      	cbnz	r3, 800c960 <_fflush_r+0x10>
 800c95a:	2500      	movs	r5, #0
 800c95c:	4628      	mov	r0, r5
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	b118      	cbz	r0, 800c96a <_fflush_r+0x1a>
 800c962:	6983      	ldr	r3, [r0, #24]
 800c964:	b90b      	cbnz	r3, 800c96a <_fflush_r+0x1a>
 800c966:	f7ff f84b 	bl	800ba00 <__sinit>
 800c96a:	4b14      	ldr	r3, [pc, #80]	; (800c9bc <_fflush_r+0x6c>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d11b      	bne.n	800c9a8 <_fflush_r+0x58>
 800c970:	686c      	ldr	r4, [r5, #4]
 800c972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d0ef      	beq.n	800c95a <_fflush_r+0xa>
 800c97a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c97c:	07d0      	lsls	r0, r2, #31
 800c97e:	d404      	bmi.n	800c98a <_fflush_r+0x3a>
 800c980:	0599      	lsls	r1, r3, #22
 800c982:	d402      	bmi.n	800c98a <_fflush_r+0x3a>
 800c984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c986:	f7ff f8eb 	bl	800bb60 <__retarget_lock_acquire_recursive>
 800c98a:	4628      	mov	r0, r5
 800c98c:	4621      	mov	r1, r4
 800c98e:	f7ff ff59 	bl	800c844 <__sflush_r>
 800c992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c994:	07da      	lsls	r2, r3, #31
 800c996:	4605      	mov	r5, r0
 800c998:	d4e0      	bmi.n	800c95c <_fflush_r+0xc>
 800c99a:	89a3      	ldrh	r3, [r4, #12]
 800c99c:	059b      	lsls	r3, r3, #22
 800c99e:	d4dd      	bmi.n	800c95c <_fflush_r+0xc>
 800c9a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a2:	f7ff f8de 	bl	800bb62 <__retarget_lock_release_recursive>
 800c9a6:	e7d9      	b.n	800c95c <_fflush_r+0xc>
 800c9a8:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <_fflush_r+0x70>)
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	d101      	bne.n	800c9b2 <_fflush_r+0x62>
 800c9ae:	68ac      	ldr	r4, [r5, #8]
 800c9b0:	e7df      	b.n	800c972 <_fflush_r+0x22>
 800c9b2:	4b04      	ldr	r3, [pc, #16]	; (800c9c4 <_fflush_r+0x74>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	bf08      	it	eq
 800c9b8:	68ec      	ldreq	r4, [r5, #12]
 800c9ba:	e7da      	b.n	800c972 <_fflush_r+0x22>
 800c9bc:	08010478 	.word	0x08010478
 800c9c0:	08010498 	.word	0x08010498
 800c9c4:	08010458 	.word	0x08010458

0800c9c8 <_lseek_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4d07      	ldr	r5, [pc, #28]	; (800c9e8 <_lseek_r+0x20>)
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	602a      	str	r2, [r5, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	f000 f952 	bl	800cc80 <_lseek>
 800c9dc:	1c43      	adds	r3, r0, #1
 800c9de:	d102      	bne.n	800c9e6 <_lseek_r+0x1e>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	b103      	cbz	r3, 800c9e6 <_lseek_r+0x1e>
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	bd38      	pop	{r3, r4, r5, pc}
 800c9e8:	2000f884 	.word	0x2000f884

0800c9ec <__swhatbuf_r>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	460e      	mov	r6, r1
 800c9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	b096      	sub	sp, #88	; 0x58
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	461d      	mov	r5, r3
 800c9fc:	da08      	bge.n	800ca10 <__swhatbuf_r+0x24>
 800c9fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	602a      	str	r2, [r5, #0]
 800ca06:	061a      	lsls	r2, r3, #24
 800ca08:	d410      	bmi.n	800ca2c <__swhatbuf_r+0x40>
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	e00e      	b.n	800ca2e <__swhatbuf_r+0x42>
 800ca10:	466a      	mov	r2, sp
 800ca12:	f000 f8e3 	bl	800cbdc <_fstat_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	dbf1      	blt.n	800c9fe <__swhatbuf_r+0x12>
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca24:	425a      	negs	r2, r3
 800ca26:	415a      	adcs	r2, r3
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	e7ee      	b.n	800ca0a <__swhatbuf_r+0x1e>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	2000      	movs	r0, #0
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	b016      	add	sp, #88	; 0x58
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca38 <__smakebuf_r>:
 800ca38:	898b      	ldrh	r3, [r1, #12]
 800ca3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca3c:	079d      	lsls	r5, r3, #30
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	d507      	bpl.n	800ca54 <__smakebuf_r+0x1c>
 800ca44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	b002      	add	sp, #8
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	ab01      	add	r3, sp, #4
 800ca56:	466a      	mov	r2, sp
 800ca58:	f7ff ffc8 	bl	800c9ec <__swhatbuf_r>
 800ca5c:	9900      	ldr	r1, [sp, #0]
 800ca5e:	4605      	mov	r5, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7ff f8f3 	bl	800bc4c <_malloc_r>
 800ca66:	b948      	cbnz	r0, 800ca7c <__smakebuf_r+0x44>
 800ca68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6c:	059a      	lsls	r2, r3, #22
 800ca6e:	d4ef      	bmi.n	800ca50 <__smakebuf_r+0x18>
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e7e3      	b.n	800ca44 <__smakebuf_r+0xc>
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <__smakebuf_r+0x7c>)
 800ca7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	9b00      	ldr	r3, [sp, #0]
 800ca8c:	6163      	str	r3, [r4, #20]
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	6120      	str	r0, [r4, #16]
 800ca92:	b15b      	cbz	r3, 800caac <__smakebuf_r+0x74>
 800ca94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 f8b1 	bl	800cc00 <_isatty_r>
 800ca9e:	b128      	cbz	r0, 800caac <__smakebuf_r+0x74>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	f023 0303 	bic.w	r3, r3, #3
 800caa6:	f043 0301 	orr.w	r3, r3, #1
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	89a0      	ldrh	r0, [r4, #12]
 800caae:	4305      	orrs	r5, r0
 800cab0:	81a5      	strh	r5, [r4, #12]
 800cab2:	e7cd      	b.n	800ca50 <__smakebuf_r+0x18>
 800cab4:	0800b999 	.word	0x0800b999

0800cab8 <__malloc_lock>:
 800cab8:	4801      	ldr	r0, [pc, #4]	; (800cac0 <__malloc_lock+0x8>)
 800caba:	f7ff b851 	b.w	800bb60 <__retarget_lock_acquire_recursive>
 800cabe:	bf00      	nop
 800cac0:	2000f888 	.word	0x2000f888

0800cac4 <__malloc_unlock>:
 800cac4:	4801      	ldr	r0, [pc, #4]	; (800cacc <__malloc_unlock+0x8>)
 800cac6:	f7ff b84c 	b.w	800bb62 <__retarget_lock_release_recursive>
 800caca:	bf00      	nop
 800cacc:	2000f888 	.word	0x2000f888

0800cad0 <_realloc_r>:
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	4680      	mov	r8, r0
 800cad6:	4614      	mov	r4, r2
 800cad8:	460e      	mov	r6, r1
 800cada:	b921      	cbnz	r1, 800cae6 <_realloc_r+0x16>
 800cadc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cae0:	4611      	mov	r1, r2
 800cae2:	f7ff b8b3 	b.w	800bc4c <_malloc_r>
 800cae6:	b92a      	cbnz	r2, 800caf4 <_realloc_r+0x24>
 800cae8:	f7ff f844 	bl	800bb74 <_free_r>
 800caec:	4625      	mov	r5, r4
 800caee:	4628      	mov	r0, r5
 800caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf4:	f000 f894 	bl	800cc20 <_malloc_usable_size_r>
 800caf8:	4284      	cmp	r4, r0
 800cafa:	4607      	mov	r7, r0
 800cafc:	d802      	bhi.n	800cb04 <_realloc_r+0x34>
 800cafe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb02:	d812      	bhi.n	800cb2a <_realloc_r+0x5a>
 800cb04:	4621      	mov	r1, r4
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7ff f8a0 	bl	800bc4c <_malloc_r>
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d0ed      	beq.n	800caee <_realloc_r+0x1e>
 800cb12:	42bc      	cmp	r4, r7
 800cb14:	4622      	mov	r2, r4
 800cb16:	4631      	mov	r1, r6
 800cb18:	bf28      	it	cs
 800cb1a:	463a      	movcs	r2, r7
 800cb1c:	f7fe fe28 	bl	800b770 <memcpy>
 800cb20:	4631      	mov	r1, r6
 800cb22:	4640      	mov	r0, r8
 800cb24:	f7ff f826 	bl	800bb74 <_free_r>
 800cb28:	e7e1      	b.n	800caee <_realloc_r+0x1e>
 800cb2a:	4635      	mov	r5, r6
 800cb2c:	e7df      	b.n	800caee <_realloc_r+0x1e>
	...

0800cb30 <_read_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <_read_r+0x20>)
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	602a      	str	r2, [r5, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f000 f8a6 	bl	800cc90 <_read>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_read_r+0x1e>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_read_r+0x1e>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	2000f884 	.word	0x2000f884

0800cb54 <_raise_r>:
 800cb54:	291f      	cmp	r1, #31
 800cb56:	b538      	push	{r3, r4, r5, lr}
 800cb58:	4604      	mov	r4, r0
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	d904      	bls.n	800cb68 <_raise_r+0x14>
 800cb5e:	2316      	movs	r3, #22
 800cb60:	6003      	str	r3, [r0, #0]
 800cb62:	f04f 30ff 	mov.w	r0, #4294967295
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb6a:	b112      	cbz	r2, 800cb72 <_raise_r+0x1e>
 800cb6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb70:	b94b      	cbnz	r3, 800cb86 <_raise_r+0x32>
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 f830 	bl	800cbd8 <_getpid_r>
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb82:	f000 b817 	b.w	800cbb4 <_kill_r>
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d00a      	beq.n	800cba0 <_raise_r+0x4c>
 800cb8a:	1c59      	adds	r1, r3, #1
 800cb8c:	d103      	bne.n	800cb96 <_raise_r+0x42>
 800cb8e:	2316      	movs	r3, #22
 800cb90:	6003      	str	r3, [r0, #0]
 800cb92:	2001      	movs	r0, #1
 800cb94:	e7e7      	b.n	800cb66 <_raise_r+0x12>
 800cb96:	2400      	movs	r4, #0
 800cb98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	4798      	blx	r3
 800cba0:	2000      	movs	r0, #0
 800cba2:	e7e0      	b.n	800cb66 <_raise_r+0x12>

0800cba4 <raise>:
 800cba4:	4b02      	ldr	r3, [pc, #8]	; (800cbb0 <raise+0xc>)
 800cba6:	4601      	mov	r1, r0
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	f7ff bfd3 	b.w	800cb54 <_raise_r>
 800cbae:	bf00      	nop
 800cbb0:	2000002c 	.word	0x2000002c

0800cbb4 <_kill_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4d07      	ldr	r5, [pc, #28]	; (800cbd4 <_kill_r+0x20>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	f000 f855 	bl	800cc70 <_kill>
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	d102      	bne.n	800cbd0 <_kill_r+0x1c>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	b103      	cbz	r3, 800cbd0 <_kill_r+0x1c>
 800cbce:	6023      	str	r3, [r4, #0]
 800cbd0:	bd38      	pop	{r3, r4, r5, pc}
 800cbd2:	bf00      	nop
 800cbd4:	2000f884 	.word	0x2000f884

0800cbd8 <_getpid_r>:
 800cbd8:	f000 b83a 	b.w	800cc50 <_getpid>

0800cbdc <_fstat_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	; (800cbfc <_fstat_r+0x20>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	f000 f829 	bl	800cc40 <_fstat>
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	d102      	bne.n	800cbf8 <_fstat_r+0x1c>
 800cbf2:	682b      	ldr	r3, [r5, #0]
 800cbf4:	b103      	cbz	r3, 800cbf8 <_fstat_r+0x1c>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2000f884 	.word	0x2000f884

0800cc00 <_isatty_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4d06      	ldr	r5, [pc, #24]	; (800cc1c <_isatty_r+0x1c>)
 800cc04:	2300      	movs	r3, #0
 800cc06:	4604      	mov	r4, r0
 800cc08:	4608      	mov	r0, r1
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	f000 f828 	bl	800cc60 <_isatty>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d102      	bne.n	800cc1a <_isatty_r+0x1a>
 800cc14:	682b      	ldr	r3, [r5, #0]
 800cc16:	b103      	cbz	r3, 800cc1a <_isatty_r+0x1a>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	bd38      	pop	{r3, r4, r5, pc}
 800cc1c:	2000f884 	.word	0x2000f884

0800cc20 <_malloc_usable_size_r>:
 800cc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc24:	1f18      	subs	r0, r3, #4
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfbc      	itt	lt
 800cc2a:	580b      	ldrlt	r3, [r1, r0]
 800cc2c:	18c0      	addlt	r0, r0, r3
 800cc2e:	4770      	bx	lr

0800cc30 <_close>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <_close+0xc>)
 800cc32:	2258      	movs	r2, #88	; 0x58
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	4770      	bx	lr
 800cc3c:	2000f884 	.word	0x2000f884

0800cc40 <_fstat>:
 800cc40:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <_fstat+0xc>)
 800cc42:	2258      	movs	r2, #88	; 0x58
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	4770      	bx	lr
 800cc4c:	2000f884 	.word	0x2000f884

0800cc50 <_getpid>:
 800cc50:	4b02      	ldr	r3, [pc, #8]	; (800cc5c <_getpid+0xc>)
 800cc52:	2258      	movs	r2, #88	; 0x58
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5a:	4770      	bx	lr
 800cc5c:	2000f884 	.word	0x2000f884

0800cc60 <_isatty>:
 800cc60:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <_isatty+0xc>)
 800cc62:	2258      	movs	r2, #88	; 0x58
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	2000      	movs	r0, #0
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	2000f884 	.word	0x2000f884

0800cc70 <_kill>:
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <_kill+0xc>)
 800cc72:	2258      	movs	r2, #88	; 0x58
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7a:	4770      	bx	lr
 800cc7c:	2000f884 	.word	0x2000f884

0800cc80 <_lseek>:
 800cc80:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <_lseek+0xc>)
 800cc82:	2258      	movs	r2, #88	; 0x58
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8a:	4770      	bx	lr
 800cc8c:	2000f884 	.word	0x2000f884

0800cc90 <_read>:
 800cc90:	4b02      	ldr	r3, [pc, #8]	; (800cc9c <_read+0xc>)
 800cc92:	2258      	movs	r2, #88	; 0x58
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9a:	4770      	bx	lr
 800cc9c:	2000f884 	.word	0x2000f884

0800cca0 <_sbrk>:
 800cca0:	4a04      	ldr	r2, [pc, #16]	; (800ccb4 <_sbrk+0x14>)
 800cca2:	6811      	ldr	r1, [r2, #0]
 800cca4:	4603      	mov	r3, r0
 800cca6:	b909      	cbnz	r1, 800ccac <_sbrk+0xc>
 800cca8:	4903      	ldr	r1, [pc, #12]	; (800ccb8 <_sbrk+0x18>)
 800ccaa:	6011      	str	r1, [r2, #0]
 800ccac:	6810      	ldr	r0, [r2, #0]
 800ccae:	4403      	add	r3, r0
 800ccb0:	6013      	str	r3, [r2, #0]
 800ccb2:	4770      	bx	lr
 800ccb4:	2000f894 	.word	0x2000f894
 800ccb8:	2000f898 	.word	0x2000f898

0800ccbc <_write>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <_write+0xc>)
 800ccbe:	2258      	movs	r2, #88	; 0x58
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc6:	4770      	bx	lr
 800ccc8:	2000f884 	.word	0x2000f884

0800cccc <_exit>:
 800cccc:	e7fe      	b.n	800cccc <_exit>
	...

0800ccd0 <_init>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	bf00      	nop
 800ccd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	469e      	mov	lr, r3
 800ccda:	4770      	bx	lr

0800ccdc <_fini>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	bf00      	nop
 800cce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce2:	bc08      	pop	{r3}
 800cce4:	469e      	mov	lr, r3
 800cce6:	4770      	bx	lr
