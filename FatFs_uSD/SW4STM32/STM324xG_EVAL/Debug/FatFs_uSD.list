
FatFs_uSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  20000000  08004070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  8 .bss          00000648  20000038  20000038  00020038  2**2
                  ALLOC
  9 ._user_heap_stack 00000a00  20000680  20000680  00020038  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 11 .debug_line   0001556f  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0001871a  00000000  00000000  000355d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b9  00000000  00000000  0004dcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00050fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d09f7  00000000  00000000  00051b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c0  00000000  00000000  00122570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0001036b  00000000  00000000  00123830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022b63  00000000  00000000  00133b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001566fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  00156750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ec8 	.word	0x08003ec8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08003ec8 	.word	0x08003ec8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr  r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004f6:	f000 fb31 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f003 fcb9 	bl	8003e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 f851 	bl	80005a4 <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000508:	08004070 	.word	0x08004070
  ldr  r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000510:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8000514:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8000518:	20000680 	.word	0x20000680

0800051c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC_IRQHandler>

0800051e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800051e:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000520:	2002      	movs	r0, #2
 8000522:	f000 f9cb 	bl	80008bc <BSP_LED_On>
  while(1)
 8000526:	e7fe      	b.n	8000526 <Error_Handler+0x8>

08000528 <HAL_UART_MspInit>:
{
 8000528:	b510      	push	{r4, lr}
 800052a:	b088      	sub	sp, #32
  USARTx_TX_GPIO_CLK_ENABLE();
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <HAL_UART_MspInit+0x74>)
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800052e:	481c      	ldr	r0, [pc, #112]	; (80005a0 <HAL_UART_MspInit+0x78>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8000530:	2200      	movs	r2, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000536:	f041 0101 	orr.w	r1, r1, #1
 800053a:	6319      	str	r1, [r3, #48]	; 0x30
 800053c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800053e:	f001 0101 	and.w	r1, r1, #1
 8000542:	9100      	str	r1, [sp, #0]
 8000544:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000546:	9201      	str	r2, [sp, #4]
 8000548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800054a:	f041 0101 	orr.w	r1, r1, #1
 800054e:	6319      	str	r1, [r3, #48]	; 0x30
 8000550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000552:	f001 0101 	and.w	r1, r1, #1
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
 800055a:	9202      	str	r2, [sp, #8]
 800055c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800055e:	f042 0210 	orr.w	r2, r2, #16
 8000562:	645a      	str	r2, [r3, #68]	; 0x44
 8000564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000566:	f003 0310 	and.w	r3, r3, #16
 800056a:	9302      	str	r3, [sp, #8]
 800056c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800056e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000572:	2302      	movs	r3, #2
 8000574:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000578:	2407      	movs	r4, #7
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800057a:	2201      	movs	r2, #1
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800057c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800057e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000582:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000584:	f000 fd6c 	bl	8001060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800058e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000590:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000592:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000594:	f000 fd64 	bl	8001060 <HAL_GPIO_Init>
}
 8000598:	b008      	add	sp, #32
 800059a:	bd10      	pop	{r4, pc}
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000

080005a4 <main>:
{
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80005aa:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80005ac:	f000 fb20 	bl	8000bf0 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2400      	movs	r4, #0
 80005b2:	4ba3      	ldr	r3, [pc, #652]	; (8000840 <main+0x29c>)
 80005b4:	9407      	str	r4, [sp, #28]
 80005b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005bc:	641a      	str	r2, [r3, #64]	; 0x40
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	9307      	str	r3, [sp, #28]
 80005c6:	9b07      	ldr	r3, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	4b9e      	ldr	r3, [pc, #632]	; (8000844 <main+0x2a0>)
 80005ca:	9408      	str	r4, [sp, #32]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005da:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	2101      	movs	r1, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005de:	9b08      	ldr	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e6:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	e9cd 5314 	strd	r5, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f2:	2019      	movs	r0, #25
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	e9cd 0316 	strd	r0, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fc:	2307      	movs	r3, #7
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005fe:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000604:	f000 fe0c 	bl	8001220 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000608:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800060e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000616:	a809      	add	r0, sp, #36	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000618:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 800061c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000620:	f000 ffdc 	bl	80015dc <HAL_RCC_ClockConfig>
  if (HAL_GetREVID() == 0x1001)
 8000624:	f000 fb20 	bl	8000c68 <HAL_GetREVID>
 8000628:	f241 0301 	movw	r3, #4097	; 0x1001
 800062c:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062e:	bf01      	itttt	eq
 8000630:	4a85      	ldreq	r2, [pc, #532]	; (8000848 <main+0x2a4>)
 8000632:	6813      	ldreq	r3, [r2, #0]
 8000634:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8000638:	6013      	streq	r3, [r2, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	2100      	movs	r1, #0
 800063c:	2214      	movs	r2, #20
 800063e:	a80e      	add	r0, sp, #56	; 0x38
 8000640:	f003 fc3a 	bl	8003eb8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000644:	2400      	movs	r4, #0
 8000646:	4b7e      	ldr	r3, [pc, #504]	; (8000840 <main+0x29c>)
 8000648:	9401      	str	r4, [sp, #4]
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 800064c:	487f      	ldr	r0, [pc, #508]	; (800084c <main+0x2a8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	f042 0210 	orr.w	r2, r2, #16
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
 8000654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000656:	f002 0210 	and.w	r2, r2, #16
 800065a:	9201      	str	r2, [sp, #4]
 800065c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	9402      	str	r4, [sp, #8]
 8000660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000666:	631a      	str	r2, [r3, #48]	; 0x30
 8000668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800066e:	9202      	str	r2, [sp, #8]
 8000670:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	9403      	str	r4, [sp, #12]
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f042 0204 	orr.w	r2, r2, #4
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	f002 0204 	and.w	r2, r2, #4
 8000682:	9203      	str	r2, [sp, #12]
 8000684:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	9404      	str	r4, [sp, #16]
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f042 0201 	orr.w	r2, r2, #1
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
 8000690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000692:	f002 0201 	and.w	r2, r2, #1
 8000696:	9204      	str	r2, [sp, #16]
 8000698:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	9405      	str	r4, [sp, #20]
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	f042 0202 	orr.w	r2, r2, #2
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
 80006a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a6:	f002 0202 	and.w	r2, r2, #2
 80006aa:	9205      	str	r2, [sp, #20]
 80006ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ae:	9406      	str	r4, [sp, #24]
 80006b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
 80006b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80006be:	9206      	str	r2, [sp, #24]
 80006c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c2:	9409      	str	r4, [sp, #36]	; 0x24
 80006c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c6:	f042 0208 	orr.w	r2, r2, #8
 80006ca:	631a      	str	r2, [r3, #48]	; 0x30
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80006da:	f000 fd9b 	bl	8001214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 80006de:	485c      	ldr	r0, [pc, #368]	; (8000850 <main+0x2ac>)
 80006e0:	4622      	mov	r2, r4
 80006e2:	2110      	movs	r1, #16
 80006e4:	f000 fd96 	bl	8001214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ULPI_RESET_GPIO_Port, ULPI_RESET_Pin, GPIO_PIN_RESET);
 80006e8:	485a      	ldr	r0, [pc, #360]	; (8000854 <main+0x2b0>)
 80006ea:	4622      	mov	r2, r4
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	f000 fd91 	bl	8001214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_DET_OUT_GPIO_Port, SD_DET_OUT_Pin, GPIO_PIN_RESET);
 80006f2:	4622      	mov	r2, r4
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <main+0x2b4>)
 80006f6:	2101      	movs	r1, #1
 80006f8:	f000 fd8c 	bl	8001214 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2601      	movs	r6, #1
 80006fe:	2308      	movs	r3, #8
  HAL_GPIO_Init(ETH_RST_GPIO_Port, &GPIO_InitStruct);
 8000700:	4852      	ldr	r0, [pc, #328]	; (800084c <main+0x2a8>)
 8000702:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	e9cd 6410 	strd	r6, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(ETH_RST_GPIO_Port, &GPIO_InitStruct);
 800070c:	f000 fca8 	bl	8001060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER_Pin;
 8000710:	2310      	movs	r3, #16
  HAL_GPIO_Init(LED_USER_GPIO_Port, &GPIO_InitStruct);
 8000712:	484f      	ldr	r0, [pc, #316]	; (8000850 <main+0x2ac>)
 8000714:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000716:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LED_USER_GPIO_Port, &GPIO_InitStruct);
 8000720:	f000 fc9e 	bl	8001060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_RESET_Pin;
 8000724:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(ULPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000726:	484b      	ldr	r0, [pc, #300]	; (8000854 <main+0x2b0>)
 8000728:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(ULPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000732:	f000 fc95 	bl	8001060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000736:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	4848      	ldr	r0, [pc, #288]	; (800085c <main+0x2b8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800073c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f000 fc8a 	bl	8001060 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_DET_OUT_GPIO_Port, &GPIO_InitStruct);
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <main+0x2b4>)
 800074e:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(SD_DET_OUT_GPIO_Port, &GPIO_InitStruct);
 8000758:	f000 fc82 	bl	8001060 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(SD_DET_IN_GPIO_Port, &GPIO_InitStruct);
 8000760:	483d      	ldr	r0, [pc, #244]	; (8000858 <main+0x2b4>)
  UartHandle.Instance          = USARTx;
 8000762:	4d3f      	ldr	r5, [pc, #252]	; (8000860 <main+0x2bc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(SD_DET_IN_GPIO_Port, &GPIO_InitStruct);
 8000766:	a90e      	add	r1, sp, #56	; 0x38
 8000768:	f000 fc7a 	bl	8001060 <HAL_GPIO_Init>
  UartHandle.Init.BaudRate     = 115200;
 800076c:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <main+0x2c0>)
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800076e:	612c      	str	r4, [r5, #16]
  UartHandle.Init.BaudRate     = 115200;
 8000770:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8000774:	270c      	movs	r7, #12
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000776:	4628      	mov	r0, r5
  UartHandle.Init.BaudRate     = 115200;
 8000778:	e9c5 2300 	strd	r2, r3, [r5]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800077c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000780:	61ac      	str	r4, [r5, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8000782:	616f      	str	r7, [r5, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	61ec      	str	r4, [r5, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000786:	f001 fe6b 	bl	8002460 <HAL_UART_Init>
 800078a:	b108      	cbz	r0, 8000790 <main+0x1ec>
    Error_Handler();
 800078c:	f7ff fec7 	bl	800051e <Error_Handler>
  HAL_UART_Transmit(&UartHandle, "init fatfs\r\n", 12, 1000U);
 8000790:	4935      	ldr	r1, [pc, #212]	; (8000868 <main+0x2c4>)
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	463a      	mov	r2, r7
 8000798:	4628      	mov	r0, r5
 800079a:	f001 fe8f 	bl	80024bc <HAL_UART_Transmit>
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800079e:	4833      	ldr	r0, [pc, #204]	; (800086c <main+0x2c8>)
 80007a0:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80007a4:	f003 fad4 	bl	8003d50 <FATFS_LinkDriver>
 80007a8:	4604      	mov	r4, r0
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d144      	bne.n	8000838 <main+0x294>
	HAL_UART_Transmit(&UartHandle, "link driver success\r\n", 21, 1000U);
 80007ae:	4930      	ldr	r1, [pc, #192]	; (8000870 <main+0x2cc>)
 80007b0:	2215      	movs	r2, #21
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	4628      	mov	r0, r5
 80007b8:	f001 fe80 	bl	80024bc <HAL_UART_Transmit>
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80007bc:	4622      	mov	r2, r4
 80007be:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80007c2:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80007c6:	f003 f867 	bl	8003898 <f_mount>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1de      	bne.n	800078c <main+0x1e8>
    	HAL_UART_Transmit(&UartHandle, "mount success\r\n", 15, 1000U);
 80007ce:	4929      	ldr	r1, [pc, #164]	; (8000874 <main+0x2d0>)
 80007d0:	220f      	movs	r2, #15
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	4628      	mov	r0, r5
 80007d8:	f001 fe70 	bl	80024bc <HAL_UART_Transmit>
		if(f_open(&MyFile, "tiny_nas.csv", FA_READ) != FR_OK)
 80007dc:	4926      	ldr	r1, [pc, #152]	; (8000878 <main+0x2d4>)
 80007de:	4632      	mov	r2, r6
 80007e0:	f505 701e 	add.w	r0, r5, #632	; 0x278
 80007e4:	f003 f884 	bl	80038f0 <f_open>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d1cf      	bne.n	800078c <main+0x1e8>
		  HAL_UART_Transmit(&UartHandle, "open success\r\n", 14, 1000U);
 80007ec:	4923      	ldr	r1, [pc, #140]	; (800087c <main+0x2d8>)
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	220e      	movs	r2, #14
 80007f4:	4628      	mov	r0, r5
 80007f6:	f001 fe61 	bl	80024bc <HAL_UART_Transmit>
		  res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80007fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fe:	466b      	mov	r3, sp
 8000800:	a90e      	add	r1, sp, #56	; 0x38
 8000802:	f505 701e 	add.w	r0, r5, #632	; 0x278
 8000806:	f003 f973 	bl	8003af0 <f_read>
		  if((bytesread == 0) || (res != FR_OK))
 800080a:	9a00      	ldr	r2, [sp, #0]
		  res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 800080c:	4604      	mov	r4, r0
		  if((bytesread == 0) || (res != FR_OK))
 800080e:	2a00      	cmp	r2, #0
 8000810:	d0bc      	beq.n	800078c <main+0x1e8>
 8000812:	2800      	cmp	r0, #0
 8000814:	d1ba      	bne.n	800078c <main+0x1e8>
		    HAL_UART_Transmit(&UartHandle, rtext, bytesread, 1000U);
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	b292      	uxth	r2, r2
 800081c:	a90e      	add	r1, sp, #56	; 0x38
 800081e:	4628      	mov	r0, r5
 8000820:	f001 fe4c 	bl	80024bc <HAL_UART_Transmit>
			f_close(&MyFile);
 8000824:	f505 701e 	add.w	r0, r5, #632	; 0x278
 8000828:	f003 fa5e 	bl	8003ce8 <f_close>
			if((bytesread != byteswritten))
 800082c:	9b00      	ldr	r3, [sp, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1ac      	bne.n	800078c <main+0x1e8>
			  BSP_LED_On(LED1);
 8000832:	4620      	mov	r0, r4
 8000834:	f000 f842 	bl	80008bc <BSP_LED_On>
  FATFS_UnLinkDriver(SDPath);
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <main+0x2dc>)
 800083a:	f003 faa5 	bl	8003d88 <FATFS_UnLinkDriver>
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x29a>
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	40023c00 	.word	0x40023c00
 800084c:	40021000 	.word	0x40021000
 8000850:	40021800 	.word	0x40021800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000
 8000860:	20000054 	.word	0x20000054
 8000864:	40011000 	.word	0x40011000
 8000868:	08003fcc 	.word	0x08003fcc
 800086c:	08003fb8 	.word	0x08003fb8
 8000870:	08003fd9 	.word	0x08003fd9
 8000874:	08003fef 	.word	0x08003fef
 8000878:	08003fff 	.word	0x08003fff
 800087c:	0800400c 	.word	0x0800400c
 8000880:	20000098 	.word	0x20000098

08000884 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000884:	4770      	bx	lr

08000886 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler>

08000888 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler>

0800088a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler>

0800088c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler>

0800088e <SVC_Handler>:
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000894:	f000 b9c2 	b.w	8000c1c <HAL_IncTick>

08000898 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <DMA2_Stream3_IRQHandler+0x8>)
 800089a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800089c:	f000 bb22 	b.w	8000ee4 <HAL_DMA_IRQHandler>
 80008a0:	200004fc 	.word	0x200004fc

080008a4 <DMA2_Stream6_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <DMA2_Stream6_IRQHandler+0x8>)
 80008a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008a8:	f000 bb1c 	b.w	8000ee4 <HAL_DMA_IRQHandler>
 80008ac:	200004fc 	.word	0x200004fc

080008b0 <SDIO_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDIO_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80008b0:	4801      	ldr	r0, [pc, #4]	; (80008b8 <SDIO_IRQHandler+0x8>)
 80008b2:	f001 bc33 	b.w	800211c <HAL_SD_IRQHandler>
 80008b6:	bf00      	nop
 80008b8:	200004fc 	.word	0x200004fc

080008bc <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <BSP_LED_On+0x14>)
 80008be:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <BSP_LED_On+0x18>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80008ca:	f000 bca3 	b.w	8001214 <HAL_GPIO_WritePin>
 80008ce:	bf00      	nop
 80008d0:	08003ee0 	.word	0x08003ee0
 80008d4:	20000000 	.word	0x20000000

080008d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80008d8:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	4613      	mov	r3, r2
 80008de:	460a      	mov	r2, r1
 80008e0:	4601      	mov	r1, r0
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <BSP_SD_ReadBlocks+0x1c>)
 80008e4:	f000 ff9e 	bl	8001824 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80008e8:	3800      	subs	r0, #0
 80008ea:	bf18      	it	ne
 80008ec:	2001      	movne	r0, #1
 80008ee:	b003      	add	sp, #12
 80008f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f4:	200004fc 	.word	0x200004fc

080008f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80008f8:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4613      	mov	r3, r2
 80008fe:	460a      	mov	r2, r1
 8000900:	4601      	mov	r1, r0
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <BSP_SD_WriteBlocks+0x1c>)
 8000904:	f001 f892 	bl	8001a2c <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8000908:	3800      	subs	r0, #0
 800090a:	bf18      	it	ne
 800090c:	2001      	movne	r0, #1
 800090e:	b003      	add	sp, #12
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
 8000914:	200004fc 	.word	0x200004fc

08000918 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8000918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800091c:	b08b      	sub	sp, #44	; 0x2c
  static DMA_HandleTypeDef dmaRxHandle;
  static DMA_HandleTypeDef dmaTxHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  
  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 800091e:	4b63      	ldr	r3, [pc, #396]	; (8000aac <BSP_SD_MspInit+0x194>)
 8000920:	2500      	movs	r5, #0
 8000922:	9500      	str	r5, [sp, #0]
 8000924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800092a:	645a      	str	r2, [r3, #68]	; 0x44
 800092c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800092e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000932:	9200      	str	r2, [sp, #0]
 8000934:	9a00      	ldr	r2, [sp, #0]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8000936:	9501      	str	r5, [sp, #4]
 8000938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800093a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
 8000940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000942:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000946:	9201      	str	r2, [sp, #4]
 8000948:	9a01      	ldr	r2, [sp, #4]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	9502      	str	r5, [sp, #8]
 800094c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800094e:	f042 0204 	orr.w	r2, r2, #4
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
 8000954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000956:	f002 0204 	and.w	r2, r2, #4
 800095a:	9202      	str	r2, [sp, #8]
 800095c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	9503      	str	r5, [sp, #12]
 8000960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000962:	f042 0208 	orr.w	r2, r2, #8
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
 8000968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800096a:	f002 0208 	and.w	r2, r2, #8
 800096e:	9203      	str	r2, [sp, #12]
 8000970:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8000972:	9504      	str	r5, [sp, #16]
 8000974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	9304      	str	r3, [sp, #16]
 8000984:	9b04      	ldr	r3, [sp, #16]
  
  /* Common GPIO configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8000986:	2401      	movs	r4, #1
 8000988:	2302      	movs	r3, #2
 800098a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
 800098e:	f04f 0803 	mov.w	r8, #3
 8000992:	230c      	movs	r3, #12
{
 8000994:	4606      	mov	r6, r0
  GPIO_Init_Structure.Alternate = GPIO_AF12_SDIO;
 8000996:	e9cd 8308 	strd	r8, r3, [sp, #32]
  
  /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 800099a:	a905      	add	r1, sp, #20
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800099c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 80009a0:	4843      	ldr	r0, [pc, #268]	; (8000ab0 <BSP_SD_MspInit+0x198>)
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80009a2:	9305      	str	r3, [sp, #20]

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 80009a4:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 80009a8:	f000 fb5a 	bl	8001060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80009ac:	a905      	add	r1, sp, #20
 80009ae:	4841      	ldr	r0, [pc, #260]	; (8000ab4 <BSP_SD_MspInit+0x19c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_2;
 80009b0:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80009b4:	f000 fb54 	bl	8001060 <HAL_GPIO_Init>

  /* SD Card detect pin configuration */
  GPIO_Init_Structure.Mode      = GPIO_MODE_INPUT;
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
  GPIO_Init_Structure.Pin       = SD_DETECT_PIN;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 80009bc:	e9cd 5406 	strd	r5, r4, [sp, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_Init_Structure);
 80009c0:	a905      	add	r1, sp, #20
  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
    
  /* Configure DMA Rx parameters */
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80009c2:	4c3d      	ldr	r4, [pc, #244]	; (8000ab8 <BSP_SD_MspInit+0x1a0>)
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_Init_Structure);
 80009c4:	483d      	ldr	r0, [pc, #244]	; (8000abc <BSP_SD_MspInit+0x1a4>)
  GPIO_Init_Structure.Pin       = SD_DETECT_PIN;
 80009c6:	9305      	str	r3, [sp, #20]
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 80009c8:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_Init_Structure);
 80009cc:	f000 fb48 	bl	8001060 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0);
 80009d0:	462a      	mov	r2, r5
 80009d2:	210e      	movs	r1, #14
 80009d4:	2031      	movs	r0, #49	; 0x31
 80009d6:	f000 f95f 	bl	8000c98 <HAL_NVIC_SetPriority>
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaRxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 80009da:	4627      	mov	r7, r4
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80009dc:	2031      	movs	r0, #49	; 0x31
 80009de:	f000 f98d 	bl	8000cfc <HAL_NVIC_EnableIRQ>
  dmaRxHandle.Instance = SD_DMAx_Rx_STREAM;
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <BSP_SD_MspInit+0x1a8>)
 80009e4:	f847 0f84 	str.w	r0, [r7, #132]!
  dmaRxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	e9c4 2325 	strd	r2, r3, [r4, #148]	; 0x94
  dmaRxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80009f4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dmaRxHandle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80009f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80009fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  dmaRxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000a00:	e9c4 3929 	strd	r3, r9, [r4, #164]	; 0xa4
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 8000a04:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 8000a0c:	f04f 0a20 	mov.w	sl, #32
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
 8000a10:	6437      	str	r7, [r6, #64]	; 0x40
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaRxHandle);
 8000a12:	4638      	mov	r0, r7
  dmaRxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a14:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
  dmaRxHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a18:	e9c4 1522 	strd	r1, r5, [r4, #136]	; 0x88
  dmaRxHandle.Init.Mode                = DMA_PFCTRL;
 8000a1c:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
  dmaRxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a20:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  dmaRxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a24:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
  __HAL_LINKDMA(hsd, hdmarx, dmaRxHandle);
 8000a28:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
  HAL_DMA_DeInit(&dmaRxHandle);
 8000a2c:	f000 fa1e 	bl	8000e6c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaRxHandle);
 8000a30:	4638      	mov	r0, r7
 8000a32:	f000 f99b 	bl	8000d6c <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dmaTxHandle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dmaTxHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaTxHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	e9c4 233d 	strd	r2, r3, [r4, #244]	; 0xf4
  dmaTxHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
  dmaTxHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000a42:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dmaTxHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8000a46:	e9c4 3941 	strd	r3, r9, [r4, #260]	; 0x104
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaTxHandle.Init.MemBurst            = DMA_MBURST_INC4;
  dmaTxHandle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000a4a:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 8000a4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a52:	e9c4 7344 	strd	r7, r3, [r4, #272]	; 0x110
  
  dmaTxHandle.Instance = SD_DMAx_Tx_STREAM;
 8000a56:	4627      	mov	r7, r4
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <BSP_SD_MspInit+0x1ac>)
 8000a5a:	f847 3fe4 	str.w	r3, [r7, #228]!
  dmaTxHandle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000a64:	e9c4 013a 	strd	r0, r1, [r4, #232]	; 0xe8
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
 8000a68:	63f7      	str	r7, [r6, #60]	; 0x3c
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaTxHandle);
 8000a6a:	4638      	mov	r0, r7
  dmaTxHandle.Init.Mode                = DMA_PFCTRL;
 8000a6c:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	; 0xfc
  dmaTxHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a70:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
  dmaTxHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000a74:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
  __HAL_LINKDMA(hsd, hdmatx, dmaTxHandle);
 8000a78:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
  HAL_DMA_DeInit(&dmaTxHandle);
 8000a7c:	f000 f9f6 	bl	8000e6c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaTxHandle); 
 8000a80:	4638      	mov	r0, r7
 8000a82:	f000 f973 	bl	8000d6c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8000a86:	462a      	mov	r2, r5
 8000a88:	210f      	movs	r1, #15
 8000a8a:	203b      	movs	r0, #59	; 0x3b
 8000a8c:	f000 f904 	bl	8000c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8000a90:	203b      	movs	r0, #59	; 0x3b
 8000a92:	f000 f933 	bl	8000cfc <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8000a96:	462a      	mov	r2, r5
 8000a98:	210f      	movs	r1, #15
 8000a9a:	2045      	movs	r0, #69	; 0x45
 8000a9c:	f000 f8fc 	bl	8000c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8000aa0:	2045      	movs	r0, #69	; 0x45
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_EnableIRQ>
}
 8000aa6:	b00b      	add	sp, #44	; 0x2c
 8000aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	200004fc 	.word	0x200004fc
 8000abc:	40021c00 	.word	0x40021c00
 8000ac0:	40026458 	.word	0x40026458
 8000ac4:	400264a0 	.word	0x400264a0

08000ac8 <BSP_SD_Init>:
{ 
 8000ac8:	b513      	push	{r0, r1, r4, lr}
  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <BSP_SD_Init+0x4c>)
  uSdHandle.Instance = SDIO;
 8000acc:	4c12      	ldr	r4, [pc, #72]	; (8000b18 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8000ace:	2100      	movs	r1, #0
 8000ad0:	e9c4 3100 	strd	r3, r1, [r4]
  __IO uint8_t status = SD_PRESENT;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8000ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8000ade:	61a1      	str	r1, [r4, #24]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8000ae0:	2b01      	cmp	r3, #1
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ae2:	e9c4 1102 	strd	r1, r1, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ae6:	e9c4 1104 	strd	r1, r1, [r4, #16]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 8000aea:	d002      	beq.n	8000af2 <BSP_SD_Init+0x2a>
    return MSD_ERROR;
 8000aec:	2001      	movs	r0, #1
}
 8000aee:	b002      	add	sp, #8
 8000af0:	bd10      	pop	{r4, pc}
  BSP_SD_MspInit(&uSdHandle, NULL);
 8000af2:	4620      	mov	r0, r4
 8000af4:	f7ff ff10 	bl	8000918 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8000af8:	4620      	mov	r0, r4
 8000afa:	f001 fa21 	bl	8001f40 <HAL_SD_Init>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d1f4      	bne.n	8000aec <BSP_SD_Init+0x24>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b06:	4620      	mov	r0, r4
 8000b08:	f001 fa48 	bl	8001f9c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8000b0c:	3800      	subs	r0, #0
 8000b0e:	bf18      	it	ne
 8000b10:	2001      	movne	r0, #1
 8000b12:	e7ec      	b.n	8000aee <BSP_SD_Init+0x26>
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	200004fc 	.word	0x200004fc

08000b1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8000b1c:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000b1e:	4803      	ldr	r0, [pc, #12]	; (8000b2c <BSP_SD_GetCardState+0x10>)
 8000b20:	f001 fac6 	bl	80020b0 <HAL_SD_GetCardState>
}
 8000b24:	3804      	subs	r0, #4
 8000b26:	bf18      	it	ne
 8000b28:	2001      	movne	r0, #1
 8000b2a:	bd08      	pop	{r3, pc}
 8000b2c:	200004fc 	.word	0x200004fc

08000b30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000b30:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8000b32:	4801      	ldr	r0, [pc, #4]	; (8000b38 <BSP_SD_GetCardInfo+0x8>)
 8000b34:	f001 ba1f 	b.w	8001f76 <HAL_SD_GetCardInfo>
 8000b38:	200004fc 	.word	0x200004fc

08000b3c <BSP_SD_AbortCallback>:
 8000b3c:	4770      	bx	lr

08000b3e <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8000b3e:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8000b40:	f7ff fffc 	bl	8000b3c <BSP_SD_AbortCallback>
}
 8000b44:	bd08      	pop	{r3, pc}

08000b46 <BSP_SD_WriteCpltCallback>:
 8000b46:	4770      	bx	lr

08000b48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000b48:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8000b4a:	f7ff fffc 	bl	8000b46 <BSP_SD_WriteCpltCallback>
}
 8000b4e:	bd08      	pop	{r3, pc}

08000b50 <BSP_SD_ReadCpltCallback>:
 8000b50:	4770      	bx	lr

08000b52 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000b52:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8000b54:	f7ff fffc 	bl	8000b50 <BSP_SD_ReadCpltCallback>
}
 8000b58:	bd08      	pop	{r3, pc}
	...

08000b5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	490f      	ldr	r1, [pc, #60]	; (8000b9c <SystemInit+0x40>)
 8000b5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000b62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <SystemInit+0x44>)
 8000b6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b6e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000b70:	f042 0201 	orr.w	r2, r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000b76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <SystemInit+0x48>)
 8000b86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b96:	608b      	str	r3, [r1, #8]
#endif
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	24003010 	.word	0x24003010

08000ba8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_InitTick+0x3c>)
 8000bb0:	4e0e      	ldr	r6, [pc, #56]	; (8000bec <HAL_InitTick+0x40>)
{
 8000bb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	7830      	ldrb	r0, [r6, #0]
 8000bba:	fbb3 f3f0 	udiv	r3, r3, r0
 8000bbe:	6810      	ldr	r0, [r2, #0]
 8000bc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bc4:	f000 f8a8 	bl	8000d18 <HAL_SYSTICK_Config>
 8000bc8:	4604      	mov	r4, r0
 8000bca:	b950      	cbnz	r0, 8000be2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bcc:	2d0f      	cmp	r5, #15
 8000bce:	d808      	bhi.n	8000be2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f85e 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	6075      	str	r5, [r6, #4]
 8000bde:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e7fc      	b.n	8000be0 <HAL_InitTick+0x34>
 8000be6:	bf00      	nop
 8000be8:	20000028 	.word	0x20000028
 8000bec:	2000002c 	.word	0x2000002c

08000bf0 <HAL_Init>:
{
 8000bf0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_Init+0x28>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f835 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f7ff ffce 	bl	8000bac <HAL_InitTick>
  HAL_MspInit();
 8000c10:	f7ff ffca 	bl	8000ba8 <HAL_MspInit>
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	bd08      	pop	{r3, pc}
 8000c18:	40023c00 	.word	0x40023c00

08000c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <HAL_IncTick+0x14>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	440b      	add	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000640 	.word	0x20000640
 8000c30:	2000002c 	.word	0x2000002c

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000640 	.word	0x20000640

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff6 	bl	8000c34 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c48:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	bf1c      	itt	ne
 8000c4c:	4b05      	ldrne	r3, [pc, #20]	; (8000c64 <HAL_Delay+0x24>)
 8000c4e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000c52:	bf18      	it	ne
 8000c54:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	f7ff ffed 	bl	8000c34 <HAL_GetTick>
 8000c5a:	1b43      	subs	r3, r0, r5
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d3fa      	bcc.n	8000c56 <HAL_Delay+0x16>
  {
  }
}
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	2000002c 	.word	0x2000002c

08000c68 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8000c68:	4b01      	ldr	r3, [pc, #4]	; (8000c70 <HAL_GetREVID+0x8>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
}
 8000c6c:	0c00      	lsrs	r0, r0, #16
 8000c6e:	4770      	bx	lr
 8000c70:	e0042000 	.word	0xe0042000

08000c74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c76:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c84:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b530      	push	{r4, r5, lr}
 8000c9c:	68dc      	ldr	r4, [r3, #12]
 8000c9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	2d04      	cmp	r5, #4
 8000caa:	bf28      	it	cs
 8000cac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb4:	bf8c      	ite	hi
 8000cb6:	3c03      	subhi	r4, #3
 8000cb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cba:	fa03 f505 	lsl.w	r5, r3, r5
 8000cbe:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc2:	40a3      	lsls	r3, r4
 8000cc4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000cca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	bfac      	ite	ge
 8000cd2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	4a08      	ldrlt	r2, [pc, #32]	; (8000cf8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	bfb8      	it	lt
 8000cde:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	bfaa      	itet	ge
 8000ce6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cf0:	bd30      	pop	{r4, r5, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00
 8000cf8:	e000ed14 	.word	0xe000ed14

08000cfc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	db08      	blt.n	8000d12 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d00:	0942      	lsrs	r2, r0, #5
 8000d02:	2301      	movs	r3, #1
 8000d04:	f000 001f 	and.w	r0, r0, #31
 8000d08:	fa03 f000 	lsl.w	r0, r3, r0
 8000d0c:	4b01      	ldr	r3, [pc, #4]	; (8000d14 <HAL_NVIC_EnableIRQ+0x18>)
 8000d0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	3801      	subs	r0, #1
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d20b      	bcs.n	8000d38 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	21f0      	movs	r1, #240	; 0xf0
 8000d2a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d30:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d32:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d34:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d36:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d38:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d40:	6803      	ldr	r3, [r0, #0]
{
 8000d42:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d44:	4c08      	ldr	r4, [pc, #32]	; (8000d68 <DMA_CalcBaseAndBitshift+0x28>)
{
 8000d46:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d48:	b2d9      	uxtb	r1, r3
 8000d4a:	3910      	subs	r1, #16
 8000d4c:	2018      	movs	r0, #24
 8000d4e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d52:	5c20      	ldrb	r0, [r4, r0]
 8000d54:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d56:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000d5a:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8000d5e:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d60:	bf88      	it	hi
 8000d62:	3004      	addhi	r0, #4
 8000d64:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000d66:	bd10      	pop	{r4, pc}
 8000d68:	08003f14 	.word	0x08003f14

08000d6c <HAL_DMA_Init>:
{
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ff60 	bl	8000c34 <HAL_GetTick>
 8000d74:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000d76:	2c00      	cmp	r4, #0
 8000d78:	d073      	beq.n	8000e62 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000d80:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000d82:	2300      	movs	r3, #0
 8000d84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d90:	6821      	ldr	r1, [r4, #0]
 8000d92:	680b      	ldr	r3, [r1, #0]
 8000d94:	07d8      	lsls	r0, r3, #31
 8000d96:	d42f      	bmi.n	8000df8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8000d98:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d9a:	4d33      	ldr	r5, [pc, #204]	; (8000e68 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d9e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	68e2      	ldr	r2, [r4, #12]
 8000da8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000daa:	6922      	ldr	r2, [r4, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	6962      	ldr	r2, [r4, #20]
 8000db0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db2:	69e2      	ldr	r2, [r4, #28]
 8000db4:	4303      	orrs	r3, r0
 8000db6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db8:	6a22      	ldr	r2, [r4, #32]
 8000dba:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dbe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dc0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dc4:	bf02      	ittt	eq
 8000dc6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8000dca:	4335      	orreq	r5, r6
 8000dcc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000dce:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000dd0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dd2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dd4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000dd8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ddc:	d133      	bne.n	8000e46 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8000dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000de2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000de4:	b37d      	cbz	r5, 8000e46 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000de6:	b990      	cbnz	r0, 8000e0e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8000de8:	2a01      	cmp	r2, #1
 8000dea:	d021      	beq.n	8000e30 <HAL_DMA_Init+0xc4>
 8000dec:	f032 0202 	bics.w	r2, r2, #2
 8000df0:	d129      	bne.n	8000e46 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df2:	01ea      	lsls	r2, r5, #7
 8000df4:	d527      	bpl.n	8000e46 <HAL_DMA_Init+0xda>
 8000df6:	e01e      	b.n	8000e36 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df8:	f7ff ff1c 	bl	8000c34 <HAL_GetTick>
 8000dfc:	1b40      	subs	r0, r0, r5
 8000dfe:	2805      	cmp	r0, #5
 8000e00:	d9c6      	bls.n	8000d90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e02:	2320      	movs	r3, #32
 8000e04:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000e08:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e0e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000e12:	d114      	bne.n	8000e3e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8000e14:	2a03      	cmp	r2, #3
 8000e16:	d816      	bhi.n	8000e46 <HAL_DMA_Init+0xda>
 8000e18:	a001      	add	r0, pc, #4	; (adr r0, 8000e20 <HAL_DMA_Init+0xb4>)
 8000e1a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e37 	.word	0x08000e37
 8000e24:	08000df3 	.word	0x08000df3
 8000e28:	08000e37 	.word	0x08000e37
 8000e2c:	08000e31 	.word	0x08000e31
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e30:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000e34:	d107      	bne.n	8000e46 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e7e4      	b.n	8000e08 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000e3e:	2a02      	cmp	r2, #2
 8000e40:	d9f9      	bls.n	8000e36 <HAL_DMA_Init+0xca>
 8000e42:	2a03      	cmp	r2, #3
 8000e44:	d0d5      	beq.n	8000df2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8000e46:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f7ff ff79 	bl	8000d40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e50:	233f      	movs	r3, #63	; 0x3f
 8000e52:	4093      	lsls	r3, r2
 8000e54:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e56:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e58:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000e60:	e7d4      	b.n	8000e0c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
 8000e64:	e7d2      	b.n	8000e0c <HAL_DMA_Init+0xa0>
 8000e66:	bf00      	nop
 8000e68:	f010803f 	.word	0xf010803f

08000e6c <HAL_DMA_DeInit>:
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8000e6e:	4605      	mov	r5, r0
 8000e70:	b320      	cbz	r0, 8000ebc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8000e72:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	b2dc      	uxtb	r4, r3
 8000e7a:	d01d      	beq.n	8000eb8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8000e7c:	6803      	ldr	r3, [r0, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8000e84:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8000e86:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8000e88:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8000e8a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8000e8c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8000e8e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8000e90:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8000e92:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8000e94:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e96:	f7ff ff53 	bl	8000d40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e9a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8000e9c:	233f      	movs	r3, #63	; 0x3f
 8000e9e:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8000ea0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8000ea4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8000ea8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eac:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eae:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8000eb0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8000eb4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8000eb8:	4620      	mov	r0, r4
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ebc:	2401      	movs	r4, #1
 8000ebe:	e7fb      	b.n	8000eb8 <HAL_DMA_DeInit+0x4c>

08000ec0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000ee0:	2000      	movs	r0, #0
}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_DMA_IRQHandler>:
{
 8000ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eec:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000eee:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000ef2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	4232      	tst	r2, r6
{
 8000efa:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000efc:	d00c      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000efe:	6801      	ldr	r1, [r0, #0]
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	0740      	lsls	r0, r0, #29
 8000f04:	d508      	bpl.n	8000f18 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f06:	6808      	ldr	r0, [r1, #0]
 8000f08:	f020 0004 	bic.w	r0, r0, #4
 8000f0c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f0e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	4232      	tst	r2, r6
 8000f1e:	d008      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f20:	6821      	ldr	r1, [r4, #0]
 8000f22:	6949      	ldr	r1, [r1, #20]
 8000f24:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f26:	bf41      	itttt	mi
 8000f28:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f2a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000f2c:	f042 0202 	orrmi.w	r2, r2, #2
 8000f30:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f32:	2204      	movs	r2, #4
 8000f34:	409a      	lsls	r2, r3
 8000f36:	4232      	tst	r2, r6
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f3a:	6821      	ldr	r1, [r4, #0]
 8000f3c:	6809      	ldr	r1, [r1, #0]
 8000f3e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f40:	bf41      	itttt	mi
 8000f42:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f44:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000f46:	f042 0204 	orrmi.w	r2, r2, #4
 8000f4a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	4232      	tst	r2, r6
 8000f52:	d010      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	0709      	lsls	r1, r1, #28
 8000f5a:	d50c      	bpl.n	8000f76 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f5c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	0350      	lsls	r0, r2, #13
 8000f62:	d537      	bpl.n	8000fd4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	0319      	lsls	r1, r3, #12
 8000f68:	d401      	bmi.n	8000f6e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f6c:	e000      	b.n	8000f70 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000f70:	b10b      	cbz	r3, 8000f76 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000f72:	4620      	mov	r0, r4
 8000f74:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f76:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000f78:	2220      	movs	r2, #32
 8000f7a:	408a      	lsls	r2, r1
 8000f7c:	4232      	tst	r2, r6
 8000f7e:	d03a      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	06c6      	lsls	r6, r0, #27
 8000f86:	d536      	bpl.n	8000ff6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f88:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f8a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000f8e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f90:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f92:	d127      	bne.n	8000fe4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f94:	f022 0216 	bic.w	r2, r2, #22
 8000f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fa4:	b90a      	cbnz	r2, 8000faa <HAL_DMA_IRQHandler+0xc6>
 8000fa6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fa8:	b11a      	cbz	r2, 8000fb2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	f022 0208 	bic.w	r2, r2, #8
 8000fb0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb2:	233f      	movs	r3, #63	; 0x3f
 8000fb4:	408b      	lsls	r3, r1
 8000fb6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8000fc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d045      	beq.n	8001056 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000fca:	4620      	mov	r0, r4
}
 8000fcc:	b003      	add	sp, #12
 8000fce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000fd2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fd8:	bf5e      	ittt	pl
 8000fda:	681a      	ldrpl	r2, [r3, #0]
 8000fdc:	f022 0208 	bicpl.w	r2, r2, #8
 8000fe0:	601a      	strpl	r2, [r3, #0]
 8000fe2:	e7c2      	b.n	8000f6a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fe4:	0350      	lsls	r0, r2, #13
 8000fe6:	d527      	bpl.n	8001038 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0319      	lsls	r1, r3, #12
 8000fec:	d431      	bmi.n	8001052 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ff0:	b10b      	cbz	r3, 8000ff6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ff8:	b36b      	cbz	r3, 8001056 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ffc:	07da      	lsls	r2, r3, #31
 8000ffe:	d519      	bpl.n	8001034 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001000:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001002:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001006:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800100a:	2305      	movs	r3, #5
 800100c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f023 0301 	bic.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001018:	9b01      	ldr	r3, [sp, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	42bb      	cmp	r3, r7
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	d802      	bhi.n	8001028 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	07db      	lsls	r3, r3, #31
 8001026:	d4f7      	bmi.n	8001018 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8001028:	2301      	movs	r3, #1
 800102a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800102e:	2300      	movs	r3, #0
 8001030:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001034:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001036:	e7c6      	b.n	8000fc6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800103e:	d108      	bne.n	8001052 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	f021 0110 	bic.w	r1, r1, #16
 8001046:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001048:	2301      	movs	r3, #1
 800104a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800104e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001054:	e7cc      	b.n	8000ff0 <HAL_DMA_IRQHandler+0x10c>
}
 8001056:	b003      	add	sp, #12
 8001058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000028 	.word	0x20000028

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001064:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001210 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001068:	4a67      	ldr	r2, [pc, #412]	; (8001208 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800106e:	2401      	movs	r4, #1
 8001070:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001076:	43ac      	bics	r4, r5
 8001078:	f040 80b1 	bne.w	80011de <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107c:	684d      	ldr	r5, [r1, #4]
 800107e:	f005 0403 	and.w	r4, r5, #3
 8001082:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001086:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001088:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800108a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001094:	d834      	bhi.n	8001100 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001096:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109c:	68cf      	ldr	r7, [r1, #12]
 800109e:	fa07 f708 	lsl.w	r7, r7, r8
 80010a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80010a6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010aa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80010b2:	409f      	lsls	r7, r3
 80010b4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010b8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80010ba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010bc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	688f      	ldr	r7, [r1, #8]
 80010c2:	fa07 f708 	lsl.w	r7, r7, r8
 80010c6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80010cc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	d119      	bne.n	8001104 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80010d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80010e4:	f04f 0e0f 	mov.w	lr, #15
 80010e8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80010ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	690f      	ldr	r7, [r1, #16]
 80010f2:	fa07 f70b 	lsl.w	r7, r7, fp
 80010f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	f8ca 7020 	str.w	r7, [sl, #32]
 80010fe:	e001      	b.n	8001104 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	2c03      	cmp	r4, #3
 8001102:	d1da      	bne.n	80010ba <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001104:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001106:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001112:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	d063      	beq.n	80011de <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	f04f 0a00 	mov.w	sl, #0
 800111a:	f8cd a004 	str.w	sl, [sp, #4]
 800111e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	4c3a      	ldr	r4, [pc, #232]	; (800120c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001128:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800112c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001130:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001134:	9601      	str	r6, [sp, #4]
 8001136:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001138:	f023 0603 	bic.w	r6, r3, #3
 800113c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001140:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001148:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001150:	270f      	movs	r7, #15
 8001152:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001158:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115c:	d046      	beq.n	80011ec <HAL_GPIO_Init+0x18c>
 800115e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001162:	42a0      	cmp	r0, r4
 8001164:	d044      	beq.n	80011f0 <HAL_GPIO_Init+0x190>
 8001166:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800116a:	42a0      	cmp	r0, r4
 800116c:	d042      	beq.n	80011f4 <HAL_GPIO_Init+0x194>
 800116e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001172:	42a0      	cmp	r0, r4
 8001174:	d040      	beq.n	80011f8 <HAL_GPIO_Init+0x198>
 8001176:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800117a:	42a0      	cmp	r0, r4
 800117c:	d03e      	beq.n	80011fc <HAL_GPIO_Init+0x19c>
 800117e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001182:	42a0      	cmp	r0, r4
 8001184:	d03c      	beq.n	8001200 <HAL_GPIO_Init+0x1a0>
 8001186:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800118a:	42a0      	cmp	r0, r4
 800118c:	d03a      	beq.n	8001204 <HAL_GPIO_Init+0x1a4>
 800118e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001192:	42a0      	cmp	r0, r4
 8001194:	bf0c      	ite	eq
 8001196:	2407      	moveq	r4, #7
 8001198:	2408      	movne	r4, #8
 800119a:	fa04 f40e 	lsl.w	r4, r4, lr
 800119e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80011a2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80011aa:	bf54      	ite	pl
 80011ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80011b2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80011b8:	bf54      	ite	pl
 80011ba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011bc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80011c0:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80011c2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80011c6:	bf54      	ite	pl
 80011c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80011ce:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80011d4:	bf54      	ite	pl
 80011d6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011d8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80011dc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	3301      	adds	r3, #1
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	f47f af43 	bne.w	800106c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80011e6:	b003      	add	sp, #12
 80011e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ec:	4654      	mov	r4, sl
 80011ee:	e7d4      	b.n	800119a <HAL_GPIO_Init+0x13a>
 80011f0:	2401      	movs	r4, #1
 80011f2:	e7d2      	b.n	800119a <HAL_GPIO_Init+0x13a>
 80011f4:	2402      	movs	r4, #2
 80011f6:	e7d0      	b.n	800119a <HAL_GPIO_Init+0x13a>
 80011f8:	2403      	movs	r4, #3
 80011fa:	e7ce      	b.n	800119a <HAL_GPIO_Init+0x13a>
 80011fc:	2404      	movs	r4, #4
 80011fe:	e7cc      	b.n	800119a <HAL_GPIO_Init+0x13a>
 8001200:	2405      	movs	r4, #5
 8001202:	e7ca      	b.n	800119a <HAL_GPIO_Init+0x13a>
 8001204:	2406      	movs	r4, #6
 8001206:	e7c8      	b.n	800119a <HAL_GPIO_Init+0x13a>
 8001208:	40013c00 	.word	0x40013c00
 800120c:	40020000 	.word	0x40020000
 8001210:	40023800 	.word	0x40023800

08001214 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	b10a      	cbz	r2, 800121a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	6181      	str	r1, [r0, #24]
  }
}
 8001218:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	0409      	lsls	r1, r1, #16
 800121c:	e7fb      	b.n	8001216 <HAL_GPIO_WritePin+0x2>
	...

08001220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001224:	4604      	mov	r4, r0
 8001226:	b340      	cbz	r0, 800127a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	07dd      	lsls	r5, r3, #31
 800122c:	d410      	bmi.n	8001250 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	0798      	lsls	r0, r3, #30
 8001232:	d45e      	bmi.n	80012f2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	071a      	lsls	r2, r3, #28
 8001238:	f100 80a0 	bmi.w	800137c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	075b      	lsls	r3, r3, #29
 8001240:	f100 80c0 	bmi.w	80013c4 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001244:	69a0      	ldr	r0, [r4, #24]
 8001246:	2800      	cmp	r0, #0
 8001248:	f040 8128 	bne.w	800149c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800124c:	2000      	movs	r0, #0
 800124e:	e02b      	b.n	80012a8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001250:	4b8f      	ldr	r3, [pc, #572]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	f002 020c 	and.w	r2, r2, #12
 8001258:	2a04      	cmp	r2, #4
 800125a:	d007      	beq.n	800126c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2a08      	cmp	r2, #8
 8001264:	d10b      	bne.n	800127e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	0251      	lsls	r1, r2, #9
 800126a:	d508      	bpl.n	800127e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	039a      	lsls	r2, r3, #14
 8001272:	d5dc      	bpl.n	800122e <HAL_RCC_OscConfig+0xe>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1d9      	bne.n	800122e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
 800127c:	e014      	b.n	80012a8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127e:	6862      	ldr	r2, [r4, #4]
 8001280:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001284:	d113      	bne.n	80012ae <HAL_RCC_OscConfig+0x8e>
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800128c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800128e:	f7ff fcd1 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4e7f      	ldr	r6, [pc, #508]	; (8001490 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001294:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	6833      	ldr	r3, [r6, #0]
 8001298:	039b      	lsls	r3, r3, #14
 800129a:	d4c8      	bmi.n	800122e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcca 	bl	8000c34 <HAL_GetTick>
 80012a0:	1b40      	subs	r0, r0, r5
 80012a2:	2864      	cmp	r0, #100	; 0x64
 80012a4:	d9f7      	bls.n	8001296 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80012a6:	2003      	movs	r0, #3
}
 80012a8:	b002      	add	sp, #8
 80012aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	4d78      	ldr	r5, [pc, #480]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 80012b0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0xa8>
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	602b      	str	r3, [r5, #0]
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c6:	e7e2      	b.n	800128e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d1d9      	bne.n	800128e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80012da:	f7ff fcab 	bl	8000c34 <HAL_GetTick>
 80012de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	039f      	lsls	r7, r3, #14
 80012e4:	d5a3      	bpl.n	800122e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fca5 	bl	8000c34 <HAL_GetTick>
 80012ea:	1b80      	subs	r0, r0, r6
 80012ec:	2864      	cmp	r0, #100	; 0x64
 80012ee:	d9f7      	bls.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012f0:	e7d9      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	f012 0f0c 	tst.w	r2, #12
 80012fa:	d007      	beq.n	800130c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2a08      	cmp	r2, #8
 8001304:	d111      	bne.n	800132a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	025e      	lsls	r6, r3, #9
 800130a:	d40e      	bmi.n	800132a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	4a60      	ldr	r2, [pc, #384]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	079d      	lsls	r5, r3, #30
 8001312:	d502      	bpl.n	800131a <HAL_RCC_OscConfig+0xfa>
 8001314:	68e3      	ldr	r3, [r4, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d1af      	bne.n	800127a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	6813      	ldr	r3, [r2, #0]
 800131c:	6921      	ldr	r1, [r4, #16]
 800131e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001322:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001326:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001328:	e784      	b.n	8001234 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800132a:	68e2      	ldr	r2, [r4, #12]
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x274>)
 800132e:	b1b2      	cbz	r2, 800135e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001334:	f7ff fc7e 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4d55      	ldr	r5, [pc, #340]	; (8001490 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800133a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	0798      	lsls	r0, r3, #30
 8001340:	d507      	bpl.n	8001352 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	6922      	ldr	r2, [r4, #16]
 8001346:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800134a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	e770      	b.n	8001234 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fc6f 	bl	8000c34 <HAL_GetTick>
 8001356:	1b80      	subs	r0, r0, r6
 8001358:	2802      	cmp	r0, #2
 800135a:	d9ef      	bls.n	800133c <HAL_RCC_OscConfig+0x11c>
 800135c:	e7a3      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800135e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001360:	f7ff fc68 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	4e4a      	ldr	r6, [pc, #296]	; (8001490 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001366:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001368:	6833      	ldr	r3, [r6, #0]
 800136a:	0799      	lsls	r1, r3, #30
 800136c:	f57f af62 	bpl.w	8001234 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fc60 	bl	8000c34 <HAL_GetTick>
 8001374:	1b40      	subs	r0, r0, r5
 8001376:	2802      	cmp	r0, #2
 8001378:	d9f6      	bls.n	8001368 <HAL_RCC_OscConfig+0x148>
 800137a:	e794      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800137c:	6962      	ldr	r2, [r4, #20]
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <HAL_RCC_OscConfig+0x274>)
 8001380:	b182      	cbz	r2, 80013a4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001382:	2201      	movs	r2, #1
 8001384:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001388:	f7ff fc54 	bl	8000c34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138c:	4e40      	ldr	r6, [pc, #256]	; (8001490 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800138e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001392:	079f      	lsls	r7, r3, #30
 8001394:	f53f af52 	bmi.w	800123c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc4c 	bl	8000c34 <HAL_GetTick>
 800139c:	1b40      	subs	r0, r0, r5
 800139e:	2802      	cmp	r0, #2
 80013a0:	d9f6      	bls.n	8001390 <HAL_RCC_OscConfig+0x170>
 80013a2:	e780      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80013a4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc44 	bl	8000c34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4e38      	ldr	r6, [pc, #224]	; (8001490 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80013ae:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80013b2:	0798      	lsls	r0, r3, #30
 80013b4:	f57f af42 	bpl.w	800123c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc3c 	bl	8000c34 <HAL_GetTick>
 80013bc:	1b40      	subs	r0, r0, r5
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9f6      	bls.n	80013b0 <HAL_RCC_OscConfig+0x190>
 80013c2:	e770      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c4:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80013cc:	d128      	bne.n	8001420 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013e2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4d2c      	ldr	r5, [pc, #176]	; (8001498 <HAL_RCC_OscConfig+0x278>)
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	05d9      	lsls	r1, r3, #23
 80013ea:	d51b      	bpl.n	8001424 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	68a3      	ldr	r3, [r4, #8]
 80013ee:	4d28      	ldr	r5, [pc, #160]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d127      	bne.n	8001444 <HAL_RCC_OscConfig+0x224>
 80013f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc1a 	bl	8000c34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	4e23      	ldr	r6, [pc, #140]	; (8001490 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001402:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800140a:	079b      	lsls	r3, r3, #30
 800140c:	d539      	bpl.n	8001482 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800140e:	2f00      	cmp	r7, #0
 8001410:	f43f af18 	beq.w	8001244 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_RCC_OscConfig+0x270>)
 8001416:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	e711      	b.n	8001244 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001420:	2700      	movs	r7, #0
 8001422:	e7df      	b.n	80013e4 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800142c:	f7ff fc02 	bl	8000c34 <HAL_GetTick>
 8001430:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	05da      	lsls	r2, r3, #23
 8001436:	d4d9      	bmi.n	80013ec <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001438:	f7ff fbfc 	bl	8000c34 <HAL_GetTick>
 800143c:	1b80      	subs	r0, r0, r6
 800143e:	2802      	cmp	r0, #2
 8001440:	d9f7      	bls.n	8001432 <HAL_RCC_OscConfig+0x212>
 8001442:	e730      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	2b05      	cmp	r3, #5
 8001446:	d104      	bne.n	8001452 <HAL_RCC_OscConfig+0x232>
 8001448:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	672b      	str	r3, [r5, #112]	; 0x70
 8001450:	e7d0      	b.n	80013f4 <HAL_RCC_OscConfig+0x1d4>
 8001452:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	672a      	str	r2, [r5, #112]	; 0x70
 800145a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800145c:	f022 0204 	bic.w	r2, r2, #4
 8001460:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ca      	bne.n	80013fc <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8001466:	f7ff fbe5 	bl	8000c34 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800146e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001472:	0798      	lsls	r0, r3, #30
 8001474:	d5cb      	bpl.n	800140e <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fbdd 	bl	8000c34 <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	4540      	cmp	r0, r8
 800147e:	d9f7      	bls.n	8001470 <HAL_RCC_OscConfig+0x250>
 8001480:	e711      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff fbd7 	bl	8000c34 <HAL_GetTick>
 8001486:	1b40      	subs	r0, r0, r5
 8001488:	4540      	cmp	r0, r8
 800148a:	d9bd      	bls.n	8001408 <HAL_RCC_OscConfig+0x1e8>
 800148c:	e70b      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149c:	4d36      	ldr	r5, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x358>)
 800149e:	68ab      	ldr	r3, [r5, #8]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d03d      	beq.n	8001524 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x35c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80014ae:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b0:	d12b      	bne.n	800150a <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 80014b2:	f7ff fbbf 	bl	8000c34 <HAL_GetTick>
 80014b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	0199      	lsls	r1, r3, #6
 80014bc:	d41f      	bmi.n	80014fe <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014be:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014c6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014d2:	0852      	lsrs	r2, r2, #1
 80014d4:	3a01      	subs	r2, #1
 80014d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014da:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014de:	4d26      	ldr	r5, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 80014e0:	2201      	movs	r2, #1
 80014e2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80014e4:	f7ff fba6 	bl	8000c34 <HAL_GetTick>
 80014e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	682b      	ldr	r3, [r5, #0]
 80014ec:	019a      	lsls	r2, r3, #6
 80014ee:	f53f aead 	bmi.w	800124c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fb9f 	bl	8000c34 <HAL_GetTick>
 80014f6:	1b00      	subs	r0, r0, r4
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f6      	bls.n	80014ea <HAL_RCC_OscConfig+0x2ca>
 80014fc:	e6d3      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb99 	bl	8000c34 <HAL_GetTick>
 8001502:	1b80      	subs	r0, r0, r6
 8001504:	2802      	cmp	r0, #2
 8001506:	d9d7      	bls.n	80014b8 <HAL_RCC_OscConfig+0x298>
 8001508:	e6cd      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800150a:	f7ff fb93 	bl	8000c34 <HAL_GetTick>
 800150e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	019b      	lsls	r3, r3, #6
 8001514:	f57f ae9a 	bpl.w	800124c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb8c 	bl	8000c34 <HAL_GetTick>
 800151c:	1b00      	subs	r0, r0, r4
 800151e:	2802      	cmp	r0, #2
 8001520:	d9f6      	bls.n	8001510 <HAL_RCC_OscConfig+0x2f0>
 8001522:	e6c0      	b.n	80012a6 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	2801      	cmp	r0, #1
 8001526:	f43f aebf 	beq.w	80012a8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800152a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001532:	4291      	cmp	r1, r2
 8001534:	f47f aea1 	bne.w	800127a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001538:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	428a      	cmp	r2, r1
 8001540:	f47f ae9b 	bne.w	800127a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001544:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001546:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800154a:	401a      	ands	r2, r3
 800154c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001550:	f47f ae93 	bne.w	800127a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001554:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001556:	0852      	lsrs	r2, r2, #1
 8001558:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800155c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001562:	f47f ae8a 	bne.w	800127a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001568:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001570:	f43f ae6c 	beq.w	800124c <HAL_RCC_OscConfig+0x2c>
 8001574:	e681      	b.n	800127a <HAL_RCC_OscConfig+0x5a>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000

08001580 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001580:	4913      	ldr	r1, [pc, #76]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001582:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001584:	688b      	ldr	r3, [r1, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d01c      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x48>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001592:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	bf14      	ite	ne
 800159e:	480d      	ldrne	r0, [pc, #52]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	480d      	ldreq	r0, [pc, #52]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015a6:	bf18      	it	ne
 80015a8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ae:	fba1 0100 	umull	r0, r1, r1, r0
 80015b2:	f7fe fe09 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015be:	3301      	adds	r3, #1
 80015c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80015c2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015c6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80015ca:	e7fc      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80015ce:	e7fa      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0x46>
 80015d0:	40023800 	.word	0x40023800
 80015d4:	017d7840 	.word	0x017d7840
 80015d8:	00f42400 	.word	0x00f42400

080015dc <HAL_RCC_ClockConfig>:
{
 80015dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80015e2:	4604      	mov	r4, r0
 80015e4:	b910      	cbnz	r0, 80015ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
}
 80015e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_RCC_ClockConfig+0x124>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	f002 0207 	and.w	r2, r2, #7
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d328      	bcc.n	800164a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	0797      	lsls	r7, r2, #30
 80015fc:	d42d      	bmi.n	800165a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	07d0      	lsls	r0, r2, #31
 8001600:	d441      	bmi.n	8001686 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_ClockConfig+0x124>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f002 0207 	and.w	r2, r2, #7
 800160a:	42aa      	cmp	r2, r5
 800160c:	d866      	bhi.n	80016dc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	0751      	lsls	r1, r2, #29
 8001612:	d46c      	bmi.n	80016ee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	0713      	lsls	r3, r2, #28
 8001616:	d507      	bpl.n	8001628 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001618:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 800161a:	6921      	ldr	r1, [r4, #16]
 800161c:	6893      	ldr	r3, [r2, #8]
 800161e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001622:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001626:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001628:	f7ff ffaa 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 800162e:	4a36      	ldr	r2, [pc, #216]	; (8001708 <HAL_RCC_ClockConfig+0x12c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	40d8      	lsrs	r0, r3
 800163a:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_RCC_ClockConfig+0x130>)
 800163c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_ClockConfig+0x134>)
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	f7ff fab3 	bl	8000bac <HAL_InitTick>
  return HAL_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	e7ce      	b.n	80015e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	428b      	cmp	r3, r1
 8001656:	d1c6      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xa>
 8001658:	e7ce      	b.n	80015f8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 800165c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001660:	bf1e      	ittt	ne
 8001662:	6899      	ldrne	r1, [r3, #8]
 8001664:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001668:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	bf42      	ittt	mi
 800166e:	6899      	ldrmi	r1, [r3, #8]
 8001670:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001674:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001676:	4923      	ldr	r1, [pc, #140]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 8001678:	68a0      	ldr	r0, [r4, #8]
 800167a:	688b      	ldr	r3, [r1, #8]
 800167c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001680:	4303      	orrs	r3, r0
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	e7bb      	b.n	80015fe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	6862      	ldr	r2, [r4, #4]
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 800168a:	2a01      	cmp	r2, #1
 800168c:	d11c      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	d0a7      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4e1b      	ldr	r6, [pc, #108]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 8001698:	68b3      	ldr	r3, [r6, #8]
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	4313      	orrs	r3, r2
 80016a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80016a2:	f7ff fac7 	bl	8000c34 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80016aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ac:	68b3      	ldr	r3, [r6, #8]
 80016ae:	6862      	ldr	r2, [r4, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016b8:	d0a3      	beq.n	8001602 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ba:	f7ff fabb 	bl	8000c34 <HAL_GetTick>
 80016be:	1bc0      	subs	r0, r0, r7
 80016c0:	4540      	cmp	r0, r8
 80016c2:	d9f3      	bls.n	80016ac <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80016c4:	2003      	movs	r0, #3
 80016c6:	e78f      	b.n	80015e8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c8:	1e91      	subs	r1, r2, #2
 80016ca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	d802      	bhi.n	80016d6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016d4:	e7de      	b.n	8001694 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	f013 0f02 	tst.w	r3, #2
 80016da:	e7db      	b.n	8001694 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016dc:	b2ea      	uxtb	r2, r5
 80016de:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	42ab      	cmp	r3, r5
 80016e8:	f47f af7d 	bne.w	80015e6 <HAL_RCC_ClockConfig+0xa>
 80016ec:	e78f      	b.n	800160e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ee:	4905      	ldr	r1, [pc, #20]	; (8001704 <HAL_RCC_ClockConfig+0x128>)
 80016f0:	68e0      	ldr	r0, [r4, #12]
 80016f2:	688b      	ldr	r3, [r1, #8]
 80016f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80016f8:	4303      	orrs	r3, r0
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e78a      	b.n	8001614 <HAL_RCC_ClockConfig+0x38>
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00
 8001704:	40023800 	.word	0x40023800
 8001708:	08003efc 	.word	0x08003efc
 800170c:	20000028 	.word	0x20000028
 8001710:	20000030 	.word	0x20000030

08001714 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001722:	6810      	ldr	r0, [r2, #0]
}
 8001724:	40d8      	lsrs	r0, r3
 8001726:	4770      	bx	lr
 8001728:	40023800 	.word	0x40023800
 800172c:	08003f0c 	.word	0x08003f0c
 8001730:	20000028 	.word	0x20000028

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001742:	6810      	ldr	r0, [r2, #0]
}
 8001744:	40d8      	lsrs	r0, r3
 8001746:	4770      	bx	lr
 8001748:	40023800 	.word	0x40023800
 800174c:	08003f0c 	.word	0x08003f0c
 8001750:	20000028 	.word	0x20000028

08001754 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	4605      	mov	r5, r0
 800175a:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fa6a 	bl	8000c34 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001760:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001762:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001764:	2108      	movs	r1, #8
 8001766:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8001768:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800176c:	f001 f806 	bl	800277c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001770:	4604      	mov	r4, r0
 8001772:	b9d8      	cbnz	r0, 80017ac <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001774:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001776:	6828      	ldr	r0, [r5, #0]
 8001778:	0409      	lsls	r1, r1, #16
 800177a:	f001 f8a9 	bl	80028d0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800177e:	4604      	mov	r4, r0
 8001780:	b9a0      	cbnz	r0, 80017ac <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	2308      	movs	r3, #8
 8001788:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800178c:	2130      	movs	r1, #48	; 0x30
 800178e:	2302      	movs	r3, #2
 8001790:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001794:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001796:	2301      	movs	r3, #1
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001798:	a902      	add	r1, sp, #8
 800179a:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800179c:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800179e:	f000 ff24 	bl	80025ea <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80017a2:	6828      	ldr	r0, [r5, #0]
 80017a4:	f001 f8c4 	bl	8002930 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80017a8:	4604      	mov	r4, r0
 80017aa:	b190      	cbz	r0, 80017d2 <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80017ac:	4620      	mov	r0, r4
 80017ae:	b009      	add	sp, #36	; 0x24
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80017b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80017b4:	0293      	lsls	r3, r2, #10
 80017b6:	d512      	bpl.n	80017de <SD_FindSCR+0x8a>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80017b8:	f000 fef1 	bl	800259e <SDIO_ReadFIFO>
 80017bc:	ab08      	add	r3, sp, #32
 80017be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 80017c2:	3401      	adds	r4, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80017c4:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80017c8:	f7ff fa34 	bl	8000c34 <HAL_GetTick>
 80017cc:	1bc0      	subs	r0, r0, r7
 80017ce:	3001      	adds	r0, #1
 80017d0:	d023      	beq.n	800181a <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80017d2:	6828      	ldr	r0, [r5, #0]
 80017d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80017d6:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80017da:	d0ea      	beq.n	80017b2 <SD_FindSCR+0x5e>
 80017dc:	e002      	b.n	80017e4 <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80017de:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80017e0:	0491      	lsls	r1, r2, #18
 80017e2:	d4f1      	bmi.n	80017c8 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80017e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80017e6:	0712      	lsls	r2, r2, #28
 80017e8:	d502      	bpl.n	80017f0 <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80017ea:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80017ec:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80017ee:	e7dd      	b.n	80017ac <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80017f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80017f2:	0793      	lsls	r3, r2, #30
 80017f4:	d501      	bpl.n	80017fa <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80017f6:	2402      	movs	r4, #2
 80017f8:	e7f8      	b.n	80017ec <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80017fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017fc:	f014 0420 	ands.w	r4, r4, #32
 8001800:	d001      	beq.n	8001806 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001802:	2420      	movs	r4, #32
 8001804:	e7f2      	b.n	80017ec <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	f240 523a 	movw	r2, #1338	; 0x53a
 800180c:	ba1b      	rev	r3, r3
 800180e:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001810:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001812:	9b00      	ldr	r3, [sp, #0]
 8001814:	ba1b      	rev	r3, r3
 8001816:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8001818:	e7c8      	b.n	80017ac <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 800181a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800181e:	e7c5      	b.n	80017ac <SD_FindSCR+0x58>

08001820 <HAL_SD_MspInit>:
}
 8001820:	4770      	bx	lr
	...

08001824 <HAL_SD_ReadBlocks>:
{
 8001824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001828:	b089      	sub	sp, #36	; 0x24
 800182a:	4604      	mov	r4, r0
 800182c:	460d      	mov	r5, r1
 800182e:	4616      	mov	r6, r2
 8001830:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 8001832:	f7ff f9ff 	bl	8000c34 <HAL_GetTick>
 8001836:	4680      	mov	r8, r0
  if(NULL == pData)
 8001838:	b92d      	cbnz	r5, 8001846 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800183a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800183c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001840:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001842:	2701      	movs	r7, #1
 8001844:	e010      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8001846:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800184a:	2b01      	cmp	r3, #1
 800184c:	b2df      	uxtb	r7, r3
 800184e:	f040 80e7 	bne.w	8001a20 <HAL_SD_ReadBlocks+0x1fc>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001852:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001854:	eb06 030a 	add.w	r3, r6, sl
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001858:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800185a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800185c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800185e:	d907      	bls.n	8001870 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001866:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001868:	4638      	mov	r0, r7
 800186a:	b009      	add	sp, #36	; 0x24
 800186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001870:	2303      	movs	r3, #3
 8001872:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001876:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001878:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800187a:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001882:	ea4f 234a 	mov.w	r3, sl, lsl #9
    hsd->Instance->DCTRL = 0U;
 8001886:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001888:	9303      	str	r3, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800188a:	f04f 0200 	mov.w	r2, #0
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800188e:	f04f 0390 	mov.w	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001892:	f04f 0b01 	mov.w	fp, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001896:	f04f 0902 	mov.w	r9, #2
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800189a:	a902      	add	r1, sp, #8
      add *= 512U;
 800189c:	bf18      	it	ne
 800189e:	0276      	lslne	r6, r6, #9
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80018a0:	e9cd 3904 	strd	r3, r9, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80018a4:	e9cd 2b06 	strd	r2, fp, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80018a8:	f000 fe9f 	bl	80025ea <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80018ac:	45da      	cmp	sl, fp
 80018ae:	d912      	bls.n	80018d6 <HAL_SD_ReadBlocks+0xb2>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80018b0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80018b2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80018b6:	4631      	mov	r1, r6
 80018b8:	f000 ff90 	bl	80027dc <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80018bc:	b190      	cbz	r0, 80018e4 <HAL_SD_ReadBlocks+0xc0>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	4a59      	ldr	r2, [pc, #356]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80018c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018c6:	4318      	orrs	r0, r3
 80018c8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80018d4:	e7c8      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80018d6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80018d8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80018dc:	4631      	mov	r1, r6
 80018de:	f000 ff65 	bl	80027ac <SDMMC_CmdReadSingleBlock>
 80018e2:	e7eb      	b.n	80018bc <HAL_SD_ReadBlocks+0x98>
    dataremaining = config.DataLength;
 80018e4:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80018e6:	f240 3b2a 	movw	fp, #810	; 0x32a
 80018ea:	6820      	ldr	r0, [r4, #0]
 80018ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018ee:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80018f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80018f4:	d017      	beq.n	8001926 <HAL_SD_ReadBlocks+0x102>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80018f6:	05db      	lsls	r3, r3, #23
 80018f8:	d509      	bpl.n	800190e <HAL_SD_ReadBlocks+0xea>
 80018fa:	f1ba 0f01 	cmp.w	sl, #1
 80018fe:	d906      	bls.n	800190e <HAL_SD_ReadBlocks+0xea>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001902:	2b03      	cmp	r3, #3
 8001904:	d003      	beq.n	800190e <HAL_SD_ReadBlocks+0xea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001906:	f000 ffb1 	bl	800286c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800190a:	2800      	cmp	r0, #0
 800190c:	d1d7      	bne.n	80018be <HAL_SD_ReadBlocks+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001912:	f011 0108 	ands.w	r1, r1, #8
 8001916:	d038      	beq.n	800198a <HAL_SD_ReadBlocks+0x166>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001918:	4a43      	ldr	r2, [pc, #268]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800191c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800191e:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001922:	63a3      	str	r3, [r4, #56]	; 0x38
 8001924:	e7d1      	b.n	80018ca <HAL_SD_ReadBlocks+0xa6>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001926:	041a      	lsls	r2, r3, #16
 8001928:	d51a      	bpl.n	8001960 <HAL_SD_ReadBlocks+0x13c>
 800192a:	b1ce      	cbz	r6, 8001960 <HAL_SD_ReadBlocks+0x13c>
 800192c:	f105 0904 	add.w	r9, r5, #4
 8001930:	f105 0224 	add.w	r2, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8001934:	6820      	ldr	r0, [r4, #0]
 8001936:	9201      	str	r2, [sp, #4]
 8001938:	f000 fe31 	bl	800259e <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800193c:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 800193e:	f809 0c04 	strb.w	r0, [r9, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001942:	f809 1c03 	strb.w	r1, [r9, #-3]
        for(count = 0U; count < 8U; count++)
 8001946:	9a01      	ldr	r2, [sp, #4]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001948:	0c01      	lsrs	r1, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800194a:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800194c:	f809 1c02 	strb.w	r1, [r9, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001950:	f809 0c01 	strb.w	r0, [r9, #-1]
        for(count = 0U; count < 8U; count++)
 8001954:	f109 0904 	add.w	r9, r9, #4
 8001958:	454a      	cmp	r2, r9
 800195a:	d1eb      	bne.n	8001934 <HAL_SD_ReadBlocks+0x110>
          tempbuff++;
 800195c:	3520      	adds	r5, #32
          dataremaining--;
 800195e:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001960:	f7ff f968 	bl	8000c34 <HAL_GetTick>
 8001964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001966:	eba0 0008 	sub.w	r0, r0, r8
 800196a:	4298      	cmp	r0, r3
 800196c:	d3bd      	bcc.n	80018ea <HAL_SD_ReadBlocks+0xc6>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001974:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800197a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800197c:	2301      	movs	r3, #1
 800197e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001986:	2703      	movs	r7, #3
 8001988:	e76e      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	f012 0202 	ands.w	r2, r2, #2
 8001990:	d00a      	beq.n	80019a8 <HAL_SD_ReadBlocks+0x184>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001992:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800199e:	2301      	movs	r3, #1
 80019a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80019a4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80019a6:	e75f      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80019a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019aa:	0689      	lsls	r1, r1, #26
 80019ac:	d529      	bpl.n	8001a02 <HAL_SD_ReadBlocks+0x1de>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019ae:	491e      	ldr	r1, [pc, #120]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 80019b0:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80019b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019b4:	f043 0320 	orr.w	r3, r3, #32
 80019b8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80019c0:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80019c2:	e751      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
      data = SDIO_ReadFIFO(hsd->Instance);
 80019c4:	f000 fdeb 	bl	800259e <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80019c8:	0a03      	lsrs	r3, r0, #8
 80019ca:	f805 3c03 	strb.w	r3, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80019ce:	0c03      	lsrs	r3, r0, #16
 80019d0:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80019d4:	0e03      	lsrs	r3, r0, #24
 80019d6:	f805 3c01 	strb.w	r3, [r5, #-1]
      *tempbuff = (uint8_t)(data & 0xFFU);
 80019da:	f805 0c04 	strb.w	r0, [r5, #-4]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80019de:	f7ff f929 	bl	8000c34 <HAL_GetTick>
 80019e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80019e4:	eba0 0008 	sub.w	r0, r0, r8
 80019e8:	4298      	cmp	r0, r3
      dataremaining--;
 80019ea:	f1a6 0604 	sub.w	r6, r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80019ee:	f105 0504 	add.w	r5, r5, #4
 80019f2:	d307      	bcc.n	8001a04 <HAL_SD_ReadBlocks+0x1e0>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_SD_ReadBlocks+0x204>)
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80019fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a00:	e78f      	b.n	8001922 <HAL_SD_ReadBlocks+0xfe>
 8001a02:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001a04:	6820      	ldr	r0, [r4, #0]
 8001a06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	d501      	bpl.n	8001a10 <HAL_SD_ReadBlocks+0x1ec>
 8001a0c:	2e00      	cmp	r6, #0
 8001a0e:	d1d9      	bne.n	80019c4 <HAL_SD_ReadBlocks+0x1a0>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001a10:	f240 533a 	movw	r3, #1338	; 0x53a
 8001a14:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001a1c:	2700      	movs	r7, #0
 8001a1e:	e723      	b.n	8001868 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a26:	e70b      	b.n	8001840 <HAL_SD_ReadBlocks+0x1c>
 8001a28:	004005ff 	.word	0x004005ff

08001a2c <HAL_SD_WriteBlocks>:
{
 8001a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a30:	b089      	sub	sp, #36	; 0x24
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	4692      	mov	sl, r2
 8001a38:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001a3a:	f7ff f8fb 	bl	8000c34 <HAL_GetTick>
 8001a3e:	4681      	mov	r9, r0
  if(NULL == pData)
 8001a40:	b935      	cbnz	r5, 8001a50 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001a48:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001a4a:	f04f 0801 	mov.w	r8, #1
 8001a4e:	e011      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8001a50:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	fa5f f883 	uxtb.w	r8, r3
 8001a5a:	f040 80b1 	bne.w	8001bc0 <HAL_SD_WriteBlocks+0x194>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a60:	eb0a 0307 	add.w	r3, sl, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a64:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a66:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a68:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a6a:	d907      	bls.n	8001a7c <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a72:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001a74:	4640      	mov	r0, r8
 8001a76:	b009      	add	sp, #36	; 0x24
 8001a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a82:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001a84:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a86:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8c:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a8e:	ea4f 2347 	mov.w	r3, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 8001a92:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a94:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001a96:	f04f 0190 	mov.w	r1, #144	; 0x90
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001aa2:	9306      	str	r3, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001aa4:	a902      	add	r1, sp, #8
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001aa6:	f04f 0301 	mov.w	r3, #1
      add *= 512U;
 8001aaa:	bf18      	it	ne
 8001aac:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001ab0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ab2:	f000 fd9a 	bl	80025ea <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001ab6:	2f01      	cmp	r7, #1
 8001ab8:	d912      	bls.n	8001ae0 <HAL_SD_WriteBlocks+0xb4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001aba:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001abc:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001abe:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	f000 febb 	bl	800283c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ac6:	b190      	cbz	r0, 8001aee <HAL_SD_WriteBlocks+0xc2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	4a3f      	ldr	r2, [pc, #252]	; (8001bc8 <HAL_SD_WriteBlocks+0x19c>)
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad0:	4318      	orrs	r0, r3
 8001ad2:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001ade:	e7c9      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001ae0:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001ae2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001ae4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	f000 fe90 	bl	800280c <SDMMC_CmdWriteSingleBlock>
 8001aec:	e7eb      	b.n	8001ac6 <HAL_SD_WriteBlocks+0x9a>
    dataremaining = config.DataLength;
 8001aee:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001af0:	f240 3a1a 	movw	sl, #794	; 0x31a
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001af8:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001afc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001afe:	d016      	beq.n	8001b2e <HAL_SD_WriteBlocks+0x102>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	d508      	bpl.n	8001b16 <HAL_SD_WriteBlocks+0xea>
 8001b04:	2f01      	cmp	r7, #1
 8001b06:	d906      	bls.n	8001b16 <HAL_SD_WriteBlocks+0xea>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001b08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d003      	beq.n	8001b16 <HAL_SD_WriteBlocks+0xea>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b0e:	f000 fead 	bl	800286c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d1d8      	bne.n	8001ac8 <HAL_SD_WriteBlocks+0x9c>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001b1a:	f010 0008 	ands.w	r0, r0, #8
 8001b1e:	d029      	beq.n	8001b74 <HAL_SD_WriteBlocks+0x148>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_SD_WriteBlocks+0x19c>)
 8001b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b2c:	e7d2      	b.n	8001ad4 <HAL_SD_WriteBlocks+0xa8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001b2e:	045a      	lsls	r2, r3, #17
 8001b30:	d50c      	bpl.n	8001b4c <HAL_SD_WriteBlocks+0x120>
 8001b32:	b15e      	cbz	r6, 8001b4c <HAL_SD_WriteBlocks+0x120>
 8001b34:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001b38:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001b3c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001b3e:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001b40:	a901      	add	r1, sp, #4
 8001b42:	f000 fd2f 	bl	80025a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001b46:	45ab      	cmp	fp, r5
 8001b48:	d1f6      	bne.n	8001b38 <HAL_SD_WriteBlocks+0x10c>
          dataremaining--;
 8001b4a:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001b4c:	f7ff f872 	bl	8000c34 <HAL_GetTick>
 8001b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001b52:	eba0 0009 	sub.w	r0, r0, r9
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d3cc      	bcc.n	8001af4 <HAL_SD_WriteBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_SD_WriteBlocks+0x19c>)
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b62:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001b6e:	f04f 0803 	mov.w	r8, #3
 8001b72:	e77f      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b76:	f011 0102 	ands.w	r1, r1, #2
 8001b7a:	d00a      	beq.n	8001b92 <HAL_SD_WriteBlocks+0x166>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_SD_WriteBlocks+0x19c>)
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b8e:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001b90:	e770      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	f012 0210 	ands.w	r2, r2, #16
 8001b98:	d00a      	beq.n	8001bb0 <HAL_SD_WriteBlocks+0x184>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_SD_WriteBlocks+0x19c>)
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001bac:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001bae:	e761      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001bb0:	f240 513a 	movw	r1, #1338	; 0x53a
 8001bb4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	e759      	b.n	8001a74 <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bc6:	e73f      	b.n	8001a48 <HAL_SD_WriteBlocks+0x1c>
 8001bc8:	004005ff 	.word	0x004005ff

08001bcc <HAL_SD_ErrorCallback>:
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001bd0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001bd2:	0f9a      	lsrs	r2, r3, #30
 8001bd4:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001bd6:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001bda:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001bdc:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001be0:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001be2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001be6:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001be8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001bec:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001bee:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001bf0:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001bf2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001bf4:	0d1a      	lsrs	r2, r3, #20
 8001bf6:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001bf8:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001bfc:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001bfe:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001c02:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001c04:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001c08:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001c0a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001c0e:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001c10:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001c14:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001c16:	2200      	movs	r2, #0
 8001c18:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8001c1c:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	d16c      	bne.n	8001cfc <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001c22:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001c24:	f640 74fc 	movw	r4, #4092	; 0xffc
 8001c28:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8001c2c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001c30:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001c32:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001c36:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001c38:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001c3c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001c3e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001c42:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001c44:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001c48:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001c4c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001c4e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001c50:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001c52:	7e0a      	ldrb	r2, [r1, #24]
 8001c54:	f002 0207 	and.w	r2, r2, #7
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001c58:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001c5a:	3202      	adds	r2, #2
 8001c5c:	fa03 f202 	lsl.w	r2, r3, r2
 8001c60:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001c62:	7a0b      	ldrb	r3, [r1, #8]
 8001c64:	f003 040f 	and.w	r4, r3, #15
 8001c68:	2301      	movs	r3, #1
 8001c6a:	40a3      	lsls	r3, r4
 8001c6c:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	4353      	muls	r3, r2
 8001c72:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001c74:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001c78:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001c7a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001c7c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001c80:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001c82:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001c8a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001c8c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001c8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001c90:	0fda      	lsrs	r2, r3, #31
 8001c92:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001c94:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001c98:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001c9a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001c9e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001ca0:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8001ca4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001ca6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001caa:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8001cae:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001cb0:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8001cb4:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001cb8:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001cbc:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001cc0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001cc4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001cc8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001ccc:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001cd0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001cd4:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001cd8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001cdc:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001ce0:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001ce4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001ce8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001cec:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001cf0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001cfa:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001cfc:	2a01      	cmp	r2, #1
 8001cfe:	d10f      	bne.n	8001d20 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001d00:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8001d04:	041b      	lsls	r3, r3, #16
 8001d06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001d0e:	690b      	ldr	r3, [r1, #16]
 8001d10:	3301      	adds	r3, #1
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001d16:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1c:	6583      	str	r3, [r0, #88]	; 0x58
 8001d1e:	e7ab      	b.n	8001c78 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <HAL_SD_GetCardCSD+0x168>)
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001d26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001d34:	4618      	mov	r0, r3
 8001d36:	e7e0      	b.n	8001cfa <HAL_SD_GetCardCSD+0x12a>
 8001d38:	004005ff 	.word	0x004005ff

08001d3c <HAL_SD_InitCard>:
{
 8001d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d40:	2300      	movs	r3, #0
{
 8001d42:	b098      	sub	sp, #96	; 0x60
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001d44:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001d48:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d4c:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001d4e:	2376      	movs	r3, #118	; 0x76
 8001d50:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 8001d52:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001d54:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8001d56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001d5e:	ab07      	add	r3, sp, #28
 8001d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d62:	6820      	ldr	r0, [r4, #0]
 8001d64:	f000 fbff 	bl	8002566 <SDIO_Init>
  if(status != HAL_OK)
 8001d68:	4605      	mov	r5, r0
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	f040 80df 	bne.w	8001f2e <HAL_SD_InitCard+0x1f2>
  __HAL_SD_DISABLE(hsd);
 8001d70:	4f70      	ldr	r7, [pc, #448]	; (8001f34 <HAL_SD_InitCard+0x1f8>)
  __HAL_SD_ENABLE(hsd);
 8001d72:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8001d74:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	f000 fc18 	bl	80025ae <SDIO_PowerState_ON>
  HAL_Delay(2);
 8001d7e:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8001d80:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
  HAL_Delay(2);
 8001d84:	f7fe ff5c 	bl	8000c40 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d88:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8001d8a:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d8c:	f000 fc40 	bl	8002610 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d90:	4605      	mov	r5, r0
 8001d92:	b940      	cbnz	r0, 8001da6 <HAL_SD_InitCard+0x6a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	f000 ff09 	bl	8002bac <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d9a:	b170      	cbz	r0, 8001dba <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d9c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001d9e:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001da0:	f000 fc36 	bl	8002610 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001da4:	b190      	cbz	r0, 8001dcc <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8001da6:	2501      	movs	r5, #1
 8001da8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dae:	4303      	orrs	r3, r0
 8001db0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001db2:	4628      	mov	r0, r5
 8001db4:	b018      	add	sp, #96	; 0x60
 8001db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001dba:	64a6      	str	r6, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f000 fd86 	bl	80028d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dc4:	b128      	cbz	r0, 8001dd2 <HAL_SD_InitCard+0x96>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001dc6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001dca:	e7ec      	b.n	8001da6 <HAL_SD_InitCard+0x6a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001dcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d0f4      	beq.n	8001dbc <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001dd2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001f3c <HAL_SD_InitCard+0x200>
{
 8001dd6:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001dd8:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8001ddc:	e014      	b.n	8001e08 <HAL_SD_InitCard+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	4631      	mov	r1, r6
 8001de2:	f000 fd75 	bl	80028d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d1dd      	bne.n	8001da6 <HAL_SD_InitCard+0x6a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	4641      	mov	r1, r8
 8001dee:	f000 fe3f 	bl	8002a70 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d1e7      	bne.n	8001dc6 <HAL_SD_InitCard+0x8a>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001df6:	4631      	mov	r1, r6
 8001df8:	6820      	ldr	r0, [r4, #0]
 8001dfa:	f000 fbf3 	bl	80025e4 <SDIO_GetResponse>
    count++;
 8001dfe:	9b06      	ldr	r3, [sp, #24]
 8001e00:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e02:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001e04:	0fc6      	lsrs	r6, r0, #31
    count++;
 8001e06:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001e08:	9b06      	ldr	r3, [sp, #24]
 8001e0a:	42bb      	cmp	r3, r7
 8001e0c:	d801      	bhi.n	8001e12 <HAL_SD_InitCard+0xd6>
 8001e0e:	2e00      	cmp	r6, #0
 8001e10:	d0e5      	beq.n	8001dde <HAL_SD_InitCard+0xa2>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8001e12:	9b06      	ldr	r3, [sp, #24]
 8001e14:	42bb      	cmp	r3, r7
 8001e16:	d80c      	bhi.n	8001e32 <HAL_SD_InitCard+0xf6>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001e18:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8001e1c:	2301      	movs	r3, #1
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8001e1e:	6820      	ldr	r0, [r4, #0]
 8001e20:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8001e22:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8001e26:	f000 fbc6 	bl	80025b6 <SDIO_GetPowerState>
 8001e2a:	b928      	cbnz	r0, 8001e38 <HAL_SD_InitCard+0xfc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001e2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e30:	e7b9      	b.n	8001da6 <HAL_SD_InitCard+0x6a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001e32:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001e36:	e7b6      	b.n	8001da6 <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d043      	beq.n	8001ec6 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001e3e:	6820      	ldr	r0, [r4, #0]
 8001e40:	f000 fdcc 	bl	80029dc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1ae      	bne.n	8001da6 <HAL_SD_InitCard+0x6a>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e48:	4601      	mov	r1, r0
 8001e4a:	6820      	ldr	r0, [r4, #0]
 8001e4c:	f000 fbca 	bl	80025e4 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e50:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e52:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	f000 fbc5 	bl	80025e4 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e5a:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e5c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	f000 fbc0 	bl	80025e4 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001e64:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e66:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	f000 fbbb 	bl	80025e4 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001e70:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d026      	beq.n	8001ec6 <HAL_SD_InitCard+0x18a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001e78:	6820      	ldr	r0, [r4, #0]
 8001e7a:	f10d 0116 	add.w	r1, sp, #22
 8001e7e:	f000 fe53 	bl	8002b28 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d18f      	bne.n	8001da6 <HAL_SD_InitCard+0x6a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001e88:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d01b      	beq.n	8001ec6 <HAL_SD_InitCard+0x18a>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001e8e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001e92:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001e94:	0409      	lsls	r1, r1, #16
 8001e96:	f000 fdb6 	bl	8002a06 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d183      	bne.n	8001da6 <HAL_SD_InitCard+0x6a>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	f000 fb9f 	bl	80025e4 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001ea6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001ea8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001eaa:	6820      	ldr	r0, [r4, #0]
 8001eac:	f000 fb9a 	bl	80025e4 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001eb0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001eb2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f000 fb95 	bl	80025e4 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001eba:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001ebc:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	f000 fb90 	bl	80025e4 <SDIO_GetResponse>
 8001ec4:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	f000 fb8b 	bl	80025e4 <SDIO_GetResponse>
 8001ece:	0d00      	lsrs	r0, r0, #20
 8001ed0:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8001ed2:	a90d      	add	r1, sp, #52	; 0x34
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff fe7b 	bl	8001bd0 <HAL_SD_GetCardCSD>
 8001eda:	4605      	mov	r5, r0
 8001edc:	2800      	cmp	r0, #0
 8001ede:	f47f af72 	bne.w	8001dc6 <HAL_SD_InitCard+0x8a>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8001ee2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f000 fcd9 	bl	80028a0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	f47f af59 	bne.w	8001da6 <HAL_SD_InitCard+0x6a>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8001ef4:	f104 0310 	add.w	r3, r4, #16
 8001ef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001efc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001f00:	1d23      	adds	r3, r4, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	f000 fb2e 	bl	8002566 <SDIO_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	f000 fc34 	bl	800277c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f43f af4c 	beq.w	8001db2 <HAL_SD_InitCard+0x76>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <HAL_SD_InitCard+0x1fc>)
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f22:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 8001f24:	4318      	orrs	r0, r3
 8001f26:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001f28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001f2c:	e741      	b.n	8001db2 <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 8001f2e:	2501      	movs	r5, #1
 8001f30:	e73f      	b.n	8001db2 <HAL_SD_InitCard+0x76>
 8001f32:	bf00      	nop
 8001f34:	42258000 	.word	0x42258000
 8001f38:	004005ff 	.word	0x004005ff
 8001f3c:	c1100000 	.word	0xc1100000

08001f40 <HAL_SD_Init>:
{
 8001f40:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001f42:	4604      	mov	r4, r0
 8001f44:	b908      	cbnz	r0, 8001f4a <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
}
 8001f48:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8001f4a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001f4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f52:	b913      	cbnz	r3, 8001f5a <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8001f54:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001f56:	f7ff fc63 	bl	8001820 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff feeb 	bl	8001d3c <HAL_SD_InitCard>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d1ed      	bne.n	8001f46 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8001f6a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f6c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001f6e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001f70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001f74:	e7e8      	b.n	8001f48 <HAL_SD_Init+0x8>

08001f76 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f78:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001f7a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f7c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001f7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f80:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001f82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f84:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001f86:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f88:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001f8a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f8c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001f8e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f90:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f92:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001f94:	61cb      	str	r3, [r1, #28]
}
 8001f96:	2000      	movs	r0, #0
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_SD_ConfigWideBusOperation>:
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001fa4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001fa6:	2b03      	cmp	r3, #3
{
 8001fa8:	b08b      	sub	sp, #44	; 0x2c
 8001faa:	4604      	mov	r4, r0
 8001fac:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001fae:	d002      	beq.n	8001fb6 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8001fb0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001fb4:	d103      	bne.n	8001fbe <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	e05d      	b.n	800207a <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8001fbe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fc2:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8001fc4:	d137      	bne.n	8002036 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fcc:	f000 fb0a 	bl	80025e4 <SDIO_GetResponse>
 8001fd0:	0180      	lsls	r0, r0, #6
 8001fd2:	d449      	bmi.n	8002068 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8001fd4:	a904      	add	r1, sp, #16
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff fbbc 	bl	8001754 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fdc:	b960      	cbnz	r0, 8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8001fde:	9b05      	ldr	r3, [sp, #20]
 8001fe0:	0359      	lsls	r1, r3, #13
 8001fe2:	d544      	bpl.n	800206e <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001fe4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	0409      	lsls	r1, r1, #16
 8001fea:	f000 fc71 	bl	80028d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fee:	b918      	cbnz	r0, 8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8001ff0:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	f000 fc84 	bl	8002900 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8001ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ffa:	4318      	orrs	r0, r3
 8001ffc:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8001ffe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002000:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002002:	2e00      	cmp	r6, #0
 8002004:	d03b      	beq.n	800207e <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_SD_ConfigWideBusOperation+0x110>)
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800200a:	2501      	movs	r5, #1
 800200c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002016:	f000 fbb1 	bl	800277c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800201a:	b130      	cbz	r0, 800202a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <HAL_SD_ConfigWideBusOperation+0x110>)
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002024:	4318      	orrs	r0, r3
 8002026:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8002028:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800202e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002032:	b00b      	add	sp, #44	; 0x2c
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002036:	b9e9      	cbnz	r1, 8002074 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8002038:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800203c:	f000 fad2 	bl	80025e4 <SDIO_GetResponse>
 8002040:	0182      	lsls	r2, r0, #6
 8002042:	d411      	bmi.n	8002068 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8002044:	a904      	add	r1, sp, #16
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff fb84 	bl	8001754 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800204c:	2800      	cmp	r0, #0
 800204e:	d1d3      	bne.n	8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002050:	9b05      	ldr	r3, [sp, #20]
 8002052:	03db      	lsls	r3, r3, #15
 8002054:	d50b      	bpl.n	800206e <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002056:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	0409      	lsls	r1, r1, #16
 800205c:	f000 fc38 	bl	80028d0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002060:	2800      	cmp	r0, #0
 8002062:	d1c9      	bne.n	8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002064:	4601      	mov	r1, r0
 8002066:	e7c4      	b.n	8001ff2 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002068:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800206c:	e7c4      	b.n	8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800206e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002072:	e7c1      	b.n	8001ff8 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800207a:	63a3      	str	r3, [r4, #56]	; 0x38
 800207c:	e7bf      	b.n	8001ffe <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002082:	68a3      	ldr	r3, [r4, #8]
 8002084:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002086:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8002088:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800208c:	6963      	ldr	r3, [r4, #20]
 800208e:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002090:	69a3      	ldr	r3, [r4, #24]
 8002092:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8002094:	ab0a      	add	r3, sp, #40	; 0x28
 8002096:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800209a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800209e:	ab04      	add	r3, sp, #16
 80020a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a2:	4638      	mov	r0, r7
 80020a4:	f000 fa5f 	bl	8002566 <SDIO_Init>
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	4635      	mov	r5, r6
 80020aa:	e7b1      	b.n	8002010 <HAL_SD_ConfigWideBusOperation+0x74>
 80020ac:	004005ff 	.word	0x004005ff

080020b0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80020b2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020b4:	0409      	lsls	r1, r1, #16
{
 80020b6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020b8:	6800      	ldr	r0, [r0, #0]
 80020ba:	f000 fc51 	bl	8002960 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80020be:	4601      	mov	r1, r0
 80020c0:	b928      	cbnz	r0, 80020ce <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	f000 fa8e 	bl	80025e4 <SDIO_GetResponse>
}
 80020c8:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80020cc:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80020ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020d0:	4308      	orrs	r0, r1
 80020d2:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80020d4:	2000      	movs	r0, #0
 80020d6:	e7f7      	b.n	80020c8 <HAL_SD_GetCardState+0x18>

080020d8 <SD_DMATxAbort>:
{
 80020d8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80020da:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f240 523a 	movw	r2, #1338	; 0x53a
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
  CardState = HAL_SD_GetCardState(hsd);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ffe3 	bl	80020b0 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 80020ea:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020ec:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 80020ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020f2:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	6323      	str	r3, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020fa:	d805      	bhi.n	8002108 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f000 fbb5 	bl	800286c <SDMMC_CmdStopTransfer>
 8002102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002104:	4318      	orrs	r0, r3
 8002106:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 800210a:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800210c:	b913      	cbnz	r3, 8002114 <SD_DMATxAbort+0x3c>
    HAL_SD_AbortCallback(hsd);
 800210e:	f7fe fd16 	bl	8000b3e <HAL_SD_AbortCallback>
}
 8002112:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8002114:	f7ff fd5a 	bl	8001bcc <HAL_SD_ErrorCallback>
}
 8002118:	e7fb      	b.n	8002112 <SD_DMATxAbort+0x3a>
	...

0800211c <HAL_SD_IRQHandler>:
{
 800211c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8002120:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8002122:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002124:	6800      	ldr	r0, [r0, #0]
 8002126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	d51f      	bpl.n	800216c <HAL_SD_IRQHandler+0x50>
 800212c:	072b      	lsls	r3, r5, #28
 800212e:	d51d      	bpl.n	800216c <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8002130:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  if (dataremaining > 0U)
 8002132:	b1c7      	cbz	r7, 8002166 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pRxBuffPtr;
 8002134:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002136:	1d35      	adds	r5, r6, #4
 8002138:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	f000 fa2e 	bl	800259e <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002142:	0a03      	lsrs	r3, r0, #8
      *tmp = (uint8_t)(data & 0xFFU);
 8002144:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002148:	f805 3c03 	strb.w	r3, [r5, #-3]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800214c:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800214e:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002150:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002154:	f805 0c01 	strb.w	r0, [r5, #-1]
    for(count = 0U; count < 8U; count++)
 8002158:	3504      	adds	r5, #4
 800215a:	4545      	cmp	r5, r8
 800215c:	d1ee      	bne.n	800213c <HAL_SD_IRQHandler+0x20>
      tmp++;
 800215e:	3620      	adds	r6, #32
      dataremaining--;
 8002160:	3f20      	subs	r7, #32
    }

    hsd->pRxBuffPtr = tmp;
 8002162:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002164:	62e7      	str	r7, [r4, #44]	; 0x2c
}
 8002166:	b002      	add	sp, #8
 8002168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800216c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800216e:	05df      	lsls	r7, r3, #23
 8002170:	d545      	bpl.n	80021fe <HAL_SD_IRQHandler+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002176:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002178:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800217a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800217e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002182:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002184:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002186:	072e      	lsls	r6, r5, #28
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	62c3      	str	r3, [r0, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 800218e:	d51b      	bpl.n	80021c8 <HAL_SD_IRQHandler+0xac>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002190:	f015 0f22 	tst.w	r5, #34	; 0x22
 8002194:	d008      	beq.n	80021a8 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002196:	f000 fb69 	bl	800286c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800219a:	b128      	cbz	r0, 80021a8 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 800219c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800219e:	4318      	orrs	r0, r3
 80021a0:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff fd12 	bl	8001bcc <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80021b6:	07a9      	lsls	r1, r5, #30
      hsd->Context = SD_CONTEXT_NONE;
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_RxCpltCallback(hsd);
 80021be:	4620      	mov	r0, r4
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80021c0:	d01a      	beq.n	80021f8 <HAL_SD_IRQHandler+0xdc>
        HAL_SD_RxCpltCallback(hsd);
 80021c2:	f7fe fcc6 	bl	8000b52 <HAL_SD_RxCpltCallback>
 80021c6:	e7ce      	b.n	8002166 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80021c8:	062a      	lsls	r2, r5, #24
 80021ca:	d5cc      	bpl.n	8002166 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80021cc:	06ab      	lsls	r3, r5, #26
 80021ce:	d508      	bpl.n	80021e2 <HAL_SD_IRQHandler+0xc6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021d0:	f000 fb4c 	bl	800286c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80021d4:	b128      	cbz	r0, 80021e2 <HAL_SD_IRQHandler+0xc6>
          hsd->ErrorCode |= errorstate;
 80021d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021d8:	4318      	orrs	r0, r3
 80021da:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff fcf5 	bl	8001bcc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80021e2:	07af      	lsls	r7, r5, #30
 80021e4:	d1bf      	bne.n	8002166 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ea:	f023 0308 	bic.w	r3, r3, #8
 80021ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7fe fca6 	bl	8000b48 <HAL_SD_TxCpltCallback>
 80021fc:	e7b3      	b.n	8002166 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80021fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002200:	045e      	lsls	r6, r3, #17
 8002202:	d526      	bpl.n	8002252 <HAL_SD_IRQHandler+0x136>
 8002204:	0729      	lsls	r1, r5, #28
 8002206:	d524      	bpl.n	8002252 <HAL_SD_IRQHandler+0x136>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8002208:	6a67      	ldr	r7, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 800220a:	2f00      	cmp	r7, #0
 800220c:	d0ab      	beq.n	8002166 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 800220e:	6a26      	ldr	r6, [r4, #32]
 8002210:	1d35      	adds	r5, r6, #4
 8002212:	f106 0824 	add.w	r8, r6, #36	; 0x24
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8002216:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800221a:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 800221c:	f815 2c03 	ldrb.w	r2, [r5, #-3]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002220:	6820      	ldr	r0, [r4, #0]
      data |= ((uint32_t)(*tmp) << 8U);
 8002222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002226:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8002228:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 800222c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002230:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002232:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002236:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 24U);
 8002238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    for(count = 0U; count < 8U; count++)
 800223c:	3504      	adds	r5, #4
      data |= ((uint32_t)(*tmp) << 24U);
 800223e:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002240:	f000 f9b0 	bl	80025a4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002244:	4545      	cmp	r5, r8
 8002246:	d1e6      	bne.n	8002216 <HAL_SD_IRQHandler+0xfa>
      tmp++;
 8002248:	3620      	adds	r6, #32
      dataremaining--;
 800224a:	3f20      	subs	r7, #32
    }

    hsd->pTxBuffPtr = tmp;
 800224c:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 800224e:	6267      	str	r7, [r4, #36]	; 0x24
  }
}
 8002250:	e789      	b.n	8002166 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8002252:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002254:	f240 233a 	movw	r3, #570	; 0x23a
 8002258:	421a      	tst	r2, r3
 800225a:	d084      	beq.n	8002166 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800225c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800225e:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002260:	bf42      	ittt	mi
 8002262:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002264:	f043 0302 	orrmi.w	r3, r3, #2
 8002268:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800226a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800226c:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800226e:	bf42      	ittt	mi
 8002270:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002272:	f043 0308 	orrmi.w	r3, r3, #8
 8002276:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002278:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800227a:	069f      	lsls	r7, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800227c:	bf42      	ittt	mi
 800227e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002280:	f043 0320 	orrmi.w	r3, r3, #32
 8002284:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002286:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002288:	06de      	lsls	r6, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800228a:	bf42      	ittt	mi
 800228c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800228e:	f043 0310 	orrmi.w	r3, r3, #16
 8002292:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8002294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002296:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002298:	bf42      	ittt	mi
 800229a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800229c:	f043 0308 	orrmi.w	r3, r3, #8
 80022a0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80022a2:	f240 733a 	movw	r3, #1850	; 0x73a
 80022a6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80022a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022aa:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80022ae:	f023 0302 	bic.w	r3, r3, #2
 80022b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80022b4:	f000 fada 	bl	800286c <SDMMC_CmdStopTransfer>
 80022b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80022ba:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80022bc:	ea40 0003 	orr.w	r0, r0, r3
 80022c0:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80022c2:	d508      	bpl.n	80022d6 <HAL_SD_IRQHandler+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff fc7c 	bl	8001bcc <HAL_SD_ErrorCallback>
 80022d4:	e747      	b.n	8002166 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80022d6:	062b      	lsls	r3, r5, #24
 80022d8:	f57f af45 	bpl.w	8002166 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80022dc:	f015 0f30 	tst.w	r5, #48	; 0x30
 80022e0:	d00d      	beq.n	80022fe <HAL_SD_IRQHandler+0x1e2>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80022e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_SD_IRQHandler+0x210>)
 80022e6:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80022e8:	f7fe fdea 	bl	8000ec0 <HAL_DMA_Abort_IT>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	f43f af3a 	beq.w	8002166 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 80022f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 80022f4:	b002      	add	sp, #8
 80022f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 80022fa:	f7ff beed 	b.w	80020d8 <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80022fe:	f015 0503 	ands.w	r5, r5, #3
 8002302:	d009      	beq.n	8002318 <HAL_SD_IRQHandler+0x1fc>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002304:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_SD_IRQHandler+0x214>)
 8002308:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800230a:	f7fe fdd9 	bl	8000ec0 <HAL_DMA_Abort_IT>
 800230e:	2800      	cmp	r0, #0
 8002310:	f43f af29 	beq.w	8002166 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8002314:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002316:	e7ed      	b.n	80022f4 <HAL_SD_IRQHandler+0x1d8>
        hsd->State = HAL_SD_STATE_READY;
 8002318:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800231a:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 800231c:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 800231e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002322:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002324:	f7fe fc0b 	bl	8000b3e <HAL_SD_AbortCallback>
}
 8002328:	e71d      	b.n	8002166 <HAL_SD_IRQHandler+0x4a>
 800232a:	bf00      	nop
 800232c:	080020d9 	.word	0x080020d9
 8002330:	08002335 	.word	0x08002335

08002334 <SD_DMARxAbort>:
 8002334:	f7ff bed0 	b.w	80020d8 <SD_DMATxAbort>

08002338 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002338:	6802      	ldr	r2, [r0, #0]
 800233a:	68c1      	ldr	r1, [r0, #12]
 800233c:	6913      	ldr	r3, [r2, #16]
 800233e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002342:	430b      	orrs	r3, r1
{
 8002344:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002346:	6113      	str	r3, [r2, #16]
{
 8002348:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800234a:	6883      	ldr	r3, [r0, #8]
 800234c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800234e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002350:	4303      	orrs	r3, r0
 8002352:	6968      	ldr	r0, [r5, #20]
 8002354:	4303      	orrs	r3, r0
 8002356:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002358:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800235c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002360:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002366:	6953      	ldr	r3, [r2, #20]
 8002368:	69a9      	ldr	r1, [r5, #24]
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	430b      	orrs	r3, r1
 8002370:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <UART_SetConfig+0xb8>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d003      	beq.n	8002380 <UART_SetConfig+0x48>
 8002378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237c:	429a      	cmp	r2, r3
 800237e:	d123      	bne.n	80023c8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002380:	f7ff f9d8 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002384:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002386:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800238c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002390:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002394:	d11b      	bne.n	80023ce <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002396:	19b2      	adds	r2, r6, r6
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	415b      	adcs	r3, r3
 800239e:	f7fd ff13 	bl	80001c8 <__aeabi_uldivmod>
 80023a2:	2164      	movs	r1, #100	; 0x64
 80023a4:	fbb0 f5f1 	udiv	r5, r0, r1
 80023a8:	fb01 0315 	mls	r3, r1, r5, r0
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b4:	f003 0207 	and.w	r2, r3, #7
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80023be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023c2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c4:	60a3      	str	r3, [r4, #8]
  }
}
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80023c8:	f7ff f9a4 	bl	8001714 <HAL_RCC_GetPCLK1Freq>
 80023cc:	e7da      	b.n	8002384 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ce:	00b2      	lsls	r2, r6, #2
 80023d0:	0fb3      	lsrs	r3, r6, #30
 80023d2:	f7fd fef9 	bl	80001c8 <__aeabi_uldivmod>
 80023d6:	2264      	movs	r2, #100	; 0x64
 80023d8:	fbb0 f1f2 	udiv	r1, r0, r2
 80023dc:	fb02 0311 	mls	r3, r2, r1, r0
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	; 0x32
 80023e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80023e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80023ec:	e7ea      	b.n	80023c4 <UART_SetConfig+0x8c>
 80023ee:	bf00      	nop
 80023f0:	40011000 	.word	0x40011000

080023f4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	460e      	mov	r6, r1
 80023fa:	4617      	mov	r7, r2
 80023fc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	ea36 0303 	bics.w	r3, r6, r3
 8002406:	d101      	bne.n	800240c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002408:	2000      	movs	r0, #0
 800240a:	e028      	b.n	800245e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800240c:	1c6b      	adds	r3, r5, #1
 800240e:	d0f7      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002410:	b125      	cbz	r5, 800241c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002412:	f7fe fc0f 	bl	8000c34 <HAL_GetTick>
 8002416:	1bc0      	subs	r0, r0, r7
 8002418:	4285      	cmp	r5, r0
 800241a:	d2f0      	bcs.n	80023fe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800241c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241e:	f102 030c 	add.w	r3, r2, #12
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242a:	320c      	adds	r2, #12
 800242c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002430:	6821      	ldr	r1, [r4, #0]
 8002432:	2800      	cmp	r0, #0
 8002434:	d1f2      	bne.n	800241c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	f101 0314 	add.w	r3, r1, #20
 800243a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	f101 0014 	add.w	r0, r1, #20
 8002446:	e840 3200 	strex	r2, r3, [r0]
 800244a:	2a00      	cmp	r2, #0
 800244c:	d1f3      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800244e:	2320      	movs	r3, #32
 8002450:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002454:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002458:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800245c:	2003      	movs	r0, #3
}
 800245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002460 <HAL_UART_Init>:
{
 8002460:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002462:	4604      	mov	r4, r0
 8002464:	b340      	cbz	r0, 80024b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002466:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800246a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800246e:	b91b      	cbnz	r3, 8002478 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002474:	f7fe f858 	bl	8000528 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002478:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800247a:	2324      	movs	r3, #36	; 0x24
 800247c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002480:	68d3      	ldr	r3, [r2, #12]
 8002482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002486:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff ff55 	bl	8002338 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002496:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800249e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80024aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80024b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
 80024ba:	e7fc      	b.n	80024b6 <HAL_UART_Init+0x56>

080024bc <HAL_UART_Transmit>:
{
 80024bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024be:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80024c0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80024c4:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80024c6:	2a20      	cmp	r2, #32
{
 80024c8:	4604      	mov	r4, r0
 80024ca:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80024cc:	d149      	bne.n	8002562 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80024ce:	2900      	cmp	r1, #0
 80024d0:	d045      	beq.n	800255e <HAL_UART_Transmit+0xa2>
 80024d2:	2f00      	cmp	r7, #0
 80024d4:	d043      	beq.n	800255e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80024d6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d041      	beq.n	8002562 <HAL_UART_Transmit+0xa6>
 80024de:	2201      	movs	r2, #1
 80024e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e8:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80024ee:	f7fe fba1 	bl	8000c34 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f2:	68a1      	ldr	r1, [r4, #8]
 80024f4:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80024f6:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80024fc:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80024fe:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002500:	d103      	bne.n	800250a <HAL_UART_Transmit+0x4e>
 8002502:	6921      	ldr	r1, [r4, #16]
 8002504:	b909      	cbnz	r1, 800250a <HAL_UART_Transmit+0x4e>
 8002506:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002508:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800250a:	2100      	movs	r1, #0
 800250c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002510:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002512:	b289      	uxth	r1, r1
 8002514:	b941      	cbnz	r1, 8002528 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002516:	2140      	movs	r1, #64	; 0x40
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff6b 	bl	80023f4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800251e:	b960      	cbnz	r0, 800253a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002520:	2320      	movs	r3, #32
 8002522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002526:	e009      	b.n	800253c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	4620      	mov	r0, r4
 800252c:	e9cd 2300 	strd	r2, r3, [sp]
 8002530:	f7ff ff60 	bl	80023f4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002538:	b110      	cbz	r0, 8002540 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
}
 800253c:	b003      	add	sp, #12
 800253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002540:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8002542:	b94e      	cbnz	r6, 8002558 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002544:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002548:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800254c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800254e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002550:	3901      	subs	r1, #1
 8002552:	b289      	uxth	r1, r1
 8002554:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002556:	e7db      	b.n	8002510 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002558:	f816 1b01 	ldrb.w	r1, [r6], #1
 800255c:	e7f6      	b.n	800254c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800255e:	2001      	movs	r0, #1
 8002560:	e7ec      	b.n	800253c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002562:	2002      	movs	r0, #2
 8002564:	e7ea      	b.n	800253c <HAL_UART_Transmit+0x80>

08002566 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002566:	b084      	sub	sp, #16
 8002568:	b510      	push	{r4, lr}
 800256a:	ac03      	add	r4, sp, #12
 800256c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002570:	460b      	mov	r3, r1
 8002572:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002574:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002576:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002578:	9905      	ldr	r1, [sp, #20]
 800257a:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800257c:	9906      	ldr	r1, [sp, #24]
 800257e:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8002580:	9907      	ldr	r1, [sp, #28]
 8002582:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002584:	9908      	ldr	r1, [sp, #32]

  return HAL_OK;
}
 8002586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800258a:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800258e:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002590:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002594:	4313      	orrs	r3, r2
 8002596:	6043      	str	r3, [r0, #4]
}
 8002598:	b004      	add	sp, #16
 800259a:	2000      	movs	r0, #0
 800259c:	4770      	bx	lr

0800259e <SDIO_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800259e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80025a2:	4770      	bx	lr

080025a4 <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80025a4:	680b      	ldr	r3, [r1, #0]
 80025a6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 80025aa:	2000      	movs	r0, #0
 80025ac:	4770      	bx	lr

080025ae <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80025ae:	2303      	movs	r3, #3
 80025b0:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 80025b2:	2000      	movs	r0, #0
 80025b4:	4770      	bx	lr

080025b6 <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80025b6:	6800      	ldr	r0, [r0, #0]
}
 80025b8:	f000 0003 	and.w	r0, r0, #3
 80025bc:	4770      	bx	lr

080025be <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80025be:	680b      	ldr	r3, [r1, #0]
{
 80025c0:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 80025c2:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80025c4:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80025c8:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80025ca:	4323      	orrs	r3, r4
                       Command->Response         |\
 80025cc:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80025ce:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80025d0:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80025d2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80025d6:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80025d8:	f022 020f 	bic.w	r2, r2, #15
 80025dc:	4313      	orrs	r3, r2
 80025de:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd10      	pop	{r4, pc}

080025e4 <SDIO_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80025e4:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80025e6:	5840      	ldr	r0, [r0, r1]
}  
 80025e8:	4770      	bx	lr

080025ea <SDIO_ConfigData>:
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80025ea:	680b      	ldr	r3, [r1, #0]
{
 80025ec:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80025ee:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80025f0:	684b      	ldr	r3, [r1, #4]
 80025f2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80025f4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80025f8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80025fa:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80025fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                       Data->TransferMode  |\
 80025fe:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002600:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002602:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002604:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002608:	4313      	orrs	r3, r2
 800260a:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800260c:	2000      	movs	r0, #0
 800260e:	bd10      	pop	{r4, pc}

08002610 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002610:	b510      	push	{r4, lr}
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002612:	2300      	movs	r3, #0
{
 8002614:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002616:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800261a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800261e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002624:	9305      	str	r3, [sp, #20]
{
 8002626:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002628:	f7ff ffc9 	bl	80025be <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <SDMMC_CmdGoIdleState+0x48>)
 800262e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fbb3 f3f2 	udiv	r3, r3, r2
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800263e:	3b01      	subs	r3, #1
 8002640:	d307      	bcc.n	8002652 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002642:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002644:	0612      	lsls	r2, r2, #24
 8002646:	d5fa      	bpl.n	800263e <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002648:	23c5      	movs	r3, #197	; 0xc5
 800264a:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800264c:	2000      	movs	r0, #0
}
 800264e:	b006      	add	sp, #24
 8002650:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002652:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002656:	e7fa      	b.n	800264e <SDMMC_CmdGoIdleState+0x3e>
 8002658:	20000028 	.word	0x20000028

0800265c <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800265c:	4b45      	ldr	r3, [pc, #276]	; (8002774 <SDMMC_GetCmdResp1+0x118>)
{
 800265e:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002660:	681b      	ldr	r3, [r3, #0]
{
 8002662:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002664:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002668:	fbb3 f3f0 	udiv	r3, r3, r0
 800266c:	435a      	muls	r2, r3
    if (count-- == 0U)
 800266e:	2a00      	cmp	r2, #0
 8002670:	d049      	beq.n	8002706 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8002672:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002674:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002678:	d007      	beq.n	800268a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	d405      	bmi.n	800268a <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800267e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002680:	0758      	lsls	r0, r3, #29
 8002682:	d504      	bpl.n	800268e <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002684:	2004      	movs	r0, #4
 8002686:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	3a01      	subs	r2, #1
 800268c:	e7ef      	b.n	800266e <SDMMC_GetCmdResp1+0x12>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800268e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002690:	f010 0001 	ands.w	r0, r0, #1
 8002694:	d002      	beq.n	800269c <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002696:	2301      	movs	r3, #1
 8002698:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800269a:	e7f5      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800269c:	23c5      	movs	r3, #197	; 0xc5
 800269e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80026a0:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d131      	bne.n	800270c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 80026a8:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80026aa:	4833      	ldr	r0, [pc, #204]	; (8002778 <SDMMC_GetCmdResp1+0x11c>)
 80026ac:	4018      	ands	r0, r3
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d0ea      	beq.n	8002688 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db2c      	blt.n	8002710 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80026b6:	005a      	lsls	r2, r3, #1
 80026b8:	d42d      	bmi.n	8002716 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80026ba:	009c      	lsls	r4, r3, #2
 80026bc:	d42d      	bmi.n	800271a <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80026be:	00d9      	lsls	r1, r3, #3
 80026c0:	d42d      	bmi.n	800271e <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80026c2:	011a      	lsls	r2, r3, #4
 80026c4:	d42e      	bmi.n	8002724 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80026c6:	015c      	lsls	r4, r3, #5
 80026c8:	d42f      	bmi.n	800272a <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80026ca:	01d9      	lsls	r1, r3, #7
 80026cc:	d430      	bmi.n	8002730 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	d431      	bmi.n	8002736 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80026d2:	025c      	lsls	r4, r3, #9
 80026d4:	d432      	bmi.n	800273c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80026d6:	0299      	lsls	r1, r3, #10
 80026d8:	d433      	bmi.n	8002742 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80026da:	02da      	lsls	r2, r3, #11
 80026dc:	d434      	bmi.n	8002748 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80026de:	035c      	lsls	r4, r3, #13
 80026e0:	d435      	bmi.n	800274e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80026e2:	0399      	lsls	r1, r3, #14
 80026e4:	d436      	bmi.n	8002754 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80026e6:	03da      	lsls	r2, r3, #15
 80026e8:	d437      	bmi.n	800275a <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80026ea:	041c      	lsls	r4, r3, #16
 80026ec:	d438      	bmi.n	8002760 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80026ee:	0459      	lsls	r1, r3, #17
 80026f0:	d439      	bmi.n	8002766 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80026f2:	049a      	lsls	r2, r3, #18
 80026f4:	d43a      	bmi.n	800276c <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80026f6:	f013 0f08 	tst.w	r3, #8
 80026fa:	bf14      	ite	ne
 80026fc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002700:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002704:	e7c0      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8002706:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800270a:	e7bd      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800270c:	2001      	movs	r0, #1
 800270e:	e7bb      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002710:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002714:	e7b8      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002716:	2040      	movs	r0, #64	; 0x40
 8002718:	e7b6      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800271a:	2080      	movs	r0, #128	; 0x80
 800271c:	e7b4      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800271e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002722:	e7b1      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002724:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002728:	e7ae      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800272a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800272e:	e7ab      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002734:	e7a8      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002736:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800273a:	e7a5      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800273c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002740:	e7a2      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002742:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002746:	e79f      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8002748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800274c:	e79c      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800274e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002752:	e799      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002754:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002758:	e796      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800275a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800275e:	e793      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002760:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002764:	e790      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002766:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800276a:	e78d      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800276c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002770:	e78a      	b.n	8002688 <SDMMC_GetCmdResp1+0x2c>
 8002772:	bf00      	nop
 8002774:	20000028 	.word	0x20000028
 8002778:	fdffe008 	.word	0xfdffe008

0800277c <SDMMC_CmdBlockLength>:
{
 800277c:	b530      	push	{r4, r5, lr}
 800277e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002780:	2510      	movs	r5, #16
 8002782:	2340      	movs	r3, #64	; 0x40
 8002784:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8002788:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800278e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002790:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002792:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002794:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002798:	f7ff ff11 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ff5a 	bl	800265c <SDMMC_GetCmdResp1>
}
 80027a8:	b007      	add	sp, #28
 80027aa:	bd30      	pop	{r4, r5, pc}

080027ac <SDMMC_CmdReadSingleBlock>:
{
 80027ac:	b530      	push	{r4, r5, lr}
 80027ae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027b0:	2511      	movs	r5, #17
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80027b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80027be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027c0:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027c2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027c8:	f7ff fef9 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4629      	mov	r1, r5
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff ff42 	bl	800265c <SDMMC_GetCmdResp1>
}
 80027d8:	b007      	add	sp, #28
 80027da:	bd30      	pop	{r4, r5, pc}

080027dc <SDMMC_CmdReadMultiBlock>:
{
 80027dc:	b530      	push	{r4, r5, lr}
 80027de:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027e0:	2512      	movs	r5, #18
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80027e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80027ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027f0:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027f8:	f7ff fee1 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4629      	mov	r1, r5
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff ff2a 	bl	800265c <SDMMC_GetCmdResp1>
}
 8002808:	b007      	add	sp, #28
 800280a:	bd30      	pop	{r4, r5, pc}

0800280c <SDMMC_CmdWriteSingleBlock>:
{
 800280c:	b530      	push	{r4, r5, lr}
 800280e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002810:	2518      	movs	r5, #24
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8002818:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800281a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800281e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002820:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002822:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002824:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002828:	f7ff fec9 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4629      	mov	r1, r5
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff ff12 	bl	800265c <SDMMC_GetCmdResp1>
}
 8002838:	b007      	add	sp, #28
 800283a:	bd30      	pop	{r4, r5, pc}

0800283c <SDMMC_CmdWriteMultiBlock>:
{
 800283c:	b530      	push	{r4, r5, lr}
 800283e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002840:	2519      	movs	r5, #25
 8002842:	2340      	movs	r3, #64	; 0x40
 8002844:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 8002848:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800284a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800284e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002850:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002852:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002854:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002858:	f7ff feb1 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4629      	mov	r1, r5
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff fefa 	bl	800265c <SDMMC_GetCmdResp1>
}
 8002868:	b007      	add	sp, #28
 800286a:	bd30      	pop	{r4, r5, pc}

0800286c <SDMMC_CmdStopTransfer>:
{
 800286c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800286e:	2300      	movs	r3, #0
{
 8002870:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002872:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002874:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002876:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800287a:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 800287e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002880:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002884:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002886:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002888:	f7ff fe99 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <SDMMC_CmdStopTransfer+0x30>)
 800288e:	4629      	mov	r1, r5
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fee3 	bl	800265c <SDMMC_GetCmdResp1>
}
 8002896:	b007      	add	sp, #28
 8002898:	bd30      	pop	{r4, r5, pc}
 800289a:	bf00      	nop
 800289c:	05f5e100 	.word	0x05f5e100

080028a0 <SDMMC_CmdSelDesel>:
{
 80028a0:	b530      	push	{r4, r5, lr}
 80028a2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028a4:	2507      	movs	r5, #7
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80028ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80028b2:	9201      	str	r2, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028b6:	2200      	movs	r2, #0
 80028b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028bc:	f7ff fe7f 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4629      	mov	r1, r5
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff fec8 	bl	800265c <SDMMC_GetCmdResp1>
}
 80028cc:	b007      	add	sp, #28
 80028ce:	bd30      	pop	{r4, r5, pc}

080028d0 <SDMMC_CmdAppCommand>:
{
 80028d0:	b530      	push	{r4, r5, lr}
 80028d2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028d4:	2537      	movs	r5, #55	; 0x37
 80028d6:	2340      	movs	r3, #64	; 0x40
 80028d8:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 80028dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80028e2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028e4:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028ec:	f7ff fe67 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4629      	mov	r1, r5
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff feb0 	bl	800265c <SDMMC_GetCmdResp1>
}
 80028fc:	b007      	add	sp, #28
 80028fe:	bd30      	pop	{r4, r5, pc}

08002900 <SDMMC_CmdBusWidth>:
{
 8002900:	b530      	push	{r4, r5, lr}
 8002902:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002904:	2506      	movs	r5, #6
 8002906:	2340      	movs	r3, #64	; 0x40
 8002908:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800290c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8002912:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002914:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002916:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002918:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800291c:	f7ff fe4f 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4629      	mov	r1, r5
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe98 	bl	800265c <SDMMC_GetCmdResp1>
}
 800292c:	b007      	add	sp, #28
 800292e:	bd30      	pop	{r4, r5, pc}

08002930 <SDMMC_CmdSendSCR>:
{
 8002930:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002932:	2300      	movs	r3, #0
{
 8002934:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002936:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002938:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800293a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800293e:	e9cd 3501 	strd	r3, r5, [sp, #4]
{
 8002942:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002944:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002948:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800294a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800294c:	f7ff fe37 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4629      	mov	r1, r5
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff fe80 	bl	800265c <SDMMC_GetCmdResp1>
}
 800295c:	b007      	add	sp, #28
 800295e:	bd30      	pop	{r4, r5, pc}

08002960 <SDMMC_CmdSendStatus>:
{
 8002960:	b530      	push	{r4, r5, lr}
 8002962:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002964:	250d      	movs	r5, #13
 8002966:	2340      	movs	r3, #64	; 0x40
 8002968:	e9cd 5302 	strd	r5, r3, [sp, #8]
{
 800296c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800296e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 8002972:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002974:	2200      	movs	r2, #0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002976:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002978:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800297c:	f7ff fe1f 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4629      	mov	r1, r5
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fe68 	bl	800265c <SDMMC_GetCmdResp1>
}
 800298c:	b007      	add	sp, #28
 800298e:	bd30      	pop	{r4, r5, pc}

08002990 <SDMMC_GetCmdResp2>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <SDMMC_GetCmdResp2+0x48>)
 8002992:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fbb3 f3f1 	udiv	r3, r3, r1
 800299c:	f241 3188 	movw	r1, #5000	; 0x1388
{
 80029a0:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80029a2:	434b      	muls	r3, r1
    if (count-- == 0U)
 80029a4:	3b01      	subs	r3, #1
 80029a6:	d313      	bcc.n	80029d0 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDIOx->STA;
 80029a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80029aa:	f011 0f45 	tst.w	r1, #69	; 0x45
 80029ae:	d0f9      	beq.n	80029a4 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80029b0:	0509      	lsls	r1, r1, #20
 80029b2:	d4f7      	bmi.n	80029a4 <SDMMC_GetCmdResp2+0x14>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80029b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80029b6:	075b      	lsls	r3, r3, #29
 80029b8:	d502      	bpl.n	80029c0 <SDMMC_GetCmdResp2+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80029ba:	2004      	movs	r0, #4
 80029bc:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80029be:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80029c0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80029c2:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80029ca:	23c5      	moveq	r3, #197	; 0xc5
 80029cc:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80029ce:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80029d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000028 	.word	0x20000028

080029dc <SDMMC_CmdSendCID>:
{
 80029dc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80029de:	2300      	movs	r3, #0
{
 80029e0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80029e2:	2202      	movs	r2, #2
 80029e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80029e8:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 80029ee:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029f4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029f6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029f8:	f7ff fde1 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7ff ffc7 	bl	8002990 <SDMMC_GetCmdResp2>
}
 8002a02:	b006      	add	sp, #24
 8002a04:	bd10      	pop	{r4, pc}

08002a06 <SDMMC_CmdSendCSD>:
{
 8002a06:	b510      	push	{r4, lr}
 8002a08:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002a0a:	2209      	movs	r2, #9
 8002a0c:	23c0      	movs	r3, #192	; 0xc0
 8002a0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8002a12:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	2100      	movs	r1, #0
 8002a1a:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8002a1e:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a20:	a901      	add	r1, sp, #4
 8002a22:	f7ff fdcc 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff ffb2 	bl	8002990 <SDMMC_GetCmdResp2>
}
 8002a2c:	b006      	add	sp, #24
 8002a2e:	bd10      	pop	{r4, pc}

08002a30 <SDMMC_GetCmdResp3>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <SDMMC_GetCmdResp3+0x3c>)
 8002a32:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3c:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8002a40:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002a42:	434b      	muls	r3, r1
    if (count-- == 0U)
 8002a44:	3b01      	subs	r3, #1
 8002a46:	d30e      	bcc.n	8002a66 <SDMMC_GetCmdResp3+0x36>
    sta_reg = SDIOx->STA;
 8002a48:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002a4a:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002a4e:	d0f9      	beq.n	8002a44 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002a50:	0509      	lsls	r1, r1, #20
 8002a52:	d4f7      	bmi.n	8002a44 <SDMMC_GetCmdResp3+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002a54:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8002a56:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002a5a:	bf15      	itete	ne
 8002a5c:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002a5e:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002a60:	6390      	strne	r0, [r2, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002a62:	6393      	streq	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8002a64:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002a66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002a6a:	4770      	bx	lr
 8002a6c:	20000028 	.word	0x20000028

08002a70 <SDMMC_CmdAppOperCommand>:
{
 8002a70:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002a72:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8002a76:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a78:	2229      	movs	r2, #41	; 0x29
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002a84:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	e9cd 1304 	strd	r1, r3, [sp, #16]
{
 8002a90:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a92:	a901      	add	r1, sp, #4
 8002a94:	f7ff fd93 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff ffc9 	bl	8002a30 <SDMMC_GetCmdResp3>
}
 8002a9e:	b006      	add	sp, #24
 8002aa0:	bd10      	pop	{r4, pc}
	...

08002aa4 <SDMMC_GetCmdResp6>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <SDMMC_GetCmdResp6+0x80>)
{
 8002aa6:	b510      	push	{r4, lr}
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002aa8:	681b      	ldr	r3, [r3, #0]
{
 8002aaa:	4604      	mov	r4, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002aac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002ab0:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ab4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ab8:	4343      	muls	r3, r0
    if (count-- == 0U)
 8002aba:	3b01      	subs	r3, #1
 8002abc:	d329      	bcc.n	8002b12 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDIOx->STA;
 8002abe:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ac0:	f010 0f45 	tst.w	r0, #69	; 0x45
 8002ac4:	d0f9      	beq.n	8002aba <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ac6:	0500      	lsls	r0, r0, #20
 8002ac8:	d4f7      	bmi.n	8002aba <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002acc:	0758      	lsls	r0, r3, #29
 8002ace:	d502      	bpl.n	8002ad6 <SDMMC_GetCmdResp6+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ad0:	2004      	movs	r0, #4
 8002ad2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002ad4:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ad6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002ad8:	f010 0001 	ands.w	r0, r0, #1
 8002adc:	d002      	beq.n	8002ae4 <SDMMC_GetCmdResp6+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ade:	2301      	movs	r3, #1
 8002ae0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ae2:	e7f7      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDIOx->RESPCMD);
 8002ae4:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4299      	cmp	r1, r3
 8002aea:	d115      	bne.n	8002b18 <SDMMC_GetCmdResp6+0x74>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002aec:	23c5      	movs	r3, #197	; 0xc5
 8002aee:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8002af0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002af2:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8002af6:	d102      	bne.n	8002afe <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8002afc:	e7ea      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002afe:	045a      	lsls	r2, r3, #17
 8002b00:	d40c      	bmi.n	8002b1c <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002b02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b06:	bf14      	ite	ne
 8002b08:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002b0c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002b10:	e7e0      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8002b12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002b16:	e7dd      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002b18:	2001      	movs	r0, #1
 8002b1a:	e7db      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b20:	e7d8      	b.n	8002ad4 <SDMMC_GetCmdResp6+0x30>
 8002b22:	bf00      	nop
 8002b24:	20000028 	.word	0x20000028

08002b28 <SDMMC_CmdSetRelAdd>:
{
 8002b28:	b530      	push	{r4, r5, lr}
 8002b2a:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b2c:	2300      	movs	r3, #0
{
 8002b2e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b30:	2503      	movs	r5, #3
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b32:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b34:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b38:	e9cd 3503 	strd	r3, r5, [sp, #12]
{
 8002b3c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b42:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b44:	9307      	str	r3, [sp, #28]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b46:	f7ff fd3a 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002b4a:	9a01      	ldr	r2, [sp, #4]
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff ffa8 	bl	8002aa4 <SDMMC_GetCmdResp6>
}
 8002b54:	b009      	add	sp, #36	; 0x24
 8002b56:	bd30      	pop	{r4, r5, pc}

08002b58 <SDMMC_GetCmdResp7>:
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <SDMMC_GetCmdResp7+0x50>)
 8002b5a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b64:	f241 3188 	movw	r1, #5000	; 0x1388
{
 8002b68:	4602      	mov	r2, r0
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b6a:	434b      	muls	r3, r1
    if (count-- == 0U)
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	d317      	bcc.n	8002ba0 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDIOx->STA;
 8002b70:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002b72:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002b76:	d0f9      	beq.n	8002b6c <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b78:	0508      	lsls	r0, r1, #20
 8002b7a:	d4f7      	bmi.n	8002b6c <SDMMC_GetCmdResp7+0x14>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b7c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b7e:	0759      	lsls	r1, r3, #29
 8002b80:	d502      	bpl.n	8002b88 <SDMMC_GetCmdResp7+0x30>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b82:	2004      	movs	r0, #4
 8002b84:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002b86:	4770      	bx	lr
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002b88:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8002b8a:	f010 0001 	ands.w	r0, r0, #1
 8002b8e:	d002      	beq.n	8002b96 <SDMMC_GetCmdResp7+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002b90:	2301      	movs	r3, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002b92:	6393      	str	r3, [r2, #56]	; 0x38
 8002b94:	4770      	bx	lr
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002b96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b98:	065b      	lsls	r3, r3, #25
 8002b9a:	d503      	bpl.n	8002ba4 <SDMMC_GetCmdResp7+0x4c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	e7f8      	b.n	8002b92 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8002ba0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000028 	.word	0x20000028

08002bac <SDMMC_CmdOperCond>:
{
 8002bac:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002bae:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8002bb2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bba:	2140      	movs	r1, #64	; 0x40
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e9cd 1303 	strd	r1, r3, [sp, #12]
{
 8002bc2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bc8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bca:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bcc:	f7ff fcf7 	bl	80025be <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff ffc1 	bl	8002b58 <SDMMC_GetCmdResp7>
}
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd10      	pop	{r4, pc}
	...

08002bdc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <disk_status+0x10>)
 8002bde:	181a      	adds	r2, r3, r0
 8002be0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002be4:	7b10      	ldrb	r0, [r2, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4718      	bx	r3
 8002bec:	20000670 	.word	0x20000670

08002bf0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <disk_initialize+0x1c>)
 8002bf2:	5c1a      	ldrb	r2, [r3, r0]
 8002bf4:	b942      	cbnz	r2, 8002c08 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002bfa:	181a      	adds	r2, r3, r0
 8002bfc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002c00:	7b10      	ldrb	r0, [r2, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4718      	bx	r3
  }
  return stat;
}
 8002c08:	2000      	movs	r0, #0
 8002c0a:	4770      	bx	lr
 8002c0c:	20000670 	.word	0x20000670

08002c10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002c10:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c12:	4c05      	ldr	r4, [pc, #20]	; (8002c28 <disk_read+0x18>)
 8002c14:	1825      	adds	r5, r4, r0
 8002c16:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002c1a:	6860      	ldr	r0, [r4, #4]
 8002c1c:	6884      	ldr	r4, [r0, #8]
 8002c1e:	7b28      	ldrb	r0, [r5, #12]
 8002c20:	46a4      	mov	ip, r4
  return res;
}
 8002c22:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c24:	4760      	bx	ip
 8002c26:	bf00      	nop
 8002c28:	20000670 	.word	0x20000670

08002c2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c2c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c2e:	4c05      	ldr	r4, [pc, #20]	; (8002c44 <disk_write+0x18>)
 8002c30:	1825      	adds	r5, r4, r0
 8002c32:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002c36:	6860      	ldr	r0, [r4, #4]
 8002c38:	68c4      	ldr	r4, [r0, #12]
 8002c3a:	7b28      	ldrb	r0, [r5, #12]
 8002c3c:	46a4      	mov	ip, r4
  return res;
}
 8002c3e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c40:	4760      	bx	ip
 8002c42:	bf00      	nop
 8002c44:	20000670 	.word	0x20000670

08002c48 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <disk_ioctl+0x18>)
{
 8002c4a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c4c:	181c      	adds	r4, r3, r0
 8002c4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002c52:	7b20      	ldrb	r0, [r4, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8002c56:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	4718      	bx	r3
 8002c5e:	bf00      	nop
 8002c60:	20000670 	.word	0x20000670

08002c64 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8002c64:	2000      	movs	r0, #0
 8002c66:	4770      	bx	lr

08002c68 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8002c68:	6800      	ldr	r0, [r0, #0]
 8002c6a:	4770      	bx	lr

08002c6c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002c6c:	0a0b      	lsrs	r3, r1, #8
 8002c6e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002c70:	7043      	strb	r3, [r0, #1]
 8002c72:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002c74:	0e09      	lsrs	r1, r1, #24
 8002c76:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002c78:	70c1      	strb	r1, [r0, #3]
}
 8002c7a:	4770      	bx	lr

08002c7c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8002c7c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8002c7e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002c82:	4290      	cmp	r0, r2
 8002c84:	d1fb      	bne.n	8002c7e <mem_set+0x2>
}
 8002c86:	4770      	bx	lr

08002c88 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <chk_lock+0x70>)
 8002c8a:	6813      	ldr	r3, [r2, #0]
{
 8002c8c:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8002c8e:	b163      	cbz	r3, 8002caa <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002c90:	6804      	ldr	r4, [r0, #0]
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d107      	bne.n	8002ca6 <chk_lock+0x1e>
 8002c96:	6854      	ldr	r4, [r2, #4]
 8002c98:	6883      	ldr	r3, [r0, #8]
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d103      	bne.n	8002ca6 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8002c9e:	6894      	ldr	r4, [r2, #8]
 8002ca0:	6943      	ldr	r3, [r0, #20]
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d020      	beq.n	8002ce8 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	e000      	b.n	8002cac <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8002caa:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8002cac:	6913      	ldr	r3, [r2, #16]
 8002cae:	b1cb      	cbz	r3, 8002ce4 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002cb0:	6805      	ldr	r5, [r0, #0]
 8002cb2:	42ab      	cmp	r3, r5
 8002cb4:	d107      	bne.n	8002cc6 <chk_lock+0x3e>
 8002cb6:	6955      	ldr	r5, [r2, #20]
 8002cb8:	6883      	ldr	r3, [r0, #8]
 8002cba:	429d      	cmp	r5, r3
 8002cbc:	d103      	bne.n	8002cc6 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8002cbe:	6995      	ldr	r5, [r2, #24]
 8002cc0:	6943      	ldr	r3, [r0, #20]
 8002cc2:	429d      	cmp	r5, r3
 8002cc4:	d015      	beq.n	8002cf2 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002cc6:	b96c      	cbnz	r4, 8002ce4 <chk_lock+0x5c>
 8002cc8:	2902      	cmp	r1, #2
 8002cca:	bf0c      	ite	eq
 8002ccc:	2000      	moveq	r0, #0
 8002cce:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002cd0:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cd2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8002cd6:	899b      	ldrh	r3, [r3, #12]
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cdc:	bf14      	ite	ne
 8002cde:	2000      	movne	r0, #0
 8002ce0:	2010      	moveq	r0, #16
 8002ce2:	e7f5      	b.n	8002cd0 <chk_lock+0x48>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7f3      	b.n	8002cd0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002ce8:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d0f1      	beq.n	8002cd2 <chk_lock+0x4a>
 8002cee:	2010      	movs	r0, #16
 8002cf0:	e7ee      	b.n	8002cd0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e7f9      	b.n	8002cea <chk_lock+0x62>
 8002cf6:	bf00      	nop
 8002cf8:	20000644 	.word	0x20000644

08002cfc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <inc_lock+0x80>)
{
 8002cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8002d00:	6813      	ldr	r3, [r2, #0]
 8002d02:	6806      	ldr	r6, [r0, #0]
 8002d04:	429e      	cmp	r6, r3
 8002d06:	d107      	bne.n	8002d18 <inc_lock+0x1c>
 8002d08:	6855      	ldr	r5, [r2, #4]
 8002d0a:	6884      	ldr	r4, [r0, #8]
 8002d0c:	42a5      	cmp	r5, r4
 8002d0e:	d103      	bne.n	8002d18 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8002d10:	6945      	ldr	r5, [r0, #20]
 8002d12:	6894      	ldr	r4, [r2, #8]
 8002d14:	42a5      	cmp	r5, r4
 8002d16:	d022      	beq.n	8002d5e <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 8002d18:	6914      	ldr	r4, [r2, #16]
 8002d1a:	42b4      	cmp	r4, r6
 8002d1c:	d107      	bne.n	8002d2e <inc_lock+0x32>
 8002d1e:	6957      	ldr	r7, [r2, #20]
 8002d20:	6885      	ldr	r5, [r0, #8]
 8002d22:	42af      	cmp	r7, r5
 8002d24:	d103      	bne.n	8002d2e <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8002d26:	6997      	ldr	r7, [r2, #24]
 8002d28:	6945      	ldr	r5, [r0, #20]
 8002d2a:	42af      	cmp	r7, r5
 8002d2c:	d021      	beq.n	8002d72 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d2e:	b10b      	cbz	r3, 8002d34 <inc_lock+0x38>
 8002d30:	bb0c      	cbnz	r4, 8002d76 <inc_lock+0x7a>
 8002d32:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8002d34:	011d      	lsls	r5, r3, #4
 8002d36:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8002d3a:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8002d3c:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8002d3e:	6940      	ldr	r0, [r0, #20]
 8002d40:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8002d42:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8002d44:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8002d46:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d48:	b981      	cbnz	r1, 8002d6c <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d4a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8002d4e:	8989      	ldrh	r1, [r1, #12]
 8002d50:	3101      	adds	r1, #1
 8002d52:	b289      	uxth	r1, r1
 8002d54:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8002d58:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d5a:	8191      	strh	r1, [r2, #12]
}
 8002d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d5e:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d0f2      	beq.n	8002d4a <inc_lock+0x4e>
 8002d64:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8002d68:	8989      	ldrh	r1, [r1, #12]
 8002d6a:	b921      	cbnz	r1, 8002d76 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d70:	e7f0      	b.n	8002d54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e7f4      	b.n	8002d60 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002d76:	2000      	movs	r0, #0
 8002d78:	e7f0      	b.n	8002d5c <inc_lock+0x60>
 8002d7a:	bf00      	nop
 8002d7c:	20000644 	.word	0x20000644

08002d80 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002d80:	3801      	subs	r0, #1
 8002d82:	2801      	cmp	r0, #1
 8002d84:	d815      	bhi.n	8002db2 <dec_lock+0x32>
		n = Files[i].ctr;
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <dec_lock+0x38>)
 8002d88:	0101      	lsls	r1, r0, #4
 8002d8a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8002d8e:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d94:	d104      	bne.n	8002da0 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8002d96:	2300      	movs	r3, #0
 8002d98:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	5050      	str	r0, [r2, r1]
 8002d9e:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0fa      	beq.n	8002d9a <dec_lock+0x1a>
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8002da8:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f5      	beq.n	8002d9a <dec_lock+0x1a>
		res = FR_OK;
 8002dae:	2000      	movs	r0, #0
 8002db0:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002db2:	2002      	movs	r0, #2
	}
	return res;
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000644 	.word	0x20000644

08002dbc <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <clear_lock+0x18>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4290      	cmp	r0, r2
 8002dc2:	bf04      	itt	eq
 8002dc4:	2200      	moveq	r2, #0
 8002dc6:	601a      	streq	r2, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	bf04      	itt	eq
 8002dce:	2200      	moveq	r2, #0
 8002dd0:	611a      	streq	r2, [r3, #16]
	}
}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000644 	.word	0x20000644

08002dd8 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002dd8:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 8002dda:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002ddc:	3b02      	subs	r3, #2
 8002dde:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8002de0:	bf83      	ittte	hi
 8002de2:	8943      	ldrhhi	r3, [r0, #10]
 8002de4:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 8002de6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002dea:	2000      	movls	r0, #0
}
 8002dec:	4770      	bx	lr

08002dee <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002dee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002df0:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002df2:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002df4:	8952      	ldrh	r2, [r2, #10]
 8002df6:	0a49      	lsrs	r1, r1, #9
 8002df8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002dfc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002dfe:	b130      	cbz	r0, 8002e0e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8002e00:	4281      	cmp	r1, r0
 8002e02:	d302      	bcc.n	8002e0a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e04:	1a09      	subs	r1, r1, r0
 8002e06:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e08:	e7f8      	b.n	8002dfc <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002e0a:	6858      	ldr	r0, [r3, #4]
 8002e0c:	4408      	add	r0, r1
}
 8002e0e:	4770      	bx	lr

08002e10 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8002e10:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002e14:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8002e16:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 8002e18:	7803      	ldrb	r3, [r0, #0]
 8002e1a:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002e1c:	bf01      	itttt	eq
 8002e1e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002e20:	750a      	strbeq	r2, [r1, #20]
 8002e22:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8002e24:	754a      	strbeq	r2, [r1, #21]
	}
}
 8002e26:	4770      	bx	lr

08002e28 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002e28:	6803      	ldr	r3, [r0, #0]
{
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4601      	mov	r1, r0
	if (*path) {	/* If the pointer is not a null */
 8002e2e:	b153      	cbz	r3, 8002e46 <get_ldnumber+0x1e>
 8002e30:	4618      	mov	r0, r3
 8002e32:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002e34:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002e38:	2c20      	cmp	r4, #32
 8002e3a:	d910      	bls.n	8002e5e <get_ldnumber+0x36>
 8002e3c:	2c3a      	cmp	r4, #58	; 0x3a
 8002e3e:	d1f8      	bne.n	8002e32 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8002e40:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002e42:	4282      	cmp	r2, r0
 8002e44:	d002      	beq.n	8002e4c <get_ldnumber+0x24>
	int vol = -1;
 8002e46:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4a:	e007      	b.n	8002e5c <get_ldnumber+0x34>
			i = *tp++ - '0';
 8002e4c:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002e4e:	3b30      	subs	r3, #48	; 0x30
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	2801      	cmp	r0, #1
 8002e54:	d8f7      	bhi.n	8002e46 <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 8002e56:	3201      	adds	r2, #1
			i = *tp++ - '0';
 8002e58:	4618      	mov	r0, r3
					*path = ++tt;
 8002e5a:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8002e5c:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e7fc      	b.n	8002e5c <get_ldnumber+0x34>

08002e62 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002e62:	b538      	push	{r3, r4, r5, lr}
 8002e64:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002e66:	4604      	mov	r4, r0
 8002e68:	b918      	cbnz	r0, 8002e72 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8002e6a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	602b      	str	r3, [r5, #0]
	return res;
}
 8002e70:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002e72:	6803      	ldr	r3, [r0, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f8      	beq.n	8002e6a <validate+0x8>
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d0f5      	beq.n	8002e6a <validate+0x8>
 8002e7e:	8881      	ldrh	r1, [r0, #4]
 8002e80:	88da      	ldrh	r2, [r3, #6]
 8002e82:	4291      	cmp	r1, r2
 8002e84:	d1f1      	bne.n	8002e6a <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002e86:	7858      	ldrb	r0, [r3, #1]
 8002e88:	f7ff fea8 	bl	8002bdc <disk_status>
 8002e8c:	f010 0001 	ands.w	r0, r0, #1
 8002e90:	d1eb      	bne.n	8002e6a <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	e7eb      	b.n	8002e6e <validate+0xc>

08002e96 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002e96:	3801      	subs	r0, #1
 8002e98:	440a      	add	r2, r1
			*d++ = *s++;
 8002e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e9e:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8002ea2:	4291      	cmp	r1, r2
 8002ea4:	d1f9      	bne.n	8002e9a <mem_cpy.part.0+0x4>
}
 8002ea6:	4770      	bx	lr

08002ea8 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8002eac:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002eae:	f100 0830 	add.w	r8, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002eb2:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	7840      	ldrb	r0, [r0, #1]
 8002eb8:	4632      	mov	r2, r6
 8002eba:	4641      	mov	r1, r8
 8002ebc:	f7ff feb6 	bl	8002c2c <disk_write>
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	b9a8      	cbnz	r0, 8002ef0 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002ec4:	6a23      	ldr	r3, [r4, #32]
 8002ec6:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 8002ec8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002eca:	1af3      	subs	r3, r6, r3
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d202      	bcs.n	8002ed6 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ed0:	78a7      	ldrb	r7, [r4, #2]
 8002ed2:	2f01      	cmp	r7, #1
 8002ed4:	d802      	bhi.n	8002edc <sync_window.part.0+0x34>
}
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8002edc:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ede:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8002ee0:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ee2:	4632      	mov	r2, r6
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	f7ff fea0 	bl	8002c2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002eec:	3f01      	subs	r7, #1
 8002eee:	e7f0      	b.n	8002ed2 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8002ef0:	2501      	movs	r5, #1
 8002ef2:	e7f0      	b.n	8002ed6 <sync_window.part.0+0x2e>

08002ef4 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002ef4:	78c3      	ldrb	r3, [r0, #3]
 8002ef6:	b10b      	cbz	r3, 8002efc <sync_window+0x8>
 8002ef8:	f7ff bfd6 	b.w	8002ea8 <sync_window.part.0>
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	4770      	bx	lr

08002f00 <move_window>:
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002f02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f04:	428b      	cmp	r3, r1
{
 8002f06:	4605      	mov	r5, r0
 8002f08:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002f0a:	d010      	beq.n	8002f2e <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8002f0c:	f7ff fff2 	bl	8002ef4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002f10:	b960      	cbnz	r0, 8002f2c <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002f12:	4622      	mov	r2, r4
 8002f14:	7868      	ldrb	r0, [r5, #1]
 8002f16:	2301      	movs	r3, #1
 8002f18:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8002f1c:	f7ff fe78 	bl	8002c10 <disk_read>
				res = FR_DISK_ERR;
 8002f20:	2800      	cmp	r0, #0
 8002f22:	bf1c      	itt	ne
 8002f24:	f04f 34ff 	movne.w	r4, #4294967295
 8002f28:	2001      	movne	r0, #1
			fs->winsect = sector;
 8002f2a:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e7fc      	b.n	8002f2c <move_window+0x2c>
	...

08002f34 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002f34:	2300      	movs	r3, #0
{
 8002f36:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002f38:	70c3      	strb	r3, [r0, #3]
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3e:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8002f40:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002f42:	f7ff ffdd 	bl	8002f00 <move_window>
 8002f46:	4603      	mov	r3, r0
 8002f48:	bb18      	cbnz	r0, 8002f92 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002f4a:	f8b4 122e 	ldrh.w	r1, [r4, #558]	; 0x22e
 8002f4e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002f52:	4291      	cmp	r1, r2
 8002f54:	d11f      	bne.n	8002f96 <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002f56:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002f5a:	2ae9      	cmp	r2, #233	; 0xe9
 8002f5c:	d005      	beq.n	8002f6a <check_fs+0x36>
 8002f5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f60:	490f      	ldr	r1, [pc, #60]	; (8002fa0 <check_fs+0x6c>)
 8002f62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8002f66:	428a      	cmp	r2, r1
 8002f68:	d117      	bne.n	8002f9a <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002f6a:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8002f6e:	f7ff fe7b 	bl	8002c68 <ld_dword>
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <check_fs+0x70>)
 8002f74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d008      	beq.n	8002f8e <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002f7c:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8002f80:	f7ff fe72 	bl	8002c68 <ld_dword>
	return 2;
 8002f84:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
 8002f88:	4290      	cmp	r0, r2
 8002f8a:	bf18      	it	ne
 8002f8c:	2302      	movne	r3, #2
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002f92:	2304      	movs	r3, #4
 8002f94:	e7fb      	b.n	8002f8e <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002f96:	2303      	movs	r3, #3
 8002f98:	e7f9      	b.n	8002f8e <check_fs+0x5a>
	return 2;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e7f7      	b.n	8002f8e <check_fs+0x5a>
 8002f9e:	bf00      	nop
 8002fa0:	009000eb 	.word	0x009000eb
 8002fa4:	00544146 	.word	0x00544146

08002fa8 <find_volume>:
{
 8002fa8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	600b      	str	r3, [r1, #0]
{
 8002fb0:	4688      	mov	r8, r1
 8002fb2:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8002fb4:	f7ff ff38 	bl	8002e28 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002fb8:	1e07      	subs	r7, r0, #0
 8002fba:	f2c0 8115 	blt.w	80031e8 <find_volume+0x240>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002fbe:	4e8d      	ldr	r6, [pc, #564]	; (80031f4 <find_volume+0x24c>)
 8002fc0:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8002fc4:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002fc6:	2c00      	cmp	r4, #0
 8002fc8:	f000 8110 	beq.w	80031ec <find_volume+0x244>
	*rfs = fs;							/* Return pointer to the file system object */
 8002fcc:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002fd0:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002fd2:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002fd6:	b16b      	cbz	r3, 8002ff4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8002fd8:	7860      	ldrb	r0, [r4, #1]
 8002fda:	f7ff fdff 	bl	8002bdc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002fde:	07c1      	lsls	r1, r0, #31
 8002fe0:	d408      	bmi.n	8002ff4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002fe2:	b11d      	cbz	r5, 8002fec <find_volume+0x44>
 8002fe4:	f010 0504 	ands.w	r5, r0, #4
 8002fe8:	d000      	beq.n	8002fec <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 8002fea:	250a      	movs	r5, #10
}
 8002fec:	4628      	mov	r0, r5
 8002fee:	b004      	add	sp, #16
 8002ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002ff4:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002ff6:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 8002ff8:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002ffa:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002ffc:	f7ff fdf8 	bl	8002bf0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003000:	07c2      	lsls	r2, r0, #31
 8003002:	f100 80f5 	bmi.w	80031f0 <find_volume+0x248>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003006:	b10d      	cbz	r5, 800300c <find_volume+0x64>
 8003008:	0743      	lsls	r3, r0, #29
 800300a:	d4ee      	bmi.n	8002fea <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800300c:	2100      	movs	r1, #0
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff ff90 	bl	8002f34 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003014:	2802      	cmp	r0, #2
 8003016:	f040 80cd 	bne.w	80031b4 <find_volume+0x20c>
 800301a:	466d      	mov	r5, sp
 800301c:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 8003020:	f204 2136 	addw	r1, r4, #566	; 0x236
 8003024:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003026:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800302a:	b110      	cbz	r0, 8003032 <find_volume+0x8a>
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fe1b 	bl	8002c68 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003032:	3310      	adds	r3, #16
 8003034:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003036:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800303a:	d1f4      	bne.n	8003026 <find_volume+0x7e>
 800303c:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 8003040:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003044:	2f00      	cmp	r7, #0
 8003046:	f000 80aa 	beq.w	800319e <find_volume+0x1f6>
 800304a:	4639      	mov	r1, r7
 800304c:	4620      	mov	r0, r4
 800304e:	f7ff ff71 	bl	8002f34 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003052:	2801      	cmp	r0, #1
 8003054:	f200 80a4 	bhi.w	80031a0 <find_volume+0x1f8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003058:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	f040 80ac 	bne.w	80031bc <find_volume+0x214>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003064:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003068:	b921      	cbnz	r1, 8003074 <find_volume+0xcc>
 800306a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800306e:	f7ff fdfb 	bl	8002c68 <ld_dword>
 8003072:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003074:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8003078:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800307e:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003080:	f200 809c 	bhi.w	80031bc <find_volume+0x214>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003084:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 8003088:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800308a:	2d00      	cmp	r5, #0
 800308c:	f000 8096 	beq.w	80031bc <find_volume+0x214>
 8003090:	1e6a      	subs	r2, r5, #1
 8003092:	422a      	tst	r2, r5
 8003094:	f040 8092 	bne.w	80031bc <find_volume+0x214>
	rv = ptr[1];
 8003098:	f8b4 8041 	ldrh.w	r8, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800309c:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80030a0:	f018 0f0f 	tst.w	r8, #15
 80030a4:	f040 808a 	bne.w	80031bc <find_volume+0x214>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80030a8:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80030ac:	b918      	cbnz	r0, 80030b6 <find_volume+0x10e>
 80030ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80030b2:	f7ff fdd9 	bl	8002c68 <ld_dword>
	rv = ptr[1];
 80030b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d07f      	beq.n	80031bc <find_volume+0x214>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80030bc:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80030c0:	eb02 1c18 	add.w	ip, r2, r8, lsr #4
 80030c4:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80030c6:	4560      	cmp	r0, ip
 80030c8:	d378      	bcc.n	80031bc <find_volume+0x214>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80030ca:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80030ce:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80030d0:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80030d4:	d372      	bcc.n	80031bc <find_volume+0x214>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80030d6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80030da:	4283      	cmp	r3, r0
 80030dc:	d872      	bhi.n	80031c4 <find_volume+0x21c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80030de:	f640 75f5 	movw	r5, #4085	; 0xff5
 80030e2:	42ab      	cmp	r3, r5
 80030e4:	bf8c      	ite	hi
 80030e6:	2502      	movhi	r5, #2
 80030e8:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80030ea:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80030ec:	443a      	add	r2, r7
		fs->database = bsect + sysect;					/* Data start sector */
 80030ee:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
 80030f2:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80030f4:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80030f6:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80030f8:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80030fa:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80030fc:	d164      	bne.n	80031c8 <find_volume+0x220>
	rv = rv << 8 | ptr[0];
 80030fe:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003102:	ea52 0208 	orrs.w	r2, r2, r8
 8003106:	d159      	bne.n	80031bc <find_volume+0x214>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800310c:	f7ff fdac 	bl	8002c68 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003110:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003112:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003114:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003118:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800311c:	d34e      	bcc.n	80031bc <find_volume+0x214>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003126:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 8003128:	f04f 0380 	mov.w	r3, #128	; 0x80
 800312c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800312e:	d12b      	bne.n	8003188 <find_volume+0x1e0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003130:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8003134:	2b01      	cmp	r3, #1
 8003136:	d127      	bne.n	8003188 <find_volume+0x1e0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003138:	1c79      	adds	r1, r7, #1
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff fee0 	bl	8002f00 <move_window>
 8003140:	bb10      	cbnz	r0, 8003188 <find_volume+0x1e0>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003142:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8003146:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003148:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800314c:	429a      	cmp	r2, r3
 800314e:	d11b      	bne.n	8003188 <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003150:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003154:	f7ff fd88 	bl	8002c68 <ld_dword>
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <find_volume+0x250>)
 800315a:	4298      	cmp	r0, r3
 800315c:	d114      	bne.n	8003188 <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800315e:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8003162:	f7ff fd81 	bl	8002c68 <ld_dword>
 8003166:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800316a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800316e:	3320      	adds	r3, #32
 8003170:	4298      	cmp	r0, r3
 8003172:	d109      	bne.n	8003188 <find_volume+0x1e0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003174:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8003178:	f7ff fd76 	bl	8002c68 <ld_dword>
 800317c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800317e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003182:	f7ff fd71 	bl	8002c68 <ld_dword>
 8003186:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8003188:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	fs->fs_type = fmt;		/* FAT sub-type */
 800318a:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800318c:	3301      	adds	r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8003192:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 8003194:	8533      	strh	r3, [r6, #40]	; 0x28
	return FR_OK;
 8003196:	2500      	movs	r5, #0
	clear_lock(fs);
 8003198:	f7ff fe10 	bl	8002dbc <clear_lock>
	return FR_OK;
 800319c:	e726      	b.n	8002fec <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800319e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80031a0:	f108 0801 	add.w	r8, r8, #1
 80031a4:	f1b8 0f04 	cmp.w	r8, #4
 80031a8:	f47f af4a 	bne.w	8003040 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80031ac:	2804      	cmp	r0, #4
 80031ae:	d105      	bne.n	80031bc <find_volume+0x214>
 80031b0:	2501      	movs	r5, #1
 80031b2:	e71b      	b.n	8002fec <find_volume+0x44>
 80031b4:	2804      	cmp	r0, #4
 80031b6:	d0fb      	beq.n	80031b0 <find_volume+0x208>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80031b8:	2801      	cmp	r0, #1
 80031ba:	d901      	bls.n	80031c0 <find_volume+0x218>
 80031bc:	250d      	movs	r5, #13
 80031be:	e715      	b.n	8002fec <find_volume+0x44>
	bsect = 0;
 80031c0:	2700      	movs	r7, #0
 80031c2:	e749      	b.n	8003058 <find_volume+0xb0>
		fmt = FS_FAT32;
 80031c4:	2503      	movs	r5, #3
 80031c6:	e790      	b.n	80030ea <find_volume+0x142>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80031c8:	f1b8 0f00 	cmp.w	r8, #0
 80031cc:	d0f6      	beq.n	80031bc <find_volume+0x214>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80031ce:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80031d0:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80031d2:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80031d4:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80031d8:	bf1b      	ittet	ne
 80031da:	18d2      	addne	r2, r2, r3
 80031dc:	f003 0301 	andne.w	r3, r3, #1
 80031e0:	4613      	moveq	r3, r2
 80031e2:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80031e6:	e795      	b.n	8003114 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 80031e8:	250b      	movs	r5, #11
 80031ea:	e6ff      	b.n	8002fec <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80031ec:	250c      	movs	r5, #12
 80031ee:	e6fd      	b.n	8002fec <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80031f0:	2503      	movs	r5, #3
 80031f2:	e6fb      	b.n	8002fec <find_volume+0x44>
 80031f4:	20000644 	.word	0x20000644
 80031f8:	41615252 	.word	0x41615252

080031fc <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80031fc:	2901      	cmp	r1, #1
{
 80031fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003202:	4606      	mov	r6, r0
 8003204:	460c      	mov	r4, r1
 8003206:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003208:	d973      	bls.n	80032f2 <put_fat+0xf6>
 800320a:	6943      	ldr	r3, [r0, #20]
 800320c:	428b      	cmp	r3, r1
 800320e:	d970      	bls.n	80032f2 <put_fat+0xf6>
		switch (fs->fs_type) {
 8003210:	7803      	ldrb	r3, [r0, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d03f      	beq.n	8003296 <put_fat+0x9a>
 8003216:	2b03      	cmp	r3, #3
 8003218:	d050      	beq.n	80032bc <put_fat+0xc0>
 800321a:	2b01      	cmp	r3, #1
 800321c:	d169      	bne.n	80032f2 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800321e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003222:	6a01      	ldr	r1, [r0, #32]
 8003224:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003228:	f7ff fe6a 	bl	8002f00 <move_window>
 800322c:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 800322e:	bb38      	cbnz	r0, 8003280 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8003230:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8003234:	f108 0a01 	add.w	sl, r8, #1
 8003238:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800323c:	f014 0401 	ands.w	r4, r4, #1
 8003240:	bf1f      	itttt	ne
 8003242:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8003246:	f003 020f 	andne.w	r2, r3, #15
 800324a:	013b      	lslne	r3, r7, #4
 800324c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003250:	bf14      	ite	ne
 8003252:	4313      	orrne	r3, r2
 8003254:	b2fb      	uxtbeq	r3, r7
 8003256:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800325a:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003260:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8003264:	4630      	mov	r0, r6
 8003266:	f7ff fe4b 	bl	8002f00 <move_window>
			if (res != FR_OK) break;
 800326a:	4605      	mov	r5, r0
 800326c:	b940      	cbnz	r0, 8003280 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 800326e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003272:	b144      	cbz	r4, 8003286 <put_fat+0x8a>
 8003274:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8003278:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800327c:	2301      	movs	r3, #1
 800327e:	70f3      	strb	r3, [r6, #3]
}
 8003280:	4628      	mov	r0, r5
 8003282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003286:	f819 300a 	ldrb.w	r3, [r9, sl]
 800328a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800328e:	f023 030f 	bic.w	r3, r3, #15
 8003292:	431f      	orrs	r7, r3
 8003294:	e7f0      	b.n	8003278 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003296:	6a01      	ldr	r1, [r0, #32]
 8003298:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800329c:	f7ff fe30 	bl	8002f00 <move_window>
			if (res != FR_OK) break;
 80032a0:	4605      	mov	r5, r0
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d1ec      	bne.n	8003280 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80032a6:	0064      	lsls	r4, r4, #1
 80032a8:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80032ac:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80032b0:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80032b2:	551f      	strb	r7, [r3, r4]
 80032b4:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80032b8:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 80032ba:	e7df      	b.n	800327c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80032bc:	6a01      	ldr	r1, [r0, #32]
 80032be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80032c2:	f7ff fe1d 	bl	8002f00 <move_window>
			if (res != FR_OK) break;
 80032c6:	4605      	mov	r5, r0
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d1d9      	bne.n	8003280 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80032cc:	00a4      	lsls	r4, r4, #2
 80032ce:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80032d2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80032d6:	441c      	add	r4, r3
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fcc5 	bl	8002c68 <ld_dword>
 80032de:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80032e2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80032e6:	ea47 0100 	orr.w	r1, r7, r0
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff fcbe 	bl	8002c6c <st_dword>
 80032f0:	e7c4      	b.n	800327c <put_fat+0x80>
		switch (fs->fs_type) {
 80032f2:	2502      	movs	r5, #2
 80032f4:	e7c4      	b.n	8003280 <put_fat+0x84>

080032f6 <sync_fs>:
{
 80032f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f8:	4604      	mov	r4, r0
	res = sync_window(fs);
 80032fa:	f7ff fdfb 	bl	8002ef4 <sync_window>
 80032fe:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003300:	2800      	cmp	r0, #0
 8003302:	d142      	bne.n	800338a <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003304:	7823      	ldrb	r3, [r4, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d137      	bne.n	800337a <sync_fs+0x84>
 800330a:	7927      	ldrb	r7, [r4, #4]
 800330c:	2f01      	cmp	r7, #1
 800330e:	d134      	bne.n	800337a <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8003310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003314:	4601      	mov	r1, r0
 8003316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331a:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800331c:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 800331e:	f7ff fcad 	bl	8002c7c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8003322:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8003326:	23aa      	movs	r3, #170	; 0xaa
 8003328:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 800332c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800332e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8003330:	2172      	movs	r1, #114	; 0x72
 8003332:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003336:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800333a:	2361      	movs	r3, #97	; 0x61
 800333c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8003340:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 8003344:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8003348:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 800334c:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8003350:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003354:	6921      	ldr	r1, [r4, #16]
 8003356:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800335a:	f7ff fc87 	bl	8002c6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800335e:	68e1      	ldr	r1, [r4, #12]
 8003360:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003364:	f7ff fc82 	bl	8002c6c <st_dword>
			fs->winsect = fs->volbase + 1;
 8003368:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800336a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800336c:	3201      	adds	r2, #1
 800336e:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003370:	463b      	mov	r3, r7
 8003372:	4631      	mov	r1, r6
 8003374:	f7ff fc5a 	bl	8002c2c <disk_write>
			fs->fsi_flag = 0;
 8003378:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800337a:	2200      	movs	r2, #0
 800337c:	7860      	ldrb	r0, [r4, #1]
 800337e:	4611      	mov	r1, r2
 8003380:	f7ff fc62 	bl	8002c48 <disk_ioctl>
	res = sync_window(fs);
 8003384:	3800      	subs	r0, #0
 8003386:	bf18      	it	ne
 8003388:	2001      	movne	r0, #1
}
 800338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800338c <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 800338c:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800338e:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003390:	bf04      	itt	eq
 8003392:	8a8a      	ldrheq	r2, [r1, #20]
 8003394:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003398:	4618      	mov	r0, r3
 800339a:	4770      	bx	lr

0800339c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800339c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800339e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a0:	4606      	mov	r6, r0
 80033a2:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80033a4:	d94e      	bls.n	8003444 <get_fat.isra.0+0xa8>
 80033a6:	6943      	ldr	r3, [r0, #20]
 80033a8:	4299      	cmp	r1, r3
 80033aa:	d24b      	bcs.n	8003444 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 80033ac:	7803      	ldrb	r3, [r0, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d029      	beq.n	8003406 <get_fat.isra.0+0x6a>
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d034      	beq.n	8003420 <get_fat.isra.0+0x84>
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d144      	bne.n	8003444 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 80033ba:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033be:	6a01      	ldr	r1, [r0, #32]
 80033c0:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80033c4:	f7ff fd9c 	bl	8002f00 <move_window>
 80033c8:	b110      	cbz	r0, 80033d0 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80033ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80033d0:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033d2:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];
 80033d4:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80033d8:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033da:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80033de:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80033e0:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033e4:	f7ff fd8c 	bl	8002f00 <move_window>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d1ee      	bne.n	80033ca <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80033ec:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80033f0:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80033f2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80033f4:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80033f8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80033fc:	bf4c      	ite	mi
 80033fe:	0900      	lsrmi	r0, r0, #4
 8003400:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003404:	e7e3      	b.n	80033ce <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003406:	6a01      	ldr	r1, [r0, #32]
 8003408:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800340c:	f7ff fd78 	bl	8002f00 <move_window>
 8003410:	2800      	cmp	r0, #0
 8003412:	d1da      	bne.n	80033ca <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003414:	0064      	lsls	r4, r4, #1
 8003416:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800341a:	4426      	add	r6, r4
 800341c:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 800341e:	e7d6      	b.n	80033ce <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003420:	6a01      	ldr	r1, [r0, #32]
 8003422:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003426:	f7ff fd6b 	bl	8002f00 <move_window>
 800342a:	2800      	cmp	r0, #0
 800342c:	d1cd      	bne.n	80033ca <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800342e:	00a4      	lsls	r4, r4, #2
 8003430:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8003434:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003438:	4420      	add	r0, r4
 800343a:	f7ff fc15 	bl	8002c68 <ld_dword>
 800343e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8003442:	e7c4      	b.n	80033ce <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8003444:	2001      	movs	r0, #1
	return val;
 8003446:	e7c2      	b.n	80033ce <get_fat.isra.0+0x32>

08003448 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003448:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800344a:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 800344c:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 800344e:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003450:	6143      	str	r3, [r0, #20]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003452:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003454:	b99a      	cbnz	r2, 800347e <dir_sdi.constprop.0+0x36>
 8003456:	782b      	ldrb	r3, [r5, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 800345c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800345e:	b96b      	cbnz	r3, 800347c <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003460:	892b      	ldrh	r3, [r5, #8]
 8003462:	b90b      	cbnz	r3, 8003468 <dir_sdi.constprop.0+0x20>
 8003464:	2002      	movs	r0, #2
}
 8003466:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003468:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800346a:	61e3      	str	r3, [r4, #28]
	if (!dp->sect) return FR_INT_ERR;
 800346c:	69e3      	ldr	r3, [r4, #28]
	dp->clust = clst;					/* Current cluster# */
 800346e:	61a2      	str	r2, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f7      	beq.n	8003464 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003474:	3530      	adds	r5, #48	; 0x30
 8003476:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8003478:	2000      	movs	r0, #0
 800347a:	e7f4      	b.n	8003466 <dir_sdi.constprop.0+0x1e>
 800347c:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800347e:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003480:	b963      	cbnz	r3, 800349c <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003482:	4611      	mov	r1, r2
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	f7ff ff89 	bl	800339c <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800348a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800348c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800348e:	d00b      	beq.n	80034a8 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003490:	2801      	cmp	r0, #1
 8003492:	d9e7      	bls.n	8003464 <dir_sdi.constprop.0+0x1c>
 8003494:	696b      	ldr	r3, [r5, #20]
 8003496:	4298      	cmp	r0, r3
 8003498:	d3f3      	bcc.n	8003482 <dir_sdi.constprop.0+0x3a>
 800349a:	e7e3      	b.n	8003464 <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 800349c:	4611      	mov	r1, r2
 800349e:	4628      	mov	r0, r5
 80034a0:	f7ff fc9a 	bl	8002dd8 <clust2sect>
 80034a4:	61e0      	str	r0, [r4, #28]
 80034a6:	e7e1      	b.n	800346c <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80034a8:	2001      	movs	r0, #1
 80034aa:	e7dc      	b.n	8003466 <dir_sdi.constprop.0+0x1e>

080034ac <remove_chain>:
{
 80034ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034ae:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80034b0:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 80034b2:	6805      	ldr	r5, [r0, #0]
{
 80034b4:	4606      	mov	r6, r0
 80034b6:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80034b8:	d92c      	bls.n	8003514 <remove_chain+0x68>
 80034ba:	696b      	ldr	r3, [r5, #20]
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d929      	bls.n	8003514 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80034c0:	b12a      	cbz	r2, 80034ce <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80034c2:	f04f 32ff 	mov.w	r2, #4294967295
 80034c6:	4628      	mov	r0, r5
 80034c8:	f7ff fe98 	bl	80031fc <put_fat>
		if (res != FR_OK) return res;
 80034cc:	b940      	cbnz	r0, 80034e0 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80034ce:	4621      	mov	r1, r4
 80034d0:	6830      	ldr	r0, [r6, #0]
 80034d2:	9401      	str	r4, [sp, #4]
 80034d4:	f7ff ff62 	bl	800339c <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 80034d8:	9901      	ldr	r1, [sp, #4]
 80034da:	4604      	mov	r4, r0
 80034dc:	b910      	cbnz	r0, 80034e4 <remove_chain+0x38>
	return FR_OK;
 80034de:	2000      	movs	r0, #0
}
 80034e0:	b002      	add	sp, #8
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80034e4:	2801      	cmp	r0, #1
 80034e6:	d015      	beq.n	8003514 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d015      	beq.n	8003518 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80034ec:	2200      	movs	r2, #0
 80034ee:	4628      	mov	r0, r5
 80034f0:	f7ff fe84 	bl	80031fc <put_fat>
			if (res != FR_OK) return res;
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d1f3      	bne.n	80034e0 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80034f8:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 80034fc:	1e91      	subs	r1, r2, #2
 80034fe:	428b      	cmp	r3, r1
 8003500:	d205      	bcs.n	800350e <remove_chain+0x62>
			fs->free_clst++;
 8003502:	3301      	adds	r3, #1
 8003504:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8003506:	792b      	ldrb	r3, [r5, #4]
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800350e:	42a2      	cmp	r2, r4
 8003510:	d8dd      	bhi.n	80034ce <remove_chain+0x22>
 8003512:	e7e4      	b.n	80034de <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003514:	2002      	movs	r0, #2
 8003516:	e7e3      	b.n	80034e0 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003518:	2001      	movs	r0, #1
 800351a:	e7e1      	b.n	80034e0 <remove_chain+0x34>

0800351c <create_chain>:
{
 800351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8003520:	6805      	ldr	r5, [r0, #0]
{
 8003522:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8003524:	460f      	mov	r7, r1
 8003526:	b971      	cbnz	r1, 8003546 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003528:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800352a:	b1ee      	cbz	r6, 8003568 <create_chain+0x4c>
 800352c:	696b      	ldr	r3, [r5, #20]
 800352e:	42b3      	cmp	r3, r6
 8003530:	bf98      	it	ls
 8003532:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8003534:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003536:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8003538:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800353a:	42a3      	cmp	r3, r4
 800353c:	d817      	bhi.n	800356e <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 800353e:	2e01      	cmp	r6, #1
 8003540:	d814      	bhi.n	800356c <create_chain+0x50>
 8003542:	2400      	movs	r4, #0
 8003544:	e006      	b.n	8003554 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003546:	4628      	mov	r0, r5
 8003548:	f7ff ff28 	bl	800339c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800354c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800354e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003550:	d803      	bhi.n	800355a <create_chain+0x3e>
 8003552:	2401      	movs	r4, #1
}
 8003554:	4620      	mov	r0, r4
 8003556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d030      	beq.n	80035c0 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800355e:	696b      	ldr	r3, [r5, #20]
 8003560:	4283      	cmp	r3, r0
 8003562:	d8f7      	bhi.n	8003554 <create_chain+0x38>
 8003564:	463e      	mov	r6, r7
 8003566:	e7e5      	b.n	8003534 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003568:	2601      	movs	r6, #1
 800356a:	e7e3      	b.n	8003534 <create_chain+0x18>
				ncl = 2;
 800356c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800356e:	f8d8 0000 	ldr.w	r0, [r8]
 8003572:	4621      	mov	r1, r4
 8003574:	f7ff ff12 	bl	800339c <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8003578:	b130      	cbz	r0, 8003588 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800357a:	2801      	cmp	r0, #1
 800357c:	d0e9      	beq.n	8003552 <create_chain+0x36>
 800357e:	3001      	adds	r0, #1
 8003580:	d01e      	beq.n	80035c0 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8003582:	42b4      	cmp	r4, r6
 8003584:	d1d7      	bne.n	8003536 <create_chain+0x1a>
 8003586:	e7dc      	b.n	8003542 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	4621      	mov	r1, r4
 800358e:	4628      	mov	r0, r5
 8003590:	f7ff fe34 	bl	80031fc <put_fat>
		if (res == FR_OK && clst != 0) {
 8003594:	b990      	cbnz	r0, 80035bc <create_chain+0xa0>
 8003596:	b957      	cbnz	r7, 80035ae <create_chain+0x92>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003598:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 800359c:	3a02      	subs	r2, #2
 800359e:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 80035a0:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80035a2:	d910      	bls.n	80035c6 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80035a4:	792b      	ldrb	r3, [r5, #4]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	712b      	strb	r3, [r5, #4]
 80035ac:	e7d2      	b.n	8003554 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80035ae:	4622      	mov	r2, r4
 80035b0:	4639      	mov	r1, r7
 80035b2:	4628      	mov	r0, r5
 80035b4:	f7ff fe22 	bl	80031fc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d0ed      	beq.n	8003598 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80035bc:	2801      	cmp	r0, #1
 80035be:	d1c8      	bne.n	8003552 <create_chain+0x36>
 80035c0:	f04f 34ff 	mov.w	r4, #4294967295
 80035c4:	e7c6      	b.n	8003554 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80035c6:	3b01      	subs	r3, #1
 80035c8:	612b      	str	r3, [r5, #16]
 80035ca:	e7eb      	b.n	80035a4 <create_chain+0x88>

080035cc <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80035cc:	6943      	ldr	r3, [r0, #20]
{
 80035ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80035d2:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80035d6:	69c3      	ldr	r3, [r0, #28]
{
 80035d8:	4605      	mov	r5, r0
 80035da:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80035dc:	b193      	cbz	r3, 8003604 <dir_next+0x38>
 80035de:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 80035e2:	d20f      	bcs.n	8003604 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80035e4:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 80035e8:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80035ea:	f1b9 0f00 	cmp.w	r9, #0
 80035ee:	d14d      	bne.n	800368c <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 80035f0:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 80035f2:	3301      	adds	r3, #1
 80035f4:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80035f6:	b939      	cbnz	r1, 8003608 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80035f8:	8923      	ldrh	r3, [r4, #8]
 80035fa:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 80035fe:	d845      	bhi.n	800368c <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8003600:	2300      	movs	r3, #0
 8003602:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003604:	2004      	movs	r0, #4
 8003606:	e00b      	b.n	8003620 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003608:	8967      	ldrh	r7, [r4, #10]
 800360a:	3f01      	subs	r7, #1
 800360c:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8003610:	d13c      	bne.n	800368c <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003612:	4620      	mov	r0, r4
 8003614:	f7ff fec2 	bl	800339c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003618:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800361a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800361c:	d802      	bhi.n	8003624 <dir_next+0x58>
 800361e:	2002      	movs	r0, #2
}
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003624:	1c42      	adds	r2, r0, #1
 8003626:	d101      	bne.n	800362c <dir_next+0x60>
 8003628:	2001      	movs	r0, #1
 800362a:	e7f9      	b.n	8003620 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800362c:	6963      	ldr	r3, [r4, #20]
 800362e:	4283      	cmp	r3, r0
 8003630:	d826      	bhi.n	8003680 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8003632:	f1ba 0f00 	cmp.w	sl, #0
 8003636:	d0e3      	beq.n	8003600 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003638:	69a9      	ldr	r1, [r5, #24]
 800363a:	4628      	mov	r0, r5
 800363c:	f7ff ff6e 	bl	800351c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003640:	4606      	mov	r6, r0
 8003642:	2800      	cmp	r0, #0
 8003644:	d035      	beq.n	80036b2 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003646:	2801      	cmp	r0, #1
 8003648:	d0e9      	beq.n	800361e <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	d0ec      	beq.n	8003628 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff fc50 	bl	8002ef4 <sync_window>
 8003654:	4601      	mov	r1, r0
 8003656:	2800      	cmp	r0, #0
 8003658:	d1e6      	bne.n	8003628 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800365a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	f7ff fb0b 	bl	8002c7c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003666:	4631      	mov	r1, r6
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff fbb5 	bl	8002dd8 <clust2sect>
						fs->wflag = 1;
 800366e:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003672:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003674:	8963      	ldrh	r3, [r4, #10]
 8003676:	429f      	cmp	r7, r3
 8003678:	d30f      	bcc.n	800369a <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800367a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800367c:	1bdb      	subs	r3, r3, r7
 800367e:	62e3      	str	r3, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8003680:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003682:	4631      	mov	r1, r6
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff fba7 	bl	8002dd8 <clust2sect>
 800368a:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800368c:	3430      	adds	r4, #48	; 0x30
 800368e:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8003690:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003694:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003696:	2000      	movs	r0, #0
 8003698:	e7c2      	b.n	8003620 <dir_next+0x54>
						fs->wflag = 1;
 800369a:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fc02 	bl	8002ea8 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1bf      	bne.n	8003628 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80036a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036aa:	3301      	adds	r3, #1
 80036ac:	3701      	adds	r7, #1
 80036ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036b0:	e7e0      	b.n	8003674 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80036b2:	2007      	movs	r0, #7
 80036b4:	e7b4      	b.n	8003620 <dir_next+0x54>
	...

080036b8 <follow_path>:
{
 80036b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80036bc:	6806      	ldr	r6, [r0, #0]
{
 80036be:	4681      	mov	r9, r0
 80036c0:	460c      	mov	r4, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80036c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036c6:	2b2f      	cmp	r3, #47	; 0x2f
 80036c8:	d0fa      	beq.n	80036c0 <follow_path+0x8>
 80036ca:	2b5c      	cmp	r3, #92	; 0x5c
 80036cc:	d0f8      	beq.n	80036c0 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80036d4:	7823      	ldrb	r3, [r4, #0]
 80036d6:	2b1f      	cmp	r3, #31
 80036d8:	d95a      	bls.n	8003790 <follow_path+0xd8>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80036da:	4f54      	ldr	r7, [pc, #336]	; (800382c <follow_path+0x174>)
	p = *path; sfn = dp->fn;
 80036dc:	f109 0524 	add.w	r5, r9, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80036e0:	220b      	movs	r2, #11
 80036e2:	4628      	mov	r0, r5
 80036e4:	2120      	movs	r1, #32
 80036e6:	f7ff fac9 	bl	8002c7c <mem_set>
	si = i = 0; ni = 8;
 80036ea:	f1c4 0802 	rsb	r8, r4, #2
 80036ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80036f2:	2200      	movs	r2, #0
 80036f4:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80036f6:	eb08 010c 	add.w	r1, r8, ip
 80036fa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d908      	bls.n	8003714 <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003702:	2b2f      	cmp	r3, #47	; 0x2f
 8003704:	d001      	beq.n	800370a <follow_path+0x52>
 8003706:	2b5c      	cmp	r3, #92	; 0x5c
 8003708:	d14c      	bne.n	80037a4 <follow_path+0xec>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800370a:	5c60      	ldrb	r0, [r4, r1]
 800370c:	282f      	cmp	r0, #47	; 0x2f
 800370e:	d047      	beq.n	80037a0 <follow_path+0xe8>
 8003710:	285c      	cmp	r0, #92	; 0x5c
 8003712:	d045      	beq.n	80037a0 <follow_path+0xe8>
	*path = p + si;						/* Return pointer to the next segment */
 8003714:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003716:	2a00      	cmp	r2, #0
 8003718:	d054      	beq.n	80037c4 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800371a:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 800371e:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003722:	2ae5      	cmp	r2, #229	; 0xe5
 8003724:	bf04      	itt	eq
 8003726:	2205      	moveq	r2, #5
 8003728:	f889 2024 	strbeq.w	r2, [r9, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800372c:	2b21      	cmp	r3, #33	; 0x21
 800372e:	bf34      	ite	cc
 8003730:	2304      	movcc	r3, #4
 8003732:	2300      	movcs	r3, #0
 8003734:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003738:	4648      	mov	r0, r9
 800373a:	f7ff fe85 	bl	8003448 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800373e:	2800      	cmp	r0, #0
 8003740:	d144      	bne.n	80037cc <follow_path+0x114>
		res = move_window(fs, dp->sect);
 8003742:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8003746:	4640      	mov	r0, r8
 8003748:	f7ff fbda 	bl	8002f00 <move_window>
		if (res != FR_OK) break;
 800374c:	2800      	cmp	r0, #0
 800374e:	d13d      	bne.n	80037cc <follow_path+0x114>
		c = dp->dir[DIR_Name];
 8003750:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003754:	7813      	ldrb	r3, [r2, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d043      	beq.n	80037e2 <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800375a:	7ad3      	ldrb	r3, [r2, #11]
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	f889 3006 	strb.w	r3, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003764:	7ad3      	ldrb	r3, [r2, #11]
 8003766:	f013 0008 	ands.w	r0, r3, #8
 800376a:	d10c      	bne.n	8003786 <follow_path+0xce>
 800376c:	f102 0c0b 	add.w	ip, r2, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003770:	4629      	mov	r1, r5
		r = *d++ - *s++;
 8003772:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003776:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800377a:	4594      	cmp	ip, r2
		r = *d++ - *s++;
 800377c:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 8003780:	d022      	beq.n	80037c8 <follow_path+0x110>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f5      	beq.n	8003772 <follow_path+0xba>
		res = dir_next(dp, 0);	/* Next entry */
 8003786:	2100      	movs	r1, #0
 8003788:	4648      	mov	r0, r9
 800378a:	f7ff ff1f 	bl	80035cc <dir_next>
 800378e:	e7d6      	b.n	800373e <follow_path+0x86>
		dp->fn[NSFLAG] = NS_NONAME;
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003796:	4648      	mov	r0, r9
}
 8003798:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800379c:	f7ff be54 	b.w	8003448 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80037a0:	3101      	adds	r1, #1
 80037a2:	e7b2      	b.n	800370a <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80037a4:	2b2e      	cmp	r3, #46	; 0x2e
 80037a6:	d033      	beq.n	8003810 <follow_path+0x158>
 80037a8:	4290      	cmp	r0, r2
 80037aa:	d90b      	bls.n	80037c4 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 80037ac:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80037ae:	bf48      	it	mi
 80037b0:	3b80      	submi	r3, #128	; 0x80
 80037b2:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003830 <follow_path+0x178>
 80037b6:	bf48      	it	mi
 80037b8:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 80037ba:	f81e 1b01 	ldrb.w	r1, [lr], #1
 80037be:	b361      	cbz	r1, 800381a <follow_path+0x162>
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d1fa      	bne.n	80037ba <follow_path+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80037c4:	2006      	movs	r0, #6
	return res;
 80037c6:	e00a      	b.n	80037de <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1dc      	bne.n	8003786 <follow_path+0xce>
			ns = dp->fn[NSFLAG];
 80037cc:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80037d0:	b148      	cbz	r0, 80037e6 <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80037d2:	2804      	cmp	r0, #4
 80037d4:	d103      	bne.n	80037de <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80037d6:	f013 0f04 	tst.w	r3, #4
 80037da:	bf08      	it	eq
 80037dc:	2005      	moveq	r0, #5
}
 80037de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80037e2:	2004      	movs	r0, #4
 80037e4:	e7f2      	b.n	80037cc <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80037e6:	075a      	lsls	r2, r3, #29
 80037e8:	d4f9      	bmi.n	80037de <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80037ea:	f899 3006 	ldrb.w	r3, [r9, #6]
 80037ee:	06db      	lsls	r3, r3, #27
 80037f0:	d50c      	bpl.n	800380c <follow_path+0x154>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80037f2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80037f6:	7830      	ldrb	r0, [r6, #0]
 80037f8:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80037fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003800:	4419      	add	r1, r3
 8003802:	f7ff fdc3 	bl	800338c <ld_clust.isra.0>
 8003806:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800380a:	e767      	b.n	80036dc <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800380c:	2005      	movs	r0, #5
 800380e:	e7e6      	b.n	80037de <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003810:	280b      	cmp	r0, #11
 8003812:	d0d7      	beq.n	80037c4 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 8003814:	2208      	movs	r2, #8
 8003816:	200b      	movs	r0, #11
 8003818:	e76d      	b.n	80036f6 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800381a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800381e:	2919      	cmp	r1, #25
 8003820:	d801      	bhi.n	8003826 <follow_path+0x16e>
 8003822:	3b20      	subs	r3, #32
 8003824:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003826:	54ab      	strb	r3, [r5, r2]
 8003828:	3201      	adds	r2, #1
 800382a:	e764      	b.n	80036f6 <follow_path+0x3e>
 800382c:	08003f1c 	.word	0x08003f1c
 8003830:	0800401b 	.word	0x0800401b

08003834 <dir_register>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 8003836:	6806      	ldr	r6, [r0, #0]
{
 8003838:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800383a:	f7ff fe05 	bl	8003448 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800383e:	4604      	mov	r4, r0
 8003840:	bb28      	cbnz	r0, 800388e <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8003842:	69e9      	ldr	r1, [r5, #28]
 8003844:	4630      	mov	r0, r6
 8003846:	f7ff fb5b 	bl	8002f00 <move_window>
			if (res != FR_OK) break;
 800384a:	4604      	mov	r4, r0
 800384c:	b9f8      	cbnz	r0, 800388e <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800384e:	6a2b      	ldr	r3, [r5, #32]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2be5      	cmp	r3, #229	; 0xe5
 8003854:	d114      	bne.n	8003880 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8003856:	69e9      	ldr	r1, [r5, #28]
 8003858:	4630      	mov	r0, r6
 800385a:	f7ff fb51 	bl	8002f00 <move_window>
		if (res == FR_OK) {
 800385e:	4604      	mov	r4, r0
 8003860:	b960      	cbnz	r0, 800387c <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003862:	4601      	mov	r1, r0
 8003864:	2220      	movs	r2, #32
 8003866:	6a28      	ldr	r0, [r5, #32]
 8003868:	f7ff fa08 	bl	8002c7c <mem_set>
	if (cnt) {
 800386c:	6a28      	ldr	r0, [r5, #32]
 800386e:	220b      	movs	r2, #11
 8003870:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003874:	f7ff fb0f 	bl	8002e96 <mem_cpy.part.0>
			fs->wflag = 1;
 8003878:	2301      	movs	r3, #1
 800387a:	70f3      	strb	r3, [r6, #3]
}
 800387c:	4620      	mov	r0, r4
 800387e:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0e8      	beq.n	8003856 <dir_register+0x22>
			res = dir_next(dp, 1);
 8003884:	2101      	movs	r1, #1
 8003886:	4628      	mov	r0, r5
 8003888:	f7ff fea0 	bl	80035cc <dir_next>
 800388c:	e7d7      	b.n	800383e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800388e:	2c04      	cmp	r4, #4
 8003890:	bf08      	it	eq
 8003892:	2407      	moveq	r4, #7
 8003894:	e7f2      	b.n	800387c <dir_register+0x48>
	...

08003898 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003898:	b530      	push	{r4, r5, lr}
 800389a:	b085      	sub	sp, #20
 800389c:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80038a0:	a803      	add	r0, sp, #12
{
 80038a2:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 80038a4:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80038a6:	f7ff fabf 	bl	8002e28 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80038aa:	2800      	cmp	r0, #0
 80038ac:	db19      	blt.n	80038e2 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80038ae:	490f      	ldr	r1, [pc, #60]	; (80038ec <f_mount+0x54>)
 80038b0:	0085      	lsls	r5, r0, #2
 80038b2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80038b6:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 80038b8:	b118      	cbz	r0, 80038c2 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80038ba:	f7ff fa7f 	bl	8002dbc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80038be:	2300      	movs	r3, #0
 80038c0:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 80038c2:	9801      	ldr	r0, [sp, #4]
 80038c4:	b108      	cbz	r0, 80038ca <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 80038c6:	2300      	movs	r3, #0
 80038c8:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80038ca:	4429      	add	r1, r5
 80038cc:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80038ce:	b130      	cbz	r0, 80038de <f_mount+0x46>
 80038d0:	2c01      	cmp	r4, #1
 80038d2:	d108      	bne.n	80038e6 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80038d4:	2200      	movs	r2, #0
 80038d6:	a901      	add	r1, sp, #4
 80038d8:	4668      	mov	r0, sp
 80038da:	f7ff fb65 	bl	8002fa8 <find_volume>
	LEAVE_FF(fs, res);
}
 80038de:	b005      	add	sp, #20
 80038e0:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80038e2:	200b      	movs	r0, #11
 80038e4:	e7fb      	b.n	80038de <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7f9      	b.n	80038de <f_mount+0x46>
 80038ea:	bf00      	nop
 80038ec:	20000644 	.word	0x20000644

080038f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80038f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f4:	b090      	sub	sp, #64	; 0x40
 80038f6:	4617      	mov	r7, r2
 80038f8:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80038fa:	4604      	mov	r4, r0
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f000 80f2 	beq.w	8003ae6 <f_open+0x1f6>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003902:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003906:	462a      	mov	r2, r5
 8003908:	a903      	add	r1, sp, #12
 800390a:	a801      	add	r0, sp, #4
 800390c:	f7ff fb4c 	bl	8002fa8 <find_volume>
	if (res == FR_OK) {
 8003910:	4606      	mov	r6, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d15c      	bne.n	80039d0 <f_open+0xe0>
		dj.obj.fs = fs;
 8003916:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003918:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800391a:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800391c:	a804      	add	r0, sp, #16
 800391e:	f7ff fecb 	bl	80036b8 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003922:	b958      	cbnz	r0, 800393c <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003924:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003928:	2b00      	cmp	r3, #0
 800392a:	db58      	blt.n	80039de <f_open+0xee>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800392c:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8003930:	bf14      	ite	ne
 8003932:	2101      	movne	r1, #1
 8003934:	2100      	moveq	r1, #0
 8003936:	a804      	add	r0, sp, #16
 8003938:	f7ff f9a6 	bl	8002c88 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800393c:	f017 0f1c 	tst.w	r7, #28
 8003940:	d06d      	beq.n	8003a1e <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
 8003942:	2800      	cmp	r0, #0
 8003944:	d04d      	beq.n	80039e2 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003946:	2804      	cmp	r0, #4
 8003948:	d142      	bne.n	80039d0 <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800394a:	4b68      	ldr	r3, [pc, #416]	; (8003aec <f_open+0x1fc>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	b11a      	cbz	r2, 8003958 <f_open+0x68>
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f040 80c1 	bne.w	8003ada <f_open+0x1ea>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003958:	a804      	add	r0, sp, #16
 800395a:	f7ff ff6b 	bl	8003834 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800395e:	2800      	cmp	r0, #0
 8003960:	d136      	bne.n	80039d0 <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003962:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 8003966:	f7ff f97d 	bl	8002c64 <get_fattime>
 800396a:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800396c:	9000      	str	r0, [sp, #0]
 800396e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003970:	300e      	adds	r0, #14
 8003972:	f7ff f97b 	bl	8002c6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003976:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003978:	9900      	ldr	r1, [sp, #0]
 800397a:	3016      	adds	r0, #22
 800397c:	f7ff f976 	bl	8002c6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003982:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003986:	2220      	movs	r2, #32
 8003988:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800398a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800398c:	f898 0000 	ldrb.w	r0, [r8]
 8003990:	f7ff fcfc 	bl	800338c <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003994:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003996:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003998:	4640      	mov	r0, r8
 800399a:	f7ff fa39 	bl	8002e10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800399e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80039a4:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80039a6:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80039a8:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	2101      	movs	r1, #1
 80039ae:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80039b0:	b307      	cbz	r7, 80039f4 <f_open+0x104>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80039b2:	4639      	mov	r1, r7
 80039b4:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 80039b6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80039ba:	f7ff fd77 	bl	80034ac <remove_chain>
						if (res == FR_OK) {
 80039be:	b938      	cbnz	r0, 80039d0 <f_open+0xe0>
							res = move_window(fs, dw);
 80039c0:	9803      	ldr	r0, [sp, #12]
 80039c2:	4641      	mov	r1, r8
 80039c4:	f7ff fa9c 	bl	8002f00 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	3f01      	subs	r7, #1
 80039cc:	60df      	str	r7, [r3, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80039ce:	b188      	cbz	r0, 80039f4 <f_open+0x104>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80039d0:	2300      	movs	r3, #0
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	4606      	mov	r6, r0

	LEAVE_FF(fs, res);
}
 80039d6:	4630      	mov	r0, r6
 80039d8:	b010      	add	sp, #64	; 0x40
 80039da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 80039de:	2006      	movs	r0, #6
 80039e0:	e7ac      	b.n	800393c <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80039e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80039e6:	f013 0f11 	tst.w	r3, #17
 80039ea:	d122      	bne.n	8003a32 <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80039ec:	077b      	lsls	r3, r7, #29
 80039ee:	d476      	bmi.n	8003ade <f_open+0x1ee>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80039f0:	073f      	lsls	r7, r7, #28
 80039f2:	d4b8      	bmi.n	8003966 <f_open+0x76>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80039f4:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80039f6:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 80039fc:	bf48      	it	mi
 80039fe:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003a02:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8003a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a08:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003a0a:	bf14      	ite	ne
 8003a0c:	2101      	movne	r1, #1
 8003a0e:	2100      	moveq	r1, #0
 8003a10:	a804      	add	r0, sp, #16
 8003a12:	f7ff f973 	bl	8002cfc <inc_lock>
 8003a16:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003a18:	b968      	cbnz	r0, 8003a36 <f_open+0x146>
 8003a1a:	2002      	movs	r0, #2
 8003a1c:	e7d8      	b.n	80039d0 <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d1d6      	bne.n	80039d0 <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003a22:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003a26:	06d8      	lsls	r0, r3, #27
 8003a28:	d45b      	bmi.n	8003ae2 <f_open+0x1f2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003a2a:	07ba      	lsls	r2, r7, #30
 8003a2c:	d5e2      	bpl.n	80039f4 <f_open+0x104>
 8003a2e:	07df      	lsls	r7, r3, #31
 8003a30:	d5e0      	bpl.n	80039f4 <f_open+0x104>
					res = FR_DENIED;
 8003a32:	2007      	movs	r0, #7
 8003a34:	e7cc      	b.n	80039d0 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003a36:	9f03      	ldr	r7, [sp, #12]
 8003a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a3a:	7838      	ldrb	r0, [r7, #0]
 8003a3c:	f7ff fca6 	bl	800338c <ld_clust.isra.0>
 8003a40:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003a42:	f101 001c 	add.w	r0, r1, #28
 8003a46:	f7ff f90f 	bl	8002c68 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003a4a:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003a4e:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003a50:	f104 0730 	add.w	r7, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003a54:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003a56:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003a5a:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8003a5c:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8003a5e:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8003a60:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003a62:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003a64:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003a66:	4638      	mov	r0, r7
 8003a68:	f7ff f908 	bl	8002c7c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003a6c:	06aa      	lsls	r2, r5, #26
 8003a6e:	d5b2      	bpl.n	80039d6 <f_open+0xe6>
 8003a70:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003a74:	f1b8 0f00 	cmp.w	r8, #0
 8003a78:	d0ad      	beq.n	80039d6 <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003a7a:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003a7c:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003a7e:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003a80:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003a84:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003a86:	4545      	cmp	r5, r8
 8003a88:	d319      	bcc.n	8003abe <f_open+0x1ce>
 8003a8a:	2000      	movs	r0, #0
				fp->clust = clst;
 8003a8c:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d19e      	bne.n	80039d0 <f_open+0xe0>
 8003a92:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d09d      	beq.n	80039d6 <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003a9a:	9d03      	ldr	r5, [sp, #12]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7ff f99b 	bl	8002dd8 <clust2sect>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0b9      	beq.n	8003a1a <f_open+0x12a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003aa6:	eb00 2258 	add.w	r2, r0, r8, lsr #9
 8003aaa:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003aac:	7868      	ldrb	r0, [r5, #1]
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	f7ff f8ad 	bl	8002c10 <disk_read>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d08d      	beq.n	80039d6 <f_open+0xe6>
 8003aba:	2001      	movs	r0, #1
 8003abc:	e788      	b.n	80039d0 <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	f7ff fc6c 	bl	800339c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8003ac4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003ac6:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ac8:	eba8 0805 	sub.w	r8, r8, r5
					if (clst <= 1) res = FR_INT_ERR;
 8003acc:	d903      	bls.n	8003ad6 <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d1d9      	bne.n	8003a86 <f_open+0x196>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e7da      	b.n	8003a8c <f_open+0x19c>
					if (clst <= 1) res = FR_INT_ERR;
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	e7d8      	b.n	8003a8c <f_open+0x19c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003ada:	2012      	movs	r0, #18
 8003adc:	e778      	b.n	80039d0 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003ade:	2008      	movs	r0, #8
 8003ae0:	e776      	b.n	80039d0 <f_open+0xe0>
					res = FR_NO_FILE;
 8003ae2:	2004      	movs	r0, #4
 8003ae4:	e774      	b.n	80039d0 <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 8003ae6:	2609      	movs	r6, #9
 8003ae8:	e775      	b.n	80039d6 <f_open+0xe6>
 8003aea:	bf00      	nop
 8003aec:	20000644 	.word	0x20000644

08003af0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	b087      	sub	sp, #28
 8003af6:	4616      	mov	r6, r2
 8003af8:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003afa:	9a01      	ldr	r2, [sp, #4]
 8003afc:	2300      	movs	r3, #0
{
 8003afe:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8003b00:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003b02:	a905      	add	r1, sp, #20
{
 8003b04:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003b06:	f7ff f9ac 	bl	8002e62 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	bb18      	cbnz	r0, 8003b56 <f_read+0x66>
 8003b0e:	7d65      	ldrb	r5, [r4, #21]
 8003b10:	bb0d      	cbnz	r5, 8003b56 <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003b12:	7d23      	ldrb	r3, [r4, #20]
 8003b14:	f013 0301 	ands.w	r3, r3, #1
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	f000 809a 	beq.w	8003c52 <f_read+0x162>
	remain = fp->obj.objsize - fp->fptr;
 8003b1e:	68e2      	ldr	r2, [r4, #12]
 8003b20:	69a3      	ldr	r3, [r4, #24]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	4296      	cmp	r6, r2
 8003b26:	bf28      	it	cs
 8003b28:	4616      	movcs	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003b2a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 8003b2e:	b196      	cbz	r6, 8003b56 <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003b30:	69a1      	ldr	r1, [r4, #24]
 8003b32:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d17d      	bne.n	8003c36 <f_read+0x146>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003b3a:	9b05      	ldr	r3, [sp, #20]
 8003b3c:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8003b40:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8003b44:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 8003b48:	d11b      	bne.n	8003b82 <f_read+0x92>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003b4a:	b941      	cbnz	r1, 8003b5e <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003b4c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003b4e:	2801      	cmp	r0, #1
 8003b50:	d810      	bhi.n	8003b74 <f_read+0x84>
 8003b52:	2502      	movs	r5, #2
 8003b54:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8003b56:	4628      	mov	r0, r5
 8003b58:	b007      	add	sp, #28
 8003b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8003b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b60:	b11b      	cbz	r3, 8003b6a <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003b62:	4620      	mov	r0, r4
 8003b64:	f7ff f943 	bl	8002dee <clmt_clust>
 8003b68:	e7f1      	b.n	8003b4e <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003b6a:	69e1      	ldr	r1, [r4, #28]
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	f7ff fc15 	bl	800339c <get_fat.isra.0>
 8003b72:	e7ec      	b.n	8003b4e <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d103      	bne.n	8003b80 <f_read+0x90>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9d02      	ldr	r5, [sp, #8]
 8003b7c:	7563      	strb	r3, [r4, #21]
 8003b7e:	e7ea      	b.n	8003b56 <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8003b80:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003b82:	f8dd b014 	ldr.w	fp, [sp, #20]
 8003b86:	69e1      	ldr	r1, [r4, #28]
 8003b88:	4658      	mov	r0, fp
 8003b8a:	f7ff f925 	bl	8002dd8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0df      	beq.n	8003b52 <f_read+0x62>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003b92:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8003b96:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003b9a:	d32f      	bcc.n	8003bfc <f_read+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003b9c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003ba0:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003ba4:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 8003ba8:	4291      	cmp	r1, r2
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003baa:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003bae:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8003bb0:	bf88      	it	hi
 8003bb2:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003bb6:	463a      	mov	r2, r7
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	f7ff f829 	bl	8002c10 <disk_read>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d1da      	bne.n	8003b78 <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003bc2:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8003bc6:	9b03      	ldr	r3, [sp, #12]
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	da0b      	bge.n	8003be4 <f_read+0xf4>
 8003bcc:	6a20      	ldr	r0, [r4, #32]
 8003bce:	1bc0      	subs	r0, r0, r7
 8003bd0:	4298      	cmp	r0, r3
 8003bd2:	d207      	bcs.n	8003be4 <f_read+0xf4>
	if (cnt) {
 8003bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd8:	4651      	mov	r1, sl
 8003bda:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8003bde:	f7ff f95a 	bl	8002e96 <mem_cpy.part.0>
 8003be2:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003be4:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003be6:	69a3      	ldr	r3, [r4, #24]
 8003be8:	9a01      	ldr	r2, [sp, #4]
 8003bea:	443b      	add	r3, r7
 8003bec:	61a3      	str	r3, [r4, #24]
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	443b      	add	r3, r7
 8003bf4:	44b9      	add	r9, r7
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	1bf6      	subs	r6, r6, r7
 8003bfa:	e798      	b.n	8003b2e <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003bfc:	6a22      	ldr	r2, [r4, #32]
 8003bfe:	42ba      	cmp	r2, r7
 8003c00:	d018      	beq.n	8003c34 <f_read+0x144>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003c02:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da0b      	bge.n	8003c22 <f_read+0x132>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003c0a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4651      	mov	r1, sl
 8003c12:	f7ff f80b 	bl	8002c2c <disk_write>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d1ae      	bne.n	8003b78 <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003c1a:	7d23      	ldrb	r3, [r4, #20]
 8003c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c20:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003c22:	9805      	ldr	r0, [sp, #20]
 8003c24:	2301      	movs	r3, #1
 8003c26:	7840      	ldrb	r0, [r0, #1]
 8003c28:	463a      	mov	r2, r7
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	f7fe fff0 	bl	8002c10 <disk_read>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d1a1      	bne.n	8003b78 <f_read+0x88>
			fp->sect = sect;
 8003c34:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003c36:	69a1      	ldr	r1, [r4, #24]
 8003c38:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003c3c:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8003c40:	42b7      	cmp	r7, r6
 8003c42:	bf28      	it	cs
 8003c44:	4637      	movcs	r7, r6
	if (cnt) {
 8003c46:	463a      	mov	r2, r7
 8003c48:	4451      	add	r1, sl
 8003c4a:	4648      	mov	r0, r9
 8003c4c:	f7ff f923 	bl	8002e96 <mem_cpy.part.0>
}
 8003c50:	e7c9      	b.n	8003be6 <f_read+0xf6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003c52:	2507      	movs	r5, #7
 8003c54:	e77f      	b.n	8003b56 <f_read+0x66>

08003c56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003c58:	a901      	add	r1, sp, #4
{
 8003c5a:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003c5c:	f7ff f901 	bl	8002e62 <validate>
	if (res == FR_OK) {
 8003c60:	4604      	mov	r4, r0
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d13b      	bne.n	8003cde <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003c66:	7d2b      	ldrb	r3, [r5, #20]
 8003c68:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8003c6c:	d037      	beq.n	8003cde <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	d50c      	bpl.n	8003c8c <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003c72:	9801      	ldr	r0, [sp, #4]
 8003c74:	6a2a      	ldr	r2, [r5, #32]
 8003c76:	7840      	ldrb	r0, [r0, #1]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8003c7e:	f7fe ffd5 	bl	8002c2c <disk_write>
 8003c82:	bb78      	cbnz	r0, 8003ce4 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003c84:	7d2b      	ldrb	r3, [r5, #20]
 8003c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8a:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003c8c:	f7fe ffea 	bl	8002c64 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8003c90:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8003c92:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8003c94:	9801      	ldr	r0, [sp, #4]
 8003c96:	f7ff f933 	bl	8002f00 <move_window>
				if (res == FR_OK) {
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	b9f8      	cbnz	r0, 8003cde <f_sync+0x88>
					dir = fp->dir_ptr;
 8003c9e:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003ca0:	7af3      	ldrb	r3, [r6, #11]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003ca8:	68aa      	ldr	r2, [r5, #8]
 8003caa:	6828      	ldr	r0, [r5, #0]
 8003cac:	4631      	mov	r1, r6
 8003cae:	f7ff f8af 	bl	8002e10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003cb2:	68e9      	ldr	r1, [r5, #12]
 8003cb4:	f106 001c 	add.w	r0, r6, #28
 8003cb8:	f7fe ffd8 	bl	8002c6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	f106 0016 	add.w	r0, r6, #22
 8003cc2:	f7fe ffd3 	bl	8002c6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8003cc6:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8003cc8:	74b4      	strb	r4, [r6, #18]
					fs->wflag = 1;
 8003cca:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8003ccc:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8003cce:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003cd0:	f7ff fb11 	bl	80032f6 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003cd4:	7d2b      	ldrb	r3, [r5, #20]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8003cda:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003cdc:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003cde:	4620      	mov	r0, r4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003ce4:	2401      	movs	r4, #1
 8003ce6:	e7fa      	b.n	8003cde <f_sync+0x88>

08003ce8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003ce8:	b513      	push	{r0, r1, r4, lr}
 8003cea:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003cec:	f7ff ffb3 	bl	8003c56 <f_sync>
	if (res == FR_OK)
 8003cf0:	b948      	cbnz	r0, 8003d06 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003cf2:	a901      	add	r1, sp, #4
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff f8b4 	bl	8002e62 <validate>
		if (res == FR_OK) {
 8003cfa:	b920      	cbnz	r0, 8003d06 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003cfc:	6920      	ldr	r0, [r4, #16]
 8003cfe:	f7ff f83f 	bl	8002d80 <dec_lock>
			if (res == FR_OK)
 8003d02:	b900      	cbnz	r0, 8003d06 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003d04:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003d06:	b002      	add	sp, #8
 8003d08:	bd10      	pop	{r4, pc}
	...

08003d0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003d0c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <FATFS_LinkDriverEx+0x40>)
 8003d10:	7b9c      	ldrb	r4, [r3, #14]
 8003d12:	2c01      	cmp	r4, #1
 8003d14:	d817      	bhi.n	8003d46 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003d16:	7b9d      	ldrb	r5, [r3, #14]
 8003d18:	b2ed      	uxtb	r5, r5
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8003d1e:	7b9d      	ldrb	r5, [r3, #14]
 8003d20:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003d24:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003d26:	7b98      	ldrb	r0, [r3, #14]
 8003d28:	4418      	add	r0, r3
 8003d2a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8003d2c:	7b9a      	ldrb	r2, [r3, #14]
 8003d2e:	1c50      	adds	r0, r2, #1
 8003d30:	b2c0      	uxtb	r0, r0
 8003d32:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003d34:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003d36:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003d38:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003d3a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003d3c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003d3e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003d40:	70cc      	strb	r4, [r1, #3]
 8003d42:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8003d44:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003d46:	2001      	movs	r0, #1
 8003d48:	e7fc      	b.n	8003d44 <FATFS_LinkDriverEx+0x38>
 8003d4a:	bf00      	nop
 8003d4c:	20000670 	.word	0x20000670

08003d50 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003d50:	2200      	movs	r2, #0
 8003d52:	f7ff bfdb 	b.w	8003d0c <FATFS_LinkDriverEx>
	...

08003d58 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8003d58:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <FATFS_UnLinkDriverEx+0x2c>)
 8003d5a:	7b93      	ldrb	r3, [r2, #14]
 8003d5c:	b17b      	cbz	r3, 8003d7e <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8003d5e:	7803      	ldrb	r3, [r0, #0]
 8003d60:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003d68:	6848      	ldr	r0, [r1, #4]
 8003d6a:	b140      	cbz	r0, 8003d7e <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8003d6c:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8003d6e:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8003d70:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8003d72:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8003d74:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	7393      	strb	r3, [r2, #14]
      ret = 0;
 8003d7c:	4770      	bx	lr
  uint8_t ret = 1;
 8003d7e:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000670 	.word	0x20000670

08003d88 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f7ff bfe5 	b.w	8003d58 <FATFS_UnLinkDriverEx>
	...

08003d90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003d90:	b530      	push	{r4, r5, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <SD_ioctl+0x50>)
 8003d94:	781c      	ldrb	r4, [r3, #0]
 8003d96:	f014 0401 	ands.w	r4, r4, #1
{
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d9e:	d11b      	bne.n	8003dd8 <SD_ioctl+0x48>

  switch (cmd)
 8003da0:	2903      	cmp	r1, #3
 8003da2:	d803      	bhi.n	8003dac <SD_ioctl+0x1c>
 8003da4:	e8df f001 	tbb	[pc, r1]
 8003da8:	120c061a 	.word	0x120c061a
 8003dac:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003dae:	4620      	mov	r0, r4
 8003db0:	b009      	add	sp, #36	; 0x24
 8003db2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003db4:	4668      	mov	r0, sp
 8003db6:	f7fc febb 	bl	8000b30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003dba:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003dbc:	602b      	str	r3, [r5, #0]
    break;
 8003dbe:	e7f6      	b.n	8003dae <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003dc0:	4668      	mov	r0, sp
 8003dc2:	f7fc feb5 	bl	8000b30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003dc6:	9b07      	ldr	r3, [sp, #28]
 8003dc8:	802b      	strh	r3, [r5, #0]
    break;
 8003dca:	e7f0      	b.n	8003dae <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003dcc:	4668      	mov	r0, sp
 8003dce:	f7fc feaf 	bl	8000b30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	e7f1      	b.n	8003dbc <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003dd8:	2403      	movs	r4, #3
 8003dda:	e7e8      	b.n	8003dae <SD_ioctl+0x1e>
    res = RES_OK;
 8003ddc:	460c      	mov	r4, r1
 8003dde:	e7e6      	b.n	8003dae <SD_ioctl+0x1e>
 8003de0:	20000034 	.word	0x20000034

08003de4 <SD_read>:
{
 8003de4:	b508      	push	{r3, lr}
 8003de6:	4608      	mov	r0, r1
 8003de8:	4611      	mov	r1, r2
 8003dea:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	f7fc fd72 	bl	80008d8 <BSP_SD_ReadBlocks>
 8003df4:	b920      	cbnz	r0, 8003e00 <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003df6:	f7fc fe91 	bl	8000b1c <BSP_SD_GetCardState>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d1fb      	bne.n	8003df6 <SD_read+0x12>
}
 8003dfe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003e00:	2001      	movs	r0, #1
 8003e02:	e7fc      	b.n	8003dfe <SD_read+0x1a>

08003e04 <SD_status>:
{
 8003e04:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8003e06:	4c06      	ldr	r4, [pc, #24]	; (8003e20 <SD_status+0x1c>)
 8003e08:	2301      	movs	r3, #1
 8003e0a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8003e0c:	f7fc fe86 	bl	8000b1c <BSP_SD_GetCardState>
 8003e10:	b918      	cbnz	r0, 8003e1a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8003e12:	7823      	ldrb	r3, [r4, #0]
 8003e14:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e18:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003e1a:	7820      	ldrb	r0, [r4, #0]
}
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000034 	.word	0x20000034

08003e24 <SD_write>:
{
 8003e24:	b508      	push	{r3, lr}
 8003e26:	4608      	mov	r0, r1
 8003e28:	4611      	mov	r1, r2
 8003e2a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	f7fc fd62 	bl	80008f8 <BSP_SD_WriteBlocks>
 8003e34:	b920      	cbnz	r0, 8003e40 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003e36:	f7fc fe71 	bl	8000b1c <BSP_SD_GetCardState>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d1fb      	bne.n	8003e36 <SD_write+0x12>
}
 8003e3e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003e40:	2001      	movs	r0, #1
 8003e42:	e7fc      	b.n	8003e3e <SD_write+0x1a>

08003e44 <SD_initialize>:
{
 8003e44:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8003e46:	4c09      	ldr	r4, [pc, #36]	; (8003e6c <SD_initialize+0x28>)
 8003e48:	2501      	movs	r5, #1
 8003e4a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 8003e4c:	f7fc fe3c 	bl	8000ac8 <BSP_SD_Init>
 8003e50:	b950      	cbnz	r0, 8003e68 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 8003e52:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8003e54:	f7fc fe62 	bl	8000b1c <BSP_SD_GetCardState>
 8003e58:	b918      	cbnz	r0, 8003e62 <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 8003e5a:	7823      	ldrb	r3, [r4, #0]
 8003e5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e60:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003e62:	7823      	ldrb	r3, [r4, #0]
 8003e64:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8003e66:	7023      	strb	r3, [r4, #0]
  return Stat;
 8003e68:	7820      	ldrb	r0, [r4, #0]
}
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	20000034 	.word	0x20000034

08003e70 <__libc_init_array>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	4d0d      	ldr	r5, [pc, #52]	; (8003ea8 <__libc_init_array+0x38>)
 8003e74:	4c0d      	ldr	r4, [pc, #52]	; (8003eac <__libc_init_array+0x3c>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	42a6      	cmp	r6, r4
 8003e7e:	d109      	bne.n	8003e94 <__libc_init_array+0x24>
 8003e80:	4d0b      	ldr	r5, [pc, #44]	; (8003eb0 <__libc_init_array+0x40>)
 8003e82:	4c0c      	ldr	r4, [pc, #48]	; (8003eb4 <__libc_init_array+0x44>)
 8003e84:	f000 f820 	bl	8003ec8 <_init>
 8003e88:	1b64      	subs	r4, r4, r5
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	2600      	movs	r6, #0
 8003e8e:	42a6      	cmp	r6, r4
 8003e90:	d105      	bne.n	8003e9e <__libc_init_array+0x2e>
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
 8003e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e98:	4798      	blx	r3
 8003e9a:	3601      	adds	r6, #1
 8003e9c:	e7ee      	b.n	8003e7c <__libc_init_array+0xc>
 8003e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea2:	4798      	blx	r3
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	e7f2      	b.n	8003e8e <__libc_init_array+0x1e>
 8003ea8:	08004068 	.word	0x08004068
 8003eac:	08004068 	.word	0x08004068
 8003eb0:	08004068 	.word	0x08004068
 8003eb4:	0800406c 	.word	0x0800406c

08003eb8 <memset>:
 8003eb8:	4402      	add	r2, r0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr
