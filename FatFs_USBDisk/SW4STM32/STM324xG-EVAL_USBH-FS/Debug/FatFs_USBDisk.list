
FatFs_USBDisk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  0800511c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000eb4  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000c04  20000f44  20000f44  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_line   00015ee1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   00019724  00000000  00000000  00035fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8c  00000000  00000000  0004f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00053458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d19c5  00000000  00000000  00053fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  00125978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000e85a  00000000  00000000  00126b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f06  00000000  00000000  001353aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a2b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  0015a300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fb4 	.word	0x08004fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08004fb4 	.word	0x08004fb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004d2:	e003      	b.n	80004dc <LoopCopyDataInit>

080004d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004da:	3104      	adds	r1, #4

080004dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004e4:	d3f6      	bcc.n	80004d4 <CopyDataInit>
  ldr  r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004e8:	e002      	b.n	80004f0 <LoopFillZerobss>

080004ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004ec:	f842 3b04 	str.w	r3, [r2], #4

080004f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004f4:	d3f9      	bcc.n	80004ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004f6:	f000 fa7f 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f004 fc05 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 f823 	bl	8000548 <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000508:	0800511c 	.word	0x0800511c
  ldr  r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000510:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000514:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000518:	20000f44 	.word	0x20000f44

0800051c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC_IRQHandler>
	...

08000520 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{  
  switch(id)
 8000520:	2902      	cmp	r1, #2
 8000522:	d008      	beq.n	8000536 <USBH_UserProcess+0x16>
 8000524:	2905      	cmp	r1, #5
 8000526:	d109      	bne.n	800053c <USBH_UserProcess+0x1c>
  { 
  case HOST_USER_SELECT_CONFIGURATION:
    break;
    
  case HOST_USER_DISCONNECTION:
    Appli_state = APPLICATION_IDLE;
 8000528:	2200      	movs	r2, #0
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <USBH_UserProcess+0x20>)
    //BSP_LED_Off(LED1);
    //BSP_LED_Off(LED3);
    f_mount(NULL, (TCHAR const*)"", 0);          
 800052c:	4905      	ldr	r1, [pc, #20]	; (8000544 <USBH_UserProcess+0x24>)
    Appli_state = APPLICATION_IDLE;
 800052e:	701a      	strb	r2, [r3, #0]
    f_mount(NULL, (TCHAR const*)"", 0);          
 8000530:	4610      	mov	r0, r2
 8000532:	f002 bcf3 	b.w	8002f1c <f_mount>
    break;
    
  case HOST_USER_CLASS_ACTIVE:
    Appli_state = APPLICATION_START;
 8000536:	4b02      	ldr	r3, [pc, #8]	; (8000540 <USBH_UserProcess+0x20>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
    break;
    
  default:
    break; 
  }
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000ac 	.word	0x200000ac
 8000544:	08005105 	.word	0x08005105

08000548 <main>:
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 800054c:	f000 fa82 	bl	8000a54 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2400      	movs	r4, #0
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <main+0x170>)
 8000554:	9400      	str	r4, [sp, #0]
 8000556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800055c:	641a      	str	r2, [r3, #64]	; 0x40
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	9b00      	ldr	r3, [sp, #0]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b54      	ldr	r3, [pc, #336]	; (80006bc <main+0x174>)
 800056a:	9401      	str	r4, [sp, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057a:	9301      	str	r3, [sp, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	2502      	movs	r5, #2
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058e:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000594:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000598:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800059c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059e:	2307      	movs	r3, #7
 80005a0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005a4:	f000 fffe 	bl	80015a4 <HAL_RCC_OscConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005a8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80005ae:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	e9cd 0307 	strd	r0, r3, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80005ba:	2105      	movs	r1, #5
 80005bc:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	9406      	str	r4, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80005c0:	f001 f9ce 	bl	8001960 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80005c4:	f000 fa82 	bl	8000acc <HAL_GetREVID>
 80005c8:	f241 0301 	movw	r3, #4097	; 0x1001
 80005cc:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ce:	bf08      	it	eq
 80005d0:	4a3b      	ldreq	r2, [pc, #236]	; (80006c0 <main+0x178>)
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80005d2:	493c      	ldr	r1, [pc, #240]	; (80006c4 <main+0x17c>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	bf08      	it	eq
 80005d6:	6813      	ldreq	r3, [r2, #0]
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80005d8:	483b      	ldr	r0, [pc, #236]	; (80006c8 <main+0x180>)
 80005da:	4c3c      	ldr	r4, [pc, #240]	; (80006cc <main+0x184>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	bf04      	itt	eq
 80005de:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 80005e2:	6013      	streq	r3, [r2, #0]
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80005e4:	f002 ffbc 	bl	8003560 <FATFS_LinkDriver>
 80005e8:	4602      	mov	r2, r0
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d162      	bne.n	80006b4 <main+0x16c>
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80005ee:	4938      	ldr	r1, [pc, #224]	; (80006d0 <main+0x188>)
    if(f_open(&MyFile, "HELLO.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005f0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80006e8 <main+0x1a0>
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80005f4:	f104 0008 	add.w	r0, r4, #8
 80005f8:	f003 fde8 	bl	80041cc <USBH_Init>
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80005fc:	4935      	ldr	r1, [pc, #212]	; (80006d4 <main+0x18c>)
 80005fe:	f104 0008 	add.w	r0, r4, #8
 8000602:	f003 fe02 	bl	800420a <USBH_RegisterClass>
    USBH_Start(&hUSBHost);
 8000606:	f104 0008 	add.w	r0, r4, #8
 800060a:	f003 fe30 	bl	800426e <USBH_Start>
      USBH_Process(&hUSBHost);
 800060e:	f104 0708 	add.w	r7, r4, #8
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000612:	1c66      	adds	r6, r4, #1
      USBH_Process(&hUSBHost);
 8000614:	4638      	mov	r0, r7
 8000616:	f003 fe34 	bl	8004282 <USBH_Process>
      switch(Appli_state)
 800061a:	7823      	ldrb	r3, [r4, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1f9      	bne.n	8000614 <main+0xcc>
  uint8_t wtext[] = "WJ example USB file create"; /* File write buffer */
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <main+0x190>)
 8000622:	aa04      	add	r2, sp, #16
 8000624:	f103 0c18 	add.w	ip, r3, #24
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	6859      	ldr	r1, [r3, #4]
 800062c:	4615      	mov	r5, r2
 800062e:	c503      	stmia	r5!, {r0, r1}
 8000630:	3308      	adds	r3, #8
 8000632:	4563      	cmp	r3, ip
 8000634:	462a      	mov	r2, r5
 8000636:	d1f7      	bne.n	8000628 <main+0xe0>
 8000638:	8819      	ldrh	r1, [r3, #0]
 800063a:	789b      	ldrb	r3, [r3, #2]
 800063c:	8029      	strh	r1, [r5, #0]
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 800063e:	4827      	ldr	r0, [pc, #156]	; (80006dc <main+0x194>)
  uint8_t wtext[] = "WJ example USB file create"; /* File write buffer */
 8000640:	70ab      	strb	r3, [r5, #2]
  if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0) != FR_OK)
 8000642:	2200      	movs	r2, #0
 8000644:	4631      	mov	r1, r6
 8000646:	f002 fc69 	bl	8002f1c <f_mount>
 800064a:	b100      	cbz	r0, 800064e <main+0x106>
  */
static void Error_Handler(void)
{
  /* Turn LED3 on */
  //BSP_LED_On(LED3);
  while(1)
 800064c:	e7fe      	b.n	800064c <main+0x104>
    if(f_open(&MyFile, "HELLO.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800064e:	4824      	ldr	r0, [pc, #144]	; (80006e0 <main+0x198>)
 8000650:	220a      	movs	r2, #10
 8000652:	4641      	mov	r1, r8
 8000654:	f002 fc8e 	bl	8002f74 <f_open>
 8000658:	b100      	cbz	r0, 800065c <main+0x114>
  while(1)
 800065a:	e7fe      	b.n	800065a <main+0x112>
      res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800065c:	ab02      	add	r3, sp, #8
 800065e:	4820      	ldr	r0, [pc, #128]	; (80006e0 <main+0x198>)
 8000660:	221b      	movs	r2, #27
 8000662:	a904      	add	r1, sp, #16
 8000664:	f002 fe39 	bl	80032da <f_write>
      if((byteswritten == 0) || (res != FR_OK))
 8000668:	9b02      	ldr	r3, [sp, #8]
 800066a:	b103      	cbz	r3, 800066e <main+0x126>
 800066c:	b100      	cbz	r0, 8000670 <main+0x128>
  while(1)
 800066e:	e7fe      	b.n	800066e <main+0x126>
        f_close(&MyFile);
 8000670:	481b      	ldr	r0, [pc, #108]	; (80006e0 <main+0x198>)
 8000672:	f002 ff42 	bl	80034fa <f_close>
        if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8000676:	491b      	ldr	r1, [pc, #108]	; (80006e4 <main+0x19c>)
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <main+0x198>)
 800067a:	2201      	movs	r2, #1
 800067c:	f002 fc7a 	bl	8002f74 <f_open>
 8000680:	b100      	cbz	r0, 8000684 <main+0x13c>
  while(1)
 8000682:	e7fe      	b.n	8000682 <main+0x13a>
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000684:	ab03      	add	r3, sp, #12
 8000686:	4816      	ldr	r0, [pc, #88]	; (80006e0 <main+0x198>)
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	a90b      	add	r1, sp, #44	; 0x2c
 800068c:	f002 fd72 	bl	8003174 <f_read>
          if((bytesread == 0) || (res != FR_OK))
 8000690:	9b03      	ldr	r3, [sp, #12]
          res = f_read(&MyFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000692:	4605      	mov	r5, r0
          if((bytesread == 0) || (res != FR_OK))
 8000694:	b103      	cbz	r3, 8000698 <main+0x150>
 8000696:	b100      	cbz	r0, 800069a <main+0x152>
  while(1)
 8000698:	e7fe      	b.n	8000698 <main+0x150>
            f_close(&MyFile);
 800069a:	4811      	ldr	r0, [pc, #68]	; (80006e0 <main+0x198>)
 800069c:	f002 ff2d 	bl	80034fa <f_close>
            if((bytesread != byteswritten))
 80006a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d000      	beq.n	80006aa <main+0x162>
  while(1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x160>
  FATFS_UnLinkDriver(USBDISKPath);
 80006aa:	4630      	mov	r0, r6
 80006ac:	f002 ff74 	bl	8003598 <FATFS_UnLinkDriver>
        Appli_state = APPLICATION_IDLE;
 80006b0:	7025      	strb	r5, [r4, #0]
        break;
 80006b2:	e7af      	b.n	8000614 <main+0xcc>
  for(;;);
 80006b4:	e7fe      	b.n	80006b4 <main+0x16c>
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000
 80006c0:	40023c00 	.word	0x40023c00
 80006c4:	200000ad 	.word	0x200000ad
 80006c8:	08005080 	.word	0x08005080
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	08000521 	.word	0x08000521
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	080050a8 	.word	0x080050a8
 80006dc:	2000058c 	.word	0x2000058c
 80006e0:	200007bc 	.word	0x200007bc
 80006e4:	0800509e 	.word	0x0800509e
 80006e8:	08005094 	.word	0x08005094

080006ec <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80006ec:	4770      	bx	lr

080006ee <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler>

080006f0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler>

080006f2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler>

080006f4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler>

080006f6 <SVC_Handler>:
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80006fc:	f000 b9c0 	b.w	8000a80 <HAL_IncTick>

08000700 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 8000700:	4801      	ldr	r0, [pc, #4]	; (8000708 <OTG_HS_IRQHandler+0x8>)
 8000702:	f000 bc21 	b.w	8000f48 <HAL_HCD_IRQHandler>
 8000706:	bf00      	nop
 8000708:	200009ec 	.word	0x200009ec

0800070c <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 800070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
 8000710:	6803      	ldr	r3, [r0, #0]
 8000712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8000716:	b08e      	sub	sp, #56	; 0x38
  if(hhcd->Instance == USB_OTG_FS)
 8000718:	d150      	bne.n	80007bc <HAL_HCD_MspInit+0xb0>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4c59      	ldr	r4, [pc, #356]	; (8000880 <HAL_HCD_MspInit+0x174>)
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800071c:	4859      	ldr	r0, [pc, #356]	; (8000884 <HAL_HCD_MspInit+0x178>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2500      	movs	r5, #0
 8000720:	9501      	str	r5, [sp, #4]
 8000722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6323      	str	r3, [r4, #48]	; 0x30
 800072a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000734:	9502      	str	r5, [sp, #8]
 8000736:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6323      	str	r3, [r4, #48]	; 0x30
 800073e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800074c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000754:	270a      	movs	r7, #10
 8000756:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000758:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800075a:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800075e:	f000 fa21 	bl	8000ba4 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000768:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800076c:	4845      	ldr	r0, [pc, #276]	; (8000884 <HAL_HCD_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800076e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000770:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000772:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000776:	f000 fa15 	bl	8000ba4 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077a:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct); 
 800077c:	4842      	ldr	r0, [pc, #264]	; (8000888 <HAL_HCD_MspInit+0x17c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct); 
 8000780:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct); 
 8000786:	f000 fa0d 	bl	8000ba4 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800078a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6363      	str	r3, [r4, #52]	; 0x34
 8000792:	9503      	str	r5, [sp, #12]
 8000794:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6463      	str	r3, [r4, #68]	; 0x44
 800079c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	9303      	str	r3, [sp, #12]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80007a4:	2043      	movs	r0, #67	; 0x43
 80007a6:	462a      	mov	r2, r5
 80007a8:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80007aa:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80007ac:	f000 f9a6 	bl	8000afc <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80007b0:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80007b2:	f000 f9d5 	bl	8000b60 <HAL_NVIC_EnableIRQ>
  }   
}
 80007b6:	b00e      	add	sp, #56	; 0x38
 80007b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hhcd->Instance == USB_OTG_HS)
 80007bc:	4a33      	ldr	r2, [pc, #204]	; (800088c <HAL_HCD_MspInit+0x180>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d1f9      	bne.n	80007b6 <HAL_HCD_MspInit+0xaa>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4c2f      	ldr	r4, [pc, #188]	; (8000880 <HAL_HCD_MspInit+0x174>)
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	4832      	ldr	r0, [pc, #200]	; (8000890 <HAL_HCD_MspInit+0x184>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2500      	movs	r5, #0
 80007c8:	9504      	str	r5, [sp, #16]
 80007ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6323      	str	r3, [r4, #48]	; 0x30
 80007d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	9304      	str	r3, [sp, #16]
 80007da:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	9505      	str	r5, [sp, #20]
 80007de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6323      	str	r3, [r4, #48]	; 0x30
 80007e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	9305      	str	r3, [sp, #20]
 80007ee:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	9506      	str	r5, [sp, #24]
 80007f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6323      	str	r3, [r4, #48]	; 0x30
 80007fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	950b      	str	r5, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	f04f 0802 	mov.w	r8, #2
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000808:	2703      	movs	r7, #3
 800080a:	260a      	movs	r6, #10
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	230d      	movs	r3, #13
 8000812:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000816:	e9cd 760c 	strd	r7, r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f000 f9c3 	bl	8000ba4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800081e:	2328      	movs	r3, #40	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <HAL_HCD_MspInit+0x178>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000822:	960d      	str	r6, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	e9cd 570b 	strd	r5, r7, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f000 f9b9 	bl	8000ba4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000832:	f643 4323 	movw	r3, #15395	; 0x3c23
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	4817      	ldr	r0, [pc, #92]	; (8000894 <HAL_HCD_MspInit+0x188>)
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000838:	960d      	str	r6, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	e9cd 570b 	strd	r5, r7, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f000 f9ae 	bl	8000ba4 <HAL_GPIO_Init>
	__HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000848:	9507      	str	r5, [sp, #28]
 800084a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800084c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000850:	6323      	str	r3, [r4, #48]	; 0x30
 8000852:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000858:	9307      	str	r3, [sp, #28]
 800085a:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800085c:	9508      	str	r5, [sp, #32]
 800085e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000864:	6323      	str	r3, [r4, #48]	; 0x30
 8000866:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000868:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800086c:	9308      	str	r3, [sp, #32]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800086e:	204d      	movs	r0, #77	; 0x4d
 8000870:	462a      	mov	r2, r5
 8000872:	2105      	movs	r1, #5
	__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000874:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8000876:	f000 f941 	bl	8000afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800087a:	204d      	movs	r0, #77	; 0x4d
 800087c:	e799      	b.n	80007b2 <HAL_HCD_MspInit+0xa6>
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40021c00 	.word	0x40021c00
 800088c:	40040000 	.word	0x40040000
 8000890:	40020800 	.word	0x40020800
 8000894:	40020400 	.word	0x40020400

08000898 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 8000898:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800089c:	f003 bee4 	b.w	8004668 <USBH_LL_IncTimer>

080008a0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80008a0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80008a4:	f003 bef6 	b.w	8004694 <USBH_LL_Connect>

080008a8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80008a8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80008ac:	f003 befc 	b.w	80046a8 <USBH_LL_Disconnect>

080008b0 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80008b0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80008b4:	f003 bee6 	b.w	8004684 <USBH_LL_PortEnabled>

080008b8 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80008b8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80008bc:	f003 bee6 	b.w	800468c <USBH_LL_PortDisabled>

080008c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 80008c0:	4770      	bx	lr
	...

080008c4 <USBH_LL_Init>:
  * @brief  Initializes the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{  
 80008c4:	b570      	push	{r4, r5, r6, lr}
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
#endif 
#ifdef USE_USB_HS  
  /* Set the LL driver parameters */
  hhcd.Instance = USB_OTG_HS;
 80008c6:	4c0f      	ldr	r4, [pc, #60]	; (8000904 <USBH_LL_Init+0x40>)
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <USBH_LL_Init+0x44>)
 80008ca:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
 80008cc:	230b      	movs	r3, #11
  hhcd.Init.dma_enable = 1;
  hhcd.Init.low_power_enable = 0;
 80008ce:	2600      	movs	r6, #0
{  
 80008d0:	4605      	mov	r5, r0
  hhcd.Init.Host_channels = 11; 
 80008d2:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_ULPI; 
  hhcd.Init.Sof_enable = 0;
  hhcd.Init.speed = HCD_SPEED_HIGH;
  hhcd.Init.use_external_vbus = 1;  
  /* Link the driver to the stack */
  hhcd.pData = phost;
 80008d4:	f8c4 0300 	str.w	r0, [r4, #768]	; 0x300
  hhcd.Init.dma_enable = 1;
 80008d8:	2301      	movs	r3, #1
  phost->pData = &hhcd;
 80008da:	f8c0 44d0 	str.w	r4, [r0, #1232]	; 0x4d0
  /* Initialize the LL driver */
  HAL_HCD_Init(&hhcd);
 80008de:	4620      	mov	r0, r4
  hhcd.Init.Sof_enable = 0;
 80008e0:	e9c4 3606 	strd	r3, r6, [r4, #24]
  hhcd.Init.dma_enable = 1;
 80008e4:	6123      	str	r3, [r4, #16]
  hhcd.Init.use_external_vbus = 1;  
 80008e6:	6363      	str	r3, [r4, #52]	; 0x34
  hhcd.Init.low_power_enable = 0;
 80008e8:	6226      	str	r6, [r4, #32]
  hhcd.Init.speed = HCD_SPEED_HIGH;
 80008ea:	60e6      	str	r6, [r4, #12]
  HAL_HCD_Init(&hhcd);
 80008ec:	f000 fa7c 	bl	8000de8 <HAL_HCD_Init>
#endif 
 
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
 80008f0:	4620      	mov	r0, r4
 80008f2:	f000 fe50 	bl	8001596 <HAL_HCD_GetCurrentFrame>
 80008f6:	4601      	mov	r1, r0
 80008f8:	4628      	mov	r0, r5
 80008fa:	f003 feb2 	bl	8004662 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 80008fe:	4630      	mov	r0, r6
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	bf00      	nop
 8000904:	200009ec 	.word	0x200009ec
 8000908:	40040000 	.word	0x40040000

0800090c <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800090c:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 800090e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8000912:	f000 fe0b 	bl	800152c <HAL_HCD_Start>
  return USBH_OK; 
}
 8000916:	2000      	movs	r0, #0
 8000918:	bd08      	pop	{r3, pc}

0800091a <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800091a:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 800091c:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8000920:	f000 fe19 	bl	8001556 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8000924:	2000      	movs	r0, #0
 8000926:	bd08      	pop	{r3, pc}

08000928 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8000928:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800092a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800092e:	f000 fe35 	bl	800159c <HAL_HCD_GetCurrentSpeed>
 8000932:	2803      	cmp	r0, #3
 8000934:	bf28      	it	cs
 8000936:	2001      	movcs	r0, #1
   default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
 8000938:	b2c0      	uxtb	r0, r0
 800093a:	bd08      	pop	{r3, pc}

0800093c <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 800093c:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 800093e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8000942:	f000 fe1a 	bl	800157a <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 8000946:	2000      	movs	r0, #0
 8000948:	bd08      	pop	{r3, pc}

0800094a <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800094a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800094e:	f000 be1d 	b.w	800158c <HAL_HCD_HC_GetXferCount>

08000952 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,                                      
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8000952:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 8000954:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000958:	9402      	str	r4, [sp, #8]
 800095a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800095e:	9401      	str	r4, [sp, #4]
 8000960:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000964:	9400      	str	r4, [sp, #0]
 8000966:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800096a:	f000 f9f5 	bl	8000d58 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 800096e:	2000      	movs	r0, #0
 8000970:	b004      	add	sp, #16
 8000972:	bd10      	pop	{r4, pc}

08000974 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8000974:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe);
 8000976:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800097a:	f000 fa23 	bl	8000dc4 <HAL_HCD_HC_Halt>
  return USBH_OK;
}
 800097e:	2000      	movs	r0, #0
 8000980:	bd08      	pop	{r3, pc}

08000982 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
 8000982:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,
 8000984:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8000988:	9403      	str	r4, [sp, #12]
 800098a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800098e:	9402      	str	r4, [sp, #8]
 8000990:	9c07      	ldr	r4, [sp, #28]
 8000992:	9401      	str	r4, [sp, #4]
 8000994:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000998:	9400      	str	r4, [sp, #0]
 800099a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800099e:	f000 fa6f 	bl	8000e80 <HAL_HCD_HC_SubmitRequest>
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
}
 80009a2:	2000      	movs	r0, #0
 80009a4:	b004      	add	sp, #16
 80009a6:	bd10      	pop	{r4, pc}

080009a8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80009a8:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80009ac:	f000 bde8 	b.w	8001580 <HAL_HCD_HC_GetURBState>

080009b0 <USBH_LL_DriverVBUS>:
  }
  
  HAL_Delay(200);
#endif /* USE_USB_FS */
  return USBH_OK;  
}
 80009b0:	2000      	movs	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <USBH_LL_SetToggle+0x1c>)
 80009b6:	202c      	movs	r0, #44	; 0x2c
 80009b8:	fb00 3101 	mla	r1, r0, r1, r3
 80009bc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80009c0:	b11b      	cbz	r3, 80009ca <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 80009c2:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 80009c6:	2000      	movs	r0, #0
 80009c8:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
 80009ca:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 80009ce:	e7fa      	b.n	80009c6 <USBH_LL_SetToggle+0x12>
 80009d0:	200009ec 	.word	0x200009ec

080009d4 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <USBH_LL_GetToggle+0x1c>)
 80009d6:	222c      	movs	r2, #44	; 0x2c
 80009d8:	fb02 3101 	mla	r1, r2, r1, r3
 80009dc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80009e0:	b113      	cbz	r3, 80009e8 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 80009e2:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 80009e6:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 80009e8:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle; 
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200009ec 	.word	0x200009ec

080009f4 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
 80009f4:	f000 b856 	b.w	8000aa4 <HAL_Delay>

080009f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <SystemInit+0x10>)
 80009fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000a0c:	4770      	bx	lr
	...

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_InitTick+0x3c>)
 8000a14:	4e0e      	ldr	r6, [pc, #56]	; (8000a50 <HAL_InitTick+0x40>)
{
 8000a16:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1c:	7830      	ldrb	r0, [r6, #0]
 8000a1e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a22:	6810      	ldr	r0, [r2, #0]
 8000a24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a28:	f000 f8a8 	bl	8000b7c <HAL_SYSTICK_Config>
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	b950      	cbnz	r0, 8000a46 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	2d0f      	cmp	r5, #15
 8000a32:	d808      	bhi.n	8000a46 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	4602      	mov	r2, r0
 8000a36:	4629      	mov	r1, r5
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f85e 	bl	8000afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	6075      	str	r5, [r6, #4]
 8000a42:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
 8000a48:	e7fc      	b.n	8000a44 <HAL_InitTick+0x34>
 8000a4a:	bf00      	nop
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_Init>:
{
 8000a54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Init+0x28>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a66:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f835 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f7ff ffce 	bl	8000a10 <HAL_InitTick>
  HAL_MspInit();
 8000a74:	f7ff ffca 	bl	8000a0c <HAL_MspInit>
}
 8000a78:	2000      	movs	r0, #0
 8000a7a:	bd08      	pop	{r3, pc}
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a80:	4a03      	ldr	r2, [pc, #12]	; (8000a90 <HAL_IncTick+0x10>)
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <HAL_IncTick+0x14>)
 8000a84:	6811      	ldr	r1, [r2, #0]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	440b      	add	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000cf0 	.word	0x20000cf0
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <HAL_GetTick+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000cf0 	.word	0x20000cf0

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff fff6 	bl	8000a98 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	bf1c      	itt	ne
 8000ab0:	4b05      	ldrne	r3, [pc, #20]	; (8000ac8 <HAL_Delay+0x24>)
 8000ab2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	bf18      	it	ne
 8000ab8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aba:	f7ff ffed 	bl	8000a98 <HAL_GetTick>
 8000abe:	1b43      	subs	r3, r0, r5
 8000ac0:	42a3      	cmp	r3, r4
 8000ac2:	d3fa      	bcc.n	8000aba <HAL_Delay+0x16>
  {
  }
}
 8000ac4:	bd38      	pop	{r3, r4, r5, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <HAL_GetREVID+0x8>)
 8000ace:	6818      	ldr	r0, [r3, #0]
}
 8000ad0:	0c00      	lsrs	r0, r0, #16
 8000ad2:	4770      	bx	lr
 8000ad4:	e0042000 	.word	0xe0042000

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ada:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000af4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b530      	push	{r4, r5, lr}
 8000b00:	68dc      	ldr	r4, [r3, #12]
 8000b02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b06:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	2d04      	cmp	r5, #4
 8000b0e:	bf28      	it	cs
 8000b10:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b18:	bf8c      	ite	hi
 8000b1a:	3c03      	subhi	r4, #3
 8000b1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1e:	fa03 f505 	lsl.w	r5, r3, r5
 8000b22:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b26:	40a3      	lsls	r3, r4
 8000b28:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	bfac      	ite	ge
 8000b36:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	4a08      	ldrlt	r2, [pc, #32]	; (8000b5c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	bfb8      	it	lt
 8000b42:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	bfaa      	itet	ge
 8000b4a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b54:	bd30      	pop	{r4, r5, pc}
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	e000ed14 	.word	0xe000ed14

08000b60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b60:	2800      	cmp	r0, #0
 8000b62:	db08      	blt.n	8000b76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b64:	0942      	lsrs	r2, r0, #5
 8000b66:	2301      	movs	r3, #1
 8000b68:	f000 001f 	and.w	r0, r0, #31
 8000b6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b70:	4b01      	ldr	r3, [pc, #4]	; (8000b78 <HAL_NVIC_EnableIRQ+0x18>)
 8000b72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d20b      	bcs.n	8000b9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	21f0      	movs	r1, #240	; 0xf0
 8000b8e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b92:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b94:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b96:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8000d54 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bac:	4a67      	ldr	r2, [pc, #412]	; (8000d4c <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bae:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000bba:	43ac      	bics	r4, r5
 8000bbc:	f040 80b1 	bne.w	8000d22 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc0:	684d      	ldr	r5, [r1, #4]
 8000bc2:	f005 0403 	and.w	r4, r5, #3
 8000bc6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bca:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bcc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bce:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd4:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd8:	d834      	bhi.n	8000c44 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000bda:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bdc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be0:	68cf      	ldr	r7, [r1, #12]
 8000be2:	fa07 f708 	lsl.w	r7, r7, r8
 8000be6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000bea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bec:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bee:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000bf6:	409f      	lsls	r7, r3
 8000bf8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bfc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000bfe:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c00:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c04:	688f      	ldr	r7, [r1, #8]
 8000c06:	fa07 f708 	lsl.w	r7, r7, r8
 8000c0a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000c10:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	d119      	bne.n	8000c48 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c18:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c1c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c24:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c28:	f04f 0e0f 	mov.w	lr, #15
 8000c2c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000c30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c34:	690f      	ldr	r7, [r1, #16]
 8000c36:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000c3e:	f8ca 7020 	str.w	r7, [sl, #32]
 8000c42:	e001      	b.n	8000c48 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c44:	2c03      	cmp	r4, #3
 8000c46:	d1da      	bne.n	8000bfe <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000c48:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c52:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000c56:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c58:	d063      	beq.n	8000d22 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	f04f 0a00 	mov.w	sl, #0
 8000c5e:	f8cd a004 	str.w	sl, [sp, #4]
 8000c62:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c66:	4c3a      	ldr	r4, [pc, #232]	; (8000d50 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c68:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000c6c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000c70:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000c74:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c78:	9601      	str	r6, [sp, #4]
 8000c7a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c7c:	f023 0603 	bic.w	r6, r3, #3
 8000c80:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000c84:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c88:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c8c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c90:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c94:	270f      	movs	r7, #15
 8000c96:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c9c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca0:	d046      	beq.n	8000d30 <HAL_GPIO_Init+0x18c>
 8000ca2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ca6:	42a0      	cmp	r0, r4
 8000ca8:	d044      	beq.n	8000d34 <HAL_GPIO_Init+0x190>
 8000caa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cae:	42a0      	cmp	r0, r4
 8000cb0:	d042      	beq.n	8000d38 <HAL_GPIO_Init+0x194>
 8000cb2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cb6:	42a0      	cmp	r0, r4
 8000cb8:	d040      	beq.n	8000d3c <HAL_GPIO_Init+0x198>
 8000cba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cbe:	42a0      	cmp	r0, r4
 8000cc0:	d03e      	beq.n	8000d40 <HAL_GPIO_Init+0x19c>
 8000cc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cc6:	42a0      	cmp	r0, r4
 8000cc8:	d03c      	beq.n	8000d44 <HAL_GPIO_Init+0x1a0>
 8000cca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cce:	42a0      	cmp	r0, r4
 8000cd0:	d03a      	beq.n	8000d48 <HAL_GPIO_Init+0x1a4>
 8000cd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000cd6:	42a0      	cmp	r0, r4
 8000cd8:	bf0c      	ite	eq
 8000cda:	2407      	moveq	r4, #7
 8000cdc:	2408      	movne	r4, #8
 8000cde:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ce2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000ce6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ce8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cec:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000cee:	bf54      	ite	pl
 8000cf0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000cf2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000cf6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000cf8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cfa:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	bf54      	ite	pl
 8000cfe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d00:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000d04:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000d06:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d08:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000d0a:	bf54      	ite	pl
 8000d0c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d0e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000d12:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d14:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d16:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000d18:	bf54      	ite	pl
 8000d1a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000d1c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000d20:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d22:	3301      	adds	r3, #1
 8000d24:	2b10      	cmp	r3, #16
 8000d26:	f47f af43 	bne.w	8000bb0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000d2a:	b003      	add	sp, #12
 8000d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d30:	4654      	mov	r4, sl
 8000d32:	e7d4      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d34:	2401      	movs	r4, #1
 8000d36:	e7d2      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d38:	2402      	movs	r4, #2
 8000d3a:	e7d0      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d3c:	2403      	movs	r4, #3
 8000d3e:	e7ce      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d40:	2404      	movs	r4, #4
 8000d42:	e7cc      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d44:	2405      	movs	r4, #5
 8000d46:	e7ca      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d48:	2406      	movs	r4, #6
 8000d4a:	e7c8      	b.n	8000cde <HAL_GPIO_Init+0x13a>
 8000d4c:	40013c00 	.word	0x40013c00
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d60:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 8000d64:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 8000d68:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8000d6c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000d70:	2c01      	cmp	r4, #1
 8000d72:	d025      	beq.n	8000dc0 <HAL_HCD_HC_Init+0x68>
 8000d74:	2401      	movs	r4, #1
 8000d76:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d7a:	242c      	movs	r4, #44	; 0x2c
 8000d7c:	fb04 5401 	mla	r4, r4, r1, r5
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8000d80:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8000d82:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d84:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8000d88:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d8c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d90:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d94:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d98:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8000d9c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000da0:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8000da4:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8000da8:	6828      	ldr	r0, [r5, #0]
 8000daa:	f8cd e000 	str.w	lr, [sp]
 8000dae:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8000db2:	f001 f86f 	bl	8001e94 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000db6:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 8000dba:	b005      	add	sp, #20
 8000dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	e7fa      	b.n	8000dba <HAL_HCD_HC_Init+0x62>

08000dc4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dc4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000dc6:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8000dca:	2b01      	cmp	r3, #1
{
 8000dcc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000dce:	d009      	beq.n	8000de4 <HAL_HCD_HC_Halt+0x20>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd6:	6800      	ldr	r0, [r0, #0]
 8000dd8:	f001 f8eb 	bl	8001fb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8000de2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000de4:	2002      	movs	r0, #2
 8000de6:	e7fc      	b.n	8000de2 <HAL_HCD_HC_Halt+0x1e>

08000de8 <HAL_HCD_Init>:
{
 8000de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000dec:	4606      	mov	r6, r0
{
 8000dee:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d043      	beq.n	8000e7c <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000df4:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8000df8:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000dfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dfe:	b91b      	cbnz	r3, 8000e08 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8000e00:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8000e04:	f7ff fc82 	bl	800070c <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8000e10:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e12:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000e16:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000e1a:	bf08      	it	eq
 8000e1c:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000e1e:	f000 fea7 	bl	8001b70 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e24:	466d      	mov	r5, sp
 8000e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e30:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e34:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000e38:	4637      	mov	r7, r6
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000e3a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000e3e:	6830      	ldr	r0, [r6, #0]
 8000e40:	f000 fe50 	bl	8001ae4 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000e44:	f857 0b10 	ldr.w	r0, [r7], #16
 8000e48:	2101      	movs	r1, #1
 8000e4a:	f000 fe97 	bl	8001b7c <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000e4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000e50:	46ec      	mov	ip, sp
 8000e52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000e58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e64:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000e68:	6830      	ldr	r0, [r6, #0]
 8000e6a:	f000 ff3d 	bl	8001ce8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 8000e74:	2000      	movs	r0, #0
}
 8000e76:	b00a      	add	sp, #40	; 0x28
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	e7fa      	b.n	8000e76 <HAL_HCD_Init+0x8e>

08000e80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e80:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e82:	262c      	movs	r6, #44	; 0x2c
 8000e84:	fb06 0601 	mla	r6, r6, r1, r0
{
 8000e88:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8000e8c:	9d05      	ldr	r5, [sp, #20]
 8000e8e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8000e92:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000e96:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e9a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 8000e9e:	b97f      	cbnz	r7, 8000ec0 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea0:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000ea2:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea4:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8000ea8:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
  switch (ep_type)
 8000eac:	d03c      	beq.n	8000f28 <HAL_HCD_HC_SubmitRequest+0xa8>
 8000eae:	42bb      	cmp	r3, r7
 8000eb0:	d03a      	beq.n	8000f28 <HAL_HCD_HC_SubmitRequest+0xa8>
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d11f      	bne.n	8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb6:	232c      	movs	r3, #44	; 0x2c
 8000eb8:	fb03 0301 	mla	r3, r3, r1, r0
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e030      	b.n	8000f22 <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ec0:	f04f 0c02 	mov.w	ip, #2
 8000ec4:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d814      	bhi.n	8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
 8000ecc:	a601      	add	r6, pc, #4	; (adr r6, 8000ed4 <HAL_HCD_HC_SubmitRequest+0x54>)
 8000ece:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eb7 	.word	0x08000eb7
 8000edc:	08000f29 	.word	0x08000f29
 8000ee0:	08000f29 	.word	0x08000f29
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000ee4:	2f01      	cmp	r7, #1
 8000ee6:	d106      	bne.n	8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
 8000ee8:	b92a      	cbnz	r2, 8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 8000eea:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 8000eec:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 8000ef0:	b99c      	cbnz	r4, 8000f1a <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000ef2:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ef6:	222c      	movs	r2, #44	; 0x2c
 8000ef8:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 8000efc:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
 8000efe:	2400      	movs	r4, #0
  hhcd->hc[ch_num].ch_num = ch_num;
 8000f00:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000f04:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f08:	4619      	mov	r1, r3
 8000f0a:	7c02      	ldrb	r2, [r0, #16]
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000f0c:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
 8000f0e:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f10:	6800      	ldr	r0, [r0, #0]
}
 8000f12:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000f14:	3138      	adds	r1, #56	; 0x38
 8000f16:	f001 b8bb 	b.w	8002090 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f1a:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d1e9      	bne.n	8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8000f26:	e7e6      	b.n	8000ef6 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 8000f28:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f2a:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8000f2e:	b92a      	cbnz	r2, 8000f3c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f30:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8000f34:	2e00      	cmp	r6, #0
 8000f36:	d0f4      	beq.n	8000f22 <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f38:	2202      	movs	r2, #2
 8000f3a:	e7f2      	b.n	8000f22 <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f3c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d1f9      	bne.n	8000f38 <HAL_HCD_HC_SubmitRequest+0xb8>
 8000f44:	e7ed      	b.n	8000f22 <HAL_HCD_HC_SubmitRequest+0xa2>
 8000f46:	bf00      	nop

08000f48 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f4c:	6806      	ldr	r6, [r0, #0]
{
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000f52:	4630      	mov	r0, r6
 8000f54:	f000 fec3 	bl	8001cde <USB_GetMode>
 8000f58:	2801      	cmp	r0, #1
 8000f5a:	f040 80f7 	bne.w	800114c <HAL_HCD_IRQHandler+0x204>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000f5e:	6820      	ldr	r0, [r4, #0]
 8000f60:	f000 feb9 	bl	8001cd6 <USB_ReadInterrupts>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	f000 80f1 	beq.w	800114c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	f000 feb3 	bl	8001cd6 <USB_ReadInterrupts>
 8000f70:	0283      	lsls	r3, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f72:	bf48      	it	mi
 8000f74:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f76:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f78:	bf44      	itt	mi
 8000f7a:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000f7e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f80:	f000 fea9 	bl	8001cd6 <USB_ReadInterrupts>
 8000f84:	02c7      	lsls	r7, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f86:	bf48      	it	mi
 8000f88:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f8a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f8c:	bf44      	itt	mi
 8000f8e:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000f92:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000f94:	f000 fe9f 	bl	8001cd6 <USB_ReadInterrupts>
 8000f98:	0145      	lsls	r5, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000f9a:	bf48      	it	mi
 8000f9c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000f9e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000fa0:	bf44      	itt	mi
 8000fa2:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000fa6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000fa8:	f000 fe95 	bl	8001cd6 <USB_ReadInterrupts>
 8000fac:	0780      	lsls	r0, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000fae:	bf48      	it	mi
 8000fb0:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000fb2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000fb4:	bf44      	itt	mi
 8000fb6:	2202      	movmi	r2, #2
 8000fb8:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000fba:	f000 fe8c 	bl	8001cd6 <USB_ReadInterrupts>
 8000fbe:	0081      	lsls	r1, r0, #2
 8000fc0:	d515      	bpl.n	8000fee <HAL_HCD_IRQHandler+0xa6>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fc8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000fca:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000fce:	07da      	lsls	r2, r3, #31
 8000fd0:	d40d      	bmi.n	8000fee <HAL_HCD_IRQHandler+0xa6>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000fd2:	2110      	movs	r1, #16
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	f000 fe01 	bl	8001bdc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 fe24 	bl	8001c28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000fe0:	6820      	ldr	r0, [r4, #0]
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	f000 feec 	bl	8001dc0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fc5d 	bl	80008a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	f000 fe71 	bl	8001cd6 <USB_ReadInterrupts>
 8000ff4:	01c3      	lsls	r3, r0, #7
 8000ff6:	d53d      	bpl.n	8001074 <HAL_HCD_IRQHandler+0x12c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ff8:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000ffa:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000ffe:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8001000:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001004:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001006:	9b03      	ldr	r3, [sp, #12]
 8001008:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800100c:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800100e:	9b02      	ldr	r3, [sp, #8]
 8001010:	079f      	lsls	r7, r3, #30
 8001012:	d509      	bpl.n	8001028 <HAL_HCD_IRQHandler+0xe0>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001014:	9b02      	ldr	r3, [sp, #8]
 8001016:	07d8      	lsls	r0, r3, #31
 8001018:	d502      	bpl.n	8001020 <HAL_HCD_IRQHandler+0xd8>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff fc40 	bl	80008a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001020:	9b03      	ldr	r3, [sp, #12]
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	0719      	lsls	r1, r3, #28
 800102c:	d518      	bpl.n	8001060 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800102e:	9b03      	ldr	r3, [sp, #12]
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001036:	9b02      	ldr	r3, [sp, #8]
 8001038:	075a      	lsls	r2, r3, #29
 800103a:	f140 8092 	bpl.w	8001162 <HAL_HCD_IRQHandler+0x21a>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800103e:	69a1      	ldr	r1, [r4, #24]
 8001040:	2902      	cmp	r1, #2
 8001042:	f040 8086 	bne.w	8001152 <HAL_HCD_IRQHandler+0x20a>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001046:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001048:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800104a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800104e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001052:	bf18      	it	ne
 8001054:	2101      	movne	r1, #1
 8001056:	f000 feb3 	bl	8001dc0 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff fc28 	bl	80008b0 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001060:	9b02      	ldr	r3, [sp, #8]
 8001062:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001064:	bf42      	ittt	mi
 8001066:	9b03      	ldrmi	r3, [sp, #12]
 8001068:	f043 0320 	orrmi.w	r3, r3, #32
 800106c:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800106e:	9b03      	ldr	r3, [sp, #12]
 8001070:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001074:	6820      	ldr	r0, [r4, #0]
 8001076:	f000 fe2e 	bl	8001cd6 <USB_ReadInterrupts>
 800107a:	0707      	lsls	r7, r0, #28
 800107c:	d505      	bpl.n	800108a <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff fc0a 	bl	8000898 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	2208      	movs	r2, #8
 8001088:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800108a:	6820      	ldr	r0, [r4, #0]
 800108c:	f000 fe23 	bl	8001cd6 <USB_ReadInterrupts>
 8001090:	06c5      	lsls	r5, r0, #27
 8001092:	d544      	bpl.n	800111e <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001094:	6827      	ldr	r7, [r4, #0]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f023 0310 	bic.w	r3, r3, #16
 800109c:	61bb      	str	r3, [r7, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800109e:	6a3b      	ldr	r3, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80010a0:	f3c3 4243 	ubfx	r2, r3, #17, #4
  switch (pktsts)
 80010a4:	2a02      	cmp	r2, #2
 80010a6:	d135      	bne.n	8001114 <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010a8:	f3c3 190a 	ubfx	r9, r3, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80010ac:	f1b9 0f00 	cmp.w	r9, #0
 80010b0:	d030      	beq.n	8001114 <HAL_HCD_IRQHandler+0x1cc>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80010b2:	f003 080f 	and.w	r8, r3, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80010b6:	252c      	movs	r5, #44	; 0x2c
 80010b8:	fb05 4508 	mla	r5, r5, r8, r4
 80010bc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80010be:	b349      	cbz	r1, 8001114 <HAL_HCD_IRQHandler+0x1cc>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80010c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010c2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80010c4:	444b      	add	r3, r9
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d84f      	bhi.n	800116a <HAL_HCD_IRQHandler+0x222>
          (void)USB_ReadPacket(hhcd->Instance,
 80010ca:	464a      	mov	r2, r9
 80010cc:	4638      	mov	r0, r7
 80010ce:	f000 fde2 	bl	8001c96 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80010d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80010d4:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80010d8:	444b      	add	r3, r9
 80010da:	646b      	str	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80010dc:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80010e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80010e2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e6:	eb07 1848 	add.w	r8, r7, r8, lsl #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80010ea:	444b      	add	r3, r9
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80010ec:	4589      	cmp	r9, r1
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80010ee:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80010f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80010f4:	d10e      	bne.n	8001114 <HAL_HCD_IRQHandler+0x1cc>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80010f6:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80010fa:	b15b      	cbz	r3, 8001114 <HAL_HCD_IRQHandler+0x1cc>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80010fc:	59d3      	ldr	r3, [r2, r7]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80010fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001106:	51d3      	str	r3, [r2, r7]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001108:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	6993      	ldr	r3, [r2, #24]
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800111e:	6820      	ldr	r0, [r4, #0]
 8001120:	f000 fdd9 	bl	8001cd6 <USB_ReadInterrupts>
 8001124:	0180      	lsls	r0, r0, #6
 8001126:	d511      	bpl.n	800114c <HAL_HCD_IRQHandler+0x204>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001128:	6820      	ldr	r0, [r4, #0]
 800112a:	f000 ff3d 	bl	8001fa8 <USB_HC_ReadInterrupt>
 800112e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8001132:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	f04f 0900 	mov.w	r9, #0
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800113a:	252c      	movs	r5, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800113c:	2702      	movs	r7, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800113e:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001140:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001142:	454b      	cmp	r3, r9
 8001144:	d815      	bhi.n	8001172 <HAL_HCD_IRQHandler+0x22a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800114a:	6143      	str	r3, [r0, #20]
}
 800114c:	b005      	add	sp, #20
 800114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001152:	68e3      	ldr	r3, [r4, #12]
 8001154:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001156:	bf04      	itt	eq
 8001158:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800115c:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001160:	e77b      	b.n	800105a <HAL_HCD_IRQHandler+0x112>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff fba8 	bl	80008b8 <HAL_HCD_PortDisabled_Callback>
 8001168:	e77a      	b.n	8001060 <HAL_HCD_IRQHandler+0x118>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800116a:	2304      	movs	r3, #4
 800116c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8001170:	e7d0      	b.n	8001114 <HAL_HCD_IRQHandler+0x1cc>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001172:	9a01      	ldr	r2, [sp, #4]
 8001174:	f009 030f 	and.w	r3, r9, #15
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	07d9      	lsls	r1, r3, #31
 800117e:	f140 8085 	bpl.w	800128c <HAL_HCD_IRQHandler+0x344>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001182:	9b00      	ldr	r3, [sp, #0]
 8001184:	fa5f fb89 	uxtb.w	fp, r9
 8001188:	681a      	ldr	r2, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800118a:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 800118e:	eb0a 164b 	add.w	r6, sl, fp, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001192:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001196:	ea4f 184b 	mov.w	r8, fp, lsl #5
 800119a:	68b2      	ldr	r2, [r6, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800119c:	f000 80e2 	beq.w	8001364 <HAL_HCD_IRQHandler+0x41c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80011a0:	0752      	lsls	r2, r2, #29
 80011a2:	d506      	bpl.n	80011b2 <HAL_HCD_IRQHandler+0x26a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80011a4:	2204      	movs	r2, #4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80011a6:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80011a8:	f04f 0c06 	mov.w	ip, #6
 80011ac:	fb05 420b 	mla	r2, r5, fp, r4
 80011b0:	e009      	b.n	80011c6 <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80011b2:	68b2      	ldr	r2, [r6, #8]
 80011b4:	05d3      	lsls	r3, r2, #23
 80011b6:	d50c      	bpl.n	80011d2 <HAL_HCD_IRQHandler+0x28a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80011be:	f04f 0c07 	mov.w	ip, #7
 80011c2:	fb05 420b 	mla	r2, r5, fp, r4
    hhcd->hc[ch_num].state = HC_XACTERR;
 80011c6:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011ca:	4659      	mov	r1, fp
 80011cc:	f000 fef1 	bl	8001fb2 <USB_HC_Halt>
 80011d0:	e004      	b.n	80011dc <HAL_HCD_IRQHandler+0x294>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80011d2:	68b2      	ldr	r2, [r6, #8]
 80011d4:	0691      	lsls	r1, r2, #26
 80011d6:	d50c      	bpl.n	80011f2 <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80011d8:	2220      	movs	r2, #32
 80011da:	60b2      	str	r2, [r6, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80011dc:	68b2      	ldr	r2, [r6, #8]
 80011de:	0592      	lsls	r2, r2, #22
 80011e0:	d521      	bpl.n	8001226 <HAL_HCD_IRQHandler+0x2de>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011e2:	6820      	ldr	r0, [r4, #0]
 80011e4:	4659      	mov	r1, fp
 80011e6:	f000 fee4 	bl	8001fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80011ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011ee:	60b2      	str	r2, [r6, #8]
 80011f0:	e04c      	b.n	800128c <HAL_HCD_IRQHandler+0x344>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80011f2:	68b2      	ldr	r2, [r6, #8]
 80011f4:	0712      	lsls	r2, r2, #28
 80011f6:	d506      	bpl.n	8001206 <HAL_HCD_IRQHandler+0x2be>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80011f8:	2208      	movs	r2, #8
 80011fa:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80011fc:	f04f 0c05 	mov.w	ip, #5
 8001200:	fb05 420b 	mla	r2, r5, fp, r4
 8001204:	e7df      	b.n	80011c6 <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001206:	68b2      	ldr	r2, [r6, #8]
 8001208:	0553      	lsls	r3, r2, #21
 800120a:	d507      	bpl.n	800121c <HAL_HCD_IRQHandler+0x2d4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800120c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001210:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001212:	f04f 0c08 	mov.w	ip, #8
 8001216:	fb05 420b 	mla	r2, r5, fp, r4
 800121a:	e7d4      	b.n	80011c6 <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800121c:	68b2      	ldr	r2, [r6, #8]
 800121e:	0611      	lsls	r1, r2, #24
 8001220:	d5dc      	bpl.n	80011dc <HAL_HCD_IRQHandler+0x294>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	e7bf      	b.n	80011a6 <HAL_HCD_IRQHandler+0x25e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001226:	68b2      	ldr	r2, [r6, #8]
 8001228:	07d3      	lsls	r3, r2, #31
 800122a:	d544      	bpl.n	80012b6 <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
 800122c:	6922      	ldr	r2, [r4, #16]
 800122e:	b142      	cbz	r2, 8001242 <HAL_HCD_IRQHandler+0x2fa>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001230:	6932      	ldr	r2, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001232:	fb05 400b 	mla	r0, r5, fp, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001236:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800123a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800123c:	eba2 020c 	sub.w	r2, r2, ip
 8001240:	6502      	str	r2, [r0, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8001242:	fb05 400b 	mla	r0, r5, fp, r4
 8001246:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001248:	2300      	movs	r3, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800124a:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001250:	60b2      	str	r2, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001252:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8001256:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 800125a:	d11d      	bne.n	8001298 <HAL_HCD_IRQHandler+0x350>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	4659      	mov	r1, fp
 8001260:	f000 fea7 	bl	8001fb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001264:	2210      	movs	r2, #16
 8001266:	60b2      	str	r2, [r6, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001268:	6923      	ldr	r3, [r4, #16]
 800126a:	2b01      	cmp	r3, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800126c:	fb05 410b 	mla	r1, r5, fp, r4
    if (hhcd->Init.dma_enable == 1U)
 8001270:	d106      	bne.n	8001280 <HAL_HCD_IRQHandler+0x338>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001272:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8001276:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8001278:	fbb3 f3f2 	udiv	r3, r3, r2
 800127c:	07d8      	lsls	r0, r3, #31
 800127e:	d505      	bpl.n	800128c <HAL_HCD_IRQHandler+0x344>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001280:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800128c:	9b00      	ldr	r3, [sp, #0]
 800128e:	3320      	adds	r3, #32
 8001290:	f109 0901 	add.w	r9, r9, #1
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	e752      	b.n	800113e <HAL_HCD_IRQHandler+0x1f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001298:	2a01      	cmp	r2, #1
 800129a:	d1e5      	bne.n	8001268 <HAL_HCD_IRQHandler+0x320>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800129c:	f858 300a 	ldr.w	r3, [r8, sl]
 80012a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012a4:	f848 300a 	str.w	r3, [r8, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012a8:	4659      	mov	r1, fp
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80012aa:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff fb06 	bl	80008c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80012b4:	e7d8      	b.n	8001268 <HAL_HCD_IRQHandler+0x320>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80012b6:	68b3      	ldr	r3, [r6, #8]
 80012b8:	f013 0302 	ands.w	r3, r3, #2
 80012bc:	d035      	beq.n	800132a <HAL_HCD_IRQHandler+0x3e2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80012be:	fb05 400b 	mla	r0, r5, fp, r4
 80012c2:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 80012c6:	2a01      	cmp	r2, #1
 80012c8:	d10b      	bne.n	80012e2 <HAL_HCD_IRQHandler+0x39a>
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012ca:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012ce:	fb05 430b 	mla	r3, r5, fp, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80012d2:	60b7      	str	r7, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012d4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80012d8:	4659      	mov	r1, fp
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff faf0 	bl	80008c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80012e0:	e7d4      	b.n	800128c <HAL_HCD_IRQHandler+0x344>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80012e2:	2a05      	cmp	r2, #5
 80012e4:	d0f1      	beq.n	80012ca <HAL_HCD_IRQHandler+0x382>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80012e6:	2a06      	cmp	r2, #6
 80012e8:	d001      	beq.n	80012ee <HAL_HCD_IRQHandler+0x3a6>
 80012ea:	2a08      	cmp	r2, #8
 80012ec:	d109      	bne.n	8001302 <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt++;
 80012ee:	fb05 400b 	mla	r0, r5, fp, r4
 80012f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80012f4:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80012f6:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 80012f8:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80012fa:	d904      	bls.n	8001306 <HAL_HCD_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001300:	e011      	b.n	8001326 <HAL_HCD_IRQHandler+0x3de>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001302:	2a03      	cmp	r2, #3
 8001304:	d10a      	bne.n	800131c <HAL_HCD_IRQHandler+0x3d4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001306:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800130a:	f858 200a 	ldr.w	r2, [r8, sl]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800130e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001316:	f848 200a 	str.w	r2, [r8, sl]
 800131a:	e7d8      	b.n	80012ce <HAL_HCD_IRQHandler+0x386>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800131c:	2a07      	cmp	r2, #7
 800131e:	d1d6      	bne.n	80012ce <HAL_HCD_IRQHandler+0x386>
      hhcd->hc[ch_num].ErrCnt++;
 8001320:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001322:	3201      	adds	r2, #1
 8001324:	65c2      	str	r2, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001326:	2204      	movs	r2, #4
 8001328:	e7cf      	b.n	80012ca <HAL_HCD_IRQHandler+0x382>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800132a:	68b2      	ldr	r2, [r6, #8]
 800132c:	06d2      	lsls	r2, r2, #27
 800132e:	d5ad      	bpl.n	800128c <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001330:	fb05 4e0b 	mla	lr, r5, fp, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001334:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001336:	f89e 203f 	ldrb.w	r2, [lr, #63]	; 0x3f
 800133a:	2a03      	cmp	r2, #3
 800133c:	d106      	bne.n	800134c <HAL_HCD_IRQHandler+0x404>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800133e:	f8ce 305c 	str.w	r3, [lr, #92]	; 0x5c
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001342:	4659      	mov	r1, fp
 8001344:	f000 fe35 	bl	8001fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001348:	2210      	movs	r2, #16
 800134a:	e750      	b.n	80011ee <HAL_HCD_IRQHandler+0x2a6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800134c:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8001350:	d1fa      	bne.n	8001348 <HAL_HCD_IRQHandler+0x400>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001352:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8001356:	6922      	ldr	r2, [r4, #16]
 8001358:	2a00      	cmp	r2, #0
 800135a:	d1f5      	bne.n	8001348 <HAL_HCD_IRQHandler+0x400>
        hhcd->hc[ch_num].state = HC_NAK;
 800135c:	2203      	movs	r2, #3
 800135e:	f88e 2061 	strb.w	r2, [lr, #97]	; 0x61
 8001362:	e7ee      	b.n	8001342 <HAL_HCD_IRQHandler+0x3fa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001364:	f012 0204 	ands.w	r2, r2, #4
 8001368:	d007      	beq.n	800137a <HAL_HCD_IRQHandler+0x432>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800136a:	2204      	movs	r2, #4
 800136c:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800136e:	fb05 430b 	mla	r3, r5, fp, r4
 8001372:	2206      	movs	r2, #6
    hhcd->hc[ch_num].state = HC_STALL;
 8001374:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8001378:	e010      	b.n	800139c <HAL_HCD_IRQHandler+0x454>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800137a:	68b3      	ldr	r3, [r6, #8]
 800137c:	069b      	lsls	r3, r3, #26
 800137e:	d511      	bpl.n	80013a4 <HAL_HCD_IRQHandler+0x45c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001380:	2320      	movs	r3, #32
 8001382:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001384:	fb05 430b 	mla	r3, r5, fp, r4
 8001388:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
 800138c:	f1bc 0f01 	cmp.w	ip, #1
 8001390:	f47f af7c 	bne.w	800128c <HAL_HCD_IRQHandler+0x344>
      hhcd->hc[ch_num].do_ping = 0U;
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001398:	f883 7060 	strb.w	r7, [r3, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800139c:	4659      	mov	r1, fp
 800139e:	f000 fe08 	bl	8001fb2 <USB_HC_Halt>
 80013a2:	e773      	b.n	800128c <HAL_HCD_IRQHandler+0x344>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80013a4:	68b3      	ldr	r3, [r6, #8]
 80013a6:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80013aa:	d003      	beq.n	80013b4 <HAL_HCD_IRQHandler+0x46c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	60b2      	str	r2, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013b2:	e7f3      	b.n	800139c <HAL_HCD_IRQHandler+0x454>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80013b4:	68b2      	ldr	r2, [r6, #8]
 80013b6:	f012 0201 	ands.w	r2, r2, #1
 80013ba:	d010      	beq.n	80013de <HAL_HCD_IRQHandler+0x496>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013bc:	fb05 420b 	mla	r2, r5, fp, r4
 80013c0:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013c2:	68b3      	ldr	r3, [r6, #8]
 80013c4:	0659      	lsls	r1, r3, #25
      hhcd->hc[ch_num].do_ping = 1U;
 80013c6:	bf41      	itttt	mi
 80013c8:	f04f 0c01 	movmi.w	ip, #1
 80013cc:	f882 c03d 	strbmi.w	ip, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80013d0:	2240      	movmi	r2, #64	; 0x40
 80013d2:	60b2      	strmi	r2, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80013d4:	2201      	movs	r2, #1
 80013d6:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80013d8:	fb05 430b 	mla	r3, r5, fp, r4
 80013dc:	e7ca      	b.n	8001374 <HAL_HCD_IRQHandler+0x42c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80013de:	68b3      	ldr	r3, [r6, #8]
 80013e0:	065b      	lsls	r3, r3, #25
 80013e2:	d510      	bpl.n	8001406 <HAL_HCD_IRQHandler+0x4be>
    hhcd->hc[ch_num].state = HC_NYET;
 80013e4:	fb05 4c0b 	mla	ip, r5, fp, r4
 80013e8:	f04f 0e04 	mov.w	lr, #4
 80013ec:	f88c e061 	strb.w	lr, [ip, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 80013f0:	f04f 0e01 	mov.w	lr, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80013f4:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    hhcd->hc[ch_num].do_ping = 1U;
 80013f8:	f88c e03d 	strb.w	lr, [ip, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013fc:	4659      	mov	r1, fp
 80013fe:	f000 fdd8 	bl	8001fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	e6f3      	b.n	80011ee <HAL_HCD_IRQHandler+0x2a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001406:	68b2      	ldr	r2, [r6, #8]
 8001408:	0711      	lsls	r1, r2, #28
 800140a:	d505      	bpl.n	8001418 <HAL_HCD_IRQHandler+0x4d0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800140c:	2208      	movs	r2, #8
 800140e:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001410:	fb05 430b 	mla	r3, r5, fp, r4
 8001414:	2205      	movs	r2, #5
 8001416:	e7ad      	b.n	8001374 <HAL_HCD_IRQHandler+0x42c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001418:	68b2      	ldr	r2, [r6, #8]
 800141a:	06d2      	lsls	r2, r2, #27
 800141c:	d514      	bpl.n	8001448 <HAL_HCD_IRQHandler+0x500>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800141e:	fb05 420b 	mla	r2, r5, fp, r4
 8001422:	2300      	movs	r3, #0
 8001424:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001426:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 800142a:	f04f 0c03 	mov.w	ip, #3
 800142e:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001432:	2b00      	cmp	r3, #0
 8001434:	d185      	bne.n	8001342 <HAL_HCD_IRQHandler+0x3fa>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001436:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d181      	bne.n	8001342 <HAL_HCD_IRQHandler+0x3fa>
        hhcd->hc[ch_num].do_ping = 1U;
 800143e:	f04f 0c01 	mov.w	ip, #1
 8001442:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001446:	e77c      	b.n	8001342 <HAL_HCD_IRQHandler+0x3fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001448:	68b2      	ldr	r2, [r6, #8]
 800144a:	0613      	lsls	r3, r2, #24
 800144c:	d520      	bpl.n	8001490 <HAL_HCD_IRQHandler+0x548>
    if (hhcd->Init.dma_enable == 0U)
 800144e:	6922      	ldr	r2, [r4, #16]
 8001450:	b952      	cbnz	r2, 8001468 <HAL_HCD_IRQHandler+0x520>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001452:	fb05 420b 	mla	r2, r5, fp, r4
 8001456:	f04f 0c06 	mov.w	ip, #6
 800145a:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145e:	4659      	mov	r1, fp
 8001460:	f000 fda7 	bl	8001fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	e6c2      	b.n	80011ee <HAL_HCD_IRQHandler+0x2a6>
      hhcd->hc[ch_num].ErrCnt++;
 8001468:	fb05 400b 	mla	r0, r5, fp, r4
 800146c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800146e:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001470:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8001472:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001474:	d909      	bls.n	800148a <HAL_HCD_IRQHandler+0x542>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001476:	2300      	movs	r3, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001478:	2204      	movs	r2, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800147a:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800147c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001480:	4659      	mov	r1, fp
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fa1c 	bl	80008c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001488:	e7ec      	b.n	8001464 <HAL_HCD_IRQHandler+0x51c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800148a:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
 800148e:	e7e9      	b.n	8001464 <HAL_HCD_IRQHandler+0x51c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001490:	68b2      	ldr	r2, [r6, #8]
 8001492:	0551      	lsls	r1, r2, #21
 8001494:	d50b      	bpl.n	80014ae <HAL_HCD_IRQHandler+0x566>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001496:	fb05 420b 	mla	r2, r5, fp, r4
 800149a:	f04f 0c08 	mov.w	ip, #8
 800149e:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a2:	4659      	mov	r1, fp
 80014a4:	f000 fd85 	bl	8001fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	e69f      	b.n	80011ee <HAL_HCD_IRQHandler+0x2a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80014ae:	68b2      	ldr	r2, [r6, #8]
 80014b0:	0792      	lsls	r2, r2, #30
 80014b2:	f57f aeeb 	bpl.w	800128c <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80014b6:	fb05 420b 	mla	r2, r5, fp, r4
 80014ba:	f892 0061 	ldrb.w	r0, [r2, #97]	; 0x61
 80014be:	2801      	cmp	r0, #1
 80014c0:	d121      	bne.n	8001506 <HAL_HCD_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80014c2:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80014c6:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 80014ca:	3802      	subs	r0, #2
 80014cc:	2801      	cmp	r0, #1
 80014ce:	f63f aefe 	bhi.w	80012ce <HAL_HCD_IRQHandler+0x386>
        if (hhcd->Init.dma_enable == 0U)
 80014d2:	6920      	ldr	r0, [r4, #16]
 80014d4:	b930      	cbnz	r0, 80014e4 <HAL_HCD_IRQHandler+0x59c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80014d6:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
 80014da:	f080 0001 	eor.w	r0, r0, #1
 80014de:	f882 0055 	strb.w	r0, [r2, #85]	; 0x55
 80014e2:	e6f4      	b.n	80012ce <HAL_HCD_IRQHandler+0x386>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80014e4:	2801      	cmp	r0, #1
 80014e6:	f47f aef2 	bne.w	80012ce <HAL_HCD_IRQHandler+0x386>
 80014ea:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80014ec:	2800      	cmp	r0, #0
 80014ee:	f43f aeee 	beq.w	80012ce <HAL_HCD_IRQHandler+0x386>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80014f2:	f8b2 c040 	ldrh.w	ip, [r2, #64]	; 0x40
 80014f6:	3801      	subs	r0, #1
 80014f8:	4460      	add	r0, ip
 80014fa:	fbb0 f0fc 	udiv	r0, r0, ip
          if ((num_packets & 1U) != 0U)
 80014fe:	07c3      	lsls	r3, r0, #31
 8001500:	f57f aee5 	bpl.w	80012ce <HAL_HCD_IRQHandler+0x386>
 8001504:	e7e7      	b.n	80014d6 <HAL_HCD_IRQHandler+0x58e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001506:	2803      	cmp	r0, #3
 8001508:	d102      	bne.n	8001510 <HAL_HCD_IRQHandler+0x5c8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800150a:	f882 7060 	strb.w	r7, [r2, #96]	; 0x60
 800150e:	e6de      	b.n	80012ce <HAL_HCD_IRQHandler+0x386>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001510:	2804      	cmp	r0, #4
 8001512:	d0fa      	beq.n	800150a <HAL_HCD_IRQHandler+0x5c2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001514:	2805      	cmp	r0, #5
 8001516:	d102      	bne.n	800151e <HAL_HCD_IRQHandler+0x5d6>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001518:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 800151c:	e6d7      	b.n	80012ce <HAL_HCD_IRQHandler+0x386>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800151e:	2806      	cmp	r0, #6
 8001520:	f43f aee5 	beq.w	80012ee <HAL_HCD_IRQHandler+0x3a6>
 8001524:	2808      	cmp	r0, #8
 8001526:	f47f aed2 	bne.w	80012ce <HAL_HCD_IRQHandler+0x386>
 800152a:	e6e0      	b.n	80012ee <HAL_HCD_IRQHandler+0x3a6>

0800152c <HAL_HCD_Start>:
{
 800152c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800152e:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001532:	2b01      	cmp	r3, #1
{
 8001534:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001536:	d00c      	beq.n	8001552 <HAL_HCD_Start+0x26>
 8001538:	2101      	movs	r1, #1
 800153a:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800153e:	6800      	ldr	r0, [r0, #0]
 8001540:	f000 fc78 	bl	8001e34 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	f000 fb0d 	bl	8001b64 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800154a:	2000      	movs	r0, #0
 800154c:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001550:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001552:	2002      	movs	r0, #2
 8001554:	e7fc      	b.n	8001550 <HAL_HCD_Start+0x24>

08001556 <HAL_HCD_Stop>:
{
 8001556:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8001558:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800155c:	2b01      	cmp	r3, #1
{
 800155e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001560:	d009      	beq.n	8001576 <HAL_HCD_Stop+0x20>
 8001562:	2301      	movs	r3, #1
 8001564:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001568:	6800      	ldr	r0, [r0, #0]
 800156a:	f000 fe38 	bl	80021de <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800156e:	2000      	movs	r0, #0
 8001570:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001574:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001576:	2002      	movs	r0, #2
 8001578:	e7fc      	b.n	8001574 <HAL_HCD_Stop+0x1e>

0800157a <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800157a:	6800      	ldr	r0, [r0, #0]
 800157c:	f000 bc3c 	b.w	8001df8 <USB_ResetPort>

08001580 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001580:	232c      	movs	r3, #44	; 0x2c
 8001582:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001586:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 800158a:	4770      	bx	lr

0800158c <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800158c:	232c      	movs	r3, #44	; 0x2c
 800158e:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001592:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8001594:	4770      	bx	lr

08001596 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001596:	6800      	ldr	r0, [r0, #0]
 8001598:	f000 bc77 	b.w	8001e8a <USB_GetCurrentFrame>

0800159c <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800159c:	6800      	ldr	r0, [r0, #0]
 800159e:	f000 bc69 	b.w	8001e74 <USB_GetHostSpeed>
	...

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a8:	4604      	mov	r4, r0
 80015aa:	b340      	cbz	r0, 80015fe <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	07dd      	lsls	r5, r3, #31
 80015b0:	d410      	bmi.n	80015d4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	0798      	lsls	r0, r3, #30
 80015b6:	d45e      	bmi.n	8001676 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	071a      	lsls	r2, r3, #28
 80015bc:	f100 80a0 	bmi.w	8001700 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	075b      	lsls	r3, r3, #29
 80015c4:	f100 80c0 	bmi.w	8001748 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	69a0      	ldr	r0, [r4, #24]
 80015ca:	2800      	cmp	r0, #0
 80015cc:	f040 8128 	bne.w	8001820 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2000      	movs	r0, #0
 80015d2:	e02b      	b.n	800162c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d4:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	f002 020c 	and.w	r2, r2, #12
 80015dc:	2a04      	cmp	r2, #4
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	2a08      	cmp	r2, #8
 80015e8:	d10b      	bne.n	8001602 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	0251      	lsls	r1, r2, #9
 80015ee:	d508      	bpl.n	8001602 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	039a      	lsls	r2, r3, #14
 80015f6:	d5dc      	bpl.n	80015b2 <HAL_RCC_OscConfig+0xe>
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1d9      	bne.n	80015b2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	6862      	ldr	r2, [r4, #4]
 8001604:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001608:	d113      	bne.n	8001632 <HAL_RCC_OscConfig+0x8e>
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001612:	f7ff fa41 	bl	8000a98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4e7f      	ldr	r6, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8001618:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	6833      	ldr	r3, [r6, #0]
 800161c:	039b      	lsls	r3, r3, #14
 800161e:	d4c8      	bmi.n	80015b2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fa3a 	bl	8000a98 <HAL_GetTick>
 8001624:	1b40      	subs	r0, r0, r5
 8001626:	2864      	cmp	r0, #100	; 0x64
 8001628:	d9f7      	bls.n	800161a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800162a:	2003      	movs	r0, #3
}
 800162c:	b002      	add	sp, #8
 800162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001632:	4d78      	ldr	r5, [pc, #480]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 8001634:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0xa8>
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	602b      	str	r3, [r5, #0]
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164a:	e7e2      	b.n	8001612 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001658:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165a:	2a00      	cmp	r2, #0
 800165c:	d1d9      	bne.n	8001612 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800165e:	f7ff fa1b 	bl	8000a98 <HAL_GetTick>
 8001662:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	039f      	lsls	r7, r3, #14
 8001668:	d5a3      	bpl.n	80015b2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166a:	f7ff fa15 	bl	8000a98 <HAL_GetTick>
 800166e:	1b80      	subs	r0, r0, r6
 8001670:	2864      	cmp	r0, #100	; 0x64
 8001672:	d9f7      	bls.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001674:	e7d9      	b.n	800162a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	f012 0f0c 	tst.w	r2, #12
 800167e:	d007      	beq.n	8001690 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001686:	2a08      	cmp	r2, #8
 8001688:	d111      	bne.n	80016ae <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	025e      	lsls	r6, r3, #9
 800168e:	d40e      	bmi.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	4a60      	ldr	r2, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	079d      	lsls	r5, r3, #30
 8001696:	d502      	bpl.n	800169e <HAL_RCC_OscConfig+0xfa>
 8001698:	68e3      	ldr	r3, [r4, #12]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d1af      	bne.n	80015fe <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	6921      	ldr	r1, [r4, #16]
 80016a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016aa:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ac:	e784      	b.n	80015b8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ae:	68e2      	ldr	r2, [r4, #12]
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80016b2:	b1b2      	cbz	r2, 80016e2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016b8:	f7ff f9ee 	bl	8000a98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4d55      	ldr	r5, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80016be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	0798      	lsls	r0, r3, #30
 80016c4:	d507      	bpl.n	80016d6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	682b      	ldr	r3, [r5, #0]
 80016c8:	6922      	ldr	r2, [r4, #16]
 80016ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016d2:	602b      	str	r3, [r5, #0]
 80016d4:	e770      	b.n	80015b8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff f9df 	bl	8000a98 <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	2802      	cmp	r0, #2
 80016de:	d9ef      	bls.n	80016c0 <HAL_RCC_OscConfig+0x11c>
 80016e0:	e7a3      	b.n	800162a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80016e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016e4:	f7ff f9d8 	bl	8000a98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e8:	4e4a      	ldr	r6, [pc, #296]	; (8001814 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80016ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ec:	6833      	ldr	r3, [r6, #0]
 80016ee:	0799      	lsls	r1, r3, #30
 80016f0:	f57f af62 	bpl.w	80015b8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff f9d0 	bl	8000a98 <HAL_GetTick>
 80016f8:	1b40      	subs	r0, r0, r5
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d9f6      	bls.n	80016ec <HAL_RCC_OscConfig+0x148>
 80016fe:	e794      	b.n	800162a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001700:	6962      	ldr	r2, [r4, #20]
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 8001704:	b182      	cbz	r2, 8001728 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001706:	2201      	movs	r2, #1
 8001708:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800170c:	f7ff f9c4 	bl	8000a98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001710:	4e40      	ldr	r6, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001712:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001714:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001716:	079f      	lsls	r7, r3, #30
 8001718:	f53f af52 	bmi.w	80015c0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff f9bc 	bl	8000a98 <HAL_GetTick>
 8001720:	1b40      	subs	r0, r0, r5
 8001722:	2802      	cmp	r0, #2
 8001724:	d9f6      	bls.n	8001714 <HAL_RCC_OscConfig+0x170>
 8001726:	e780      	b.n	800162a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8001728:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800172c:	f7ff f9b4 	bl	8000a98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001730:	4e38      	ldr	r6, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001732:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001736:	0798      	lsls	r0, r3, #30
 8001738:	f57f af42 	bpl.w	80015c0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff f9ac 	bl	8000a98 <HAL_GetTick>
 8001740:	1b40      	subs	r0, r0, r5
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x190>
 8001746:	e770      	b.n	800162a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800174a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001750:	d128      	bne.n	80017a4 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	9201      	str	r2, [sp, #4]
 8001754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001766:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4d2c      	ldr	r5, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x278>)
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	05d9      	lsls	r1, r3, #23
 800176e:	d51b      	bpl.n	80017a8 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	68a3      	ldr	r3, [r4, #8]
 8001772:	4d28      	ldr	r5, [pc, #160]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 8001774:	2b01      	cmp	r3, #1
 8001776:	d127      	bne.n	80017c8 <HAL_RCC_OscConfig+0x224>
 8001778:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001780:	f7ff f98a 	bl	8000a98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	4e23      	ldr	r6, [pc, #140]	; (8001814 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8001786:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800178e:	079b      	lsls	r3, r3, #30
 8001790:	d539      	bpl.n	8001806 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001792:	2f00      	cmp	r7, #0
 8001794:	f43f af18 	beq.w	80015c8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800179a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	e711      	b.n	80015c8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80017a4:	2700      	movs	r7, #0
 80017a6:	e7df      	b.n	8001768 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80017b0:	f7ff f972 	bl	8000a98 <HAL_GetTick>
 80017b4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	05da      	lsls	r2, r3, #23
 80017ba:	d4d9      	bmi.n	8001770 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff f96c 	bl	8000a98 <HAL_GetTick>
 80017c0:	1b80      	subs	r0, r0, r6
 80017c2:	2802      	cmp	r0, #2
 80017c4:	d9f7      	bls.n	80017b6 <HAL_RCC_OscConfig+0x212>
 80017c6:	e730      	b.n	800162a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d104      	bne.n	80017d6 <HAL_RCC_OscConfig+0x232>
 80017cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	672b      	str	r3, [r5, #112]	; 0x70
 80017d4:	e7d0      	b.n	8001778 <HAL_RCC_OscConfig+0x1d4>
 80017d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	672a      	str	r2, [r5, #112]	; 0x70
 80017de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017e0:	f022 0204 	bic.w	r2, r2, #4
 80017e4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ca      	bne.n	8001780 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80017ea:	f7ff f955 	bl	8000a98 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017f6:	0798      	lsls	r0, r3, #30
 80017f8:	d5cb      	bpl.n	8001792 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff f94d 	bl	8000a98 <HAL_GetTick>
 80017fe:	1b80      	subs	r0, r0, r6
 8001800:	4540      	cmp	r0, r8
 8001802:	d9f7      	bls.n	80017f4 <HAL_RCC_OscConfig+0x250>
 8001804:	e711      	b.n	800162a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f947 	bl	8000a98 <HAL_GetTick>
 800180a:	1b40      	subs	r0, r0, r5
 800180c:	4540      	cmp	r0, r8
 800180e:	d9bd      	bls.n	800178c <HAL_RCC_OscConfig+0x1e8>
 8001810:	e70b      	b.n	800162a <HAL_RCC_OscConfig+0x86>
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001820:	4d36      	ldr	r5, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x358>)
 8001822:	68ab      	ldr	r3, [r5, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d03d      	beq.n	80018a8 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x35c>)
 800182e:	2200      	movs	r2, #0
 8001830:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001832:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	d12b      	bne.n	800188e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001836:	f7ff f92f 	bl	8000a98 <HAL_GetTick>
 800183a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	0199      	lsls	r1, r3, #6
 8001840:	d41f      	bmi.n	8001882 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001842:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001846:	4313      	orrs	r3, r2
 8001848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800184a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800184e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001850:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001854:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800185e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4d26      	ldr	r5, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8001864:	2201      	movs	r2, #1
 8001866:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001868:	f7ff f916 	bl	8000a98 <HAL_GetTick>
 800186c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	019a      	lsls	r2, r3, #6
 8001872:	f53f aead 	bmi.w	80015d0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff f90f 	bl	8000a98 <HAL_GetTick>
 800187a:	1b00      	subs	r0, r0, r4
 800187c:	2802      	cmp	r0, #2
 800187e:	d9f6      	bls.n	800186e <HAL_RCC_OscConfig+0x2ca>
 8001880:	e6d3      	b.n	800162a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff f909 	bl	8000a98 <HAL_GetTick>
 8001886:	1b80      	subs	r0, r0, r6
 8001888:	2802      	cmp	r0, #2
 800188a:	d9d7      	bls.n	800183c <HAL_RCC_OscConfig+0x298>
 800188c:	e6cd      	b.n	800162a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800188e:	f7ff f903 	bl	8000a98 <HAL_GetTick>
 8001892:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	019b      	lsls	r3, r3, #6
 8001898:	f57f ae9a 	bpl.w	80015d0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f8fc 	bl	8000a98 <HAL_GetTick>
 80018a0:	1b00      	subs	r0, r0, r4
 80018a2:	2802      	cmp	r0, #2
 80018a4:	d9f6      	bls.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 80018a6:	e6c0      	b.n	800162a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	2801      	cmp	r0, #1
 80018aa:	f43f aebf 	beq.w	800162c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80018ae:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	4291      	cmp	r1, r2
 80018b8:	f47f aea1 	bne.w	80015fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	428a      	cmp	r2, r1
 80018c4:	f47f ae9b 	bne.w	80015fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80018ce:	401a      	ands	r2, r3
 80018d0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80018d4:	f47f ae93 	bne.w	80015fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018da:	0852      	lsrs	r2, r2, #1
 80018dc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018e0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80018e6:	f47f ae8a 	bne.w	80015fe <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80018f4:	f43f ae6c 	beq.w	80015d0 <HAL_RCC_OscConfig+0x2c>
 80018f8:	e681      	b.n	80015fe <HAL_RCC_OscConfig+0x5a>
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	42470000 	.word	0x42470000

08001904 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4913      	ldr	r1, [pc, #76]	; (8001954 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001906:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	688b      	ldr	r3, [r1, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b04      	cmp	r3, #4
 8001910:	d01c      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x48>
 8001912:	2b08      	cmp	r3, #8
 8001914:	d11c      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001916:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001918:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	bf14      	ite	ne
 8001922:	480d      	ldrne	r0, [pc, #52]	; (8001958 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001924:	480d      	ldreq	r0, [pc, #52]	; (800195c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800192a:	bf18      	it	ne
 800192c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	fba1 0100 	umull	r0, r1, r1, r0
 8001936:	f7fe fc47 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_GetSysClockFreq+0x50>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001946:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800194a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <HAL_RCC_GetSysClockFreq+0x54>)
 800194e:	e7fc      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001952:	e7fa      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x46>
 8001954:	40023800 	.word	0x40023800
 8001958:	017d7840 	.word	0x017d7840
 800195c:	00f42400 	.word	0x00f42400

08001960 <HAL_RCC_ClockConfig>:
{
 8001960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001966:	4604      	mov	r4, r0
 8001968:	b910      	cbnz	r0, 8001970 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
}
 800196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_RCC_ClockConfig+0x124>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	428a      	cmp	r2, r1
 800197a:	d328      	bcc.n	80019ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	0797      	lsls	r7, r2, #30
 8001980:	d42d      	bmi.n	80019de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	07d0      	lsls	r0, r2, #31
 8001984:	d441      	bmi.n	8001a0a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001986:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <HAL_RCC_ClockConfig+0x124>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f002 0207 	and.w	r2, r2, #7
 800198e:	42aa      	cmp	r2, r5
 8001990:	d866      	bhi.n	8001a60 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	0751      	lsls	r1, r2, #29
 8001996:	d46c      	bmi.n	8001a72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001998:	0713      	lsls	r3, r2, #28
 800199a:	d507      	bpl.n	80019ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199c:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 800199e:	6921      	ldr	r1, [r4, #16]
 80019a0:	6893      	ldr	r3, [r2, #8]
 80019a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ac:	f7ff ffaa 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 80019b2:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_RCC_ClockConfig+0x12c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	40d8      	lsrs	r0, r3
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_ClockConfig+0x130>)
 80019c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_ClockConfig+0x134>)
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f7ff f823 	bl	8000a10 <HAL_InitTick>
  return HAL_OK;
 80019ca:	2000      	movs	r0, #0
 80019cc:	e7ce      	b.n	800196c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	428b      	cmp	r3, r1
 80019da:	d1c6      	bne.n	800196a <HAL_RCC_ClockConfig+0xa>
 80019dc:	e7ce      	b.n	800197c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 80019e0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	bf1e      	ittt	ne
 80019e6:	6899      	ldrne	r1, [r3, #8]
 80019e8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80019ec:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	bf42      	ittt	mi
 80019f2:	6899      	ldrmi	r1, [r3, #8]
 80019f4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80019f8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fa:	4923      	ldr	r1, [pc, #140]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 80019fc:	68a0      	ldr	r0, [r4, #8]
 80019fe:	688b      	ldr	r3, [r1, #8]
 8001a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a04:	4303      	orrs	r3, r0
 8001a06:	608b      	str	r3, [r1, #8]
 8001a08:	e7bb      	b.n	8001982 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	6862      	ldr	r2, [r4, #4]
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 8001a0e:	2a01      	cmp	r2, #1
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	d0a7      	beq.n	800196a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4e1b      	ldr	r6, [pc, #108]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 8001a1c:	68b3      	ldr	r3, [r6, #8]
 8001a1e:	f023 0303 	bic.w	r3, r3, #3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a26:	f7ff f837 	bl	8000a98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	68b3      	ldr	r3, [r6, #8]
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a3c:	d0a3      	beq.n	8001986 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7ff f82b 	bl	8000a98 <HAL_GetTick>
 8001a42:	1bc0      	subs	r0, r0, r7
 8001a44:	4540      	cmp	r0, r8
 8001a46:	d9f3      	bls.n	8001a30 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001a48:	2003      	movs	r0, #3
 8001a4a:	e78f      	b.n	800196c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4c:	1e91      	subs	r1, r2, #2
 8001a4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	d802      	bhi.n	8001a5a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a58:	e7de      	b.n	8001a18 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	f013 0f02 	tst.w	r3, #2
 8001a5e:	e7db      	b.n	8001a18 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a60:	b2ea      	uxtb	r2, r5
 8001a62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	42ab      	cmp	r3, r5
 8001a6c:	f47f af7d 	bne.w	800196a <HAL_RCC_ClockConfig+0xa>
 8001a70:	e78f      	b.n	8001992 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a72:	4905      	ldr	r1, [pc, #20]	; (8001a88 <HAL_RCC_ClockConfig+0x128>)
 8001a74:	68e0      	ldr	r0, [r4, #12]
 8001a76:	688b      	ldr	r3, [r1, #8]
 8001a78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	608b      	str	r3, [r1, #8]
 8001a80:	e78a      	b.n	8001998 <HAL_RCC_ClockConfig+0x38>
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08004fcc 	.word	0x08004fcc
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008

08001a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001a98:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001a9a:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8001a9c:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8001a9e:	9301      	str	r3, [sp, #4]
    count++;
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d816      	bhi.n	8001ada <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001aac:	6903      	ldr	r3, [r0, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	daf6      	bge.n	8001aa0 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ab6:	6903      	ldr	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <USB_CoreReset+0x48>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6103      	str	r3, [r0, #16]
    count++;
 8001ac0:	9b01      	ldr	r3, [sp, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d806      	bhi.n	8001ada <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001acc:	6903      	ldr	r3, [r0, #16]
 8001ace:	f013 0301 	ands.w	r3, r3, #1
 8001ad2:	d1f5      	bne.n	8001ac0 <USB_CoreReset+0x28>

  return HAL_OK;
 8001ad4:	4618      	mov	r0, r3
}
 8001ad6:	b002      	add	sp, #8
 8001ad8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ada:	2003      	movs	r0, #3
 8001adc:	e7fb      	b.n	8001ad6 <USB_CoreReset+0x3e>
 8001ade:	bf00      	nop
 8001ae0:	00030d40 	.word	0x00030d40

08001ae4 <USB_CoreInit>:
{
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	b538      	push	{r3, r4, r5, lr}
 8001ae8:	ad05      	add	r5, sp, #20
 8001aea:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001af0:	2b01      	cmp	r3, #1
{
 8001af2:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001af4:	d125      	bne.n	8001b42 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afc:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001afe:	68c3      	ldr	r3, [r0, #12]
 8001b00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b08:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001b0a:	68c3      	ldr	r3, [r0, #12]
 8001b0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b10:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001b14:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001b16:	bf02      	ittt	eq
 8001b18:	68c3      	ldreq	r3, [r0, #12]
 8001b1a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001b1e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b20:	f7ff ffba 	bl	8001a98 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001b24:	9b08      	ldr	r3, [sp, #32]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d107      	bne.n	8001b3a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b2a:	68a3      	ldr	r3, [r4, #8]
 8001b2c:	f043 0306 	orr.w	r3, r3, #6
 8001b30:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b32:	68a3      	ldr	r3, [r4, #8]
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	60a3      	str	r3, [r4, #8]
}
 8001b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b3e:	b004      	add	sp, #16
 8001b40:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001b42:	68c3      	ldr	r3, [r0, #12]
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001b4a:	f7ff ffa5 	bl	8001a98 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b50:	b923      	cbnz	r3, 8001b5c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b58:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b5a:	e7e3      	b.n	8001b24 <USB_CoreInit+0x40>
 8001b5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	e7f9      	b.n	8001b58 <USB_CoreInit+0x74>

08001b64 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001b64:	6883      	ldr	r3, [r0, #8]
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6083      	str	r3, [r0, #8]
}
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	4770      	bx	lr

08001b70 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b70:	6883      	ldr	r3, [r0, #8]
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6083      	str	r3, [r0, #8]
}
 8001b78:	2000      	movs	r0, #0
 8001b7a:	4770      	bx	lr

08001b7c <USB_SetCurrentMode>:
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b7e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b80:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b82:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8001b86:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b88:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b8a:	d110      	bne.n	8001bae <USB_SetCurrentMode+0x32>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001b8c:	68c3      	ldr	r3, [r0, #12]
 8001b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b92:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8001b94:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f7fe ff84 	bl	8000aa4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8001b9c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8001b9e:	07d9      	lsls	r1, r3, #31
      ms++;
 8001ba0:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8001ba4:	d415      	bmi.n	8001bd2 <USB_SetCurrentMode+0x56>
 8001ba6:	2c32      	cmp	r4, #50	; 0x32
 8001ba8:	d1f5      	bne.n	8001b96 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
}
 8001bac:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8001bae:	2900      	cmp	r1, #0
 8001bb0:	d1fb      	bne.n	8001baa <USB_SetCurrentMode+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001bb2:	68c3      	ldr	r3, [r0, #12]
 8001bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bb8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8001bba:	460c      	mov	r4, r1
      HAL_Delay(1U);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7fe ff71 	bl	8000aa4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8001bc2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8001bc4:	07da      	lsls	r2, r3, #31
      ms++;
 8001bc6:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8001bca:	d502      	bpl.n	8001bd2 <USB_SetCurrentMode+0x56>
 8001bcc:	2c32      	cmp	r4, #50	; 0x32
 8001bce:	d1f5      	bne.n	8001bbc <USB_SetCurrentMode+0x40>
 8001bd0:	e7eb      	b.n	8001baa <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 8001bd2:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8001bd6:	4258      	negs	r0, r3
 8001bd8:	4158      	adcs	r0, r3
 8001bda:	e7e7      	b.n	8001bac <USB_SetCurrentMode+0x30>

08001bdc <USB_FlushTxFifo>:
{
 8001bdc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001bde:	2300      	movs	r3, #0
    if (count > 200000U)
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8001be2:	9301      	str	r3, [sp, #4]
    count++;
 8001be4:	9b01      	ldr	r3, [sp, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d816      	bhi.n	8001c1e <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001bf0:	6903      	ldr	r3, [r0, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	daf6      	bge.n	8001be4 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001bf6:	0189      	lsls	r1, r1, #6
  count = 0U;
 8001bf8:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001bfa:	f041 0120 	orr.w	r1, r1, #32
    if (count > 200000U)
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <USB_FlushTxFifo+0x48>)
  count = 0U;
 8001c00:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001c02:	6101      	str	r1, [r0, #16]
    count++;
 8001c04:	9b01      	ldr	r3, [sp, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d806      	bhi.n	8001c1e <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001c10:	6903      	ldr	r3, [r0, #16]
 8001c12:	f013 0320 	ands.w	r3, r3, #32
 8001c16:	d1f5      	bne.n	8001c04 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8001c18:	4618      	mov	r0, r3
}
 8001c1a:	b002      	add	sp, #8
 8001c1c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001c1e:	2003      	movs	r0, #3
 8001c20:	e7fb      	b.n	8001c1a <USB_FlushTxFifo+0x3e>
 8001c22:	bf00      	nop
 8001c24:	00030d40 	.word	0x00030d40

08001c28 <USB_FlushRxFifo>:
{
 8001c28:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001c2a:	2300      	movs	r3, #0
    if (count > 200000U)
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8001c2e:	9301      	str	r3, [sp, #4]
    count++;
 8001c30:	9b01      	ldr	r3, [sp, #4]
 8001c32:	3301      	adds	r3, #1
 8001c34:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d814      	bhi.n	8001c66 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001c3c:	6903      	ldr	r3, [r0, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	daf6      	bge.n	8001c30 <USB_FlushRxFifo+0x8>
  count = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <USB_FlushRxFifo+0x44>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001c48:	2310      	movs	r3, #16
 8001c4a:	6103      	str	r3, [r0, #16]
    count++;
 8001c4c:	9b01      	ldr	r3, [sp, #4]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d806      	bhi.n	8001c66 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001c58:	6903      	ldr	r3, [r0, #16]
 8001c5a:	f013 0310 	ands.w	r3, r3, #16
 8001c5e:	d1f5      	bne.n	8001c4c <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8001c60:	4618      	mov	r0, r3
}
 8001c62:	b002      	add	sp, #8
 8001c64:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001c66:	2003      	movs	r0, #3
 8001c68:	e7fb      	b.n	8001c62 <USB_FlushRxFifo+0x3a>
 8001c6a:	bf00      	nop
 8001c6c:	00030d40 	.word	0x00030d40

08001c70 <USB_WritePacket>:
{
 8001c70:	b510      	push	{r4, lr}
 8001c72:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8001c76:	b944      	cbnz	r4, 8001c8a <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8001c78:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001c7a:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8001c7c:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001c7e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8001c82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8001c86:	428b      	cmp	r3, r1
 8001c88:	d101      	bne.n	8001c8e <USB_WritePacket+0x1e>
}
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001c8e:	f851 2b04 	ldr.w	r2, [r1], #4
 8001c92:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8001c94:	e7f7      	b.n	8001c86 <USB_WritePacket+0x16>

08001c96 <USB_ReadPacket>:
{
 8001c96:	4603      	mov	r3, r0
 8001c98:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 8001c9a:	0890      	lsrs	r0, r2, #2
  for (i = 0U; i < count32b; i++)
 8001c9c:	2400      	movs	r4, #0
  uint16_t remaining_bytes = len % 4U;
 8001c9e:	f002 0203 	and.w	r2, r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001ca2:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8001ca6:	4284      	cmp	r4, r0
 8001ca8:	d310      	bcc.n	8001ccc <USB_ReadPacket+0x36>
 8001caa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 8001cae:	b162      	cbz	r2, 8001cca <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8001cb6:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001cb8:	00d9      	lsls	r1, r3, #3
 8001cba:	fa24 f101 	lsr.w	r1, r4, r1
 8001cbe:	54c1      	strb	r1, [r0, r3]
      i++;
 8001cc0:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	428a      	cmp	r2, r1
 8001cc6:	d1f7      	bne.n	8001cb8 <USB_ReadPacket+0x22>
      pDest++;
 8001cc8:	4410      	add	r0, r2
}
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001ccc:	682e      	ldr	r6, [r5, #0]
 8001cce:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 8001cd2:	3401      	adds	r4, #1
 8001cd4:	e7e7      	b.n	8001ca6 <USB_ReadPacket+0x10>

08001cd6 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8001cd6:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8001cd8:	6980      	ldr	r0, [r0, #24]
}
 8001cda:	4010      	ands	r0, r2
 8001cdc:	4770      	bx	lr

08001cde <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8001cde:	6940      	ldr	r0, [r0, #20]
}
 8001ce0:	f000 0001 	and.w	r0, r0, #1
 8001ce4:	4770      	bx	lr
	...

08001ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ce8:	b084      	sub	sp, #16
 8001cea:	b570      	push	{r4, r5, r6, lr}
 8001cec:	4604      	mov	r4, r0
 8001cee:	a805      	add	r0, sp, #20
 8001cf0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001cfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d00:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001d02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d04:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d08:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001d12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d14:	05da      	lsls	r2, r3, #23
 8001d16:	d53b      	bpl.n	8001d90 <USB_HostInit+0xa8>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8001d18:	9b07      	ldr	r3, [sp, #28]
 8001d1a:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001d1c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8001d20:	d138      	bne.n	8001d94 <USB_HostInit+0xac>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001d22:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001d26:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ff55 	bl	8001bdc <USB_FlushTxFifo>
 8001d32:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff ff77 	bl	8001c28 <USB_FlushRxFifo>
 8001d3a:	4308      	orrs	r0, r1
 8001d3c:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8001d3e:	3800      	subs	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	9e06      	ldr	r6, [sp, #24]
    ret = HAL_ERROR;
 8001d46:	bf18      	it	ne
 8001d48:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 8001d4a:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 8001d4e:	461d      	mov	r5, r3
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	429e      	cmp	r6, r3
 8001d56:	d120      	bne.n	8001d9a <USB_HostInit+0xb2>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8001d58:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001d5a:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	d520      	bpl.n	8001da4 <USB_HostInit+0xbc>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8001d68:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <USB_HostInit+0xcc>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001d70:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8001d74:	9b08      	ldr	r3, [sp, #32]
 8001d76:	b91b      	cbnz	r3, 8001d80 <USB_HostInit+0x98>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001d78:	69a3      	ldr	r3, [r4, #24]
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8001d80:	69a2      	ldr	r2, [r4, #24]
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <USB_HostInit+0xd0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8001d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001d90:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	e7c5      	b.n	8001d26 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001d9a:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001d9c:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8001d9e:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001da0:	3220      	adds	r2, #32
 8001da2:	e7d7      	b.n	8001d54 <USB_HostInit+0x6c>
    USBx->GRXFSIZ  = 0x80U;
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8001da8:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8001dac:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001dae:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <USB_HostInit+0xd4>)
 8001db0:	e7de      	b.n	8001d70 <USB_HostInit+0x88>
 8001db2:	bf00      	nop
 8001db4:	00e00300 	.word	0x00e00300
 8001db8:	a3200008 	.word	0xa3200008
 8001dbc:	004000e0 	.word	0x004000e0

08001dc0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001dc0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8001dc4:	f023 0303 	bic.w	r3, r3, #3
{
 8001dc8:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001dca:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001dce:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8001dd2:	f001 0303 	and.w	r3, r1, #3
 8001dd6:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8001dd8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001dda:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001dde:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8001de2:	d104      	bne.n	8001dee <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8001de4:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8001de8:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8001dea:	2000      	movs	r0, #0
 8001dec:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8001dee:	2902      	cmp	r1, #2
 8001df0:	d1fb      	bne.n	8001dea <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8001df2:	f241 7370 	movw	r3, #6000	; 0x1770
 8001df6:	e7f7      	b.n	8001de8 <USB_InitFSLSPClkSel+0x28>

08001df8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8001df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001dfe:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001e02:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001e04:	9b01      	ldr	r3, [sp, #4]
 8001e06:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e0a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001e12:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8001e14:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f7fe fe43 	bl	8000aa4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e24:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f7fe fe3b 	bl	8000aa4 <HAL_Delay>

  return HAL_OK;
}
 8001e2e:	4628      	mov	r0, r5
 8001e30:	b003      	add	sp, #12
 8001e32:	bd30      	pop	{r4, r5, pc}

08001e34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8001e34:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001e3a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001e3e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e46:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8001e48:	9b01      	ldr	r3, [sp, #4]
 8001e4a:	04da      	lsls	r2, r3, #19
 8001e4c:	d406      	bmi.n	8001e5c <USB_DriveVbus+0x28>
 8001e4e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8001e50:	bf02      	ittt	eq
 8001e52:	9b01      	ldreq	r3, [sp, #4]
 8001e54:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001e58:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	04db      	lsls	r3, r3, #19
 8001e60:	d505      	bpl.n	8001e6e <USB_DriveVbus+0x3a>
 8001e62:	b921      	cbnz	r1, 8001e6e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8001e64:	9b01      	ldr	r3, [sp, #4]
 8001e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e6a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8001e6e:	2000      	movs	r0, #0
 8001e70:	b002      	add	sp, #8
 8001e72:	4770      	bx	lr

08001e74 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8001e74:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001e7a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001e7e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8001e80:	9801      	ldr	r0, [sp, #4]
}
 8001e82:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8001e86:	b002      	add	sp, #8
 8001e88:	4770      	bx	lr

08001e8a <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8001e8a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001e8e:	6880      	ldr	r0, [r0, #8]
}
 8001e90:	b280      	uxth	r0, r0
 8001e92:	4770      	bx	lr

08001e94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8001e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001e98:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8001e9c:	f507 6ca0 	add.w	ip, r7, #1280	; 0x500
{
 8001ea0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8001ea4:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	f8cc 3008 	str.w	r3, [ip, #8]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8001eae:	fa4f fe82 	sxtb.w	lr, r2
  switch (ep_type)
 8001eb2:	2e03      	cmp	r6, #3
 8001eb4:	d874      	bhi.n	8001fa0 <USB_HC_Init+0x10c>
 8001eb6:	e8df f006 	tbb	[pc, r6]
 8001eba:	6702      	.short	0x6702
 8001ebc:	5f02      	.short	0x5f02
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001ebe:	f240 439d 	movw	r3, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8001ec2:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001ec6:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001eca:	da04      	bge.n	8001ed6 <USB_HC_Init+0x42>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8001ecc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	e04d      	b.n	8001f72 <USB_HC_Init+0xde>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8001ed6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001ed8:	05db      	lsls	r3, r3, #23
 8001eda:	d446      	bmi.n	8001f6a <USB_HC_Init+0xd6>
  HAL_StatusTypeDef ret = HAL_OK;
 8001edc:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8001ede:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	f8cc 300c 	str.w	r3, [ip, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8001eea:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 8001eee:	f001 030f 	and.w	r3, r1, #15
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4099      	lsls	r1, r3
 8001ef6:	ea41 0108 	orr.w	r1, r1, r8
 8001efa:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001efe:	6983      	ldr	r3, [r0, #24]
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8001f04:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8001f08:	6183      	str	r3, [r0, #24]
    HCcharEpDir = 0U;
 8001f0a:	bfb4      	ite	lt
 8001f0c:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
 8001f10:	2100      	movge	r1, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8001f12:	f7ff ffaf 	bl	8001e74 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8001f16:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d142      	bne.n	8001fa4 <USB_HC_Init+0x110>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	bf0c      	ite	eq
 8001f22:	2000      	moveq	r0, #0
 8001f24:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8001f28:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001f2a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8001f2e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001f32:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8001f36:	02d2      	lsls	r2, r2, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8001f38:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8001f3a:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	04b2      	lsls	r2, r6, #18
 8001f42:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001f46:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	4303      	orrs	r3, r0

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8001f4c:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8001f50:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8001f54:	2e01      	cmp	r6, #1
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f56:	bf02      	ittt	eq
 8001f58:	f8d7 3500 	ldreq.w	r3, [r7, #1280]	; 0x500
 8001f5c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001f60:	f8c7 3500 	streq.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8001f64:	4628      	mov	r0, r5
 8001f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8001f6a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f72:	f8cc 300c 	str.w	r3, [ip, #12]
 8001f76:	e7b1      	b.n	8001edc <USB_HC_Init+0x48>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001f78:	f240 639d 	movw	r3, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8001f7c:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001f80:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001f84:	daaa      	bge.n	8001edc <USB_HC_Init+0x48>
 8001f86:	e7a1      	b.n	8001ecc <USB_HC_Init+0x38>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001f88:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8001f8c:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001f90:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001f94:	daa2      	bge.n	8001edc <USB_HC_Init+0x48>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8001f96:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001f9a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8001f9e:	e7e8      	b.n	8001f72 <USB_HC_Init+0xde>
  switch (ep_type)
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	e79c      	b.n	8001ede <USB_HC_Init+0x4a>
    HCcharLowSpeed = 0U;
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e7bf      	b.n	8001f28 <USB_HC_Init+0x94>

08001fa8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001fa8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001fac:	6940      	ldr	r0, [r0, #20]
}
 8001fae:	b280      	uxth	r0, r0
 8001fb0:	4770      	bx	lr

08001fb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001fb6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 8001fba:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001fbc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001fc0:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001fc4:	6885      	ldr	r5, [r0, #8]
 8001fc6:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001fc8:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8001fcc:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001fd0:	d501      	bpl.n	8001fd6 <USB_HC_Halt+0x24>
 8001fd2:	2c00      	cmp	r4, #0
 8001fd4:	da25      	bge.n	8002022 <USB_HC_Halt+0x70>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001fd6:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001fda:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8001fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fe2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001fe6:	d11f      	bne.n	8002028 <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001fe8:	6883      	ldr	r3, [r0, #8]
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	d419      	bmi.n	8002022 <USB_HC_Halt+0x70>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001fee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ff0:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001ff4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001ff8:	d132      	bne.n	8002060 <USB_HC_Halt+0xae>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002002:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800200a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 800200e:	9b01      	ldr	r3, [sp, #4]
 8002010:	3301      	adds	r3, #1
 8002012:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8002014:	9b01      	ldr	r3, [sp, #4]
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201a:	d802      	bhi.n	8002022 <USB_HC_Halt+0x70>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800201c:	6813      	ldr	r3, [r2, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	dbf5      	blt.n	800200e <USB_HC_Halt+0x5c>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002022:	2000      	movs	r0, #0
 8002024:	b003      	add	sp, #12
 8002026:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002028:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800202c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002030:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002034:	d114      	bne.n	8002060 <USB_HC_Halt+0xae>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800203a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800203e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002046:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	3301      	adds	r3, #1
 800204e:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8002050:	9b01      	ldr	r3, [sp, #4]
 8002052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002056:	d8e4      	bhi.n	8002022 <USB_HC_Halt+0x70>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dbf5      	blt.n	800204a <USB_HC_Halt+0x98>
 800205e:	e7e0      	b.n	8002022 <USB_HC_Halt+0x70>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002064:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002068:	e7db      	b.n	8002022 <USB_HC_Halt+0x70>
	...

0800206c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800206c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <USB_DoPing+0x20>)
 8002072:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002076:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800207a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800207e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002082:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002086:	2000      	movs	r0, #0
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	80080000 	.word	0x80080000

08002090 <USB_HC_StartXfer>:
{
 8002090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002094:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002096:	05db      	lsls	r3, r3, #23
{
 8002098:	4615      	mov	r5, r2
 800209a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800209c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800209e:	d50f      	bpl.n	80020c0 <USB_HC_StartXfer+0x30>
 80020a0:	790b      	ldrb	r3, [r1, #4]
 80020a2:	b96b      	cbnz	r3, 80020c0 <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80020a4:	2d01      	cmp	r5, #1
 80020a6:	d168      	bne.n	800217a <USB_HC_StartXfer+0xea>
 80020a8:	79cb      	ldrb	r3, [r1, #7]
 80020aa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80020ae:	d107      	bne.n	80020c0 <USB_HC_StartXfer+0x30>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80020b0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80020b4:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 80020b8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80020bc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 80020c0:	694b      	ldr	r3, [r1, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d065      	beq.n	8002192 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80020c6:	890e      	ldrh	r6, [r1, #8]
 80020c8:	1e58      	subs	r0, r3, #1
 80020ca:	4430      	add	r0, r6
 80020cc:	fbb0 f0f6 	udiv	r0, r0, r6
 80020d0:	b280      	uxth	r0, r0
 80020d2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80020d6:	bf28      	it	cs
 80020d8:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 80020dc:	78cf      	ldrb	r7, [r1, #3]
 80020de:	2f00      	cmp	r7, #0
 80020e0:	d059      	beq.n	8002196 <USB_HC_StartXfer+0x106>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80020e2:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 80020e6:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80020ea:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80020ee:	f8c1 8010 	str.w	r8, [r1, #16]
 80020f2:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80020f6:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80020fa:	eb04 1642 	add.w	r6, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80020fe:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8002102:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002106:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800210a:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 800210e:	b115      	cbz	r5, 8002116 <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002110:	68c8      	ldr	r0, [r1, #12]
 8002112:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002116:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800211a:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 800211e:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 8002122:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002126:	43c0      	mvns	r0, r0
 8002128:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 800212c:	0740      	lsls	r0, r0, #29
 800212e:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002132:	ea40 000e 	orr.w	r0, r0, lr
 8002136:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800213a:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 800213e:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002140:	9803      	ldr	r0, [sp, #12]
 8002142:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 8002146:	9003      	str	r0, [sp, #12]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002148:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800214c:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 800214e:	b327      	cbz	r7, 800219a <USB_HC_StartXfer+0x10a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002150:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002154:	9003      	str	r0, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002156:	9803      	ldr	r0, [sp, #12]
 8002158:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800215c:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800215e:	9803      	ldr	r0, [sp, #12]
 8002160:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002164:	ea57 0005 	orrs.w	r0, r7, r5
 8002168:	d10f      	bne.n	800218a <USB_HC_StartXfer+0xfa>
 800216a:	b173      	cbz	r3, 800218a <USB_HC_StartXfer+0xfa>
    switch (hc->ep_type)
 800216c:	79c8      	ldrb	r0, [r1, #7]
 800216e:	2803      	cmp	r0, #3
 8002170:	d821      	bhi.n	80021b6 <USB_HC_StartXfer+0x126>
 8002172:	e8df f000 	tbb	[pc, r0]
 8002176:	2815      	.short	0x2815
 8002178:	2815      	.short	0x2815
    if ((dma == 0U) && (hc->do_ping == 1U))
 800217a:	2d00      	cmp	r5, #0
 800217c:	d1a0      	bne.n	80020c0 <USB_HC_StartXfer+0x30>
 800217e:	794b      	ldrb	r3, [r1, #5]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d19d      	bne.n	80020c0 <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002184:	4611      	mov	r1, r2
 8002186:	f7ff ff71 	bl	800206c <USB_DoPing>
}
 800218a:	2000      	movs	r0, #0
 800218c:	b004      	add	sp, #16
 800218e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 8002192:	2001      	movs	r0, #1
 8002194:	e7a2      	b.n	80020dc <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 8002196:	4698      	mov	r8, r3
 8002198:	e7a7      	b.n	80020ea <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800219a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800219e:	e7d9      	b.n	8002154 <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80021a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80021a2:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80021a4:	b2ad      	uxth	r5, r5
 80021a6:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80021aa:	4285      	cmp	r5, r0
 80021ac:	d203      	bcs.n	80021b6 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80021ae:	69a0      	ldr	r0, [r4, #24]
 80021b0:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80021b4:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80021b6:	2000      	movs	r0, #0
 80021b8:	9000      	str	r0, [sp, #0]
 80021ba:	68c9      	ldr	r1, [r1, #12]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff fd56 	bl	8001c70 <USB_WritePacket>
 80021c4:	e7e1      	b.n	800218a <USB_HC_StartXfer+0xfa>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80021c6:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80021ca:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80021cc:	b2ad      	uxth	r5, r5
 80021ce:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80021d2:	4285      	cmp	r5, r0
 80021d4:	d2ef      	bcs.n	80021b6 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80021d6:	69a0      	ldr	r0, [r4, #24]
 80021d8:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80021dc:	e7ea      	b.n	80021b4 <USB_HC_StartXfer+0x124>

080021de <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80021de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80021e4:	6883      	ldr	r3, [r0, #8]
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80021ec:	2110      	movs	r1, #16
{
 80021ee:	4604      	mov	r4, r0
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80021f0:	f7ff fcf4 	bl	8001bdc <USB_FlushTxFifo>
 80021f4:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff fd16 	bl	8001c28 <USB_FlushRxFifo>
 80021fc:	4308      	orrs	r0, r1
 80021fe:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8002200:	3800      	subs	r0, #0
 8002202:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002206:	bf18      	it	ne
 8002208:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800220a:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
    ret = HAL_ERROR;
 800220e:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 8002210:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002212:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8002216:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800221a:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 800221e:	42a9      	cmp	r1, r5
 8002220:	d1f6      	bne.n	8002210 <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002222:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002228:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800222c:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 800222e:	9a01      	ldr	r2, [sp, #4]
 8002230:	3201      	adds	r2, #1
 8002232:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8002234:	9a01      	ldr	r2, [sp, #4]
 8002236:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800223a:	d802      	bhi.n	8002242 <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2a00      	cmp	r2, #0
 8002240:	dbf5      	blt.n	800222e <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 8002242:	3320      	adds	r3, #32
 8002244:	42ab      	cmp	r3, r5
 8002246:	d1ec      	bne.n	8002222 <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002250:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002252:	68a3      	ldr	r3, [r4, #8]
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 800225a:	b003      	add	sp, #12
 800225c:	bd30      	pop	{r4, r5, pc}
	...

08002260 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <disk_status+0x10>)
 8002262:	181a      	adds	r2, r3, r0
 8002264:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002268:	7b10      	ldrb	r0, [r2, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4718      	bx	r3
 8002270:	20000d20 	.word	0x20000d20

08002274 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <disk_initialize+0x1c>)
 8002276:	5c1a      	ldrb	r2, [r3, r0]
 8002278:	b942      	cbnz	r2, 800228c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800227a:	2201      	movs	r2, #1
 800227c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800227e:	181a      	adds	r2, r3, r0
 8002280:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002284:	7b10      	ldrb	r0, [r2, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4718      	bx	r3
  }
  return stat;
}
 800228c:	2000      	movs	r0, #0
 800228e:	4770      	bx	lr
 8002290:	20000d20 	.word	0x20000d20

08002294 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002294:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002296:	4c05      	ldr	r4, [pc, #20]	; (80022ac <disk_read+0x18>)
 8002298:	1825      	adds	r5, r4, r0
 800229a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800229e:	6860      	ldr	r0, [r4, #4]
 80022a0:	6884      	ldr	r4, [r0, #8]
 80022a2:	7b28      	ldrb	r0, [r5, #12]
 80022a4:	46a4      	mov	ip, r4
  return res;
}
 80022a6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80022a8:	4760      	bx	ip
 80022aa:	bf00      	nop
 80022ac:	20000d20 	.word	0x20000d20

080022b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80022b0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80022b2:	4c05      	ldr	r4, [pc, #20]	; (80022c8 <disk_write+0x18>)
 80022b4:	1825      	adds	r5, r4, r0
 80022b6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80022ba:	6860      	ldr	r0, [r4, #4]
 80022bc:	68c4      	ldr	r4, [r0, #12]
 80022be:	7b28      	ldrb	r0, [r5, #12]
 80022c0:	46a4      	mov	ip, r4
  return res;
}
 80022c2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80022c4:	4760      	bx	ip
 80022c6:	bf00      	nop
 80022c8:	20000d20 	.word	0x20000d20

080022cc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <disk_ioctl+0x18>)
{
 80022ce:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80022d0:	181c      	adds	r4, r3, r0
 80022d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80022d6:	7b20      	ldrb	r0, [r4, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80022da:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4718      	bx	r3
 80022e2:	bf00      	nop
 80022e4:	20000d20 	.word	0x20000d20

080022e8 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr

080022ec <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 80022ec:	6800      	ldr	r0, [r0, #0]
 80022ee:	4770      	bx	lr

080022f0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80022f0:	0a0b      	lsrs	r3, r1, #8
 80022f2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80022f4:	7043      	strb	r3, [r0, #1]
 80022f6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80022f8:	0e09      	lsrs	r1, r1, #24
 80022fa:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80022fc:	70c1      	strb	r1, [r0, #3]
}
 80022fe:	4770      	bx	lr

08002300 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8002300:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8002302:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002306:	4290      	cmp	r0, r2
 8002308:	d1fb      	bne.n	8002302 <mem_set+0x2>
}
 800230a:	4770      	bx	lr

0800230c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800230c:	4a1b      	ldr	r2, [pc, #108]	; (800237c <chk_lock+0x70>)
 800230e:	6813      	ldr	r3, [r2, #0]
{
 8002310:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8002312:	b163      	cbz	r3, 800232e <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002314:	6804      	ldr	r4, [r0, #0]
 8002316:	429c      	cmp	r4, r3
 8002318:	d107      	bne.n	800232a <chk_lock+0x1e>
 800231a:	6854      	ldr	r4, [r2, #4]
 800231c:	6883      	ldr	r3, [r0, #8]
 800231e:	429c      	cmp	r4, r3
 8002320:	d103      	bne.n	800232a <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8002322:	6894      	ldr	r4, [r2, #8]
 8002324:	6943      	ldr	r3, [r0, #20]
 8002326:	429c      	cmp	r4, r3
 8002328:	d020      	beq.n	800236c <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800232a:	2400      	movs	r4, #0
 800232c:	e000      	b.n	8002330 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800232e:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8002330:	6913      	ldr	r3, [r2, #16]
 8002332:	b1cb      	cbz	r3, 8002368 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002334:	6805      	ldr	r5, [r0, #0]
 8002336:	42ab      	cmp	r3, r5
 8002338:	d107      	bne.n	800234a <chk_lock+0x3e>
 800233a:	6955      	ldr	r5, [r2, #20]
 800233c:	6883      	ldr	r3, [r0, #8]
 800233e:	429d      	cmp	r5, r3
 8002340:	d103      	bne.n	800234a <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8002342:	6995      	ldr	r5, [r2, #24]
 8002344:	6943      	ldr	r3, [r0, #20]
 8002346:	429d      	cmp	r5, r3
 8002348:	d015      	beq.n	8002376 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800234a:	b96c      	cbnz	r4, 8002368 <chk_lock+0x5c>
 800234c:	2902      	cmp	r1, #2
 800234e:	bf0c      	ite	eq
 8002350:	2000      	moveq	r0, #0
 8002352:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002354:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002356:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800235a:	899b      	ldrh	r3, [r3, #12]
 800235c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002360:	bf14      	ite	ne
 8002362:	2000      	movne	r0, #0
 8002364:	2010      	moveq	r0, #16
 8002366:	e7f5      	b.n	8002354 <chk_lock+0x48>
 8002368:	2000      	movs	r0, #0
 800236a:	e7f3      	b.n	8002354 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800236c:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800236e:	2900      	cmp	r1, #0
 8002370:	d0f1      	beq.n	8002356 <chk_lock+0x4a>
 8002372:	2010      	movs	r0, #16
 8002374:	e7ee      	b.n	8002354 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002376:	2301      	movs	r3, #1
 8002378:	e7f9      	b.n	800236e <chk_lock+0x62>
 800237a:	bf00      	nop
 800237c:	20000cf4 	.word	0x20000cf4

08002380 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <inc_lock+0x80>)
{
 8002382:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	6806      	ldr	r6, [r0, #0]
 8002388:	429e      	cmp	r6, r3
 800238a:	d107      	bne.n	800239c <inc_lock+0x1c>
 800238c:	6855      	ldr	r5, [r2, #4]
 800238e:	6884      	ldr	r4, [r0, #8]
 8002390:	42a5      	cmp	r5, r4
 8002392:	d103      	bne.n	800239c <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8002394:	6945      	ldr	r5, [r0, #20]
 8002396:	6894      	ldr	r4, [r2, #8]
 8002398:	42a5      	cmp	r5, r4
 800239a:	d022      	beq.n	80023e2 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 800239c:	6914      	ldr	r4, [r2, #16]
 800239e:	42b4      	cmp	r4, r6
 80023a0:	d107      	bne.n	80023b2 <inc_lock+0x32>
 80023a2:	6957      	ldr	r7, [r2, #20]
 80023a4:	6885      	ldr	r5, [r0, #8]
 80023a6:	42af      	cmp	r7, r5
 80023a8:	d103      	bne.n	80023b2 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 80023aa:	6997      	ldr	r7, [r2, #24]
 80023ac:	6945      	ldr	r5, [r0, #20]
 80023ae:	42af      	cmp	r7, r5
 80023b0:	d021      	beq.n	80023f6 <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80023b2:	b10b      	cbz	r3, 80023b8 <inc_lock+0x38>
 80023b4:	bb0c      	cbnz	r4, 80023fa <inc_lock+0x7a>
 80023b6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80023b8:	011d      	lsls	r5, r3, #4
 80023ba:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 80023be:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 80023c0:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 80023c2:	6940      	ldr	r0, [r0, #20]
 80023c4:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 80023c6:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80023c8:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 80023ca:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80023cc:	b981      	cbnz	r1, 80023f0 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023ce:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80023d2:	8989      	ldrh	r1, [r1, #12]
 80023d4:	3101      	adds	r1, #1
 80023d6:	b289      	uxth	r1, r1
 80023d8:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80023dc:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023de:	8191      	strh	r1, [r2, #12]
}
 80023e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80023e2:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d0f2      	beq.n	80023ce <inc_lock+0x4e>
 80023e8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80023ec:	8989      	ldrh	r1, [r1, #12]
 80023ee:	b921      	cbnz	r1, 80023fa <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80023f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f4:	e7f0      	b.n	80023d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80023f6:	2301      	movs	r3, #1
 80023f8:	e7f4      	b.n	80023e4 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80023fa:	2000      	movs	r0, #0
 80023fc:	e7f0      	b.n	80023e0 <inc_lock+0x60>
 80023fe:	bf00      	nop
 8002400:	20000cf4 	.word	0x20000cf4

08002404 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002404:	3801      	subs	r0, #1
 8002406:	2801      	cmp	r0, #1
 8002408:	d815      	bhi.n	8002436 <dec_lock+0x32>
		n = Files[i].ctr;
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <dec_lock+0x38>)
 800240c:	0101      	lsls	r1, r0, #4
 800240e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8002412:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	d104      	bne.n	8002424 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800241a:	2300      	movs	r3, #0
 800241c:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800241e:	2000      	movs	r0, #0
 8002420:	5050      	str	r0, [r2, r1]
 8002422:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0fa      	beq.n	800241e <dec_lock+0x1a>
 8002428:	3b01      	subs	r3, #1
 800242a:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800242c:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f5      	beq.n	800241e <dec_lock+0x1a>
		res = FR_OK;
 8002432:	2000      	movs	r0, #0
 8002434:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002436:	2002      	movs	r0, #2
	}
	return res;
}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000cf4 	.word	0x20000cf4

08002440 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <clear_lock+0x18>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4290      	cmp	r0, r2
 8002446:	bf04      	itt	eq
 8002448:	2200      	moveq	r2, #0
 800244a:	601a      	streq	r2, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	4290      	cmp	r0, r2
 8002450:	bf04      	itt	eq
 8002452:	2200      	moveq	r2, #0
 8002454:	611a      	streq	r2, [r3, #16]
	}
}
 8002456:	4770      	bx	lr
 8002458:	20000cf4 	.word	0x20000cf4

0800245c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800245c:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800245e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002460:	3b02      	subs	r3, #2
 8002462:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8002464:	bf83      	ittte	hi
 8002466:	8943      	ldrhhi	r3, [r0, #10]
 8002468:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 800246a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800246e:	2000      	movls	r0, #0
}
 8002470:	4770      	bx	lr

08002472 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002474:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002476:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002478:	8952      	ldrh	r2, [r2, #10]
 800247a:	0a49      	lsrs	r1, r1, #9
 800247c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002480:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002482:	b130      	cbz	r0, 8002492 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8002484:	4281      	cmp	r1, r0
 8002486:	d302      	bcc.n	800248e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8002488:	1a09      	subs	r1, r1, r0
 800248a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800248c:	e7f8      	b.n	8002480 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800248e:	6858      	ldr	r0, [r3, #4]
 8002490:	4408      	add	r0, r1
}
 8002492:	4770      	bx	lr

08002494 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8002494:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002498:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800249a:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 800249c:	7803      	ldrb	r3, [r0, #0]
 800249e:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80024a0:	bf01      	itttt	eq
 80024a2:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80024a4:	750a      	strbeq	r2, [r1, #20]
 80024a6:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80024a8:	754a      	strbeq	r2, [r1, #21]
	}
}
 80024aa:	4770      	bx	lr

080024ac <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80024ac:	6803      	ldr	r3, [r0, #0]
{
 80024ae:	b510      	push	{r4, lr}
 80024b0:	4601      	mov	r1, r0
	if (*path) {	/* If the pointer is not a null */
 80024b2:	b153      	cbz	r3, 80024ca <get_ldnumber+0x1e>
 80024b4:	4618      	mov	r0, r3
 80024b6:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80024b8:	f810 4b01 	ldrb.w	r4, [r0], #1
 80024bc:	2c20      	cmp	r4, #32
 80024be:	d910      	bls.n	80024e2 <get_ldnumber+0x36>
 80024c0:	2c3a      	cmp	r4, #58	; 0x3a
 80024c2:	d1f8      	bne.n	80024b6 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80024c4:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80024c6:	4282      	cmp	r2, r0
 80024c8:	d002      	beq.n	80024d0 <get_ldnumber+0x24>
	int vol = -1;
 80024ca:	f04f 30ff 	mov.w	r0, #4294967295
 80024ce:	e007      	b.n	80024e0 <get_ldnumber+0x34>
			i = *tp++ - '0';
 80024d0:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80024d2:	3b30      	subs	r3, #48	; 0x30
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	2801      	cmp	r0, #1
 80024d8:	d8f7      	bhi.n	80024ca <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 80024da:	3201      	adds	r2, #1
			i = *tp++ - '0';
 80024dc:	4618      	mov	r0, r3
					*path = ++tt;
 80024de:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80024e0:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 80024e2:	2000      	movs	r0, #0
 80024e4:	e7fc      	b.n	80024e0 <get_ldnumber+0x34>

080024e6 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80024e6:	b538      	push	{r3, r4, r5, lr}
 80024e8:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80024ea:	4604      	mov	r4, r0
 80024ec:	b918      	cbnz	r0, 80024f6 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80024ee:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80024f0:	2300      	movs	r3, #0
 80024f2:	602b      	str	r3, [r5, #0]
	return res;
}
 80024f4:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f8      	beq.n	80024ee <validate+0x8>
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d0f5      	beq.n	80024ee <validate+0x8>
 8002502:	8881      	ldrh	r1, [r0, #4]
 8002504:	88da      	ldrh	r2, [r3, #6]
 8002506:	4291      	cmp	r1, r2
 8002508:	d1f1      	bne.n	80024ee <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800250a:	7858      	ldrb	r0, [r3, #1]
 800250c:	f7ff fea8 	bl	8002260 <disk_status>
 8002510:	f010 0001 	ands.w	r0, r0, #1
 8002514:	d1eb      	bne.n	80024ee <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	e7eb      	b.n	80024f2 <validate+0xc>

0800251a <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800251a:	3801      	subs	r0, #1
 800251c:	440a      	add	r2, r1
			*d++ = *s++;
 800251e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002522:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8002526:	4291      	cmp	r1, r2
 8002528:	d1f9      	bne.n	800251e <mem_cpy.part.0+0x4>
}
 800252a:	4770      	bx	lr

0800252c <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8002530:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002532:	f100 0830 	add.w	r8, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002536:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002538:	2301      	movs	r3, #1
 800253a:	7840      	ldrb	r0, [r0, #1]
 800253c:	4632      	mov	r2, r6
 800253e:	4641      	mov	r1, r8
 8002540:	f7ff feb6 	bl	80022b0 <disk_write>
 8002544:	4605      	mov	r5, r0
 8002546:	b9a8      	cbnz	r0, 8002574 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002548:	6a23      	ldr	r3, [r4, #32]
 800254a:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 800254c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800254e:	1af3      	subs	r3, r6, r3
 8002550:	4293      	cmp	r3, r2
 8002552:	d202      	bcs.n	800255a <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002554:	78a7      	ldrb	r7, [r4, #2]
 8002556:	2f01      	cmp	r7, #1
 8002558:	d802      	bhi.n	8002560 <sync_window.part.0+0x34>
}
 800255a:	4628      	mov	r0, r5
 800255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8002560:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002562:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8002564:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002566:	4632      	mov	r2, r6
 8002568:	2301      	movs	r3, #1
 800256a:	4641      	mov	r1, r8
 800256c:	f7ff fea0 	bl	80022b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002570:	3f01      	subs	r7, #1
 8002572:	e7f0      	b.n	8002556 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8002574:	2501      	movs	r5, #1
 8002576:	e7f0      	b.n	800255a <sync_window.part.0+0x2e>

08002578 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002578:	78c3      	ldrb	r3, [r0, #3]
 800257a:	b10b      	cbz	r3, 8002580 <sync_window+0x8>
 800257c:	f7ff bfd6 	b.w	800252c <sync_window.part.0>
}
 8002580:	4618      	mov	r0, r3
 8002582:	4770      	bx	lr

08002584 <move_window>:
{
 8002584:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002586:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002588:	428b      	cmp	r3, r1
{
 800258a:	4605      	mov	r5, r0
 800258c:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800258e:	d010      	beq.n	80025b2 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8002590:	f7ff fff2 	bl	8002578 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002594:	b960      	cbnz	r0, 80025b0 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002596:	4622      	mov	r2, r4
 8002598:	7868      	ldrb	r0, [r5, #1]
 800259a:	2301      	movs	r3, #1
 800259c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80025a0:	f7ff fe78 	bl	8002294 <disk_read>
				res = FR_DISK_ERR;
 80025a4:	2800      	cmp	r0, #0
 80025a6:	bf1c      	itt	ne
 80025a8:	f04f 34ff 	movne.w	r4, #4294967295
 80025ac:	2001      	movne	r0, #1
			fs->winsect = sector;
 80025ae:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 80025b0:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80025b2:	2000      	movs	r0, #0
 80025b4:	e7fc      	b.n	80025b0 <move_window+0x2c>
	...

080025b8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80025b8:	2300      	movs	r3, #0
{
 80025ba:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80025bc:	70c3      	strb	r3, [r0, #3]
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 80025c4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80025c6:	f7ff ffdd 	bl	8002584 <move_window>
 80025ca:	4603      	mov	r3, r0
 80025cc:	bb18      	cbnz	r0, 8002616 <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80025ce:	f8b4 122e 	ldrh.w	r1, [r4, #558]	; 0x22e
 80025d2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80025d6:	4291      	cmp	r1, r2
 80025d8:	d11f      	bne.n	800261a <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80025da:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80025de:	2ae9      	cmp	r2, #233	; 0xe9
 80025e0:	d005      	beq.n	80025ee <check_fs+0x36>
 80025e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025e4:	490f      	ldr	r1, [pc, #60]	; (8002624 <check_fs+0x6c>)
 80025e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80025ea:	428a      	cmp	r2, r1
 80025ec:	d117      	bne.n	800261e <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80025ee:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80025f2:	f7ff fe7b 	bl	80022ec <ld_dword>
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <check_fs+0x70>)
 80025f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80025fc:	4290      	cmp	r0, r2
 80025fe:	d008      	beq.n	8002612 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002600:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8002604:	f7ff fe72 	bl	80022ec <ld_dword>
	return 2;
 8002608:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
 800260c:	4290      	cmp	r0, r2
 800260e:	bf18      	it	ne
 8002610:	2302      	movne	r3, #2
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002616:	2304      	movs	r3, #4
 8002618:	e7fb      	b.n	8002612 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800261a:	2303      	movs	r3, #3
 800261c:	e7f9      	b.n	8002612 <check_fs+0x5a>
	return 2;
 800261e:	2302      	movs	r3, #2
 8002620:	e7f7      	b.n	8002612 <check_fs+0x5a>
 8002622:	bf00      	nop
 8002624:	009000eb 	.word	0x009000eb
 8002628:	00544146 	.word	0x00544146

0800262c <find_volume>:
{
 800262c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	600b      	str	r3, [r1, #0]
{
 8002634:	4688      	mov	r8, r1
 8002636:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8002638:	f7ff ff38 	bl	80024ac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800263c:	1e07      	subs	r7, r0, #0
 800263e:	f2c0 8115 	blt.w	800286c <find_volume+0x240>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002642:	4e8d      	ldr	r6, [pc, #564]	; (8002878 <find_volume+0x24c>)
 8002644:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8002648:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800264a:	2c00      	cmp	r4, #0
 800264c:	f000 8110 	beq.w	8002870 <find_volume+0x244>
	*rfs = fs;							/* Return pointer to the file system object */
 8002650:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002654:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002656:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800265a:	b16b      	cbz	r3, 8002678 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800265c:	7860      	ldrb	r0, [r4, #1]
 800265e:	f7ff fdff 	bl	8002260 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002662:	07c1      	lsls	r1, r0, #31
 8002664:	d408      	bmi.n	8002678 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002666:	b11d      	cbz	r5, 8002670 <find_volume+0x44>
 8002668:	f010 0504 	ands.w	r5, r0, #4
 800266c:	d000      	beq.n	8002670 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 800266e:	250a      	movs	r5, #10
}
 8002670:	4628      	mov	r0, r5
 8002672:	b004      	add	sp, #16
 8002674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002678:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800267a:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 800267c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800267e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002680:	f7ff fdf8 	bl	8002274 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002684:	07c2      	lsls	r2, r0, #31
 8002686:	f100 80f5 	bmi.w	8002874 <find_volume+0x248>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800268a:	b10d      	cbz	r5, 8002690 <find_volume+0x64>
 800268c:	0743      	lsls	r3, r0, #29
 800268e:	d4ee      	bmi.n	800266e <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002690:	2100      	movs	r1, #0
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff ff90 	bl	80025b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002698:	2802      	cmp	r0, #2
 800269a:	f040 80cd 	bne.w	8002838 <find_volume+0x20c>
 800269e:	466d      	mov	r5, sp
 80026a0:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 80026a4:	f204 2136 	addw	r1, r4, #566	; 0x236
 80026a8:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80026aa:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 80026ae:	b110      	cbz	r0, 80026b6 <find_volume+0x8a>
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fe1b 	bl	80022ec <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80026b6:	3310      	adds	r3, #16
 80026b8:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80026ba:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80026be:	d1f4      	bne.n	80026aa <find_volume+0x7e>
 80026c0:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 80026c4:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80026c8:	2f00      	cmp	r7, #0
 80026ca:	f000 80aa 	beq.w	8002822 <find_volume+0x1f6>
 80026ce:	4639      	mov	r1, r7
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff ff71 	bl	80025b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80026d6:	2801      	cmp	r0, #1
 80026d8:	f200 80a4 	bhi.w	8002824 <find_volume+0x1f8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80026dc:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 80026e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e4:	f040 80ac 	bne.w	8002840 <find_volume+0x214>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80026e8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80026ec:	b921      	cbnz	r1, 80026f8 <find_volume+0xcc>
 80026ee:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80026f2:	f7ff fdfb 	bl	80022ec <ld_dword>
 80026f6:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80026f8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		fs->fsize = fasize;
 80026fc:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002702:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002704:	f200 809c 	bhi.w	8002840 <find_volume+0x214>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002708:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800270c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800270e:	2d00      	cmp	r5, #0
 8002710:	f000 8096 	beq.w	8002840 <find_volume+0x214>
 8002714:	1e6a      	subs	r2, r5, #1
 8002716:	422a      	tst	r2, r5
 8002718:	f040 8092 	bne.w	8002840 <find_volume+0x214>
	rv = ptr[1];
 800271c:	f8b4 8041 	ldrh.w	r8, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002720:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002724:	f018 0f0f 	tst.w	r8, #15
 8002728:	f040 808a 	bne.w	8002840 <find_volume+0x214>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800272c:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002730:	b918      	cbnz	r0, 800273a <find_volume+0x10e>
 8002732:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002736:	f7ff fdd9 	bl	80022ec <ld_dword>
	rv = ptr[1];
 800273a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800273c:	2a00      	cmp	r2, #0
 800273e:	d07f      	beq.n	8002840 <find_volume+0x214>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002740:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002744:	eb02 1c18 	add.w	ip, r2, r8, lsr #4
 8002748:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800274a:	4560      	cmp	r0, ip
 800274c:	d378      	bcc.n	8002840 <find_volume+0x214>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800274e:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002752:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002754:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002758:	d372      	bcc.n	8002840 <find_volume+0x214>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800275a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800275e:	4283      	cmp	r3, r0
 8002760:	d872      	bhi.n	8002848 <find_volume+0x21c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002762:	f640 75f5 	movw	r5, #4085	; 0xff5
 8002766:	42ab      	cmp	r3, r5
 8002768:	bf8c      	ite	hi
 800276a:	2502      	movhi	r5, #2
 800276c:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800276e:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002770:	443a      	add	r2, r7
		fs->database = bsect + sysect;					/* Data start sector */
 8002772:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
 8002776:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002778:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800277a:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800277c:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800277e:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002780:	d164      	bne.n	800284c <find_volume+0x220>
	rv = rv << 8 | ptr[0];
 8002782:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002786:	ea52 0208 	orrs.w	r2, r2, r8
 800278a:	d159      	bne.n	8002840 <find_volume+0x214>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800278c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002790:	f7ff fdac 	bl	80022ec <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002794:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002796:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002798:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800279c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80027a0:	d34e      	bcc.n	8002840 <find_volume+0x214>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80027aa:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 80027ac:	f04f 0380 	mov.w	r3, #128	; 0x80
 80027b0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80027b2:	d12b      	bne.n	800280c <find_volume+0x1e0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80027b4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d127      	bne.n	800280c <find_volume+0x1e0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80027bc:	1c79      	adds	r1, r7, #1
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fee0 	bl	8002584 <move_window>
 80027c4:	bb10      	cbnz	r0, 800280c <find_volume+0x1e0>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80027c6:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 80027ca:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80027cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d11b      	bne.n	800280c <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80027d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80027d8:	f7ff fd88 	bl	80022ec <ld_dword>
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <find_volume+0x250>)
 80027de:	4298      	cmp	r0, r3
 80027e0:	d114      	bne.n	800280c <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80027e2:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80027e6:	f7ff fd81 	bl	80022ec <ld_dword>
 80027ea:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80027ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027f2:	3320      	adds	r3, #32
 80027f4:	4298      	cmp	r0, r3
 80027f6:	d109      	bne.n	800280c <find_volume+0x1e0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80027f8:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80027fc:	f7ff fd76 	bl	80022ec <ld_dword>
 8002800:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002802:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002806:	f7ff fd71 	bl	80022ec <ld_dword>
 800280a:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 800280c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	fs->fs_type = fmt;		/* FAT sub-type */
 800280e:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8002810:	3301      	adds	r3, #1
 8002812:	b29b      	uxth	r3, r3
 8002814:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8002816:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 8002818:	8533      	strh	r3, [r6, #40]	; 0x28
	return FR_OK;
 800281a:	2500      	movs	r5, #0
	clear_lock(fs);
 800281c:	f7ff fe10 	bl	8002440 <clear_lock>
	return FR_OK;
 8002820:	e726      	b.n	8002670 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002822:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002824:	f108 0801 	add.w	r8, r8, #1
 8002828:	f1b8 0f04 	cmp.w	r8, #4
 800282c:	f47f af4a 	bne.w	80026c4 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002830:	2804      	cmp	r0, #4
 8002832:	d105      	bne.n	8002840 <find_volume+0x214>
 8002834:	2501      	movs	r5, #1
 8002836:	e71b      	b.n	8002670 <find_volume+0x44>
 8002838:	2804      	cmp	r0, #4
 800283a:	d0fb      	beq.n	8002834 <find_volume+0x208>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800283c:	2801      	cmp	r0, #1
 800283e:	d901      	bls.n	8002844 <find_volume+0x218>
 8002840:	250d      	movs	r5, #13
 8002842:	e715      	b.n	8002670 <find_volume+0x44>
	bsect = 0;
 8002844:	2700      	movs	r7, #0
 8002846:	e749      	b.n	80026dc <find_volume+0xb0>
		fmt = FS_FAT32;
 8002848:	2503      	movs	r5, #3
 800284a:	e790      	b.n	800276e <find_volume+0x142>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800284c:	f1b8 0f00 	cmp.w	r8, #0
 8002850:	d0f6      	beq.n	8002840 <find_volume+0x214>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002852:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002854:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002856:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002858:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800285c:	bf1b      	ittet	ne
 800285e:	18d2      	addne	r2, r2, r3
 8002860:	f003 0301 	andne.w	r3, r3, #1
 8002864:	4613      	moveq	r3, r2
 8002866:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800286a:	e795      	b.n	8002798 <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800286c:	250b      	movs	r5, #11
 800286e:	e6ff      	b.n	8002670 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002870:	250c      	movs	r5, #12
 8002872:	e6fd      	b.n	8002670 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002874:	2503      	movs	r5, #3
 8002876:	e6fb      	b.n	8002670 <find_volume+0x44>
 8002878:	20000cf4 	.word	0x20000cf4
 800287c:	41615252 	.word	0x41615252

08002880 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002880:	2901      	cmp	r1, #1
{
 8002882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002886:	4606      	mov	r6, r0
 8002888:	460c      	mov	r4, r1
 800288a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800288c:	d973      	bls.n	8002976 <put_fat+0xf6>
 800288e:	6943      	ldr	r3, [r0, #20]
 8002890:	428b      	cmp	r3, r1
 8002892:	d970      	bls.n	8002976 <put_fat+0xf6>
		switch (fs->fs_type) {
 8002894:	7803      	ldrb	r3, [r0, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d03f      	beq.n	800291a <put_fat+0x9a>
 800289a:	2b03      	cmp	r3, #3
 800289c:	d050      	beq.n	8002940 <put_fat+0xc0>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d169      	bne.n	8002976 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 80028a2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80028a6:	6a01      	ldr	r1, [r0, #32]
 80028a8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80028ac:	f7ff fe6a 	bl	8002584 <move_window>
 80028b0:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 80028b2:	bb38      	cbnz	r0, 8002904 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 80028b4:	f106 0930 	add.w	r9, r6, #48	; 0x30
 80028b8:	f108 0a01 	add.w	sl, r8, #1
 80028bc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80028c0:	f014 0401 	ands.w	r4, r4, #1
 80028c4:	bf1f      	itttt	ne
 80028c6:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80028ca:	f003 020f 	andne.w	r2, r3, #15
 80028ce:	013b      	lslne	r3, r7, #4
 80028d0:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80028d4:	bf14      	ite	ne
 80028d6:	4313      	orrne	r3, r2
 80028d8:	b2fb      	uxtbeq	r3, r7
 80028da:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80028de:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80028e4:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80028e8:	4630      	mov	r0, r6
 80028ea:	f7ff fe4b 	bl	8002584 <move_window>
			if (res != FR_OK) break;
 80028ee:	4605      	mov	r5, r0
 80028f0:	b940      	cbnz	r0, 8002904 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 80028f2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80028f6:	b144      	cbz	r4, 800290a <put_fat+0x8a>
 80028f8:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80028fc:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	70f3      	strb	r3, [r6, #3]
}
 8002904:	4628      	mov	r0, r5
 8002906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800290a:	f819 300a 	ldrb.w	r3, [r9, sl]
 800290e:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8002912:	f023 030f 	bic.w	r3, r3, #15
 8002916:	431f      	orrs	r7, r3
 8002918:	e7f0      	b.n	80028fc <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800291a:	6a01      	ldr	r1, [r0, #32]
 800291c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002920:	f7ff fe30 	bl	8002584 <move_window>
			if (res != FR_OK) break;
 8002924:	4605      	mov	r5, r0
 8002926:	2800      	cmp	r0, #0
 8002928:	d1ec      	bne.n	8002904 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800292a:	0064      	lsls	r4, r4, #1
 800292c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002930:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8002934:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8002936:	551f      	strb	r7, [r3, r4]
 8002938:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800293c:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 800293e:	e7df      	b.n	8002900 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002940:	6a01      	ldr	r1, [r0, #32]
 8002942:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002946:	f7ff fe1d 	bl	8002584 <move_window>
			if (res != FR_OK) break;
 800294a:	4605      	mov	r5, r0
 800294c:	2800      	cmp	r0, #0
 800294e:	d1d9      	bne.n	8002904 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002950:	00a4      	lsls	r4, r4, #2
 8002952:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002956:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800295a:	441c      	add	r4, r3
 800295c:	4620      	mov	r0, r4
 800295e:	f7ff fcc5 	bl	80022ec <ld_dword>
 8002962:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8002966:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800296a:	ea47 0100 	orr.w	r1, r7, r0
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff fcbe 	bl	80022f0 <st_dword>
 8002974:	e7c4      	b.n	8002900 <put_fat+0x80>
		switch (fs->fs_type) {
 8002976:	2502      	movs	r5, #2
 8002978:	e7c4      	b.n	8002904 <put_fat+0x84>

0800297a <sync_fs>:
{
 800297a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800297e:	f7ff fdfb 	bl	8002578 <sync_window>
 8002982:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002984:	2800      	cmp	r0, #0
 8002986:	d142      	bne.n	8002a0e <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002988:	7823      	ldrb	r3, [r4, #0]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d137      	bne.n	80029fe <sync_fs+0x84>
 800298e:	7927      	ldrb	r7, [r4, #4]
 8002990:	2f01      	cmp	r7, #1
 8002992:	d134      	bne.n	80029fe <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8002994:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8002998:	4601      	mov	r1, r0
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 80029a0:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 80029a2:	f7ff fcad 	bl	8002300 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80029a6:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 80029aa:	23aa      	movs	r3, #170	; 0xaa
 80029ac:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 80029b0:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80029b2:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80029b4:	2172      	movs	r1, #114	; 0x72
 80029b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80029ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 80029be:	2361      	movs	r3, #97	; 0x61
 80029c0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 80029c4:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 80029c8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 80029cc:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 80029d0:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 80029d4:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80029d8:	6921      	ldr	r1, [r4, #16]
 80029da:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80029de:	f7ff fc87 	bl	80022f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80029e2:	68e1      	ldr	r1, [r4, #12]
 80029e4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80029e8:	f7ff fc82 	bl	80022f0 <st_dword>
			fs->winsect = fs->volbase + 1;
 80029ec:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80029ee:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80029f0:	3201      	adds	r2, #1
 80029f2:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80029f4:	463b      	mov	r3, r7
 80029f6:	4631      	mov	r1, r6
 80029f8:	f7ff fc5a 	bl	80022b0 <disk_write>
			fs->fsi_flag = 0;
 80029fc:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80029fe:	2200      	movs	r2, #0
 8002a00:	7860      	ldrb	r0, [r4, #1]
 8002a02:	4611      	mov	r1, r2
 8002a04:	f7ff fc62 	bl	80022cc <disk_ioctl>
	res = sync_window(fs);
 8002a08:	3800      	subs	r0, #0
 8002a0a:	bf18      	it	ne
 8002a0c:	2001      	movne	r0, #1
}
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a10 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8002a10:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8002a12:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002a14:	bf04      	itt	eq
 8002a16:	8a8a      	ldrheq	r2, [r1, #20]
 8002a18:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4770      	bx	lr

08002a20 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002a20:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8002a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a24:	4606      	mov	r6, r0
 8002a26:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002a28:	d94e      	bls.n	8002ac8 <get_fat.isra.0+0xa8>
 8002a2a:	6943      	ldr	r3, [r0, #20]
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	d24b      	bcs.n	8002ac8 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8002a30:	7803      	ldrb	r3, [r0, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d029      	beq.n	8002a8a <get_fat.isra.0+0x6a>
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d034      	beq.n	8002aa4 <get_fat.isra.0+0x84>
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d144      	bne.n	8002ac8 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8002a3e:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a42:	6a01      	ldr	r1, [r0, #32]
 8002a44:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8002a48:	f7ff fd9c 	bl	8002584 <move_window>
 8002a4c:	b110      	cbz	r0, 8002a54 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002a4e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8002a54:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a56:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];
 8002a58:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8002a5c:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a5e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8002a62:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8002a64:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002a68:	f7ff fd8c 	bl	8002584 <move_window>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d1ee      	bne.n	8002a4e <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002a70:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8002a74:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002a76:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8002a78:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8002a7c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002a80:	bf4c      	ite	mi
 8002a82:	0900      	lsrmi	r0, r0, #4
 8002a84:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002a88:	e7e3      	b.n	8002a52 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002a8a:	6a01      	ldr	r1, [r0, #32]
 8002a8c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002a90:	f7ff fd78 	bl	8002584 <move_window>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1da      	bne.n	8002a4e <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002a98:	0064      	lsls	r4, r4, #1
 8002a9a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8002a9e:	4426      	add	r6, r4
 8002aa0:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 8002aa2:	e7d6      	b.n	8002a52 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002aa4:	6a01      	ldr	r1, [r0, #32]
 8002aa6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002aaa:	f7ff fd6b 	bl	8002584 <move_window>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d1cd      	bne.n	8002a4e <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002ab2:	00a4      	lsls	r4, r4, #2
 8002ab4:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002ab8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8002abc:	4420      	add	r0, r4
 8002abe:	f7ff fc15 	bl	80022ec <ld_dword>
 8002ac2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8002ac6:	e7c4      	b.n	8002a52 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8002ac8:	2001      	movs	r0, #1
	return val;
 8002aca:	e7c2      	b.n	8002a52 <get_fat.isra.0+0x32>

08002acc <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002acc:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002ace:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8002ad0:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 8002ad2:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8002ad4:	6143      	str	r3, [r0, #20]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002ad6:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002ad8:	b99a      	cbnz	r2, 8002b02 <dir_sdi.constprop.0+0x36>
 8002ada:	782b      	ldrb	r3, [r5, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8002ae0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002ae2:	b96b      	cbnz	r3, 8002b00 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002ae4:	892b      	ldrh	r3, [r5, #8]
 8002ae6:	b90b      	cbnz	r3, 8002aec <dir_sdi.constprop.0+0x20>
 8002ae8:	2002      	movs	r0, #2
}
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8002aec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002aee:	61e3      	str	r3, [r4, #28]
	if (!dp->sect) return FR_INT_ERR;
 8002af0:	69e3      	ldr	r3, [r4, #28]
	dp->clust = clst;					/* Current cluster# */
 8002af2:	61a2      	str	r2, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f7      	beq.n	8002ae8 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002af8:	3530      	adds	r5, #48	; 0x30
 8002afa:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8002afc:	2000      	movs	r0, #0
 8002afe:	e7f4      	b.n	8002aea <dir_sdi.constprop.0+0x1e>
 8002b00:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002b02:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002b04:	b963      	cbnz	r3, 8002b20 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002b06:	4611      	mov	r1, r2
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	f7ff ff89 	bl	8002a20 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002b0e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002b10:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002b12:	d00b      	beq.n	8002b2c <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002b14:	2801      	cmp	r0, #1
 8002b16:	d9e7      	bls.n	8002ae8 <dir_sdi.constprop.0+0x1c>
 8002b18:	696b      	ldr	r3, [r5, #20]
 8002b1a:	4298      	cmp	r0, r3
 8002b1c:	d3f3      	bcc.n	8002b06 <dir_sdi.constprop.0+0x3a>
 8002b1e:	e7e3      	b.n	8002ae8 <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 8002b20:	4611      	mov	r1, r2
 8002b22:	4628      	mov	r0, r5
 8002b24:	f7ff fc9a 	bl	800245c <clust2sect>
 8002b28:	61e0      	str	r0, [r4, #28]
 8002b2a:	e7e1      	b.n	8002af0 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	e7dc      	b.n	8002aea <dir_sdi.constprop.0+0x1e>

08002b30 <remove_chain>:
{
 8002b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b32:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002b34:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 8002b36:	6805      	ldr	r5, [r0, #0]
{
 8002b38:	4606      	mov	r6, r0
 8002b3a:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002b3c:	d92c      	bls.n	8002b98 <remove_chain+0x68>
 8002b3e:	696b      	ldr	r3, [r5, #20]
 8002b40:	42a3      	cmp	r3, r4
 8002b42:	d929      	bls.n	8002b98 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002b44:	b12a      	cbz	r2, 8002b52 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7ff fe98 	bl	8002880 <put_fat>
		if (res != FR_OK) return res;
 8002b50:	b940      	cbnz	r0, 8002b64 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002b52:	4621      	mov	r1, r4
 8002b54:	6830      	ldr	r0, [r6, #0]
 8002b56:	9401      	str	r4, [sp, #4]
 8002b58:	f7ff ff62 	bl	8002a20 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002b5c:	9901      	ldr	r1, [sp, #4]
 8002b5e:	4604      	mov	r4, r0
 8002b60:	b910      	cbnz	r0, 8002b68 <remove_chain+0x38>
	return FR_OK;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	b002      	add	sp, #8
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002b68:	2801      	cmp	r0, #1
 8002b6a:	d015      	beq.n	8002b98 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d015      	beq.n	8002b9c <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002b70:	2200      	movs	r2, #0
 8002b72:	4628      	mov	r0, r5
 8002b74:	f7ff fe84 	bl	8002880 <put_fat>
			if (res != FR_OK) return res;
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d1f3      	bne.n	8002b64 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002b7c:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8002b80:	1e91      	subs	r1, r2, #2
 8002b82:	428b      	cmp	r3, r1
 8002b84:	d205      	bcs.n	8002b92 <remove_chain+0x62>
			fs->free_clst++;
 8002b86:	3301      	adds	r3, #1
 8002b88:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8002b8a:	792b      	ldrb	r3, [r5, #4]
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002b92:	42a2      	cmp	r2, r4
 8002b94:	d8dd      	bhi.n	8002b52 <remove_chain+0x22>
 8002b96:	e7e4      	b.n	8002b62 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002b98:	2002      	movs	r0, #2
 8002b9a:	e7e3      	b.n	8002b64 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e7e1      	b.n	8002b64 <remove_chain+0x34>

08002ba0 <create_chain>:
{
 8002ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8002ba4:	6805      	ldr	r5, [r0, #0]
{
 8002ba6:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8002ba8:	460f      	mov	r7, r1
 8002baa:	b971      	cbnz	r1, 8002bca <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8002bac:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002bae:	b1ee      	cbz	r6, 8002bec <create_chain+0x4c>
 8002bb0:	696b      	ldr	r3, [r5, #20]
 8002bb2:	42b3      	cmp	r3, r6
 8002bb4:	bf98      	it	ls
 8002bb6:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8002bb8:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002bba:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8002bbc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002bbe:	42a3      	cmp	r3, r4
 8002bc0:	d817      	bhi.n	8002bf2 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8002bc2:	2e01      	cmp	r6, #1
 8002bc4:	d814      	bhi.n	8002bf0 <create_chain+0x50>
 8002bc6:	2400      	movs	r4, #0
 8002bc8:	e006      	b.n	8002bd8 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f7ff ff28 	bl	8002a20 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002bd0:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002bd2:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002bd4:	d803      	bhi.n	8002bde <create_chain+0x3e>
 8002bd6:	2401      	movs	r4, #1
}
 8002bd8:	4620      	mov	r0, r4
 8002bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d030      	beq.n	8002c44 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002be2:	696b      	ldr	r3, [r5, #20]
 8002be4:	4283      	cmp	r3, r0
 8002be6:	d8f7      	bhi.n	8002bd8 <create_chain+0x38>
 8002be8:	463e      	mov	r6, r7
 8002bea:	e7e5      	b.n	8002bb8 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002bec:	2601      	movs	r6, #1
 8002bee:	e7e3      	b.n	8002bb8 <create_chain+0x18>
				ncl = 2;
 8002bf0:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002bf2:	f8d8 0000 	ldr.w	r0, [r8]
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	f7ff ff12 	bl	8002a20 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8002bfc:	b130      	cbz	r0, 8002c0c <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002bfe:	2801      	cmp	r0, #1
 8002c00:	d0e9      	beq.n	8002bd6 <create_chain+0x36>
 8002c02:	3001      	adds	r0, #1
 8002c04:	d01e      	beq.n	8002c44 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8002c06:	42b4      	cmp	r4, r6
 8002c08:	d1d7      	bne.n	8002bba <create_chain+0x1a>
 8002c0a:	e7dc      	b.n	8002bc6 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	4621      	mov	r1, r4
 8002c12:	4628      	mov	r0, r5
 8002c14:	f7ff fe34 	bl	8002880 <put_fat>
		if (res == FR_OK && clst != 0) {
 8002c18:	b990      	cbnz	r0, 8002c40 <create_chain+0xa0>
 8002c1a:	b957      	cbnz	r7, 8002c32 <create_chain+0x92>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002c1c:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8002c20:	3a02      	subs	r2, #2
 8002c22:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8002c24:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002c26:	d910      	bls.n	8002c4a <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8002c28:	792b      	ldrb	r3, [r5, #4]
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	712b      	strb	r3, [r5, #4]
 8002c30:	e7d2      	b.n	8002bd8 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002c32:	4622      	mov	r2, r4
 8002c34:	4639      	mov	r1, r7
 8002c36:	4628      	mov	r0, r5
 8002c38:	f7ff fe22 	bl	8002880 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d0ed      	beq.n	8002c1c <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002c40:	2801      	cmp	r0, #1
 8002c42:	d1c8      	bne.n	8002bd6 <create_chain+0x36>
 8002c44:	f04f 34ff 	mov.w	r4, #4294967295
 8002c48:	e7c6      	b.n	8002bd8 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	612b      	str	r3, [r5, #16]
 8002c4e:	e7eb      	b.n	8002c28 <create_chain+0x88>

08002c50 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002c50:	6943      	ldr	r3, [r0, #20]
{
 8002c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002c56:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002c5a:	69c3      	ldr	r3, [r0, #28]
{
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002c60:	b193      	cbz	r3, 8002c88 <dir_next+0x38>
 8002c62:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8002c66:	d20f      	bcs.n	8002c88 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002c68:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8002c6c:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002c6e:	f1b9 0f00 	cmp.w	r9, #0
 8002c72:	d14d      	bne.n	8002d10 <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 8002c74:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8002c76:	3301      	adds	r3, #1
 8002c78:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8002c7a:	b939      	cbnz	r1, 8002c8c <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002c7c:	8923      	ldrh	r3, [r4, #8]
 8002c7e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8002c82:	d845      	bhi.n	8002d10 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002c88:	2004      	movs	r0, #4
 8002c8a:	e00b      	b.n	8002ca4 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002c8c:	8967      	ldrh	r7, [r4, #10]
 8002c8e:	3f01      	subs	r7, #1
 8002c90:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8002c94:	d13c      	bne.n	8002d10 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fec2 	bl	8002a20 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002c9c:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002c9e:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002ca0:	d802      	bhi.n	8002ca8 <dir_next+0x58>
 8002ca2:	2002      	movs	r0, #2
}
 8002ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002ca8:	1c42      	adds	r2, r0, #1
 8002caa:	d101      	bne.n	8002cb0 <dir_next+0x60>
 8002cac:	2001      	movs	r0, #1
 8002cae:	e7f9      	b.n	8002ca4 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002cb0:	6963      	ldr	r3, [r4, #20]
 8002cb2:	4283      	cmp	r3, r0
 8002cb4:	d826      	bhi.n	8002d04 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8002cb6:	f1ba 0f00 	cmp.w	sl, #0
 8002cba:	d0e3      	beq.n	8002c84 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002cbc:	69a9      	ldr	r1, [r5, #24]
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f7ff ff6e 	bl	8002ba0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d035      	beq.n	8002d36 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002cca:	2801      	cmp	r0, #1
 8002ccc:	d0e9      	beq.n	8002ca2 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	d0ec      	beq.n	8002cac <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff fc50 	bl	8002578 <sync_window>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d1e6      	bne.n	8002cac <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8002cde:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	f7ff fb0b 	bl	8002300 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002cea:	4631      	mov	r1, r6
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7ff fbb5 	bl	800245c <clust2sect>
						fs->wflag = 1;
 8002cf2:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002cf6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002cf8:	8963      	ldrh	r3, [r4, #10]
 8002cfa:	429f      	cmp	r7, r3
 8002cfc:	d30f      	bcc.n	8002d1e <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8002cfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d00:	1bdb      	subs	r3, r3, r7
 8002d02:	62e3      	str	r3, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8002d04:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8002d06:	4631      	mov	r1, r6
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff fba7 	bl	800245c <clust2sect>
 8002d0e:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002d10:	3430      	adds	r4, #48	; 0x30
 8002d12:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8002d14:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002d18:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	e7c2      	b.n	8002ca4 <dir_next+0x54>
						fs->wflag = 1;
 8002d1e:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff fc02 	bl	800252c <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d1bf      	bne.n	8002cac <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d2e:	3301      	adds	r3, #1
 8002d30:	3701      	adds	r7, #1
 8002d32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d34:	e7e0      	b.n	8002cf8 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002d36:	2007      	movs	r0, #7
 8002d38:	e7b4      	b.n	8002ca4 <dir_next+0x54>
	...

08002d3c <follow_path>:
{
 8002d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8002d40:	6806      	ldr	r6, [r0, #0]
{
 8002d42:	4681      	mov	r9, r0
 8002d44:	460c      	mov	r4, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002d4c:	d0fa      	beq.n	8002d44 <follow_path+0x8>
 8002d4e:	2b5c      	cmp	r3, #92	; 0x5c
 8002d50:	d0f8      	beq.n	8002d44 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002d58:	7823      	ldrb	r3, [r4, #0]
 8002d5a:	2b1f      	cmp	r3, #31
 8002d5c:	d95a      	bls.n	8002e14 <follow_path+0xd8>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002d5e:	4f54      	ldr	r7, [pc, #336]	; (8002eb0 <follow_path+0x174>)
	p = *path; sfn = dp->fn;
 8002d60:	f109 0524 	add.w	r5, r9, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8002d64:	220b      	movs	r2, #11
 8002d66:	4628      	mov	r0, r5
 8002d68:	2120      	movs	r1, #32
 8002d6a:	f7ff fac9 	bl	8002300 <mem_set>
	si = i = 0; ni = 8;
 8002d6e:	f1c4 0802 	rsb	r8, r4, #2
 8002d72:	f104 3cff 	add.w	ip, r4, #4294967295
 8002d76:	2200      	movs	r2, #0
 8002d78:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8002d7a:	eb08 010c 	add.w	r1, r8, ip
 8002d7e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d908      	bls.n	8002d98 <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8002d86:	2b2f      	cmp	r3, #47	; 0x2f
 8002d88:	d001      	beq.n	8002d8e <follow_path+0x52>
 8002d8a:	2b5c      	cmp	r3, #92	; 0x5c
 8002d8c:	d14c      	bne.n	8002e28 <follow_path+0xec>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002d8e:	5c60      	ldrb	r0, [r4, r1]
 8002d90:	282f      	cmp	r0, #47	; 0x2f
 8002d92:	d047      	beq.n	8002e24 <follow_path+0xe8>
 8002d94:	285c      	cmp	r0, #92	; 0x5c
 8002d96:	d045      	beq.n	8002e24 <follow_path+0xe8>
	*path = p + si;						/* Return pointer to the next segment */
 8002d98:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d054      	beq.n	8002e48 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002d9e:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8002da2:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002da6:	2ae5      	cmp	r2, #229	; 0xe5
 8002da8:	bf04      	itt	eq
 8002daa:	2205      	moveq	r2, #5
 8002dac:	f889 2024 	strbeq.w	r2, [r9, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002db0:	2b21      	cmp	r3, #33	; 0x21
 8002db2:	bf34      	ite	cc
 8002db4:	2304      	movcc	r3, #4
 8002db6:	2300      	movcs	r3, #0
 8002db8:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002dbc:	4648      	mov	r0, r9
 8002dbe:	f7ff fe85 	bl	8002acc <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d144      	bne.n	8002e50 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 8002dc6:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f7ff fbda 	bl	8002584 <move_window>
		if (res != FR_OK) break;
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d13d      	bne.n	8002e50 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 8002dd4:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002dd8:	7813      	ldrb	r3, [r2, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d043      	beq.n	8002e66 <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002dde:	7ad3      	ldrb	r3, [r2, #11]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	f889 3006 	strb.w	r3, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002de8:	7ad3      	ldrb	r3, [r2, #11]
 8002dea:	f013 0008 	ands.w	r0, r3, #8
 8002dee:	d10c      	bne.n	8002e0a <follow_path+0xce>
 8002df0:	f102 0c0b 	add.w	ip, r2, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002df4:	4629      	mov	r1, r5
		r = *d++ - *s++;
 8002df6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002dfa:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 8002dfe:	4594      	cmp	ip, r2
		r = *d++ - *s++;
 8002e00:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 8002e04:	d022      	beq.n	8002e4c <follow_path+0x110>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f5      	beq.n	8002df6 <follow_path+0xba>
		res = dir_next(dp, 0);	/* Next entry */
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4648      	mov	r0, r9
 8002e0e:	f7ff ff1f 	bl	8002c50 <dir_next>
 8002e12:	e7d6      	b.n	8002dc2 <follow_path+0x86>
		dp->fn[NSFLAG] = NS_NONAME;
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8002e1a:	4648      	mov	r0, r9
}
 8002e1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8002e20:	f7ff be54 	b.w	8002acc <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002e24:	3101      	adds	r1, #1
 8002e26:	e7b2      	b.n	8002d8e <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8002e28:	2b2e      	cmp	r3, #46	; 0x2e
 8002e2a:	d033      	beq.n	8002e94 <follow_path+0x158>
 8002e2c:	4290      	cmp	r0, r2
 8002e2e:	d90b      	bls.n	8002e48 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 8002e30:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8002e32:	bf48      	it	mi
 8002e34:	3b80      	submi	r3, #128	; 0x80
 8002e36:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8002eb4 <follow_path+0x178>
 8002e3a:	bf48      	it	mi
 8002e3c:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 8002e3e:	f81e 1b01 	ldrb.w	r1, [lr], #1
 8002e42:	b361      	cbz	r1, 8002e9e <follow_path+0x162>
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d1fa      	bne.n	8002e3e <follow_path+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002e48:	2006      	movs	r0, #6
	return res;
 8002e4a:	e00a      	b.n	8002e62 <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1dc      	bne.n	8002e0a <follow_path+0xce>
			ns = dp->fn[NSFLAG];
 8002e50:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8002e54:	b148      	cbz	r0, 8002e6a <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002e56:	2804      	cmp	r0, #4
 8002e58:	d103      	bne.n	8002e62 <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002e5a:	f013 0f04 	tst.w	r3, #4
 8002e5e:	bf08      	it	eq
 8002e60:	2005      	moveq	r0, #5
}
 8002e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e66:	2004      	movs	r0, #4
 8002e68:	e7f2      	b.n	8002e50 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002e6a:	075a      	lsls	r2, r3, #29
 8002e6c:	d4f9      	bmi.n	8002e62 <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002e6e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002e72:	06db      	lsls	r3, r3, #27
 8002e74:	d50c      	bpl.n	8002e90 <follow_path+0x154>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002e76:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8002e7a:	7830      	ldrb	r0, [r6, #0]
 8002e7c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8002e80:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002e84:	4419      	add	r1, r3
 8002e86:	f7ff fdc3 	bl	8002a10 <ld_clust.isra.0>
 8002e8a:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002e8e:	e767      	b.n	8002d60 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002e90:	2005      	movs	r0, #5
 8002e92:	e7e6      	b.n	8002e62 <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002e94:	280b      	cmp	r0, #11
 8002e96:	d0d7      	beq.n	8002e48 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 8002e98:	2208      	movs	r2, #8
 8002e9a:	200b      	movs	r0, #11
 8002e9c:	e76d      	b.n	8002d7a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002e9e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8002ea2:	2919      	cmp	r1, #25
 8002ea4:	d801      	bhi.n	8002eaa <follow_path+0x16e>
 8002ea6:	3b20      	subs	r3, #32
 8002ea8:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8002eaa:	54ab      	strb	r3, [r5, r2]
 8002eac:	3201      	adds	r2, #1
 8002eae:	e764      	b.n	8002d7a <follow_path+0x3e>
 8002eb0:	08004fe4 	.word	0x08004fe4
 8002eb4:	080050c3 	.word	0x080050c3

08002eb8 <dir_register>:
{
 8002eb8:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 8002eba:	6806      	ldr	r6, [r0, #0]
{
 8002ebc:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8002ebe:	f7ff fe05 	bl	8002acc <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	bb28      	cbnz	r0, 8002f12 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8002ec6:	69e9      	ldr	r1, [r5, #28]
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff fb5b 	bl	8002584 <move_window>
			if (res != FR_OK) break;
 8002ece:	4604      	mov	r4, r0
 8002ed0:	b9f8      	cbnz	r0, 8002f12 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002ed2:	6a2b      	ldr	r3, [r5, #32]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2be5      	cmp	r3, #229	; 0xe5
 8002ed8:	d114      	bne.n	8002f04 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8002eda:	69e9      	ldr	r1, [r5, #28]
 8002edc:	4630      	mov	r0, r6
 8002ede:	f7ff fb51 	bl	8002584 <move_window>
		if (res == FR_OK) {
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b960      	cbnz	r0, 8002f00 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	2220      	movs	r2, #32
 8002eea:	6a28      	ldr	r0, [r5, #32]
 8002eec:	f7ff fa08 	bl	8002300 <mem_set>
	if (cnt) {
 8002ef0:	6a28      	ldr	r0, [r5, #32]
 8002ef2:	220b      	movs	r2, #11
 8002ef4:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8002ef8:	f7ff fb0f 	bl	800251a <mem_cpy.part.0>
			fs->wflag = 1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	70f3      	strb	r3, [r6, #3]
}
 8002f00:	4620      	mov	r0, r4
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0e8      	beq.n	8002eda <dir_register+0x22>
			res = dir_next(dp, 1);
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f7ff fea0 	bl	8002c50 <dir_next>
 8002f10:	e7d7      	b.n	8002ec2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002f12:	2c04      	cmp	r4, #4
 8002f14:	bf08      	it	eq
 8002f16:	2407      	moveq	r4, #7
 8002f18:	e7f2      	b.n	8002f00 <dir_register+0x48>
	...

08002f1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002f1c:	b530      	push	{r4, r5, lr}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002f24:	a803      	add	r0, sp, #12
{
 8002f26:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8002f28:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8002f2a:	f7ff fabf 	bl	80024ac <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	db19      	blt.n	8002f66 <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002f32:	490f      	ldr	r1, [pc, #60]	; (8002f70 <f_mount+0x54>)
 8002f34:	0085      	lsls	r5, r0, #2
 8002f36:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8002f3a:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 8002f3c:	b118      	cbz	r0, 8002f46 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8002f3e:	f7ff fa7f 	bl	8002440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002f42:	2300      	movs	r3, #0
 8002f44:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 8002f46:	9801      	ldr	r0, [sp, #4]
 8002f48:	b108      	cbz	r0, 8002f4e <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002f4e:	4429      	add	r1, r5
 8002f50:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002f52:	b130      	cbz	r0, 8002f62 <f_mount+0x46>
 8002f54:	2c01      	cmp	r4, #1
 8002f56:	d108      	bne.n	8002f6a <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002f58:	2200      	movs	r2, #0
 8002f5a:	a901      	add	r1, sp, #4
 8002f5c:	4668      	mov	r0, sp
 8002f5e:	f7ff fb65 	bl	800262c <find_volume>
	LEAVE_FF(fs, res);
}
 8002f62:	b005      	add	sp, #20
 8002f64:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8002f66:	200b      	movs	r0, #11
 8002f68:	e7fb      	b.n	8002f62 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	e7f9      	b.n	8002f62 <f_mount+0x46>
 8002f6e:	bf00      	nop
 8002f70:	20000cf4 	.word	0x20000cf4

08002f74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f78:	b090      	sub	sp, #64	; 0x40
 8002f7a:	4617      	mov	r7, r2
 8002f7c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002f7e:	4604      	mov	r4, r0
 8002f80:	2800      	cmp	r0, #0
 8002f82:	f000 80f2 	beq.w	800316a <f_open+0x1f6>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8002f86:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8002f8a:	462a      	mov	r2, r5
 8002f8c:	a903      	add	r1, sp, #12
 8002f8e:	a801      	add	r0, sp, #4
 8002f90:	f7ff fb4c 	bl	800262c <find_volume>
	if (res == FR_OK) {
 8002f94:	4606      	mov	r6, r0
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d15c      	bne.n	8003054 <f_open+0xe0>
		dj.obj.fs = fs;
 8002f9a:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002f9c:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8002f9e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8002fa0:	a804      	add	r0, sp, #16
 8002fa2:	f7ff fecb 	bl	8002d3c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002fa6:	b958      	cbnz	r0, 8002fc0 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002fa8:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db58      	blt.n	8003062 <f_open+0xee>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002fb0:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8002fb4:	bf14      	ite	ne
 8002fb6:	2101      	movne	r1, #1
 8002fb8:	2100      	moveq	r1, #0
 8002fba:	a804      	add	r0, sp, #16
 8002fbc:	f7ff f9a6 	bl	800230c <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002fc0:	f017 0f1c 	tst.w	r7, #28
 8002fc4:	d06d      	beq.n	80030a2 <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d04d      	beq.n	8003066 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002fca:	2804      	cmp	r0, #4
 8002fcc:	d142      	bne.n	8003054 <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002fce:	4b68      	ldr	r3, [pc, #416]	; (8003170 <f_open+0x1fc>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	b11a      	cbz	r2, 8002fdc <f_open+0x68>
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c1 	bne.w	800315e <f_open+0x1ea>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002fdc:	a804      	add	r0, sp, #16
 8002fde:	f7ff ff6b 	bl	8002eb8 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d136      	bne.n	8003054 <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002fe6:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 8002fea:	f7ff f97d 	bl	80022e8 <get_fattime>
 8002fee:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002ff0:	9000      	str	r0, [sp, #0]
 8002ff2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ff4:	300e      	adds	r0, #14
 8002ff6:	f7ff f97b 	bl	80022f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8002ffa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ffc:	9900      	ldr	r1, [sp, #0]
 8002ffe:	3016      	adds	r0, #22
 8003000:	f7ff f976 	bl	80022f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003006:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800300a:	2220      	movs	r2, #32
 800300c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800300e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003010:	f898 0000 	ldrb.w	r0, [r8]
 8003014:	f7ff fcfc 	bl	8002a10 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003018:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800301a:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800301c:	4640      	mov	r0, r8
 800301e:	f7ff fa39 	bl	8002494 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003028:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800302a:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800302c:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800302e:	9b03      	ldr	r3, [sp, #12]
 8003030:	2101      	movs	r1, #1
 8003032:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8003034:	b307      	cbz	r7, 8003078 <f_open+0x104>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8003036:	4639      	mov	r1, r7
 8003038:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800303a:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800303e:	f7ff fd77 	bl	8002b30 <remove_chain>
						if (res == FR_OK) {
 8003042:	b938      	cbnz	r0, 8003054 <f_open+0xe0>
							res = move_window(fs, dw);
 8003044:	9803      	ldr	r0, [sp, #12]
 8003046:	4641      	mov	r1, r8
 8003048:	f7ff fa9c 	bl	8002584 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800304c:	9b03      	ldr	r3, [sp, #12]
 800304e:	3f01      	subs	r7, #1
 8003050:	60df      	str	r7, [r3, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8003052:	b188      	cbz	r0, 8003078 <f_open+0x104>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003054:	2300      	movs	r3, #0
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	4606      	mov	r6, r0

	LEAVE_FF(fs, res);
}
 800305a:	4630      	mov	r0, r6
 800305c:	b010      	add	sp, #64	; 0x40
 800305e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8003062:	2006      	movs	r0, #6
 8003064:	e7ac      	b.n	8002fc0 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003066:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800306a:	f013 0f11 	tst.w	r3, #17
 800306e:	d122      	bne.n	80030b6 <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003070:	077b      	lsls	r3, r7, #29
 8003072:	d476      	bmi.n	8003162 <f_open+0x1ee>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003074:	073f      	lsls	r7, r7, #28
 8003076:	d4b8      	bmi.n	8002fea <f_open+0x76>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003078:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800307a:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8003080:	bf48      	it	mi
 8003082:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003086:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800308a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800308c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800308e:	bf14      	ite	ne
 8003090:	2101      	movne	r1, #1
 8003092:	2100      	moveq	r1, #0
 8003094:	a804      	add	r0, sp, #16
 8003096:	f7ff f973 	bl	8002380 <inc_lock>
 800309a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800309c:	b968      	cbnz	r0, 80030ba <f_open+0x146>
 800309e:	2002      	movs	r0, #2
 80030a0:	e7d8      	b.n	8003054 <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d1d6      	bne.n	8003054 <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80030a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80030aa:	06d8      	lsls	r0, r3, #27
 80030ac:	d45b      	bmi.n	8003166 <f_open+0x1f2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80030ae:	07ba      	lsls	r2, r7, #30
 80030b0:	d5e2      	bpl.n	8003078 <f_open+0x104>
 80030b2:	07df      	lsls	r7, r3, #31
 80030b4:	d5e0      	bpl.n	8003078 <f_open+0x104>
					res = FR_DENIED;
 80030b6:	2007      	movs	r0, #7
 80030b8:	e7cc      	b.n	8003054 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80030ba:	9f03      	ldr	r7, [sp, #12]
 80030bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030be:	7838      	ldrb	r0, [r7, #0]
 80030c0:	f7ff fca6 	bl	8002a10 <ld_clust.isra.0>
 80030c4:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80030c6:	f101 001c 	add.w	r0, r1, #28
 80030ca:	f7ff f90f 	bl	80022ec <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 80030ce:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 80030d0:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80030d2:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80030d4:	f104 0730 	add.w	r7, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80030d8:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 80030de:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 80030e0:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 80030e2:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80030e4:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80030e6:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80030e8:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80030ea:	4638      	mov	r0, r7
 80030ec:	f7ff f908 	bl	8002300 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80030f0:	06aa      	lsls	r2, r5, #26
 80030f2:	d5b2      	bpl.n	800305a <f_open+0xe6>
 80030f4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80030f8:	f1b8 0f00 	cmp.w	r8, #0
 80030fc:	d0ad      	beq.n	800305a <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80030fe:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003100:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003102:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003104:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003108:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800310a:	4545      	cmp	r5, r8
 800310c:	d319      	bcc.n	8003142 <f_open+0x1ce>
 800310e:	2000      	movs	r0, #0
				fp->clust = clst;
 8003110:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003112:	2800      	cmp	r0, #0
 8003114:	d19e      	bne.n	8003054 <f_open+0xe0>
 8003116:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800311a:	2b00      	cmp	r3, #0
 800311c:	d09d      	beq.n	800305a <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800311e:	9d03      	ldr	r5, [sp, #12]
 8003120:	4628      	mov	r0, r5
 8003122:	f7ff f99b 	bl	800245c <clust2sect>
 8003126:	2800      	cmp	r0, #0
 8003128:	d0b9      	beq.n	800309e <f_open+0x12a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800312a:	eb00 2258 	add.w	r2, r0, r8, lsr #9
 800312e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003130:	7868      	ldrb	r0, [r5, #1]
 8003132:	2301      	movs	r3, #1
 8003134:	4639      	mov	r1, r7
 8003136:	f7ff f8ad 	bl	8002294 <disk_read>
 800313a:	2800      	cmp	r0, #0
 800313c:	d08d      	beq.n	800305a <f_open+0xe6>
 800313e:	2001      	movs	r0, #1
 8003140:	e788      	b.n	8003054 <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f7ff fc6c 	bl	8002a20 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8003148:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800314a:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800314c:	eba8 0805 	sub.w	r8, r8, r5
					if (clst <= 1) res = FR_INT_ERR;
 8003150:	d903      	bls.n	800315a <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	d1d9      	bne.n	800310a <f_open+0x196>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003156:	2001      	movs	r0, #1
 8003158:	e7da      	b.n	8003110 <f_open+0x19c>
					if (clst <= 1) res = FR_INT_ERR;
 800315a:	2002      	movs	r0, #2
 800315c:	e7d8      	b.n	8003110 <f_open+0x19c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800315e:	2012      	movs	r0, #18
 8003160:	e778      	b.n	8003054 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003162:	2008      	movs	r0, #8
 8003164:	e776      	b.n	8003054 <f_open+0xe0>
					res = FR_NO_FILE;
 8003166:	2004      	movs	r0, #4
 8003168:	e774      	b.n	8003054 <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 800316a:	2609      	movs	r6, #9
 800316c:	e775      	b.n	800305a <f_open+0xe6>
 800316e:	bf00      	nop
 8003170:	20000cf4 	.word	0x20000cf4

08003174 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003178:	b087      	sub	sp, #28
 800317a:	4616      	mov	r6, r2
 800317c:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800317e:	9a01      	ldr	r2, [sp, #4]
 8003180:	2300      	movs	r3, #0
{
 8003182:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8003184:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003186:	a905      	add	r1, sp, #20
{
 8003188:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800318a:	f7ff f9ac 	bl	80024e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800318e:	4605      	mov	r5, r0
 8003190:	bb18      	cbnz	r0, 80031da <f_read+0x66>
 8003192:	7d65      	ldrb	r5, [r4, #21]
 8003194:	bb0d      	cbnz	r5, 80031da <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003196:	7d23      	ldrb	r3, [r4, #20]
 8003198:	f013 0301 	ands.w	r3, r3, #1
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	f000 809a 	beq.w	80032d6 <f_read+0x162>
	remain = fp->obj.objsize - fp->fptr;
 80031a2:	68e2      	ldr	r2, [r4, #12]
 80031a4:	69a3      	ldr	r3, [r4, #24]
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	4296      	cmp	r6, r2
 80031aa:	bf28      	it	cs
 80031ac:	4616      	movcs	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80031ae:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 80031b2:	b196      	cbz	r6, 80031da <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80031b4:	69a1      	ldr	r1, [r4, #24]
 80031b6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d17d      	bne.n	80032ba <f_read+0x146>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80031be:	9b05      	ldr	r3, [sp, #20]
 80031c0:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 80031c4:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 80031c8:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 80031cc:	d11b      	bne.n	8003206 <f_read+0x92>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80031ce:	b941      	cbnz	r1, 80031e2 <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80031d0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80031d2:	2801      	cmp	r0, #1
 80031d4:	d810      	bhi.n	80031f8 <f_read+0x84>
 80031d6:	2502      	movs	r5, #2
 80031d8:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80031da:	4628      	mov	r0, r5
 80031dc:	b007      	add	sp, #28
 80031de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80031e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031e4:	b11b      	cbz	r3, 80031ee <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff f943 	bl	8002472 <clmt_clust>
 80031ec:	e7f1      	b.n	80031d2 <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80031ee:	69e1      	ldr	r1, [r4, #28]
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	f7ff fc15 	bl	8002a20 <get_fat.isra.0>
 80031f6:	e7ec      	b.n	80031d2 <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d103      	bne.n	8003204 <f_read+0x90>
 80031fc:	2301      	movs	r3, #1
 80031fe:	9d02      	ldr	r5, [sp, #8]
 8003200:	7563      	strb	r3, [r4, #21]
 8003202:	e7ea      	b.n	80031da <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8003204:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003206:	f8dd b014 	ldr.w	fp, [sp, #20]
 800320a:	69e1      	ldr	r1, [r4, #28]
 800320c:	4658      	mov	r0, fp
 800320e:	f7ff f925 	bl	800245c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003212:	2800      	cmp	r0, #0
 8003214:	d0df      	beq.n	80031d6 <f_read+0x62>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003216:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800321a:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800321e:	d32f      	bcc.n	8003280 <f_read+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003220:	f8bb 200a 	ldrh.w	r2, [fp, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003224:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003228:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 800322c:	4291      	cmp	r1, r2
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800322e:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003232:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 8003234:	bf88      	it	hi
 8003236:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800323a:	463a      	mov	r2, r7
 800323c:	9303      	str	r3, [sp, #12]
 800323e:	f7ff f829 	bl	8002294 <disk_read>
 8003242:	2800      	cmp	r0, #0
 8003244:	d1da      	bne.n	80031fc <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003246:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	2a00      	cmp	r2, #0
 800324e:	da0b      	bge.n	8003268 <f_read+0xf4>
 8003250:	6a20      	ldr	r0, [r4, #32]
 8003252:	1bc0      	subs	r0, r0, r7
 8003254:	4298      	cmp	r0, r3
 8003256:	d207      	bcs.n	8003268 <f_read+0xf4>
	if (cnt) {
 8003258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325c:	4651      	mov	r1, sl
 800325e:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8003262:	f7ff f95a 	bl	800251a <mem_cpy.part.0>
 8003266:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003268:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	9a01      	ldr	r2, [sp, #4]
 800326e:	443b      	add	r3, r7
 8003270:	61a3      	str	r3, [r4, #24]
 8003272:	9b01      	ldr	r3, [sp, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	443b      	add	r3, r7
 8003278:	44b9      	add	r9, r7
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	1bf6      	subs	r6, r6, r7
 800327e:	e798      	b.n	80031b2 <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003280:	6a22      	ldr	r2, [r4, #32]
 8003282:	42ba      	cmp	r2, r7
 8003284:	d018      	beq.n	80032b8 <f_read+0x144>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003286:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da0b      	bge.n	80032a6 <f_read+0x132>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800328e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003292:	2301      	movs	r3, #1
 8003294:	4651      	mov	r1, sl
 8003296:	f7ff f80b 	bl	80022b0 <disk_write>
 800329a:	2800      	cmp	r0, #0
 800329c:	d1ae      	bne.n	80031fc <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 800329e:	7d23      	ldrb	r3, [r4, #20]
 80032a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a4:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80032a6:	9805      	ldr	r0, [sp, #20]
 80032a8:	2301      	movs	r3, #1
 80032aa:	7840      	ldrb	r0, [r0, #1]
 80032ac:	463a      	mov	r2, r7
 80032ae:	4651      	mov	r1, sl
 80032b0:	f7fe fff0 	bl	8002294 <disk_read>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d1a1      	bne.n	80031fc <f_read+0x88>
			fp->sect = sect;
 80032b8:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80032ba:	69a1      	ldr	r1, [r4, #24]
 80032bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80032c0:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80032c4:	42b7      	cmp	r7, r6
 80032c6:	bf28      	it	cs
 80032c8:	4637      	movcs	r7, r6
	if (cnt) {
 80032ca:	463a      	mov	r2, r7
 80032cc:	4451      	add	r1, sl
 80032ce:	4648      	mov	r0, r9
 80032d0:	f7ff f923 	bl	800251a <mem_cpy.part.0>
}
 80032d4:	e7c9      	b.n	800326a <f_read+0xf6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80032d6:	2507      	movs	r5, #7
 80032d8:	e77f      	b.n	80031da <f_read+0x66>

080032da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80032da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032de:	4699      	mov	r9, r3
 80032e0:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80032e2:	2300      	movs	r3, #0
{
 80032e4:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
 80032e6:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80032ea:	a903      	add	r1, sp, #12
{
 80032ec:	4604      	mov	r4, r0
 80032ee:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80032f0:	f7ff f8f9 	bl	80024e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80032f4:	4605      	mov	r5, r0
 80032f6:	bb50      	cbnz	r0, 800334e <f_write+0x74>
 80032f8:	7d65      	ldrb	r5, [r4, #21]
 80032fa:	bb45      	cbnz	r5, 800334e <f_write+0x74>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80032fc:	7d23      	ldrb	r3, [r4, #20]
 80032fe:	079a      	lsls	r2, r3, #30
 8003300:	f140 80b0 	bpl.w	8003464 <f_write+0x18a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8003304:	69a3      	ldr	r3, [r4, #24]
 8003306:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003308:	bf28      	it	cs
 800330a:	43de      	mvncs	r6, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800330c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8003310:	b1ce      	cbz	r6, 8003346 <f_write+0x6c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8003312:	69a1      	ldr	r1, [r4, #24]
 8003314:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 8091 	bne.w	8003440 <f_write+0x166>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	895f      	ldrh	r7, [r3, #10]
 8003322:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8003324:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8003328:	d124      	bne.n	8003374 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800332a:	b931      	cbnz	r1, 800333a <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800332c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800332e:	b9a0      	cbnz	r0, 800335a <f_write+0x80>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8003330:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003332:	4620      	mov	r0, r4
 8003334:	f7ff fc34 	bl	8002ba0 <create_chain>
 8003338:	e004      	b.n	8003344 <f_write+0x6a>
					if (fp->cltbl) {
 800333a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800333c:	b15b      	cbz	r3, 8003356 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800333e:	4620      	mov	r0, r4
 8003340:	f7ff f897 	bl	8002472 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003344:	b948      	cbnz	r0, 800335a <f_write+0x80>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8003346:	7d23      	ldrb	r3, [r4, #20]
 8003348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334c:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800334e:	4628      	mov	r0, r5
 8003350:	b005      	add	sp, #20
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003356:	69e1      	ldr	r1, [r4, #28]
 8003358:	e7eb      	b.n	8003332 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800335a:	2801      	cmp	r0, #1
 800335c:	d102      	bne.n	8003364 <f_write+0x8a>
 800335e:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003360:	7565      	strb	r5, [r4, #21]
 8003362:	e7f4      	b.n	800334e <f_write+0x74>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d101      	bne.n	800336c <f_write+0x92>
 8003368:	2501      	movs	r5, #1
 800336a:	e7f9      	b.n	8003360 <f_write+0x86>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800336c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800336e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003370:	b903      	cbnz	r3, 8003374 <f_write+0x9a>
 8003372:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8003374:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0c      	bge.n	8003396 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800337c:	9803      	ldr	r0, [sp, #12]
 800337e:	6a22      	ldr	r2, [r4, #32]
 8003380:	7840      	ldrb	r0, [r0, #1]
 8003382:	2301      	movs	r3, #1
 8003384:	4651      	mov	r1, sl
 8003386:	f7fe ff93 	bl	80022b0 <disk_write>
 800338a:	2800      	cmp	r0, #0
 800338c:	d1ec      	bne.n	8003368 <f_write+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800338e:	7d23      	ldrb	r3, [r4, #20]
 8003390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003394:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003396:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800339a:	69e1      	ldr	r1, [r4, #28]
 800339c:	4658      	mov	r0, fp
 800339e:	f7ff f85d 	bl	800245c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d0db      	beq.n	800335e <f_write+0x84>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80033a6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80033aa:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80033ae:	d335      	bcc.n	800341c <f_write+0x142>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80033b0:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 80033b4:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 80033b8:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80033ba:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80033be:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 80033c2:	bf88      	it	hi
 80033c4:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80033c6:	4641      	mov	r1, r8
 80033c8:	e9cd 2300 	strd	r2, r3, [sp]
 80033cc:	f7fe ff70 	bl	80022b0 <disk_write>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d1c9      	bne.n	8003368 <f_write+0x8e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80033d4:	6a21      	ldr	r1, [r4, #32]
 80033d6:	9a00      	ldr	r2, [sp, #0]
 80033d8:	9b01      	ldr	r3, [sp, #4]
 80033da:	1a89      	subs	r1, r1, r2
 80033dc:	4299      	cmp	r1, r3
 80033de:	d20c      	bcs.n	80033fa <f_write+0x120>
 80033e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e4:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80033e8:	4650      	mov	r0, sl
 80033ea:	9300      	str	r3, [sp, #0]
	if (cnt) {
 80033ec:	f7ff f895 	bl	800251a <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 80033f0:	7d22      	ldrb	r2, [r4, #20]
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033f8:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80033fa:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80033fc:	69a3      	ldr	r3, [r4, #24]
 80033fe:	68e2      	ldr	r2, [r4, #12]
 8003400:	443b      	add	r3, r7
 8003402:	61a3      	str	r3, [r4, #24]
 8003404:	429a      	cmp	r2, r3
 8003406:	bf2c      	ite	cs
 8003408:	60e2      	strcs	r2, [r4, #12]
 800340a:	60e3      	strcc	r3, [r4, #12]
 800340c:	f8d9 3000 	ldr.w	r3, [r9]
 8003410:	443b      	add	r3, r7
 8003412:	44b8      	add	r8, r7
 8003414:	f8c9 3000 	str.w	r3, [r9]
 8003418:	1bf6      	subs	r6, r6, r7
 800341a:	e779      	b.n	8003310 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800341c:	6a23      	ldr	r3, [r4, #32]
 800341e:	4293      	cmp	r3, r2
 8003420:	d00d      	beq.n	800343e <f_write+0x164>
 8003422:	68e1      	ldr	r1, [r4, #12]
 8003424:	69a3      	ldr	r3, [r4, #24]
 8003426:	4299      	cmp	r1, r3
 8003428:	d909      	bls.n	800343e <f_write+0x164>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800342a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800342e:	9200      	str	r2, [sp, #0]
 8003430:	2301      	movs	r3, #1
 8003432:	4651      	mov	r1, sl
 8003434:	f7fe ff2e 	bl	8002294 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003438:	9a00      	ldr	r2, [sp, #0]
 800343a:	2800      	cmp	r0, #0
 800343c:	d194      	bne.n	8003368 <f_write+0x8e>
			fp->sect = sect;
 800343e:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003440:	69a0      	ldr	r0, [r4, #24]
 8003442:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003446:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800344a:	42b7      	cmp	r7, r6
 800344c:	bf28      	it	cs
 800344e:	4637      	movcs	r7, r6
	if (cnt) {
 8003450:	463a      	mov	r2, r7
 8003452:	4641      	mov	r1, r8
 8003454:	4450      	add	r0, sl
 8003456:	f7ff f860 	bl	800251a <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800345a:	7d23      	ldrb	r3, [r4, #20]
 800345c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003460:	7523      	strb	r3, [r4, #20]
 8003462:	e7cb      	b.n	80033fc <f_write+0x122>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003464:	2507      	movs	r5, #7
 8003466:	e772      	b.n	800334e <f_write+0x74>

08003468 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800346a:	a901      	add	r1, sp, #4
{
 800346c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800346e:	f7ff f83a 	bl	80024e6 <validate>
	if (res == FR_OK) {
 8003472:	4604      	mov	r4, r0
 8003474:	2800      	cmp	r0, #0
 8003476:	d13b      	bne.n	80034f0 <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003478:	7d2b      	ldrb	r3, [r5, #20]
 800347a:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 800347e:	d037      	beq.n	80034f0 <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	d50c      	bpl.n	800349e <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003484:	9801      	ldr	r0, [sp, #4]
 8003486:	6a2a      	ldr	r2, [r5, #32]
 8003488:	7840      	ldrb	r0, [r0, #1]
 800348a:	2301      	movs	r3, #1
 800348c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8003490:	f7fe ff0e 	bl	80022b0 <disk_write>
 8003494:	bb78      	cbnz	r0, 80034f6 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003496:	7d2b      	ldrb	r3, [r5, #20]
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349c:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800349e:	f7fe ff23 	bl	80022e8 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80034a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80034a4:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80034a6:	9801      	ldr	r0, [sp, #4]
 80034a8:	f7ff f86c 	bl	8002584 <move_window>
				if (res == FR_OK) {
 80034ac:	4604      	mov	r4, r0
 80034ae:	b9f8      	cbnz	r0, 80034f0 <f_sync+0x88>
					dir = fp->dir_ptr;
 80034b0:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80034b2:	7af3      	ldrb	r3, [r6, #11]
 80034b4:	f043 0320 	orr.w	r3, r3, #32
 80034b8:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80034ba:	68aa      	ldr	r2, [r5, #8]
 80034bc:	6828      	ldr	r0, [r5, #0]
 80034be:	4631      	mov	r1, r6
 80034c0:	f7fe ffe8 	bl	8002494 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80034c4:	68e9      	ldr	r1, [r5, #12]
 80034c6:	f106 001c 	add.w	r0, r6, #28
 80034ca:	f7fe ff11 	bl	80022f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80034ce:	4639      	mov	r1, r7
 80034d0:	f106 0016 	add.w	r0, r6, #22
 80034d4:	f7fe ff0c 	bl	80022f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80034d8:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80034da:	74b4      	strb	r4, [r6, #18]
					fs->wflag = 1;
 80034dc:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80034de:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80034e0:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80034e2:	f7ff fa4a 	bl	800297a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80034e6:	7d2b      	ldrb	r3, [r5, #20]
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 80034ec:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 80034ee:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80034f0:	4620      	mov	r0, r4
 80034f2:	b003      	add	sp, #12
 80034f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80034f6:	2401      	movs	r4, #1
 80034f8:	e7fa      	b.n	80034f0 <f_sync+0x88>

080034fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80034fa:	b513      	push	{r0, r1, r4, lr}
 80034fc:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80034fe:	f7ff ffb3 	bl	8003468 <f_sync>
	if (res == FR_OK)
 8003502:	b948      	cbnz	r0, 8003518 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003504:	a901      	add	r1, sp, #4
 8003506:	4620      	mov	r0, r4
 8003508:	f7fe ffed 	bl	80024e6 <validate>
		if (res == FR_OK) {
 800350c:	b920      	cbnz	r0, 8003518 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800350e:	6920      	ldr	r0, [r4, #16]
 8003510:	f7fe ff78 	bl	8002404 <dec_lock>
			if (res == FR_OK)
 8003514:	b900      	cbnz	r0, 8003518 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003516:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8003518:	b002      	add	sp, #8
 800351a:	bd10      	pop	{r4, pc}

0800351c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800351c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <FATFS_LinkDriverEx+0x40>)
 8003520:	7b9c      	ldrb	r4, [r3, #14]
 8003522:	2c01      	cmp	r4, #1
 8003524:	d817      	bhi.n	8003556 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003526:	7b9d      	ldrb	r5, [r3, #14]
 8003528:	b2ed      	uxtb	r5, r5
 800352a:	2400      	movs	r4, #0
 800352c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800352e:	7b9d      	ldrb	r5, [r3, #14]
 8003530:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003534:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003536:	7b98      	ldrb	r0, [r3, #14]
 8003538:	4418      	add	r0, r3
 800353a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 800353c:	7b9a      	ldrb	r2, [r3, #14]
 800353e:	1c50      	adds	r0, r2, #1
 8003540:	b2c0      	uxtb	r0, r0
 8003542:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003544:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003546:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003548:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800354a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800354c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800354e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003550:	70cc      	strb	r4, [r1, #3]
 8003552:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8003554:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003556:	2001      	movs	r0, #1
 8003558:	e7fc      	b.n	8003554 <FATFS_LinkDriverEx+0x38>
 800355a:	bf00      	nop
 800355c:	20000d20 	.word	0x20000d20

08003560 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	f7ff bfdb 	b.w	800351c <FATFS_LinkDriverEx>
	...

08003568 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <FATFS_UnLinkDriverEx+0x2c>)
 800356a:	7b93      	ldrb	r3, [r2, #14]
 800356c:	b17b      	cbz	r3, 800358e <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 800356e:	7803      	ldrb	r3, [r0, #0]
 8003570:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8003572:	b2db      	uxtb	r3, r3
 8003574:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8003578:	6848      	ldr	r0, [r1, #4]
 800357a:	b140      	cbz	r0, 800358e <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800357c:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800357e:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8003580:	7318      	strb	r0, [r3, #12]
      disk.nbr--;
 8003582:	7b93      	ldrb	r3, [r2, #14]
      disk.drv[DiskNum] = 0;
 8003584:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8003586:	3b01      	subs	r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	7393      	strb	r3, [r2, #14]
      ret = 0;
 800358c:	4770      	bx	lr
  uint8_t ret = 1;
 800358e:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000d20 	.word	0x20000d20

08003598 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8003598:	2100      	movs	r1, #0
 800359a:	f7ff bfe5 	b.w	8003568 <FATFS_UnLinkDriverEx>

0800359e <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 800359e:	2000      	movs	r0, #0
 80035a0:	4770      	bx	lr
	...

080035a4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80035a4:	4601      	mov	r1, r0
 80035a6:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 80035a8:	4803      	ldr	r0, [pc, #12]	; (80035b8 <USBH_status+0x14>)
 80035aa:	f000 faca 	bl	8003b42 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80035ae:	fab0 f080 	clz	r0, r0
 80035b2:	0940      	lsrs	r0, r0, #5
 80035b4:	bd08      	pop	{r3, pc}
 80035b6:	bf00      	nop
 80035b8:	200000b4 	.word	0x200000b4

080035bc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80035bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c0:	4617      	mov	r7, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80035c2:	078a      	lsls	r2, r1, #30
{
 80035c4:	b090      	sub	sp, #64	; 0x40
 80035c6:	4605      	mov	r5, r0
 80035c8:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80035ca:	d032      	beq.n	8003632 <USBH_read+0x76>
 80035cc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800364c <USBH_read+0x90>
 80035d0:	f8d8 24d0 	ldr.w	r2, [r8, #1232]	; 0x4d0
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	b362      	cbz	r2, 8003632 <USBH_read+0x76>
  {
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80035d8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8003650 <USBH_read+0x94>
 80035dc:	1e5c      	subs	r4, r3, #1
 80035de:	f04f 0a01 	mov.w	sl, #1
    while ((count--)&&(status == USBH_OK))
 80035e2:	1c63      	adds	r3, r4, #1
 80035e4:	d101      	bne.n	80035ea <USBH_read+0x2e>
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
  }

  if(status == USBH_OK)
  {
    res = RES_OK;
 80035e6:	2000      	movs	r0, #0
 80035e8:	e017      	b.n	800361a <USBH_read+0x5e>
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80035ea:	f8cd a000 	str.w	sl, [sp]
 80035ee:	464b      	mov	r3, r9
 80035f0:	193a      	adds	r2, r7, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	4640      	mov	r0, r8
 80035f6:	f000 facc 	bl	8003b92 <USBH_MSC_Read>
      if(status == USBH_OK)
 80035fa:	b188      	cbz	r0, 8003620 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 80035fc:	4813      	ldr	r0, [pc, #76]	; (800364c <USBH_read+0x90>)
 80035fe:	aa03      	add	r2, sp, #12
 8003600:	4629      	mov	r1, r5
 8003602:	f000 faaf 	bl	8003b64 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8003606:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800360a:	2b28      	cmp	r3, #40	; 0x28
 800360c:	d01b      	beq.n	8003646 <USBH_read+0x8a>
 800360e:	2b3a      	cmp	r3, #58	; 0x3a
 8003610:	d019      	beq.n	8003646 <USBH_read+0x8a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf14      	ite	ne
 8003616:	2001      	movne	r0, #1
 8003618:	2003      	moveq	r0, #3
      break;
    }
  }

  return res;
}
 800361a:	b010      	add	sp, #64	; 0x40
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8003620:	eb06 2044 	add.w	r0, r6, r4, lsl #9
 8003624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003628:	4649      	mov	r1, r9
 800362a:	f001 fba1 	bl	8004d70 <memcpy>
 800362e:	3c01      	subs	r4, #1
 8003630:	e7d7      	b.n	80035e2 <USBH_read+0x26>
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <USBH_read+0x90>)
 8003636:	4633      	mov	r3, r6
 8003638:	463a      	mov	r2, r7
 800363a:	4629      	mov	r1, r5
 800363c:	f000 faa9 	bl	8003b92 <USBH_MSC_Read>
  if(status == USBH_OK)
 8003640:	2800      	cmp	r0, #0
 8003642:	d0d0      	beq.n	80035e6 <USBH_read+0x2a>
 8003644:	e7da      	b.n	80035fc <USBH_read+0x40>
      res = RES_NOTRDY;
 8003646:	2003      	movs	r0, #3
 8003648:	e7e7      	b.n	800361a <USBH_read+0x5e>
 800364a:	bf00      	nop
 800364c:	200000b4 	.word	0x200000b4
 8003650:	20000d30 	.word	0x20000d30

08003654 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003654:	b510      	push	{r4, lr}
 8003656:	4603      	mov	r3, r0
 8003658:	b08e      	sub	sp, #56	; 0x38
 800365a:	4608      	mov	r0, r1
 800365c:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 800365e:	2903      	cmp	r1, #3
 8003660:	d803      	bhi.n	800366a <USBH_ioctl+0x16>
 8003662:	e8df f001 	tbb	[pc, r1]
 8003666:	0503      	.short	0x0503
 8003668:	1a10      	.short	0x1a10
 800366a:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 800366c:	b00e      	add	sp, #56	; 0x38
 800366e:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8003670:	480f      	ldr	r0, [pc, #60]	; (80036b0 <USBH_ioctl+0x5c>)
 8003672:	aa01      	add	r2, sp, #4
 8003674:	4619      	mov	r1, r3
 8003676:	f000 fa75 	bl	8003b64 <USBH_MSC_GetLUNInfo>
 800367a:	b108      	cbz	r0, 8003680 <USBH_ioctl+0x2c>
      res = RES_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7f5      	b.n	800366c <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
 8003680:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8003682:	6023      	str	r3, [r4, #0]
      res = RES_OK;
 8003684:	e7f2      	b.n	800366c <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8003686:	480a      	ldr	r0, [pc, #40]	; (80036b0 <USBH_ioctl+0x5c>)
 8003688:	aa01      	add	r2, sp, #4
 800368a:	4619      	mov	r1, r3
 800368c:	f000 fa6a 	bl	8003b64 <USBH_MSC_GetLUNInfo>
 8003690:	2800      	cmp	r0, #0
 8003692:	d1f3      	bne.n	800367c <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
 8003694:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003698:	e7f3      	b.n	8003682 <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <USBH_ioctl+0x5c>)
 800369c:	aa01      	add	r2, sp, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	f000 fa60 	bl	8003b64 <USBH_MSC_GetLUNInfo>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1e9      	bne.n	800367c <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80036a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80036ac:	0a5b      	lsrs	r3, r3, #9
 80036ae:	e7e8      	b.n	8003682 <USBH_ioctl+0x2e>
 80036b0:	200000b4 	.word	0x200000b4

080036b4 <USBH_write>:
{
 80036b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036b8:	4617      	mov	r7, r2
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80036ba:	078a      	lsls	r2, r1, #30
{
 80036bc:	b091      	sub	sp, #68	; 0x44
 80036be:	4605      	mov	r5, r0
 80036c0:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80036c2:	d005      	beq.n	80036d0 <USBH_write+0x1c>
 80036c4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800374c <USBH_write+0x98>
 80036c8:	f8d8 24d0 	ldr.w	r2, [r8, #1232]	; 0x4d0
 80036cc:	6912      	ldr	r2, [r2, #16]
 80036ce:	bb7a      	cbnz	r2, 8003730 <USBH_write+0x7c>
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	463a      	mov	r2, r7
 80036d4:	4633      	mov	r3, r6
 80036d6:	4629      	mov	r1, r5
 80036d8:	481c      	ldr	r0, [pc, #112]	; (800374c <USBH_write+0x98>)
 80036da:	f000 fa9b 	bl	8003c14 <USBH_MSC_Write>
 80036de:	e02d      	b.n	800373c <USBH_write+0x88>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80036e0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	4648      	mov	r0, r9
 80036ea:	f001 fb41 	bl	8004d70 <memcpy>
      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 80036ee:	2301      	movs	r3, #1
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	464b      	mov	r3, r9
 80036f6:	4629      	mov	r1, r5
 80036f8:	4640      	mov	r0, r8
 80036fa:	f000 fa8b 	bl	8003c14 <USBH_MSC_Write>
      if(status == USBH_FAIL)
 80036fe:	2802      	cmp	r0, #2
 8003700:	f104 34ff 	add.w	r4, r4, #4294967295
 8003704:	d118      	bne.n	8003738 <USBH_write+0x84>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8003706:	4811      	ldr	r0, [pc, #68]	; (800374c <USBH_write+0x98>)
 8003708:	aa03      	add	r2, sp, #12
 800370a:	4629      	mov	r1, r5
 800370c:	f000 fa2a 	bl	8003b64 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8003710:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003714:	2b27      	cmp	r3, #39	; 0x27
 8003716:	d014      	beq.n	8003742 <USBH_write+0x8e>
 8003718:	d806      	bhi.n	8003728 <USBH_write+0x74>
 800371a:	2b04      	cmp	r3, #4
 800371c:	bf14      	ite	ne
 800371e:	2001      	movne	r0, #1
 8003720:	2003      	moveq	r0, #3
}
 8003722:	b011      	add	sp, #68	; 0x44
 8003724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8003728:	2b28      	cmp	r3, #40	; 0x28
 800372a:	d00c      	beq.n	8003746 <USBH_write+0x92>
 800372c:	2b3a      	cmp	r3, #58	; 0x3a
 800372e:	e7f5      	b.n	800371c <USBH_write+0x68>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8003730:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8003750 <USBH_write+0x9c>
 8003734:	1e5c      	subs	r4, r3, #1
  USBH_StatusTypeDef  status = USBH_OK;
 8003736:	2000      	movs	r0, #0
    while (count--)
 8003738:	1c63      	adds	r3, r4, #1
 800373a:	d1d1      	bne.n	80036e0 <USBH_write+0x2c>
  if(status == USBH_OK)
 800373c:	2800      	cmp	r0, #0
 800373e:	d0f0      	beq.n	8003722 <USBH_write+0x6e>
 8003740:	e7e1      	b.n	8003706 <USBH_write+0x52>
      res = RES_WRPRT;
 8003742:	2002      	movs	r0, #2
 8003744:	e7ed      	b.n	8003722 <USBH_write+0x6e>
    switch (info.sense.asc)
 8003746:	2003      	movs	r0, #3
 8003748:	e7eb      	b.n	8003722 <USBH_write+0x6e>
 800374a:	bf00      	nop
 800374c:	200000b4 	.word	0x200000b4
 8003750:	20000d30 	.word	0x20000d30

08003754 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8003754:	2000      	movs	r0, #0
 8003756:	4770      	bx	lr

08003758 <USBH_MSC_Process>:
{
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800375a:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800375e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 8003760:	7b23      	ldrb	r3, [r4, #12]
{
 8003762:	4607      	mov	r7, r0
  switch (MSC_Handle->state)
 8003764:	b123      	cbz	r3, 8003770 <USBH_MSC_Process+0x18>
 8003766:	2b01      	cmp	r3, #1
 8003768:	f000 80cf 	beq.w	800390a <USBH_MSC_Process+0x1b2>
  USBH_StatusTypeDef error = USBH_BUSY;
 800376c:	2001      	movs	r0, #1
}
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8003770:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8003774:	7822      	ldrb	r2, [r4, #0]
 8003776:	428a      	cmp	r2, r1
 8003778:	f04f 0501 	mov.w	r5, #1
 800377c:	f240 80bd 	bls.w	80038fa <USBH_MSC_Process+0x1a2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003780:	2634      	movs	r6, #52	; 0x34
 8003782:	fb06 4301 	mla	r3, r6, r1, r4
 8003786:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800378a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800378e:	2b08      	cmp	r3, #8
 8003790:	d8ec      	bhi.n	800376c <USBH_MSC_Process+0x14>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <USBH_MSC_Process+0x40>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037bd 	.word	0x080037bd
 800379c:	0800376d 	.word	0x0800376d
 80037a0:	080037ff 	.word	0x080037ff
 80037a4:	08003865 	.word	0x08003865
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	0800389b 	.word	0x0800389b
 80037b0:	0800376d 	.word	0x0800376d
 80037b4:	0800376d 	.word	0x0800376d
 80037b8:	080038f3 	.word	0x080038f3
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80037bc:	fb06 4101 	mla	r1, r6, r1, r4
 80037c0:	2304      	movs	r3, #4
 80037c2:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 80037c6:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 80037ca:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
 80037ce:	e7cd      	b.n	800376c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80037d0:	fb06 4201 	mla	r2, r6, r1, r4
 80037d4:	329f      	adds	r2, #159	; 0x9f
 80037d6:	b2c9      	uxtb	r1, r1
 80037d8:	f000 fbbe 	bl	8003f58 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 80037dc:	b938      	cbnz	r0, 80037ee <USBH_MSC_Process+0x96>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80037de:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80037e2:	fb06 4403 	mla	r4, r6, r3, r4
 80037e6:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80037e8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 80037ec:	e7be      	b.n	800376c <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 80037ee:	2802      	cmp	r0, #2
 80037f0:	d14b      	bne.n	800388a <USBH_MSC_Process+0x132>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80037f2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80037f6:	fb06 4403 	mla	r4, r6, r3, r4
 80037fa:	2305      	movs	r3, #5
 80037fc:	e7f4      	b.n	80037e8 <USBH_MSC_Process+0x90>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80037fe:	b2c9      	uxtb	r1, r1
 8003800:	f000 fb52 	bl	8003ea8 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8003804:	b988      	cbnz	r0, 800382a <USBH_MSC_Process+0xd2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8003806:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800380a:	2234      	movs	r2, #52	; 0x34
 800380c:	fb02 4403 	mla	r4, r2, r3, r4
 8003810:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8003814:	3b00      	subs	r3, #0
 8003816:	bf18      	it	ne
 8003818:	2301      	movne	r3, #1
 800381a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800381e:	2303      	movs	r3, #3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003820:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003824:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
 8003828:	e7a0      	b.n	800376c <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 800382a:	2802      	cmp	r0, #2
 800382c:	d10e      	bne.n	800384c <USBH_MSC_Process+0xf4>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800382e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003832:	2234      	movs	r2, #52	; 0x34
 8003834:	fb02 4403 	mla	r4, r2, r3, r4
 8003838:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800383c:	3b02      	subs	r3, #2
 800383e:	bf18      	it	ne
 8003840:	2301      	movne	r3, #1
 8003842:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8003846:	f240 1305 	movw	r3, #261	; 0x105
 800384a:	e7e9      	b.n	8003820 <USBH_MSC_Process+0xc8>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800384c:	2804      	cmp	r0, #4
 800384e:	d18d      	bne.n	800376c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003850:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003854:	2234      	movs	r2, #52	; 0x34
 8003856:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800385a:	f240 2301 	movw	r3, #513	; 0x201
 800385e:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 8003862:	e783      	b.n	800376c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8003864:	fb06 4201 	mla	r2, r6, r1, r4
 8003868:	3294      	adds	r2, #148	; 0x94
 800386a:	b2c9      	uxtb	r1, r1
 800386c:	f000 fb3f 	bl	8003eee <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8003870:	2800      	cmp	r0, #0
 8003872:	d1bc      	bne.n	80037ee <USBH_MSC_Process+0x96>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8003874:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003878:	fb06 4603 	mla	r6, r6, r3, r4
 800387c:	2001      	movs	r0, #1
 800387e:	f8a6 0090 	strh.w	r0, [r6, #144]	; 0x90
              MSC_Handle->current_lun++;
 8003882:	4403      	add	r3, r0
 8003884:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8003888:	e771      	b.n	800376e <USBH_MSC_Process+0x16>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800388a:	2804      	cmp	r0, #4
 800388c:	f47f af6e 	bne.w	800376c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003890:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003894:	fb06 4403 	mla	r4, r6, r3, r4
 8003898:	e7df      	b.n	800385a <USBH_MSC_Process+0x102>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800389a:	fb06 4201 	mla	r2, r6, r1, r4
 800389e:	329c      	adds	r2, #156	; 0x9c
 80038a0:	b2c9      	uxtb	r1, r1
 80038a2:	f000 fbb9 	bl	8004018 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 80038a6:	b9e0      	cbnz	r0, 80038e2 <USBH_MSC_Process+0x18a>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80038a8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80038ac:	fb06 4603 	mla	r6, r6, r3, r4
 80038b0:	f896 209c 	ldrb.w	r2, [r6, #156]	; 0x9c
 80038b4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80038b8:	2a02      	cmp	r2, #2
 80038ba:	d10b      	bne.n	80038d4 <USBH_MSC_Process+0x17c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80038bc:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 80038c0:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 80038c4:	1a09      	subs	r1, r1, r0
 80038c6:	f242 700f 	movw	r0, #9999	; 0x270f
 80038ca:	4281      	cmp	r1, r0
 80038cc:	d802      	bhi.n	80038d4 <USBH_MSC_Process+0x17c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80038ce:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
                  break;
 80038d2:	e74b      	b.n	800376c <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80038d4:	2234      	movs	r2, #52	; 0x34
 80038d6:	fb02 4203 	mla	r2, r2, r3, r4
 80038da:	2001      	movs	r0, #1
 80038dc:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
 80038e0:	e7cf      	b.n	8003882 <USBH_MSC_Process+0x12a>
            if (scsi_status == USBH_FAIL)
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d1d1      	bne.n	800388a <USBH_MSC_Process+0x132>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80038e6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80038ea:	fb06 4403 	mla	r4, r6, r3, r4
 80038ee:	2308      	movs	r3, #8
 80038f0:	e77a      	b.n	80037e8 <USBH_MSC_Process+0x90>
            MSC_Handle->current_lun++;
 80038f2:	3101      	adds	r1, #1
 80038f4:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 80038f8:	e738      	b.n	800376c <USBH_MSC_Process+0x14>
        MSC_Handle->state = MSC_IDLE;
 80038fa:	7325      	strb	r5, [r4, #12]
        MSC_Handle->current_lun = 0U;
 80038fc:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003900:	2102      	movs	r1, #2
 8003902:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 8003906:	4798      	blx	r3
 8003908:	e730      	b.n	800376c <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 800390a:	2000      	movs	r0, #0
 800390c:	e72f      	b.n	800376e <USBH_MSC_Process+0x16>
 800390e:	bf00      	nop

08003910 <USBH_MSC_ClassRequest>:
{
 8003910:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003912:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
 8003916:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8003918:	7ba2      	ldrb	r2, [r4, #14]
 800391a:	2a02      	cmp	r2, #2
{
 800391c:	4603      	mov	r3, r0
  switch (MSC_Handle->req_state)
 800391e:	d002      	beq.n	8003926 <USBH_MSC_ClassRequest+0x16>
 8003920:	2a03      	cmp	r2, #3
 8003922:	d021      	beq.n	8003968 <USBH_MSC_ClassRequest+0x58>
 8003924:	bb32      	cbnz	r2, 8003974 <USBH_MSC_ClassRequest+0x64>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8003926:	4621      	mov	r1, r4
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f9bc 	bl	8003ca6 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800392e:	2803      	cmp	r0, #3
 8003930:	d117      	bne.n	8003962 <USBH_MSC_ClassRequest+0x52>
        MSC_Handle->max_lun = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8003936:	7823      	ldrb	r3, [r4, #0]
 8003938:	2b02      	cmp	r3, #2
 800393a:	bf98      	it	ls
 800393c:	3301      	addls	r3, #1
 800393e:	f04f 0202 	mov.w	r2, #2
 8003942:	bf94      	ite	ls
 8003944:	b2db      	uxtbls	r3, r3
 8003946:	4613      	movhi	r3, r2
          MSC_Handle->unit[i].state_changed = 0U;
 8003948:	2000      	movs	r0, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800394a:	2b01      	cmp	r3, #1
 800394c:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800394e:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8003952:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8003956:	d006      	beq.n	8003966 <USBH_MSC_ClassRequest+0x56>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8003958:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 800395c:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8003960:	e001      	b.n	8003966 <USBH_MSC_ClassRequest+0x56>
      if (status == USBH_OK)
 8003962:	2800      	cmp	r0, #0
 8003964:	d0e7      	beq.n	8003936 <USBH_MSC_ClassRequest+0x26>
}
 8003966:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8003968:	2100      	movs	r1, #0
 800396a:	f001 f927 	bl	8004bbc <USBH_ClrFeature>
 800396e:	b908      	cbnz	r0, 8003974 <USBH_MSC_ClassRequest+0x64>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8003970:	7be3      	ldrb	r3, [r4, #15]
 8003972:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8003974:	2001      	movs	r0, #1
 8003976:	e7f6      	b.n	8003966 <USBH_MSC_ClassRequest+0x56>

08003978 <USBH_MSC_InterfaceDeInit>:
{
 8003978:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800397a:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800397e:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 8003980:	7969      	ldrb	r1, [r5, #5]
{
 8003982:	4604      	mov	r4, r0
  if ((MSC_Handle->OutPipe) != 0U)
 8003984:	b139      	cbz	r1, 8003996 <USBH_MSC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8003986:	f001 f993 	bl	8004cb0 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800398a:	7969      	ldrb	r1, [r5, #5]
 800398c:	4620      	mov	r0, r4
 800398e:	f001 f9ac 	bl	8004cea <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8003992:	2300      	movs	r3, #0
 8003994:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 8003996:	7929      	ldrb	r1, [r5, #4]
 8003998:	b141      	cbz	r1, 80039ac <USBH_MSC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800399a:	4620      	mov	r0, r4
 800399c:	f001 f988 	bl	8004cb0 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80039a0:	7929      	ldrb	r1, [r5, #4]
 80039a2:	4620      	mov	r0, r4
 80039a4:	f001 f9a1 	bl	8004cea <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80039a8:	2300      	movs	r3, #0
 80039aa:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 80039ac:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 80039b0:	69d8      	ldr	r0, [r3, #28]
 80039b2:	b128      	cbz	r0, 80039c0 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 80039b4:	f001 f9d4 	bl	8004d60 <free>
    phost->pActiveClass->pData = 0U;
 80039b8:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
}
 80039c0:	2000      	movs	r0, #0
 80039c2:	bd38      	pop	{r3, r4, r5, pc}

080039c4 <USBH_MSC_InterfaceInit>:
{
 80039c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80039c8:	f8d0 147c 	ldr.w	r1, [r0, #1148]	; 0x47c
 80039cc:	2350      	movs	r3, #80	; 0x50
 80039ce:	7909      	ldrb	r1, [r1, #4]
 80039d0:	2206      	movs	r2, #6
{
 80039d2:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80039d4:	f000 fc2f 	bl	8004236 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80039d8:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80039da:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80039dc:	d904      	bls.n	80039e8 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 80039de:	2702      	movs	r7, #2
}
 80039e0:	4638      	mov	r0, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 80039e8:	4601      	mov	r1, r0
 80039ea:	4628      	mov	r0, r5
 80039ec:	f000 fc1a 	bl	8004224 <USBH_SelectInterface>
  if (status != USBH_OK)
 80039f0:	4607      	mov	r7, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1f3      	bne.n	80039de <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80039f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039fa:	f8d5 847c 	ldr.w	r8, [r5, #1148]	; 0x47c
 80039fe:	f001 f9a7 	bl	8004d50 <malloc>
 8003a02:	4604      	mov	r4, r0
 8003a04:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0e8      	beq.n	80039de <USBH_MSC_InterfaceInit+0x1a>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8003a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a10:	4639      	mov	r1, r7
 8003a12:	f001 f9bb 	bl	8004d8c <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003a16:	201a      	movs	r0, #26
 8003a18:	fb00 5306 	mla	r3, r0, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8003a1c:	fb00 5606 	mla	r6, r0, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003a20:	f893 144e 	ldrb.w	r1, [r3, #1102]	; 0x44e
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003a24:	f8b3 2450 	ldrh.w	r2, [r3, #1104]	; 0x450
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003a28:	f993 344e 	ldrsb.w	r3, [r3, #1102]	; 0x44e
 8003a2c:	2b00      	cmp	r3, #0
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8003a2e:	bfac      	ite	ge
 8003a30:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8003a32:	71e1      	strblt	r1, [r4, #7]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8003a34:	f996 1456 	ldrsb.w	r1, [r6, #1110]	; 0x456
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003a38:	bfb4      	ite	lt
 8003a3a:	8162      	strhlt	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003a3c:	8122      	strhge	r2, [r4, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	f896 2456 	ldrb.w	r2, [r6, #1110]	; 0x456
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8003a44:	bfa8      	it	ge
 8003a46:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003a48:	f8b6 3458 	ldrh.w	r3, [r6, #1112]	; 0x458
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003a4c:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8003a4e:	bfb8      	it	lt
 8003a50:	71e2      	strblt	r2, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003a52:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003a54:	bfb4      	ite	lt
 8003a56:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003a58:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003a5a:	f001 f92e 	bl	8004cba <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003a5e:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8003a60:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8003a62:	4628      	mov	r0, r5
 8003a64:	f001 f929 	bl	8004cba <USBH_AllocPipe>
 8003a68:	7120      	strb	r0, [r4, #4]
  (void)USBH_MSC_BOT_Init(phost);
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 f924 	bl	8003cb8 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8003a70:	79a2      	ldrb	r2, [r4, #6]
 8003a72:	b90a      	cbnz	r2, 8003a78 <USBH_MSC_InterfaceInit+0xb4>
    return USBH_NOT_SUPPORTED;
 8003a74:	2703      	movs	r7, #3
 8003a76:	e7b3      	b.n	80039e0 <USBH_MSC_InterfaceInit+0x1c>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8003a78:	8923      	ldrh	r3, [r4, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0fa      	beq.n	8003a74 <USBH_MSC_InterfaceInit+0xb0>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	2602      	movs	r6, #2
 8003a82:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	7961      	ldrb	r1, [r4, #5]
 8003a8a:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8003a8e:	9601      	str	r6, [sp, #4]
 8003a90:	4628      	mov	r0, r5
 8003a92:	f001 f8fe 	bl	8004c92 <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8003a96:	79e2      	ldrb	r2, [r4, #7]
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	d0eb      	beq.n	8003a74 <USBH_MSC_InterfaceInit+0xb0>
 8003a9c:	8963      	ldrh	r3, [r4, #10]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0e8      	beq.n	8003a74 <USBH_MSC_InterfaceInit+0xb0>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8003aa2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8003aa6:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 8003aaa:	7921      	ldrb	r1, [r4, #4]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8003ab4:	f001 f8ed 	bl	8004c92 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8003ab8:	7921      	ldrb	r1, [r4, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	4628      	mov	r0, r5
 8003abe:	f7fc ff79 	bl	80009b4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8003ac2:	7961      	ldrb	r1, [r4, #5]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7fc ff74 	bl	80009b4 <USBH_LL_SetToggle>
  return USBH_OK;
 8003acc:	e788      	b.n	80039e0 <USBH_MSC_InterfaceInit+0x1c>

08003ace <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003ace:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
{
 8003ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003ad4:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8003ad6:	2634      	movs	r6, #52	; 0x34
 8003ad8:	fb06 2401 	mla	r4, r6, r1, r2
 8003adc:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
 8003ae0:	2d06      	cmp	r5, #6
 8003ae2:	d005      	beq.n	8003af0 <USBH_MSC_RdWrProcess+0x22>
 8003ae4:	2d07      	cmp	r5, #7
 8003ae6:	d00e      	beq.n	8003b06 <USBH_MSC_RdWrProcess+0x38>
 8003ae8:	2d05      	cmp	r5, #5
 8003aea:	d018      	beq.n	8003b1e <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8003aec:	2001      	movs	r0, #1
 8003aee:	e008      	b.n	8003b02 <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f000 fb0b 	bl	8004110 <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
 8003afa:	b950      	cbnz	r0, 8003b12 <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 8003b02:	b002      	add	sp, #8
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8003b06:	2300      	movs	r3, #0
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 fac1 	bl	8004092 <USBH_MSC_SCSI_Write>
 8003b10:	e7f3      	b.n	8003afa <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
 8003b12:	2802      	cmp	r0, #2
 8003b14:	d10f      	bne.n	8003b36 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8003b16:	2305      	movs	r3, #5
 8003b18:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8003b1c:	e7e6      	b.n	8003aec <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8003b1e:	fb06 2201 	mla	r2, r6, r1, r2
 8003b22:	329c      	adds	r2, #156	; 0x9c
 8003b24:	f000 fa78 	bl	8004018 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8003b28:	b928      	cbnz	r0, 8003b36 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8003b2a:	f240 2301 	movw	r3, #513	; 0x201
 8003b2e:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8003b32:	2002      	movs	r0, #2
 8003b34:	e7e5      	b.n	8003b02 <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
 8003b36:	2804      	cmp	r0, #4
 8003b38:	d1d8      	bne.n	8003aec <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8003b40:	e7f7      	b.n	8003b32 <USBH_MSC_RdWrProcess+0x64>

08003b42 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8003b42:	7803      	ldrb	r3, [r0, #0]
 8003b44:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003b46:	bf01      	itttt	eq
 8003b48:	f8d0 347c 	ldreq.w	r3, [r0, #1148]	; 0x47c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8003b4c:	69db      	ldreq	r3, [r3, #28]
 8003b4e:	2234      	moveq	r2, #52	; 0x34
 8003b50:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8003b54:	bf03      	ittte	eq
 8003b56:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8003b5a:	fab0 f080 	clzeq	r0, r0
 8003b5e:	0940      	lsreq	r0, r0, #5
 8003b60:	2000      	movne	r0, #0
  }

  return res;
}
 8003b62:	4770      	bx	lr

08003b64 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8003b64:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 8003b66:	7803      	ldrb	r3, [r0, #0]
 8003b68:	2b0b      	cmp	r3, #11
 8003b6a:	d110      	bne.n	8003b8e <USBH_MSC_GetLUNInfo+0x2a>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003b6c:	f8d0 447c 	ldr.w	r4, [r0, #1148]	; 0x47c
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8003b70:	2390      	movs	r3, #144	; 0x90
 8003b72:	2034      	movs	r0, #52	; 0x34
 8003b74:	fb10 3301 	smlabb	r3, r0, r1, r3
 8003b78:	69e1      	ldr	r1, [r4, #28]
 8003b7a:	4419      	add	r1, r3
 8003b7c:	180b      	adds	r3, r1, r0
 8003b7e:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b82:	f842 0b04 	str.w	r0, [r2], #4
 8003b86:	4299      	cmp	r1, r3
 8003b88:	d1f9      	bne.n	8003b7e <USBH_MSC_GetLUNInfo+0x1a>
    return USBH_OK;
 8003b8a:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8003b8c:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 8003b8e:	2002      	movs	r0, #2
 8003b90:	e7fc      	b.n	8003b8c <USBH_MSC_GetLUNInfo+0x28>

08003b92 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8003b92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8003b96:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 8003b9a:	9f08      	ldr	r7, [sp, #32]
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 8003ba0:	b3b5      	cbz	r5, 8003c10 <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
 8003ba2:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8003ba4:	2d0b      	cmp	r5, #11
 8003ba6:	d133      	bne.n	8003c10 <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003ba8:	f8d0 547c 	ldr.w	r5, [r0, #1148]	; 0x47c
 8003bac:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003bae:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8003bb2:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
 8003bb6:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8003bba:	f1be 0f01 	cmp.w	lr, #1
 8003bbe:	d127      	bne.n	8003c10 <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 8003bc0:	f04f 0e06 	mov.w	lr, #6
 8003bc4:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8003bc8:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8003bcc:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8003bd0:	9700      	str	r7, [sp, #0]
 8003bd2:	f000 fa9d 	bl	8004110 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003bd6:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
 8003bda:	f8d4 84c4 	ldr.w	r8, [r4, #1220]	; 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003bde:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003be0:	4631      	mov	r1, r6
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7ff ff73 	bl	8003ace <USBH_MSC_RdWrProcess>
 8003be8:	2801      	cmp	r0, #1
 8003bea:	d005      	beq.n	8003bf8 <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	732b      	strb	r3, [r5, #12]

  return USBH_OK;
 8003bf0:	2000      	movs	r0, #0
}
 8003bf2:	b002      	add	sp, #8
 8003bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003bf8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8003bfc:	eba3 0308 	sub.w	r3, r3, r8
 8003c00:	42bb      	cmp	r3, r7
 8003c02:	d803      	bhi.n	8003c0c <USBH_MSC_Read+0x7a>
 8003c04:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e9      	bne.n	8003be0 <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003c10:	2002      	movs	r0, #2
 8003c12:	e7ee      	b.n	8003bf2 <USBH_MSC_Read+0x60>

08003c14 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8003c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8003c18:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 8003c1c:	9f08      	ldr	r7, [sp, #32]
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 8003c22:	b3b5      	cbz	r5, 8003c92 <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
 8003c24:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8003c26:	2d0b      	cmp	r5, #11
 8003c28:	d133      	bne.n	8003c92 <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003c2a:	f8d0 547c 	ldr.w	r5, [r0, #1148]	; 0x47c
 8003c2e:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003c30:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8003c34:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
 8003c38:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8003c3c:	f1be 0f01 	cmp.w	lr, #1
 8003c40:	d127      	bne.n	8003c92 <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 8003c42:	f04f 0e07 	mov.w	lr, #7
 8003c46:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8003c4a:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8003c4e:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8003c52:	9700      	str	r7, [sp, #0]
 8003c54:	f000 fa1d 	bl	8004092 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003c58:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
 8003c5c:	f8d4 84c4 	ldr.w	r8, [r4, #1220]	; 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003c60:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003c62:	4631      	mov	r1, r6
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff ff32 	bl	8003ace <USBH_MSC_RdWrProcess>
 8003c6a:	2801      	cmp	r0, #1
 8003c6c:	d005      	beq.n	8003c7a <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8003c72:	2000      	movs	r0, #0
}
 8003c74:	b002      	add	sp, #8
 8003c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8003c7a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8003c7e:	eba3 0308 	sub.w	r3, r3, r8
 8003c82:	42bb      	cmp	r3, r7
 8003c84:	d803      	bhi.n	8003c8e <USBH_MSC_Write+0x7a>
 8003c86:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e9      	bne.n	8003c62 <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003c92:	2002      	movs	r0, #2
 8003c94:	e7ee      	b.n	8003c74 <USBH_MSC_Write+0x60>

08003c96 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8003c96:	f64f 7121 	movw	r1, #65313	; 0xff21
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	f000 bd17 	b.w	80046d4 <USBH_CtlReq>

08003ca6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8003ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003caa:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8003cae:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f000 bd0e 	b.w	80046d4 <USBH_CtlReq>

08003cb8 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003cb8:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8003cbc:	4905      	ldr	r1, [pc, #20]	; (8003cd4 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003cbe:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8003cc0:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <USBH_MSC_BOT_Init+0x20>)
 8003cc2:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8003ccc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	4770      	bx	lr
 8003cd4:	43425355 	.word	0x43425355
 8003cd8:	20304050 	.word	0x20304050

08003cdc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8003cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003cde:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8003ce2:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8003ce4:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 8003ce8:	1e6b      	subs	r3, r5, #1
{
 8003cea:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8003cec:	2b0a      	cmp	r3, #10
 8003cee:	d82c      	bhi.n	8003d4a <USBH_MSC_BOT_Process+0x6e>
 8003cf0:	e8df f003 	tbb	[pc, r3]
 8003cf4:	372f1506 	.word	0x372f1506
 8003cf8:	89815e54 	.word	0x89815e54
 8003cfc:	b6ab      	.short	0xb6ab
 8003cfe:	ce          	.byte	0xce
 8003cff:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8003d00:	2302      	movs	r3, #2
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8003d02:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8003d04:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8003d08:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8003d0c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8003d10:	7963      	ldrb	r3, [r4, #5]
 8003d12:	9200      	str	r2, [sp, #0]
 8003d14:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 ff94 	bl	8004c44 <USBH_BulkSendData>
 8003d1c:	e016      	b.n	8003d4c <USBH_MSC_BOT_Process+0x70>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8003d1e:	7961      	ldrb	r1, [r4, #5]
 8003d20:	f7fc fe42 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003d24:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8003d26:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8003d28:	d10a      	bne.n	8003d40 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8003d2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d2c:	b35b      	cbz	r3, 8003d86 <USBH_MSC_BOT_Process+0xaa>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8003d2e:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8003d32:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8003d34:	bfb4      	ite	lt
 8003d36:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8003d38:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003d3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003d3e:	e005      	b.n	8003d4c <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_NOTREADY)
 8003d40:	2802      	cmp	r0, #2
 8003d42:	d152      	bne.n	8003dea <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003d44:	2001      	movs	r0, #1
 8003d46:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8003d4a:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8003d52:	7923      	ldrb	r3, [r4, #4]
 8003d54:	8962      	ldrh	r2, [r4, #10]
 8003d56:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003d5a:	f000 ff8a 	bl	8004c72 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e046      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8003d62:	7921      	ldrb	r1, [r4, #4]
 8003d64:	f7fc fe20 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003d68:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8003d6a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8003d6c:	d112      	bne.n	8003d94 <USBH_MSC_BOT_Process+0xb8>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8003d6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d70:	8962      	ldrh	r2, [r4, #10]
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d932      	bls.n	8003ddc <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003d76:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8003d7a:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8003d7c:	4411      	add	r1, r2
 8003d7e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8003d82:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8003d84:	b90b      	cbnz	r3, 8003d8a <USBH_MSC_BOT_Process+0xae>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8003d86:	2307      	movs	r3, #7
 8003d88:	e7d7      	b.n	8003d3a <USBH_MSC_BOT_Process+0x5e>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8003d8a:	7923      	ldrb	r3, [r4, #4]
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 ff70 	bl	8004c72 <USBH_BulkReceiveData>
 8003d92:	e7db      	b.n	8003d4c <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 8003d94:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
 8003d96:	d1d8      	bne.n	8003d4a <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8003d98:	2309      	movs	r3, #9
 8003d9a:	e029      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8003d9c:	2501      	movs	r5, #1
 8003d9e:	7963      	ldrb	r3, [r4, #5]
 8003da0:	8922      	ldrh	r2, [r4, #8]
 8003da2:	9500      	str	r5, [sp, #0]
 8003da4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003da8:	f000 ff4c 	bl	8004c44 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8003dac:	2306      	movs	r3, #6
 8003dae:	e7c4      	b.n	8003d3a <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8003db0:	7961      	ldrb	r1, [r4, #5]
 8003db2:	f7fc fdf9 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003db6:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8003db8:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8003dba:	d112      	bne.n	8003de2 <USBH_MSC_BOT_Process+0x106>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8003dbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003dbe:	8922      	ldrh	r2, [r4, #8]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d90b      	bls.n	8003ddc <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003dc4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8003dc8:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8003dca:	4411      	add	r1, r2
 8003dcc:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8003dd0:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0d7      	beq.n	8003d86 <USBH_MSC_BOT_Process+0xaa>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8003dd6:	7963      	ldrb	r3, [r4, #5]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	e79c      	b.n	8003d16 <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8003de0:	e7d1      	b.n	8003d86 <USBH_MSC_BOT_Process+0xaa>
      else if (URB_Status == USBH_URB_NOTREADY)
 8003de2:	2802      	cmp	r0, #2
 8003de4:	d101      	bne.n	8003dea <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8003de6:	2305      	movs	r3, #5
 8003de8:	e002      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      else if (URB_Status == USBH_URB_STALL)
 8003dea:	2d05      	cmp	r5, #5
 8003dec:	d1ad      	bne.n	8003d4a <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8003dee:	230a      	movs	r3, #10
 8003df0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003df4:	e7a9      	b.n	8003d4a <USBH_MSC_BOT_Process+0x6e>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8003df6:	7923      	ldrb	r3, [r4, #4]
 8003df8:	220d      	movs	r2, #13
 8003dfa:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003dfe:	f000 ff38 	bl	8004c72 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8003e02:	2308      	movs	r3, #8
 8003e04:	e7f4      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8003e06:	7921      	ldrb	r1, [r4, #4]
 8003e08:	f7fc fdce 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003e0c:	2801      	cmp	r0, #1
 8003e0e:	d11a      	bne.n	8003e46 <USBH_MSC_BOT_Process+0x16a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003e10:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8003e14:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003e18:	f8d6 347c 	ldr.w	r3, [r6, #1148]	; 0x47c
 8003e1c:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8003e1e:	4630      	mov	r0, r6
 8003e20:	7921      	ldrb	r1, [r4, #4]
 8003e22:	f7fc fd92 	bl	800094a <USBH_LL_GetLastXferSize>
 8003e26:	280d      	cmp	r0, #13
 8003e28:	d13a      	bne.n	8003ea0 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8003e2a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <USBH_MSC_BOT_Process+0x1c8>)
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d136      	bne.n	8003ea0 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8003e32:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003e34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d132      	bne.n	8003ea0 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8003e3a:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	bf18      	it	ne
 8003e42:	2502      	movne	r5, #2
 8003e44:	e782      	b.n	8003d4c <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 8003e46:	2805      	cmp	r0, #5
 8003e48:	e7a5      	b.n	8003d96 <USBH_MSC_BOT_Process+0xba>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8003e4a:	79e1      	ldrb	r1, [r4, #7]
 8003e4c:	f000 feb6 	bl	8004bbc <USBH_ClrFeature>
      if (error == USBH_OK)
 8003e50:	b908      	cbnz	r0, 8003e56 <USBH_MSC_BOT_Process+0x17a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8003e52:	2307      	movs	r3, #7
 8003e54:	e7cc      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      else if (error == USBH_UNRECOVERED_ERROR)
 8003e56:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 8003e58:	f47f af77 	bne.w	8003d4a <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8003e5c:	230b      	movs	r3, #11
 8003e5e:	e7c7      	b.n	8003df0 <USBH_MSC_BOT_Process+0x114>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8003e60:	79a1      	ldrb	r1, [r4, #6]
 8003e62:	f000 feab 	bl	8004bbc <USBH_ClrFeature>
      if (error == USBH_OK)
 8003e66:	4605      	mov	r5, r0
 8003e68:	b980      	cbnz	r0, 8003e8c <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8003e6a:	7961      	ldrb	r1, [r4, #5]
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7fc fdb1 	bl	80009d4 <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8003e72:	f1c0 0001 	rsb	r0, r0, #1
 8003e76:	7961      	ldrb	r1, [r4, #5]
 8003e78:	b2c2      	uxtb	r2, r0
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7fc fd9a 	bl	80009b4 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8003e80:	7921      	ldrb	r1, [r4, #4]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7fc fd95 	bl	80009b4 <USBH_LL_SetToggle>
 8003e8a:	e785      	b.n	8003d98 <USBH_MSC_BOT_Process+0xbc>
        if (error == USBH_UNRECOVERED_ERROR)
 8003e8c:	2804      	cmp	r0, #4
 8003e8e:	e7e3      	b.n	8003e58 <USBH_MSC_BOT_Process+0x17c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8003e90:	f7ff ff01 	bl	8003c96 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8003e94:	4605      	mov	r5, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f47f af58 	bne.w	8003d4c <USBH_MSC_BOT_Process+0x70>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e74c      	b.n	8003d3a <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
 8003ea0:	2502      	movs	r5, #2
 8003ea2:	e753      	b.n	8003d4c <USBH_MSC_BOT_Process+0x70>
 8003ea4:	53425355 	.word	0x53425355

08003ea8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8003ea8:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003eaa:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8003eae:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8003eb0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003eb4:	2d01      	cmp	r5, #1
 8003eb6:	d004      	beq.n	8003ec2 <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8003eb8:	2d02      	cmp	r5, #2
 8003eba:	d014      	beq.n	8003ee6 <USBH_MSC_SCSI_TestUnitReady+0x3e>
 8003ebc:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8003ec2:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8003eca:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003ecc:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8003ed6:	f000 ff59 	bl	8004d8c <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003eda:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003edc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003ee0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
 8003ee4:	e7eb      	b.n	8003ebe <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 8003ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8003eea:	f7ff bef7 	b.w	8003cdc <USBH_MSC_BOT_Process>

08003eee <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8003eee:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003ef0:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8003ef4:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8003ef6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003efa:	2d01      	cmp	r5, #1
{
 8003efc:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8003efe:	d004      	beq.n	8003f0a <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8003f00:	2d02      	cmp	r5, #2
 8003f02:	d01b      	beq.n	8003f3c <USBH_MSC_SCSI_ReadCapacity+0x4e>
 8003f04:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
 8003f06:	4628      	mov	r0, r5
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003f14:	2210      	movs	r2, #16
 8003f16:	2100      	movs	r1, #0
 8003f18:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8003f1c:	f000 ff36 	bl	8004d8c <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003f20:	f242 530a 	movw	r3, #9482	; 0x250a
 8003f24:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003f2e:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003f32:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003f36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8003f3a:	e7e4      	b.n	8003f06 <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8003f3c:	f7ff fece 	bl	8003cdc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8003f40:	4605      	mov	r5, r0
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d1df      	bne.n	8003f06 <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8003f46:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003f4a:	6813      	ldr	r3, [r2, #0]
 8003f4c:	ba1b      	rev	r3, r3
 8003f4e:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8003f50:	88d3      	ldrh	r3, [r2, #6]
 8003f52:	ba5b      	rev16	r3, r3
 8003f54:	80b3      	strh	r3, [r6, #4]
 8003f56:	e7d6      	b.n	8003f06 <USBH_MSC_SCSI_ReadCapacity+0x18>

08003f58 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003f5c:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
 8003f60:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8003f62:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003f66:	2d01      	cmp	r5, #1
{
 8003f68:	460b      	mov	r3, r1
  switch (MSC_Handle->hbot.cmd_state)
 8003f6a:	d004      	beq.n	8003f76 <USBH_MSC_SCSI_Inquiry+0x1e>
 8003f6c:	2d02      	cmp	r5, #2
 8003f6e:	d021      	beq.n	8003fb4 <USBH_MSC_SCSI_Inquiry+0x5c>
 8003f70:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8003f72:	4628      	mov	r0, r5
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003f76:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003f78:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003f7a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003f84:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003f88:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003f8a:	2124      	movs	r1, #36	; 0x24
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8003f8c:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8003f90:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003f94:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003f98:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003f9c:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003fa0:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003fa2:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8003fa6:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003faa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003fae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8003fb2:	e7de      	b.n	8003f72 <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8003fb4:	f7ff fe92 	bl	8003cdc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8003fb8:	4605      	mov	r5, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d1d9      	bne.n	8003f72 <USBH_MSC_SCSI_Inquiry+0x1a>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	2222      	movs	r2, #34	; 0x22
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 fee2 	bl	8004d8c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8003fc8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	f002 021f 	and.w	r2, r2, #31
 8003fd2:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	0952      	lsrs	r2, r2, #5
 8003fd8:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8003fda:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8003fde:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
 8003fe0:	bfbc      	itt	lt
 8003fe2:	2201      	movlt	r2, #1
 8003fe4:	70b2      	strblt	r2, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	f8c6 2003 	str.w	r2, [r6, #3]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	f8c6 2007 	str.w	r2, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8003ff2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003ff6:	f106 010c 	add.w	r1, r6, #12
 8003ffa:	f103 0210 	add.w	r2, r3, #16
 8003ffe:	3320      	adds	r3, #32
 8004000:	f852 0b04 	ldr.w	r0, [r2], #4
 8004004:	f841 0b04 	str.w	r0, [r1], #4
 8004008:	429a      	cmp	r2, r3
 800400a:	d1f9      	bne.n	8004000 <USBH_MSC_SCSI_Inquiry+0xa8>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800400c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f8c6 301d 	str.w	r3, [r6, #29]
 8004016:	e7ac      	b.n	8003f72 <USBH_MSC_SCSI_Inquiry+0x1a>

08004018 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800401a:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800401e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8004020:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8004024:	2d01      	cmp	r5, #1
{
 8004026:	460f      	mov	r7, r1
 8004028:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 800402a:	d004      	beq.n	8004036 <USBH_MSC_SCSI_RequestSense+0x1e>
 800402c:	2d02      	cmp	r5, #2
 800402e:	d020      	beq.n	8004072 <USBH_MSC_SCSI_RequestSense+0x5a>
 8004030:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8004032:	4628      	mov	r0, r5
 8004034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8004036:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8004038:	260e      	movs	r6, #14
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800403a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800403e:	65e6      	str	r6, [r4, #92]	; 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004040:	2210      	movs	r2, #16
 8004042:	2100      	movs	r1, #0
 8004044:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8004048:	f000 fea0 	bl	8004d8c <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800404c:	f240 330a 	movw	r3, #778	; 0x30a
 8004050:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004054:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8004056:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004058:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800405c:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8004060:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8004064:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004068:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800406c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8004070:	e7df      	b.n	8004032 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8004072:	f7ff fe33 	bl	8003cdc <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8004076:	4605      	mov	r5, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	d1da      	bne.n	8004032 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800407c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004080:	789a      	ldrb	r2, [r3, #2]
 8004082:	f002 020f 	and.w	r2, r2, #15
 8004086:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8004088:	7b1a      	ldrb	r2, [r3, #12]
 800408a:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800408c:	7b5b      	ldrb	r3, [r3, #13]
 800408e:	70b3      	strb	r3, [r6, #2]
 8004090:	e7cf      	b.n	8004032 <USBH_MSC_SCSI_RequestSense+0x1a>

08004092 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8004092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004096:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004098:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
{
 800409c:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800409e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80040a0:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 80040a4:	2e01      	cmp	r6, #1
{
 80040a6:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 80040a8:	d005      	beq.n	80040b6 <USBH_MSC_SCSI_Write+0x24>
 80040aa:	2e02      	cmp	r6, #2
 80040ac:	d02c      	beq.n	8004108 <USBH_MSC_SCSI_Write+0x76>
 80040ae:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 80040b0:	4630      	mov	r0, r6
 80040b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80040b6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80040ba:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80040bc:	437b      	muls	r3, r7
 80040be:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80040c0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80040c4:	2210      	movs	r2, #16
 80040c6:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80040ca:	f000 fe5f 	bl	8004d8c <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80040ce:	f642 230a 	movw	r3, #10762	; 0x2a0a
 80040d2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80040d6:	f3c5 6307 	ubfx	r3, r5, #24, #8
 80040da:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80040de:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80040e2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80040e6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80040ea:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80040ee:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80040f0:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80040f2:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80040f6:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80040fa:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80040fe:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8004102:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 8004106:	e7d3      	b.n	80040b0 <USBH_MSC_SCSI_Write+0x1e>
}
 8004108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800410c:	f7ff bde6 	b.w	8003cdc <USBH_MSC_BOT_Process>

08004110 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004114:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004116:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
{
 800411a:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800411c:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800411e:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 8004122:	2e01      	cmp	r6, #1
{
 8004124:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8004126:	d005      	beq.n	8004134 <USBH_MSC_SCSI_Read+0x24>
 8004128:	2e02      	cmp	r6, #2
 800412a:	d02d      	beq.n	8004188 <USBH_MSC_SCSI_Read+0x78>
 800412c:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 800412e:	4630      	mov	r0, r6
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8004134:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004138:	437b      	muls	r3, r7
 800413a:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8004142:	2210      	movs	r2, #16
 8004144:	2100      	movs	r1, #0
 8004146:	f104 0063 	add.w	r0, r4, #99	; 0x63
 800414a:	f000 fe1f 	bl	8004d8c <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800414e:	f642 030a 	movw	r3, #10250	; 0x280a
 8004152:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8004156:	f3c5 6307 	ubfx	r3, r5, #24, #8
 800415a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800415e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004162:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8004166:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800416a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800416e:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8004170:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8004172:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8004176:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800417a:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800417e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8004182:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 8004186:	e7d2      	b.n	800412e <USBH_MSC_SCSI_Read+0x1e>
}
 8004188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800418c:	f7ff bda6 	b.w	8003cdc <USBH_MSC_BOT_Process>

08004190 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8004190:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8004192:	2540      	movs	r5, #64	; 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8004194:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 8004196:	462a      	mov	r2, r5
 8004198:	2100      	movs	r1, #0
 800419a:	f200 4084 	addw	r0, r0, #1156	; 0x484
 800419e:	f000 fdf5 	bl	8004d8c <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80041a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a6:	2100      	movs	r1, #0
 80041a8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80041ac:	f000 fdee 	bl	8004d8c <memset>
  }

  phost->gState = HOST_IDLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80041b4:	2201      	movs	r2, #1
  phost->EnumState = ENUM_IDLE;
 80041b6:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
 80041b8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80041bc:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->RequestState = CMD_SEND;
 80041c0:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80041c2:	71a5      	strb	r5, [r4, #6]
  phost->Control.state = CTRL_SETUP;
 80041c4:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80041c6:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 80041ca:	bd38      	pop	{r3, r4, r5, pc}

080041cc <USBH_Init>:
{
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	460e      	mov	r6, r1
  if (phost == NULL)
 80041d0:	4604      	mov	r4, r0
 80041d2:	b1c0      	cbz	r0, 8004206 <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 80041d4:	2500      	movs	r5, #0
  phost->id = id;
 80041d6:	f880 24cc 	strb.w	r2, [r0, #1228]	; 0x4cc
  phost->pActiveClass = NULL;
 80041da:	f8c0 547c 	str.w	r5, [r0, #1148]	; 0x47c
  phost->ClassNumber = 0U;
 80041de:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  (void)DeInitStateMachine(phost);
 80041e2:	f7ff ffd5 	bl	8004190 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 80041e6:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 80041ea:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
 80041ee:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 80041f2:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
 80041f6:	b10e      	cbz	r6, 80041fc <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80041f8:	f8c4 64d4 	str.w	r6, [r4, #1236]	; 0x4d4
  (void)USBH_LL_Init(phost);
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7fc fb61 	bl	80008c4 <USBH_LL_Init>
  return USBH_OK;
 8004202:	2000      	movs	r0, #0
}
 8004204:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8004206:	2002      	movs	r0, #2
 8004208:	e7fc      	b.n	8004204 <USBH_Init+0x38>

0800420a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800420a:	b149      	cbz	r1, 8004220 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800420c:	f8d0 3480 	ldr.w	r3, [r0, #1152]	; 0x480
 8004210:	b933      	cbnz	r3, 8004220 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004212:	2201      	movs	r2, #1
 8004214:	f8c0 2480 	str.w	r2, [r0, #1152]	; 0x480
 8004218:	f8c0 1478 	str.w	r1, [r0, #1144]	; 0x478
      status = USBH_OK;
 800421c:	4618      	mov	r0, r3
 800421e:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004220:	2002      	movs	r0, #2
  }

  return status;
}
 8004222:	4770      	bx	lr

08004224 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004224:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
 8004228:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800422a:	bf86      	itte	hi
 800422c:	f880 1424 	strbhi.w	r1, [r0, #1060]	; 0x424
  USBH_StatusTypeDef status = USBH_OK;
 8004230:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004232:	2002      	movls	r0, #2
  }

  return status;
}
 8004234:	4770      	bx	lr

08004236 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800423a:	f890 6447 	ldrb.w	r6, [r0, #1095]	; 0x447
 800423e:	428e      	cmp	r6, r1
 8004240:	b2e5      	uxtb	r5, r4
 8004242:	d001      	beq.n	8004248 <USBH_FindInterface+0x12>
 8004244:	29ff      	cmp	r1, #255	; 0xff
 8004246:	d10b      	bne.n	8004260 <USBH_FindInterface+0x2a>
 8004248:	f890 6448 	ldrb.w	r6, [r0, #1096]	; 0x448
 800424c:	4296      	cmp	r6, r2
 800424e:	d001      	beq.n	8004254 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004250:	2aff      	cmp	r2, #255	; 0xff
 8004252:	d105      	bne.n	8004260 <USBH_FindInterface+0x2a>
 8004254:	f890 6449 	ldrb.w	r6, [r0, #1097]	; 0x449
 8004258:	429e      	cmp	r6, r3
 800425a:	d004      	beq.n	8004266 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800425c:	2bff      	cmp	r3, #255	; 0xff
 800425e:	d002      	beq.n	8004266 <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004260:	301a      	adds	r0, #26
 8004262:	b114      	cbz	r4, 800426a <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004264:	25ff      	movs	r5, #255	; 0xff
}
 8004266:	4628      	mov	r0, r5
 8004268:	bd70      	pop	{r4, r5, r6, pc}
 800426a:	2401      	movs	r4, #1
 800426c:	e7e5      	b.n	800423a <USBH_FindInterface+0x4>

0800426e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800426e:	b510      	push	{r4, lr}
 8004270:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8004272:	f7fc fb4b 	bl	800090c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004276:	2101      	movs	r1, #1
 8004278:	4620      	mov	r0, r4
 800427a:	f7fc fb99 	bl	80009b0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800427e:	2000      	movs	r0, #0
 8004280:	bd10      	pop	{r4, pc}

08004282 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004282:	b570      	push	{r4, r5, r6, lr}
 8004284:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004286:	2302      	movs	r3, #2
 8004288:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800428c:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
 8004290:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004292:	bf04      	itt	eq
 8004294:	2303      	moveq	r3, #3
 8004296:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8004298:	7803      	ldrb	r3, [r0, #0]
{
 800429a:	4604      	mov	r4, r0
  switch (phost->gState)
 800429c:	2b0b      	cmp	r3, #11
 800429e:	d81d      	bhi.n	80042dc <USBH_Process+0x5a>
 80042a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80042a4:	001f000c 	.word	0x001f000c
 80042a8:	01bd0041 	.word	0x01bd0041
 80042ac:	0076001c 	.word	0x0076001c
 80042b0:	015a01a1 	.word	0x015a01a1
 80042b4:	016b0162 	.word	0x016b0162
 80042b8:	01b5017f 	.word	0x01b5017f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80042bc:	f890 3420 	ldrb.w	r3, [r0, #1056]	; 0x420
 80042c0:	b163      	cbz	r3, 80042dc <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80042c2:	2301      	movs	r3, #1
 80042c4:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 80042c6:	20c8      	movs	r0, #200	; 0xc8
 80042c8:	f7fc fb94 	bl	80009f4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fc fb35 	bl	800093c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
 80042d8:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 80042dc:	2000      	movs	r0, #0
 80042de:	b006      	add	sp, #24
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 80042e2:	f890 3423 	ldrb.w	r3, [r0, #1059]	; 0x423
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 80042f0:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 80042f2:	7023      	strb	r3, [r4, #0]
 80042f4:	e7f2      	b.n	80042dc <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80042f6:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 80042fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042fe:	d90b      	bls.n	8004318 <USBH_Process+0x96>
          phost->device.RstCnt++;
 8004300:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8004304:	3301      	adds	r3, #1
 8004306:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 8004308:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800430a:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 800430e:	d901      	bls.n	8004314 <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8004310:	230d      	movs	r3, #13
 8004312:	e7ee      	b.n	80042f2 <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 8004314:	2300      	movs	r3, #0
 8004316:	e7ec      	b.n	80042f2 <USBH_Process+0x70>
          phost->Timeout += 10U;
 8004318:	330a      	adds	r3, #10
 800431a:	f8c0 34c8 	str.w	r3, [r0, #1224]	; 0x4c8
          USBH_Delay(10U);
 800431e:	200a      	movs	r0, #10
 8004320:	f7fc fb68 	bl	80009f4 <USBH_Delay>
 8004324:	e7da      	b.n	80042dc <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 8004326:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 800432a:	b10b      	cbz	r3, 8004330 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800432c:	2104      	movs	r1, #4
 800432e:	4798      	blx	r3
      USBH_Delay(100U);
 8004330:	2064      	movs	r0, #100	; 0x64
 8004332:	f7fc fb5f 	bl	80009f4 <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004336:	4620      	mov	r0, r4
 8004338:	f7fc faf6 	bl	8000928 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 800433c:	2305      	movs	r3, #5
 800433e:	7023      	strb	r3, [r4, #0]
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004340:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004344:	2100      	movs	r1, #0
 8004346:	4620      	mov	r0, r4
 8004348:	f000 fcb7 	bl	8004cba <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800434c:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800434e:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004350:	4620      	mov	r0, r4
 8004352:	f000 fcb2 	bl	8004cba <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004356:	79a3      	ldrb	r3, [r4, #6]
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	2500      	movs	r5, #0
 800435c:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004360:	7120      	strb	r0, [r4, #4]
 8004362:	4601      	mov	r1, r0
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	9501      	str	r5, [sp, #4]
 8004368:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	4620      	mov	r0, r4
 8004370:	f000 fc8f 	bl	8004c92 <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004374:	79a3      	ldrb	r3, [r4, #6]
 8004376:	7961      	ldrb	r1, [r4, #5]
 8004378:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800437c:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	462a      	mov	r2, r5
 8004384:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8004388:	4620      	mov	r0, r4
 800438a:	f000 fc82 	bl	8004c92 <USBH_OpenPipe>
      break;
 800438e:	e7a5      	b.n	80042dc <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8004390:	7845      	ldrb	r5, [r0, #1]
 8004392:	2d07      	cmp	r5, #7
 8004394:	d82b      	bhi.n	80043ee <USBH_Process+0x16c>
 8004396:	e8df f005 	tbb	[pc, r5]
 800439a:	4104      	.short	0x4104
 800439c:	af938d71 	.word	0xaf938d71
 80043a0:	cdbe      	.short	0xcdbe
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80043a2:	2108      	movs	r1, #8
 80043a4:	f000 fa6d 	bl	8004882 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80043a8:	4606      	mov	r6, r0
 80043aa:	b9f0      	cbnz	r0, 80043ea <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80043ac:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d
 80043b0:	71a3      	strb	r3, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80043b2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80043b6:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 80043ba:	9300      	str	r3, [sp, #0]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80043bc:	2501      	movs	r5, #1
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80043be:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80043c2:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80043c4:	7921      	ldrb	r1, [r4, #4]
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 fc62 	bl	8004c92 <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80043ce:	79a3      	ldrb	r3, [r4, #6]
 80043d0:	7961      	ldrb	r1, [r4, #5]
 80043d2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80043d6:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4632      	mov	r2, r6
 80043de:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 fc55 	bl	8004c92 <USBH_OpenPipe>
 80043e8:	e01e      	b.n	8004428 <USBH_Process+0x1a6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80043ea:	2803      	cmp	r0, #3
 80043ec:	d001      	beq.n	80043f2 <USBH_Process+0x170>
  switch (phost->EnumState)
 80043ee:	2501      	movs	r5, #1
 80043f0:	e01a      	b.n	8004428 <USBH_Process+0x1a6>
        phost->device.EnumCnt++;
 80043f2:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80043fa:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80043fc:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 8004400:	d901      	bls.n	8004406 <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8004402:	230d      	movs	r3, #13
 8004404:	e008      	b.n	8004418 <USBH_Process+0x196>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004406:	7961      	ldrb	r1, [r4, #5]
 8004408:	4620      	mov	r0, r4
 800440a:	f000 fc6e 	bl	8004cea <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800440e:	7921      	ldrb	r1, [r4, #4]
 8004410:	4620      	mov	r0, r4
 8004412:	f000 fc6a 	bl	8004cea <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8004416:	2300      	movs	r3, #0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8004418:	7023      	strb	r3, [r4, #0]
 800441a:	e7e8      	b.n	80043ee <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800441c:	2112      	movs	r1, #18
 800441e:	f000 fa30 	bl	8004882 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8004422:	b998      	cbnz	r0, 800444c <USBH_Process+0x1ca>
        phost->EnumState = ENUM_SET_ADDR;
 8004424:	2302      	movs	r3, #2
 8004426:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 8004428:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 800442c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004430:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af51 	bne.w	80042dc <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800443a:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
 800443e:	f884 2424 	strb.w	r2, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 8086 	bne.w	8004554 <USBH_Process+0x2d2>
        phost->gState = HOST_SET_CONFIGURATION;
 8004448:	2308      	movs	r3, #8
 800444a:	e752      	b.n	80042f2 <USBH_Process+0x70>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800444c:	2803      	cmp	r0, #3
 800444e:	d1ce      	bne.n	80043ee <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8004450:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8004454:	3301      	adds	r3, #1
 8004456:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8004458:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800445a:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 800445e:	d902      	bls.n	8004466 <USBH_Process+0x1e4>
          phost->gState = HOST_ABORT_STATE;
 8004460:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 8004462:	7023      	strb	r3, [r4, #0]
 8004464:	e7e0      	b.n	8004428 <USBH_Process+0x1a6>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004466:	7961      	ldrb	r1, [r4, #5]
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fc3e 	bl	8004cea <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800446e:	7921      	ldrb	r1, [r4, #4]
 8004470:	4620      	mov	r0, r4
 8004472:	f000 fc3a 	bl	8004cea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8004476:	2300      	movs	r3, #0
 8004478:	7063      	strb	r3, [r4, #1]
 800447a:	e7f2      	b.n	8004462 <USBH_Process+0x1e0>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800447c:	2101      	movs	r1, #1
 800447e:	f000 fb76 	bl	8004b6e <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8004482:	4606      	mov	r6, r0
 8004484:	b978      	cbnz	r0, 80044a6 <USBH_Process+0x224>
        USBH_Delay(2U);
 8004486:	2002      	movs	r0, #2
 8004488:	f7fc fab4 	bl	80009f4 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800448c:	2303      	movs	r3, #3
 800448e:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8004490:	79a3      	ldrb	r3, [r4, #6]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8004492:	2501      	movs	r5, #1
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8004494:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8004498:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 800449c:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 800449e:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80044a2:	462b      	mov	r3, r5
 80044a4:	e78e      	b.n	80043c4 <USBH_Process+0x142>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80044a6:	2803      	cmp	r0, #3
 80044a8:	d1a1      	bne.n	80043ee <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 80044aa:	230d      	movs	r3, #13
 80044ac:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80044ae:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80044b0:	7063      	strb	r3, [r4, #1]
 80044b2:	e79c      	b.n	80043ee <USBH_Process+0x16c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80044b4:	2109      	movs	r1, #9
 80044b6:	f000 fa41 	bl	800493c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80044ba:	b940      	cbnz	r0, 80044ce <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80044bc:	2304      	movs	r3, #4
 80044be:	e7f7      	b.n	80044b0 <USBH_Process+0x22e>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80044c0:	f8b0 143a 	ldrh.w	r1, [r0, #1082]	; 0x43a
 80044c4:	f000 fa3a 	bl	800493c <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80044c8:	b908      	cbnz	r0, 80044ce <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80044ca:	2305      	movs	r3, #5
 80044cc:	e7f0      	b.n	80044b0 <USBH_Process+0x22e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80044ce:	2803      	cmp	r0, #3
 80044d0:	d18d      	bne.n	80043ee <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 80044d2:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80044d6:	3301      	adds	r3, #1
 80044d8:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80044da:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80044dc:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 80044e0:	d88f      	bhi.n	8004402 <USBH_Process+0x180>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80044e2:	7961      	ldrb	r1, [r4, #5]
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fc00 	bl	8004cea <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80044ea:	7921      	ldrb	r1, [r4, #4]
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 fbfc 	bl	8004cea <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	7063      	strb	r3, [r4, #1]
 80044f6:	e78f      	b.n	8004418 <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 80044f8:	f890 1434 	ldrb.w	r1, [r0, #1076]	; 0x434
 80044fc:	b129      	cbz	r1, 800450a <USBH_Process+0x288>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80044fe:	23ff      	movs	r3, #255	; 0xff
 8004500:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8004504:	f000 fb0c 	bl	8004b20 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004508:	b908      	cbnz	r0, 800450e <USBH_Process+0x28c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800450a:	2306      	movs	r3, #6
 800450c:	e7d0      	b.n	80044b0 <USBH_Process+0x22e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800450e:	2803      	cmp	r0, #3
 8004510:	f47f af6d 	bne.w	80043ee <USBH_Process+0x16c>
 8004514:	e7f9      	b.n	800450a <USBH_Process+0x288>
      if (phost->device.DevDesc.iProduct != 0U)
 8004516:	f890 1435 	ldrb.w	r1, [r0, #1077]	; 0x435
 800451a:	b129      	cbz	r1, 8004528 <USBH_Process+0x2a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800451c:	23ff      	movs	r3, #255	; 0xff
 800451e:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8004522:	f000 fafd 	bl	8004b20 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004526:	b908      	cbnz	r0, 800452c <USBH_Process+0x2aa>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004528:	2307      	movs	r3, #7
 800452a:	e7c1      	b.n	80044b0 <USBH_Process+0x22e>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800452c:	2803      	cmp	r0, #3
 800452e:	f47f af5e 	bne.w	80043ee <USBH_Process+0x16c>
 8004532:	e7f9      	b.n	8004528 <USBH_Process+0x2a6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8004534:	f890 1436 	ldrb.w	r1, [r0, #1078]	; 0x436
 8004538:	b909      	cbnz	r1, 800453e <USBH_Process+0x2bc>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 800453a:	2500      	movs	r5, #0
 800453c:	e774      	b.n	8004428 <USBH_Process+0x1a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800453e:	23ff      	movs	r3, #255	; 0xff
 8004540:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8004544:	f000 faec 	bl	8004b20 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004548:	2800      	cmp	r0, #0
 800454a:	d0f6      	beq.n	800453a <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800454c:	1ec5      	subs	r5, r0, #3
 800454e:	bf18      	it	ne
 8004550:	2501      	movne	r5, #1
 8004552:	e769      	b.n	8004428 <USBH_Process+0x1a6>
          phost->gState = HOST_INPUT;
 8004554:	2307      	movs	r3, #7
 8004556:	e6cc      	b.n	80042f2 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8004558:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 800455c:	2b00      	cmp	r3, #0
 800455e:	f43f aebd 	beq.w	80042dc <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004562:	2101      	movs	r1, #1
 8004564:	4798      	blx	r3
 8004566:	e76f      	b.n	8004448 <USBH_Process+0x1c6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004568:	f890 143d 	ldrb.w	r1, [r0, #1085]	; 0x43d
 800456c:	f000 fb0c 	bl	8004b88 <USBH_SetCfg>
 8004570:	2800      	cmp	r0, #0
 8004572:	f47f aeb3 	bne.w	80042dc <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004576:	2309      	movs	r3, #9
 8004578:	e6bb      	b.n	80042f2 <USBH_Process+0x70>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800457a:	f890 343f 	ldrb.w	r3, [r0, #1087]	; 0x43f
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	d507      	bpl.n	8004592 <USBH_Process+0x310>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8004582:	2101      	movs	r1, #1
 8004584:	f000 fb0d 	bl	8004ba2 <USBH_SetFeature>
 8004588:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800458c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004590:	b90b      	cbnz	r3, 8004596 <USBH_Process+0x314>
        phost->gState = HOST_CHECK_CLASS;
 8004592:	230a      	movs	r3, #10
 8004594:	e6ad      	b.n	80042f2 <USBH_Process+0x70>
        else if (status == USBH_NOT_SUPPORTED)
 8004596:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800459a:	2b03      	cmp	r3, #3
 800459c:	f47f ae9e 	bne.w	80042dc <USBH_Process+0x5a>
 80045a0:	e7f7      	b.n	8004592 <USBH_Process+0x310>
      if (phost->ClassNumber == 0U)
 80045a2:	f8d0 3480 	ldr.w	r3, [r0, #1152]	; 0x480
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f43f ae98 	beq.w	80042dc <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80045b2:	f8d0 3478 	ldr.w	r3, [r0, #1144]	; 0x478
 80045b6:	f890 2447 	ldrb.w	r2, [r0, #1095]	; 0x447
 80045ba:	7919      	ldrb	r1, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 80045bc:	4291      	cmp	r1, r2
 80045be:	bf18      	it	ne
 80045c0:	2300      	movne	r3, #0
 80045c2:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
        if (phost->pActiveClass != NULL)
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f43f aea2 	beq.w	8004310 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4798      	blx	r3
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f47f ae9d 	bne.w	8004310 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 80045d6:	2306      	movs	r3, #6
 80045d8:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80045da:	2103      	movs	r1, #3
 80045dc:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 80045e0:	4620      	mov	r0, r4
 80045e2:	4798      	blx	r3
 80045e4:	e67a      	b.n	80042dc <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 80045e6:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f43f ae90 	beq.w	8004310 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4798      	blx	r3
 80045f4:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80045f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80045fc:	b90b      	cbnz	r3, 8004602 <USBH_Process+0x380>
          phost->gState = HOST_CLASS;
 80045fe:	230b      	movs	r3, #11
 8004600:	e677      	b.n	80042f2 <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 8004602:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004606:	2b02      	cmp	r3, #2
 8004608:	f47f ae68 	bne.w	80042dc <USBH_Process+0x5a>
 800460c:	e680      	b.n	8004310 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 800460e:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8004612:	2b00      	cmp	r3, #0
 8004614:	f43f ae62 	beq.w	80042dc <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	4798      	blx	r3
 800461c:	e65e      	b.n	80042dc <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 800461e:	2500      	movs	r5, #0
 8004620:	f880 5421 	strb.w	r5, [r0, #1057]	; 0x421
      (void)DeInitStateMachine(phost);
 8004624:	f7ff fdb4 	bl	8004190 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 8004628:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 800462c:	b123      	cbz	r3, 8004638 <USBH_Process+0x3b6>
        phost->pActiveClass->DeInit(phost);
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4620      	mov	r0, r4
 8004632:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004634:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
      if (phost->pUser != NULL)
 8004638:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 800463c:	b113      	cbz	r3, 8004644 <USBH_Process+0x3c2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800463e:	2105      	movs	r1, #5
 8004640:	4620      	mov	r0, r4
 8004642:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8004644:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <USBH_Process+0x3d8>
        phost->device.is_ReEnumerated = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        (void)USBH_Start(phost);
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff fe0b 	bl	800426e <USBH_Start>
 8004658:	e640      	b.n	80042dc <USBH_Process+0x5a>
        (void)USBH_LL_Start(phost);
 800465a:	4620      	mov	r0, r4
 800465c:	f7fc f956 	bl	800090c <USBH_LL_Start>
 8004660:	e63c      	b.n	80042dc <USBH_Process+0x5a>

08004662 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8004662:	f8c0 14c4 	str.w	r1, [r0, #1220]	; 0x4c4
}
 8004666:	4770      	bx	lr

08004668 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8004668:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 800466c:	3201      	adds	r2, #1
 800466e:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004672:	7802      	ldrb	r2, [r0, #0]
 8004674:	2a0b      	cmp	r2, #11
 8004676:	d104      	bne.n	8004682 <USBH_LL_IncTimer+0x1a>
 8004678:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800467c:	b10b      	cbz	r3, 8004682 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4718      	bx	r3
}
 8004682:	4770      	bx	lr

08004684 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 800468a:	4770      	bx	lr

0800468c <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 8004692:	4770      	bx	lr

08004694 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8004694:	2301      	movs	r3, #1
 8004696:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 80046a0:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	4770      	bx	lr

080046a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80046ac:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 80046ae:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 80046b0:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 80046b4:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 80046b8:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80046bc:	f7fc f92d 	bl	800091a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80046c0:	7921      	ldrb	r1, [r4, #4]
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 fb11 	bl	8004cea <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80046c8:	7961      	ldrb	r1, [r4, #5]
 80046ca:	4620      	mov	r0, r4
 80046cc:	f000 fb0d 	bl	8004cea <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80046d0:	4628      	mov	r0, r5
 80046d2:	bd38      	pop	{r3, r4, r5, pc}

080046d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80046d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80046d6:	7885      	ldrb	r5, [r0, #2]
 80046d8:	2d01      	cmp	r5, #1
{
 80046da:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80046dc:	d003      	beq.n	80046e6 <USBH_CtlReq+0x12>
 80046de:	2d02      	cmp	r5, #2
 80046e0:	d007      	beq.n	80046f2 <USBH_CtlReq+0x1e>
            phost->Control.state = CTRL_STATUS_OUT;
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80046e2:	2501      	movs	r5, #1
  return status;
 80046e4:	e019      	b.n	800471a <USBH_CtlReq+0x46>
      phost->Control.buff = buff;
 80046e6:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80046e8:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80046ea:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80046ec:	2302      	movs	r3, #2
        phost->RequestState = CMD_SEND;
 80046ee:	70a3      	strb	r3, [r4, #2]
 80046f0:	e013      	b.n	800471a <USBH_CtlReq+0x46>
  switch (phost->Control.state)
 80046f2:	7e06      	ldrb	r6, [r0, #24]
 80046f4:	1e73      	subs	r3, r6, #1
 80046f6:	2b0a      	cmp	r3, #10
 80046f8:	d8f3      	bhi.n	80046e2 <USBH_CtlReq+0xe>
 80046fa:	e8df f003 	tbb	[pc, r3]
 80046fe:	1106      	.short	0x1106
 8004700:	4e42392f 	.word	0x4e42392f
 8004704:	8478675d 	.word	0x8478675d
 8004708:	8c          	.byte	0x8c
 8004709:	00          	.byte	0x00
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800470a:	7942      	ldrb	r2, [r0, #5]
 800470c:	f100 0110 	add.w	r1, r0, #16
 8004710:	f000 fa61 	bl	8004bd6 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8004714:	2302      	movs	r3, #2
 8004716:	7623      	strb	r3, [r4, #24]
 8004718:	4635      	mov	r5, r6
}
 800471a:	4628      	mov	r0, r5
 800471c:	b002      	add	sp, #8
 800471e:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004720:	7941      	ldrb	r1, [r0, #5]
 8004722:	f7fc f941 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004726:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004728:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800472a:	d111      	bne.n	8004750 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
 800472c:	8ae2      	ldrh	r2, [r4, #22]
 800472e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004732:	b13a      	cbz	r2, 8004744 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
 8004734:	2b00      	cmp	r3, #0
 8004736:	da02      	bge.n	800473e <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8004738:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 800473a:	7623      	strb	r3, [r4, #24]
 800473c:	e7ed      	b.n	800471a <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
 800473e:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004740:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 8004742:	e7ce      	b.n	80046e2 <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
 8004744:	2b00      	cmp	r3, #0
 8004746:	da01      	bge.n	800474c <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
 8004748:	2309      	movs	r3, #9
 800474a:	e7f9      	b.n	8004740 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
 800474c:	2307      	movs	r3, #7
 800474e:	e7f7      	b.n	8004740 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004750:	2804      	cmp	r0, #4
 8004752:	d001      	beq.n	8004758 <USBH_CtlReq+0x84>
 8004754:	2802      	cmp	r0, #2
 8004756:	d1c4      	bne.n	80046e2 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8004758:	230b      	movs	r3, #11
 800475a:	e7f1      	b.n	8004740 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
 800475c:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8004760:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8004762:	8982      	ldrh	r2, [r0, #12]
 8004764:	7903      	ldrb	r3, [r0, #4]
 8004766:	6881      	ldr	r1, [r0, #8]
 8004768:	f000 fa5c 	bl	8004c24 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800476c:	2304      	movs	r3, #4
 800476e:	e7e7      	b.n	8004740 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004770:	7901      	ldrb	r1, [r0, #4]
 8004772:	f7fc f919 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004776:	2801      	cmp	r0, #1
 8004778:	d0e6      	beq.n	8004748 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
 800477a:	2805      	cmp	r0, #5
 800477c:	d035      	beq.n	80047ea <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800477e:	2804      	cmp	r0, #4
 8004780:	e7e9      	b.n	8004756 <USBH_CtlReq+0x82>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8004782:	2501      	movs	r5, #1
 8004784:	9500      	str	r5, [sp, #0]
 8004786:	7943      	ldrb	r3, [r0, #5]
 8004788:	8982      	ldrh	r2, [r0, #12]
 800478a:	6881      	ldr	r1, [r0, #8]
 800478c:	f000 fa33 	bl	8004bf6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004790:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8004794:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004796:	2306      	movs	r3, #6
 8004798:	e7cf      	b.n	800473a <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800479a:	7941      	ldrb	r1, [r0, #5]
 800479c:	f7fc f904 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80047a0:	2801      	cmp	r0, #1
 80047a2:	d0d3      	beq.n	800474c <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
 80047a4:	2805      	cmp	r0, #5
 80047a6:	d020      	beq.n	80047ea <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
 80047a8:	2802      	cmp	r0, #2
 80047aa:	d0c8      	beq.n	800473e <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 80047ac:	2804      	cmp	r0, #4
 80047ae:	d198      	bne.n	80046e2 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 80047b0:	230b      	movs	r3, #11
 80047b2:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e79a      	b.n	80046ee <USBH_CtlReq+0x1a>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80047b8:	2200      	movs	r2, #0
 80047ba:	7903      	ldrb	r3, [r0, #4]
 80047bc:	4611      	mov	r1, r2
 80047be:	f000 fa31 	bl	8004c24 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80047c2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80047c6:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80047c8:	2308      	movs	r3, #8
 80047ca:	e7b9      	b.n	8004740 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80047cc:	7901      	ldrb	r1, [r0, #4]
 80047ce:	f7fc f8eb 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80047d2:	2801      	cmp	r0, #1
 80047d4:	d104      	bne.n	80047e0 <USBH_CtlReq+0x10c>
        status = USBH_OK;
 80047d6:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 80047d8:	2301      	movs	r3, #1
 80047da:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80047dc:	2300      	movs	r3, #0
 80047de:	e7ac      	b.n	800473a <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
 80047e0:	2804      	cmp	r0, #4
 80047e2:	d0b9      	beq.n	8004758 <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
 80047e4:	2805      	cmp	r0, #5
 80047e6:	f47f af7c 	bne.w	80046e2 <USBH_CtlReq+0xe>
{
 80047ea:	2503      	movs	r5, #3
 80047ec:	e7f4      	b.n	80047d8 <USBH_CtlReq+0x104>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80047ee:	2501      	movs	r5, #1
 80047f0:	9500      	str	r5, [sp, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	7943      	ldrb	r3, [r0, #5]
 80047f6:	4611      	mov	r1, r2
 80047f8:	f000 f9fd 	bl	8004bf6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80047fc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8004800:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004802:	230a      	movs	r3, #10
 8004804:	e799      	b.n	800473a <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004806:	7941      	ldrb	r1, [r0, #5]
 8004808:	f7fc f8ce 	bl	80009a8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800480c:	2801      	cmp	r0, #1
 800480e:	d0e2      	beq.n	80047d6 <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004810:	2802      	cmp	r0, #2
 8004812:	d1b4      	bne.n	800477e <USBH_CtlReq+0xaa>
 8004814:	e798      	b.n	8004748 <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004816:	7e43      	ldrb	r3, [r0, #25]
 8004818:	3301      	adds	r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	7643      	strb	r3, [r0, #25]
 8004820:	d803      	bhi.n	800482a <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8004822:	2501      	movs	r5, #1
 8004824:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8004826:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8004828:	e777      	b.n	800471a <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800482a:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 800482e:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 8004830:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004832:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004834:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8004836:	7666      	strb	r6, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004838:	4620      	mov	r0, r4
 800483a:	f000 fa56 	bl	8004cea <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800483e:	7921      	ldrb	r1, [r4, #4]
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fa52 	bl	8004cea <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8004846:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
 8004848:	e7b4      	b.n	80047b4 <USBH_CtlReq+0xe0>

0800484a <USBH_GetDescriptor>:
{
 800484a:	b430      	push	{r4, r5}
 800484c:	460c      	mov	r4, r1
 800484e:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8004850:	7883      	ldrb	r3, [r0, #2]
{
 8004852:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10f      	bne.n	800487a <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800485a:	f064 047f 	orn	r4, r4, #127	; 0x7f
 800485e:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004860:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004864:	2306      	movs	r3, #6
      phost->Control.setup.b.wIndex.w = 0U;
 8004866:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800486a:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 800486c:	f240 4309 	movw	r3, #1033	; 0x409
 8004870:	bf18      	it	ne
 8004872:	2300      	movne	r3, #0
    phost->Control.setup.b.wValue.w = value_idx;
 8004874:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004876:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8004878:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 800487a:	462a      	mov	r2, r5
}
 800487c:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800487e:	f7ff bf29 	b.w	80046d4 <USBH_CtlReq>

08004882 <USBH_Get_DevDesc>:
{
 8004882:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = USBH_GetDescriptor(phost,
 8004884:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8004888:	460d      	mov	r5, r1
 800488a:	9100      	str	r1, [sp, #0]
 800488c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004890:	2100      	movs	r1, #0
{
 8004892:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 8004894:	f7ff ffd9 	bl	800484a <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004898:	2800      	cmp	r0, #0
 800489a:	d147      	bne.n	800492c <USBH_Get_DevDesc+0xaa>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800489c:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80048a0:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80048a4:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 80048a8:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
 80048ac:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80048b0:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
  dev_desc->bcdUSB             = LE16(buf +  2);
 80048b4:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80048b8:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80048bc:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80048c0:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 80048c4:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  switch (dev_desc->bMaxPacketSize)
 80048c8:	2a20      	cmp	r2, #32
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80048ca:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
 80048ce:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  switch (dev_desc->bMaxPacketSize)
 80048d2:	d82d      	bhi.n	8004930 <USBH_Get_DevDesc+0xae>
 80048d4:	2a07      	cmp	r2, #7
 80048d6:	d92d      	bls.n	8004934 <USBH_Get_DevDesc+0xb2>
 80048d8:	f1a2 0308 	sub.w	r3, r2, #8
 80048dc:	b2d9      	uxtb	r1, r3
 80048de:	2301      	movs	r3, #1
 80048e0:	408b      	lsls	r3, r1
 80048e2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	b31b      	cbz	r3, 8004934 <USBH_Get_DevDesc+0xb2>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80048ec:	f884 242d 	strb.w	r2, [r4, #1069]	; 0x42d
  if (length > 8U)
 80048f0:	2d08      	cmp	r5, #8
 80048f2:	d91b      	bls.n	800492c <USBH_Get_DevDesc+0xaa>
    dev_desc->idVendor           = LE16(buf +  8);
 80048f4:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
 80048f8:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
 80048fc:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
 8004900:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
 8004904:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
 8004908:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800490c:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
 8004910:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8004914:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
 8004918:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800491c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8004920:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8004924:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8004928:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
 800492c:	b003      	add	sp, #12
 800492e:	bd30      	pop	{r4, r5, pc}
  switch (dev_desc->bMaxPacketSize)
 8004930:	2a40      	cmp	r2, #64	; 0x40
 8004932:	d0db      	beq.n	80048ec <USBH_Get_DevDesc+0x6a>
      dev_desc->bMaxPacketSize = 64U;
 8004934:	2340      	movs	r3, #64	; 0x40
 8004936:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
      break;
 800493a:	e7d9      	b.n	80048f0 <USBH_Get_DevDesc+0x6e>

0800493c <USBH_Get_CfgDesc>:
{
 800493c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004940:	b087      	sub	sp, #28
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8004942:	f100 041c 	add.w	r4, r0, #28
{
 8004946:	460e      	mov	r6, r1
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8004948:	9100      	str	r1, [sp, #0]
 800494a:	4623      	mov	r3, r4
 800494c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004950:	2100      	movs	r1, #0
{
 8004952:	4605      	mov	r5, r0
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8004954:	f7ff ff79 	bl	800484a <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004958:	2800      	cmp	r0, #0
 800495a:	d172      	bne.n	8004a42 <USBH_Get_CfgDesc+0x106>
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800495c:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8004960:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8004962:	7f6a      	ldrb	r2, [r5, #29]
 8004964:	f885 2439 	strb.w	r2, [r5, #1081]	; 0x439
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8004968:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800496c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8004970:	f885 243d 	strb.w	r2, [r5, #1085]	; 0x43d
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8004974:	bf28      	it	cs
 8004976:	f44f 7800 	movcs.w	r8, #512	; 0x200
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800497a:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800497e:	f885 3438 	strb.w	r3, [r5, #1080]	; 0x438
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8004982:	2b09      	cmp	r3, #9
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8004984:	bf18      	it	ne
 8004986:	2309      	movne	r3, #9
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8004988:	f885 243e 	strb.w	r2, [r5, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800498c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8004990:	f895 a020 	ldrb.w	sl, [r5, #32]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8004994:	f885 243f 	strb.w	r2, [r5, #1087]	; 0x43f
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8004998:	bf18      	it	ne
 800499a:	f885 3438 	strbne.w	r3, [r5, #1080]	; 0x438
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800499e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80049a2:	f8a5 843a 	strh.w	r8, [r5, #1082]	; 0x43a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80049a6:	2e09      	cmp	r6, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80049a8:	f885 a43c 	strb.w	sl, [r5, #1084]	; 0x43c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80049ac:	f885 2440 	strb.w	r2, [r5, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80049b0:	f240 80b0 	bls.w	8004b14 <USBH_Get_CfgDesc+0x1d8>
  USBH_StatusTypeDef           status = USBH_OK;
 80049b4:	2000      	movs	r0, #0
 80049b6:	462b      	mov	r3, r5
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80049b8:	4686      	mov	lr, r0
    ptr = USB_LEN_CFG_DESC;
 80049ba:	2209      	movs	r2, #9
 80049bc:	fa5f f68e 	uxtb.w	r6, lr
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80049c0:	f1be 0f02 	cmp.w	lr, #2
 80049c4:	d03d      	beq.n	8004a42 <USBH_Get_CfgDesc+0x106>
 80049c6:	4590      	cmp	r8, r2
 80049c8:	d806      	bhi.n	80049d8 <USBH_Get_CfgDesc+0x9c>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80049ca:	4653      	mov	r3, sl
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	bf28      	it	cs
 80049d0:	2302      	movcs	r3, #2
 80049d2:	42b3      	cmp	r3, r6
 80049d4:	d935      	bls.n	8004a42 <USBH_Get_CfgDesc+0x106>
 80049d6:	e033      	b.n	8004a40 <USBH_Get_CfgDesc+0x104>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049d8:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80049da:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049dc:	440a      	add	r2, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80049de:	7861      	ldrb	r1, [r4, #1]
 80049e0:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80049e2:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80049e4:	d1ec      	bne.n	80049c0 <USBH_Get_CfgDesc+0x84>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80049ea:	bf1c      	itt	ne
 80049ec:	2109      	movne	r1, #9
 80049ee:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80049f0:	7821      	ldrb	r1, [r4, #0]
 80049f2:	f883 1442 	strb.w	r1, [r3, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80049f6:	7861      	ldrb	r1, [r4, #1]
 80049f8:	f883 1443 	strb.w	r1, [r3, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80049fc:	78a1      	ldrb	r1, [r4, #2]
 80049fe:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8004a02:	78e1      	ldrb	r1, [r4, #3]
 8004a04:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8004a08:	7921      	ldrb	r1, [r4, #4]
 8004a0a:	f883 1446 	strb.w	r1, [r3, #1094]	; 0x446
 8004a0e:	9102      	str	r1, [sp, #8]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8004a10:	7961      	ldrb	r1, [r4, #5]
 8004a12:	f883 1447 	strb.w	r1, [r3, #1095]	; 0x447
 8004a16:	9103      	str	r1, [sp, #12]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004a18:	79a1      	ldrb	r1, [r4, #6]
 8004a1a:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
 8004a1e:	9104      	str	r1, [sp, #16]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8004a20:	79e1      	ldrb	r1, [r4, #7]
 8004a22:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
 8004a26:	9105      	str	r1, [sp, #20]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8004a28:	7a21      	ldrb	r1, [r4, #8]
 8004a2a:	f883 144a 	strb.w	r1, [r3, #1098]	; 0x44a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004a2e:	211a      	movs	r1, #26
        ep_ix = 0U;
 8004a30:	2700      	movs	r7, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004a32:	fb01 fb0e 	mul.w	fp, r1, lr
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004a36:	9902      	ldr	r1, [sp, #8]
 8004a38:	428f      	cmp	r7, r1
 8004a3a:	d26d      	bcs.n	8004b18 <USBH_Get_CfgDesc+0x1dc>
 8004a3c:	4590      	cmp	r8, r2
 8004a3e:	d803      	bhi.n	8004a48 <USBH_Get_CfgDesc+0x10c>
          return USBH_NOT_SUPPORTED;
 8004a40:	2003      	movs	r0, #3
}
 8004a42:	b007      	add	sp, #28
 8004a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a48:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004a4a:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a4c:	440a      	add	r2, r1
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004a4e:	7861      	ldrb	r1, [r4, #1]
 8004a50:	2905      	cmp	r1, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004a52:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004a54:	d1ef      	bne.n	8004a36 <USBH_Get_CfgDesc+0xfa>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8004a56:	9803      	ldr	r0, [sp, #12]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8004a58:	7821      	ldrb	r1, [r4, #0]
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8004a5a:	2801      	cmp	r0, #1
 8004a5c:	d147      	bne.n	8004aee <USBH_Get_CfgDesc+0x1b2>
 8004a5e:	9804      	ldr	r0, [sp, #16]
 8004a60:	2802      	cmp	r0, #2
 8004a62:	d144      	bne.n	8004aee <USBH_Get_CfgDesc+0x1b2>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8004a64:	9805      	ldr	r0, [sp, #20]
 8004a66:	b920      	cbnz	r0, 8004a72 <USBH_Get_CfgDesc+0x136>
 8004a68:	2909      	cmp	r1, #9
 8004a6a:	d002      	beq.n	8004a72 <USBH_Get_CfgDesc+0x136>
                pdesc->bLength = 0x09U;
 8004a6c:	f04f 0109 	mov.w	r1, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8004a70:	7021      	strb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004a72:	1c78      	adds	r0, r7, #1
 8004a74:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8004a78:	4428      	add	r0, r5
 8004a7a:	7821      	ldrb	r1, [r4, #0]
 8004a7c:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8004a80:	7861      	ldrb	r1, [r4, #1]
 8004a82:	f880 1445 	strb.w	r1, [r0, #1093]	; 0x445
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8004a86:	78a1      	ldrb	r1, [r4, #2]
 8004a88:	f880 1446 	strb.w	r1, [r0, #1094]	; 0x446
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8004a8c:	f894 c003 	ldrb.w	ip, [r4, #3]
 8004a90:	f880 c447 	strb.w	ip, [r0, #1095]	; 0x447
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8004a94:	88a1      	ldrh	r1, [r4, #4]
 8004a96:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8004a9a:	79a6      	ldrb	r6, [r4, #6]
 8004a9c:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8004aa0:	b351      	cbz	r1, 8004af8 <USBH_Get_CfgDesc+0x1bc>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8004aa2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8004aa6:	f021 0107 	bic.w	r1, r1, #7
 8004aaa:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8004aae:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8004ab2:	1c78      	adds	r0, r7, #1
 8004ab4:	f419 6fc0 	tst.w	r9, #1536	; 0x600
 8004ab8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8004abc:	4428      	add	r0, r5
 8004abe:	b209      	sxth	r1, r1
 8004ac0:	bf0c      	ite	eq
 8004ac2:	f3c9 090a 	ubfxeq	r9, r9, #0, #11
 8004ac6:	f44f 7900 	movne.w	r9, #512	; 0x200
 8004aca:	ea41 0109 	orr.w	r1, r1, r9
 8004ace:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
  USBH_StatusTypeDef status = USBH_OK;
 8004ad2:	2000      	movs	r0, #0
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8004ad4:	f895 141d 	ldrb.w	r1, [r5, #1053]	; 0x41d
 8004ad8:	b981      	cbnz	r1, 8004afc <USBH_Get_CfgDesc+0x1c0>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8004ada:	f01c 0f01 	tst.w	ip, #1
 8004ade:	d003      	beq.n	8004ae8 <USBH_Get_CfgDesc+0x1ac>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8004ae0:	3e01      	subs	r6, #1
        status = USBH_NOT_SUPPORTED;
 8004ae2:	2e0f      	cmp	r6, #15
 8004ae4:	bf88      	it	hi
 8004ae6:	2003      	movhi	r0, #3
            ep_ix++;
 8004ae8:	3701      	adds	r7, #1
 8004aea:	b2ff      	uxtb	r7, r7
 8004aec:	e7a3      	b.n	8004a36 <USBH_Get_CfgDesc+0xfa>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8004aee:	2907      	cmp	r1, #7
 8004af0:	d0bf      	beq.n	8004a72 <USBH_Get_CfgDesc+0x136>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8004af2:	f04f 0107 	mov.w	r1, #7
 8004af6:	e7bb      	b.n	8004a70 <USBH_Get_CfgDesc+0x134>
    status = USBH_NOT_SUPPORTED;
 8004af8:	2003      	movs	r0, #3
 8004afa:	e7eb      	b.n	8004ad4 <USBH_Get_CfgDesc+0x198>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8004afc:	f00c 0c03 	and.w	ip, ip, #3
 8004b00:	f1bc 0f01 	cmp.w	ip, #1
 8004b04:	d0ec      	beq.n	8004ae0 <USBH_Get_CfgDesc+0x1a4>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8004b06:	f1bc 0f03 	cmp.w	ip, #3
 8004b0a:	d1ed      	bne.n	8004ae8 <USBH_Get_CfgDesc+0x1ac>
        status = USBH_NOT_SUPPORTED;
 8004b0c:	2e00      	cmp	r6, #0
 8004b0e:	bf08      	it	eq
 8004b10:	2003      	moveq	r0, #3
 8004b12:	e7e9      	b.n	8004ae8 <USBH_Get_CfgDesc+0x1ac>
  USBH_StatusTypeDef           status = USBH_OK;
 8004b14:	2000      	movs	r0, #0
  return status;
 8004b16:	e794      	b.n	8004a42 <USBH_Get_CfgDesc+0x106>
        if_ix++;
 8004b18:	f10e 0e01 	add.w	lr, lr, #1
 8004b1c:	331a      	adds	r3, #26
 8004b1e:	e74d      	b.n	80049bc <USBH_Get_CfgDesc+0x80>

08004b20 <USBH_Get_StringDesc>:
{
 8004b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                              phost->device.Data, length);
 8004b22:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
 8004b26:	4615      	mov	r5, r2
 8004b28:	461f      	mov	r7, r3
  status = USBH_GetDescriptor(phost,
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004b30:	4633      	mov	r3, r6
 8004b32:	2100      	movs	r1, #0
{
 8004b34:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 8004b36:	f7ff fe88 	bl	800484a <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004b3a:	b978      	cbnz	r0, 8004b5c <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004b3c:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d10b      	bne.n	8004b5c <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004b44:	f894 421c 	ldrb.w	r4, [r4, #540]	; 0x21c
 8004b48:	1ea1      	subs	r1, r4, #2
 8004b4a:	42b9      	cmp	r1, r7
 8004b4c:	bf28      	it	cs
 8004b4e:	4639      	movcs	r1, r7
 8004b50:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b52:	4604      	mov	r4, r0
 8004b54:	42a1      	cmp	r1, r4
 8004b56:	d803      	bhi.n	8004b60 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8004b58:	2300      	movs	r3, #0
 8004b5a:	702b      	strb	r3, [r5, #0]
}
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004b60:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b62:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 8004b64:	789b      	ldrb	r3, [r3, #2]
 8004b66:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8004b6a:	b2a4      	uxth	r4, r4
 8004b6c:	e7f2      	b.n	8004b54 <USBH_Get_StringDesc+0x34>

08004b6e <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8004b6e:	7883      	ldrb	r3, [r0, #2]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004b74:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8004b78:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b7a:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004b7c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b7e:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8004b80:	2200      	movs	r2, #0
 8004b82:	4611      	mov	r1, r2
 8004b84:	f7ff bda6 	b.w	80046d4 <USBH_CtlReq>

08004b88 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8004b88:	7883      	ldrb	r3, [r0, #2]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d105      	bne.n	8004b9a <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004b8e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004b92:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b94:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004b96:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004b98:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	f7ff bd99 	b.w	80046d4 <USBH_CtlReq>

08004ba2 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8004ba2:	7883      	ldrb	r3, [r0, #2]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004ba8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bac:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004bae:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 8004bb0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004bb2:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	f7ff bd8c 	b.w	80046d4 <USBH_CtlReq>

08004bbc <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8004bbc:	7883      	ldrb	r3, [r0, #2]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d105      	bne.n	8004bce <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004bc2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004bc6:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8004bc8:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8004bca:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004bcc:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	f7ff bd7f 	b.w	80046d4 <USBH_CtlReq>

08004bd6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004bd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004bd8:	2400      	movs	r4, #0
{
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004bde:	2208      	movs	r2, #8
 8004be0:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004be4:	e9cd 4300 	strd	r4, r3, [sp]
 8004be8:	4622      	mov	r2, r4
 8004bea:	4623      	mov	r3, r4
 8004bec:	f7fb fec9 	bl	8000982 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004bf6:	b530      	push	{r4, r5, lr}
 8004bf8:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004bfa:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 8004bfe:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 8004c00:	2d00      	cmp	r5, #0
{
 8004c02:	4619      	mov	r1, r3
 8004c04:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c08:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8004c0a:	bf18      	it	ne
 8004c0c:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c12:	2301      	movs	r3, #1
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f7fb feb2 	bl	8000982 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004c1e:	2000      	movs	r0, #0
 8004c20:	b005      	add	sp, #20
 8004c22:	bd30      	pop	{r4, r5, pc}

08004c24 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004c24:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c26:	2400      	movs	r4, #0
{
 8004c28:	b085      	sub	sp, #20
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c2a:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8004c2e:	460d      	mov	r5, r1
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c30:	2201      	movs	r2, #1
{
 8004c32:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c34:	9501      	str	r5, [sp, #4]
 8004c36:	9200      	str	r2, [sp, #0]
 8004c38:	4623      	mov	r3, r4
 8004c3a:	f7fb fea2 	bl	8000982 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004c3e:	4620      	mov	r0, r4
 8004c40:	b005      	add	sp, #20
 8004c42:	bd30      	pop	{r4, r5, pc}

08004c44 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004c44:	b530      	push	{r4, r5, lr}
 8004c46:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004c48:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 8004c4c:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 8004c4e:	2d00      	cmp	r5, #0
{
 8004c50:	4619      	mov	r1, r3
 8004c52:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c56:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8004c58:	bf18      	it	ne
 8004c5a:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c60:	2301      	movs	r3, #1
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2302      	movs	r3, #2
 8004c68:	f7fb fe8b 	bl	8000982 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	b005      	add	sp, #20
 8004c70:	bd30      	pop	{r4, r5, pc}

08004c72 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004c72:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c74:	2400      	movs	r4, #0
{
 8004c76:	b085      	sub	sp, #20
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c78:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8004c7c:	460d      	mov	r5, r1
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c7e:	2201      	movs	r2, #1
{
 8004c80:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004c82:	9501      	str	r5, [sp, #4]
 8004c84:	9200      	str	r2, [sp, #0]
 8004c86:	2302      	movs	r3, #2
 8004c88:	f7fb fe7b 	bl	8000982 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	b005      	add	sp, #20
 8004c90:	bd30      	pop	{r4, r5, pc}

08004c92 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004c92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004c94:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004c98:	9402      	str	r4, [sp, #8]
 8004c9a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004c9e:	9401      	str	r4, [sp, #4]
 8004ca0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004ca4:	9400      	str	r4, [sp, #0]
 8004ca6:	f7fb fe54 	bl	8000952 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8004caa:	2000      	movs	r0, #0
 8004cac:	b004      	add	sp, #16
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8004cb0:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8004cb2:	f7fb fe5f 	bl	8000974 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	bd08      	pop	{r3, pc}

08004cba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004cba:	b530      	push	{r4, r5, lr}
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f200 4484 	addw	r4, r0, #1156	; 0x484
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004cc2:	f854 5b04 	ldr.w	r5, [r4], #4
 8004cc6:	042d      	lsls	r5, r5, #16
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	d408      	bmi.n	8004cde <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8004ccc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004cd0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8004cd4:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8004cd6:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
}
 8004cda:	b2d0      	uxtb	r0, r2
 8004cdc:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8004cde:	3301      	adds	r3, #1
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d1ee      	bne.n	8004cc2 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8004ce4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce8:	e7f7      	b.n	8004cda <USBH_AllocPipe+0x20>

08004cea <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8004cea:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 8004cec:	bf98      	it	ls
 8004cee:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 8004cf2:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 8004cf6:	bf9e      	ittt	ls
 8004cf8:	f8d1 3484 	ldrls.w	r3, [r1, #1156]	; 0x484
 8004cfc:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004d00:	f8c1 3484 	strls.w	r3, [r1, #1156]	; 0x484
}
 8004d04:	4770      	bx	lr
	...

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4d0d      	ldr	r5, [pc, #52]	; (8004d40 <__libc_init_array+0x38>)
 8004d0c:	4c0d      	ldr	r4, [pc, #52]	; (8004d44 <__libc_init_array+0x3c>)
 8004d0e:	1b64      	subs	r4, r4, r5
 8004d10:	10a4      	asrs	r4, r4, #2
 8004d12:	2600      	movs	r6, #0
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	4d0b      	ldr	r5, [pc, #44]	; (8004d48 <__libc_init_array+0x40>)
 8004d1a:	4c0c      	ldr	r4, [pc, #48]	; (8004d4c <__libc_init_array+0x44>)
 8004d1c:	f000 f94a 	bl	8004fb4 <_init>
 8004d20:	1b64      	subs	r4, r4, r5
 8004d22:	10a4      	asrs	r4, r4, #2
 8004d24:	2600      	movs	r6, #0
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	08005114 	.word	0x08005114
 8004d44:	08005114 	.word	0x08005114
 8004d48:	08005114 	.word	0x08005114
 8004d4c:	08005118 	.word	0x08005118

08004d50 <malloc>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	; (8004d5c <malloc+0xc>)
 8004d52:	4601      	mov	r1, r0
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f000 b88d 	b.w	8004e74 <_malloc_r>
 8004d5a:	bf00      	nop
 8004d5c:	2000002c 	.word	0x2000002c

08004d60 <free>:
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <free+0xc>)
 8004d62:	4601      	mov	r1, r0
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	f000 b819 	b.w	8004d9c <_free_r>
 8004d6a:	bf00      	nop
 8004d6c:	2000002c 	.word	0x2000002c

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <memset>:
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <_free_r>:
 8004d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d9e:	2900      	cmp	r1, #0
 8004da0:	d044      	beq.n	8004e2c <_free_r+0x90>
 8004da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da6:	9001      	str	r0, [sp, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f1a1 0404 	sub.w	r4, r1, #4
 8004dae:	bfb8      	it	lt
 8004db0:	18e4      	addlt	r4, r4, r3
 8004db2:	f000 f8e3 	bl	8004f7c <__malloc_lock>
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <_free_r+0x94>)
 8004db8:	9801      	ldr	r0, [sp, #4]
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	b933      	cbnz	r3, 8004dcc <_free_r+0x30>
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	6014      	str	r4, [r2, #0]
 8004dc2:	b003      	add	sp, #12
 8004dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc8:	f000 b8de 	b.w	8004f88 <__malloc_unlock>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d908      	bls.n	8004de2 <_free_r+0x46>
 8004dd0:	6825      	ldr	r5, [r4, #0]
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf01      	itttt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	1949      	addeq	r1, r1, r5
 8004dde:	6021      	streq	r1, [r4, #0]
 8004de0:	e7ed      	b.n	8004dbe <_free_r+0x22>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x50>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x46>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1855      	adds	r5, r2, r1
 8004df0:	42a5      	cmp	r5, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x70>
 8004df4:	6824      	ldr	r4, [r4, #0]
 8004df6:	4421      	add	r1, r4
 8004df8:	1854      	adds	r4, r2, r1
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1e0      	bne.n	8004dc2 <_free_r+0x26>
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4421      	add	r1, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	e7da      	b.n	8004dc2 <_free_r+0x26>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x78>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	e7d6      	b.n	8004dc2 <_free_r+0x26>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1949      	addeq	r1, r1, r5
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7ca      	b.n	8004dc2 <_free_r+0x26>
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	20000f30 	.word	0x20000f30

08004e34 <sbrk_aligned>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0e      	ldr	r6, [pc, #56]	; (8004e70 <sbrk_aligned+0x3c>)
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6831      	ldr	r1, [r6, #0]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b911      	cbnz	r1, 8004e46 <sbrk_aligned+0x12>
 8004e40:	f000 f88c 	bl	8004f5c <_sbrk_r>
 8004e44:	6030      	str	r0, [r6, #0]
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f887 	bl	8004f5c <_sbrk_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d00a      	beq.n	8004e68 <sbrk_aligned+0x34>
 8004e52:	1cc4      	adds	r4, r0, #3
 8004e54:	f024 0403 	bic.w	r4, r4, #3
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d007      	beq.n	8004e6c <sbrk_aligned+0x38>
 8004e5c:	1a21      	subs	r1, r4, r0
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f87c 	bl	8004f5c <_sbrk_r>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d101      	bne.n	8004e6c <sbrk_aligned+0x38>
 8004e68:	f04f 34ff 	mov.w	r4, #4294967295
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	20000f34 	.word	0x20000f34

08004e74 <_malloc_r>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	1ccd      	adds	r5, r1, #3
 8004e7a:	f025 0503 	bic.w	r5, r5, #3
 8004e7e:	3508      	adds	r5, #8
 8004e80:	2d0c      	cmp	r5, #12
 8004e82:	bf38      	it	cc
 8004e84:	250c      	movcc	r5, #12
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	4607      	mov	r7, r0
 8004e8a:	db01      	blt.n	8004e90 <_malloc_r+0x1c>
 8004e8c:	42a9      	cmp	r1, r5
 8004e8e:	d905      	bls.n	8004e9c <_malloc_r+0x28>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	2600      	movs	r6, #0
 8004e96:	4630      	mov	r0, r6
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	4e2e      	ldr	r6, [pc, #184]	; (8004f58 <_malloc_r+0xe4>)
 8004e9e:	f000 f86d 	bl	8004f7c <__malloc_lock>
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	461c      	mov	r4, r3
 8004ea6:	bb34      	cbnz	r4, 8004ef6 <_malloc_r+0x82>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7ff ffc2 	bl	8004e34 <sbrk_aligned>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	d14d      	bne.n	8004f52 <_malloc_r+0xde>
 8004eb6:	6834      	ldr	r4, [r6, #0]
 8004eb8:	4626      	mov	r6, r4
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d140      	bne.n	8004f40 <_malloc_r+0xcc>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	eb04 0803 	add.w	r8, r4, r3
 8004ec8:	f000 f848 	bl	8004f5c <_sbrk_r>
 8004ecc:	4580      	cmp	r8, r0
 8004ece:	d13a      	bne.n	8004f46 <_malloc_r+0xd2>
 8004ed0:	6821      	ldr	r1, [r4, #0]
 8004ed2:	3503      	adds	r5, #3
 8004ed4:	1a6d      	subs	r5, r5, r1
 8004ed6:	f025 0503 	bic.w	r5, r5, #3
 8004eda:	3508      	adds	r5, #8
 8004edc:	2d0c      	cmp	r5, #12
 8004ede:	bf38      	it	cc
 8004ee0:	250c      	movcc	r5, #12
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f7ff ffa5 	bl	8004e34 <sbrk_aligned>
 8004eea:	3001      	adds	r0, #1
 8004eec:	d02b      	beq.n	8004f46 <_malloc_r+0xd2>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	442b      	add	r3, r5
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	e00e      	b.n	8004f14 <_malloc_r+0xa0>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	1b52      	subs	r2, r2, r5
 8004efa:	d41e      	bmi.n	8004f3a <_malloc_r+0xc6>
 8004efc:	2a0b      	cmp	r2, #11
 8004efe:	d916      	bls.n	8004f2e <_malloc_r+0xba>
 8004f00:	1961      	adds	r1, r4, r5
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	6025      	str	r5, [r4, #0]
 8004f06:	bf18      	it	ne
 8004f08:	6059      	strne	r1, [r3, #4]
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	bf08      	it	eq
 8004f0e:	6031      	streq	r1, [r6, #0]
 8004f10:	5162      	str	r2, [r4, r5]
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	4638      	mov	r0, r7
 8004f16:	f104 060b 	add.w	r6, r4, #11
 8004f1a:	f000 f835 	bl	8004f88 <__malloc_unlock>
 8004f1e:	f026 0607 	bic.w	r6, r6, #7
 8004f22:	1d23      	adds	r3, r4, #4
 8004f24:	1af2      	subs	r2, r6, r3
 8004f26:	d0b6      	beq.n	8004e96 <_malloc_r+0x22>
 8004f28:	1b9b      	subs	r3, r3, r6
 8004f2a:	50a3      	str	r3, [r4, r2]
 8004f2c:	e7b3      	b.n	8004e96 <_malloc_r+0x22>
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	bf0c      	ite	eq
 8004f34:	6032      	streq	r2, [r6, #0]
 8004f36:	605a      	strne	r2, [r3, #4]
 8004f38:	e7ec      	b.n	8004f14 <_malloc_r+0xa0>
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	6864      	ldr	r4, [r4, #4]
 8004f3e:	e7b2      	b.n	8004ea6 <_malloc_r+0x32>
 8004f40:	4634      	mov	r4, r6
 8004f42:	6876      	ldr	r6, [r6, #4]
 8004f44:	e7b9      	b.n	8004eba <_malloc_r+0x46>
 8004f46:	230c      	movs	r3, #12
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f000 f81c 	bl	8004f88 <__malloc_unlock>
 8004f50:	e7a1      	b.n	8004e96 <_malloc_r+0x22>
 8004f52:	6025      	str	r5, [r4, #0]
 8004f54:	e7de      	b.n	8004f14 <_malloc_r+0xa0>
 8004f56:	bf00      	nop
 8004f58:	20000f30 	.word	0x20000f30

08004f5c <_sbrk_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d06      	ldr	r5, [pc, #24]	; (8004f78 <_sbrk_r+0x1c>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	602b      	str	r3, [r5, #0]
 8004f68:	f000 f816 	bl	8004f98 <_sbrk>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_sbrk_r+0x1a>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_sbrk_r+0x1a>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000f38 	.word	0x20000f38

08004f7c <__malloc_lock>:
 8004f7c:	4801      	ldr	r0, [pc, #4]	; (8004f84 <__malloc_lock+0x8>)
 8004f7e:	f000 b809 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 8004f82:	bf00      	nop
 8004f84:	20000f3c 	.word	0x20000f3c

08004f88 <__malloc_unlock>:
 8004f88:	4801      	ldr	r0, [pc, #4]	; (8004f90 <__malloc_unlock+0x8>)
 8004f8a:	f000 b804 	b.w	8004f96 <__retarget_lock_release_recursive>
 8004f8e:	bf00      	nop
 8004f90:	20000f3c 	.word	0x20000f3c

08004f94 <__retarget_lock_acquire_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_release_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <_sbrk>:
 8004f98:	4a04      	ldr	r2, [pc, #16]	; (8004fac <_sbrk+0x14>)
 8004f9a:	6811      	ldr	r1, [r2, #0]
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	b909      	cbnz	r1, 8004fa4 <_sbrk+0xc>
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <_sbrk+0x18>)
 8004fa2:	6011      	str	r1, [r2, #0]
 8004fa4:	6810      	ldr	r0, [r2, #0]
 8004fa6:	4403      	add	r3, r0
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	4770      	bx	lr
 8004fac:	20000f40 	.word	0x20000f40
 8004fb0:	20000f48 	.word	0x20000f48

08004fb4 <_init>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_fini>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr
